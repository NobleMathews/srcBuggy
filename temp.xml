<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" url="C:\Users\elbon\Documents\GitHub\sipmin" pos:tabs="8">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:/Users/elbon/Documents/GitHub/sipmin/OSNetworkSystem.cpp" pos:tabs="8" hash="7900c52f8a04f605c2031bd5db2e41fed9754e92"><comment type="block" pos:start="1:1" pos:end="20:3">/*
 * Copyright (C) 2009 The Sipdroid Open Source Project
 * Copyright (C) 2007 The Android Open Source Project
 * 
 * This file is part of Sipdroid (http://www.sipdroid.org)
 * 
 * Sipdroid is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this source code; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */</comment>

<cpp:define pos:start="22:1" pos:end="22:33">#<cpp:directive pos:start="22:2" pos:end="22:7">define</cpp:directive> <cpp:macro pos:start="22:9" pos:end="22:15"><name pos:start="22:9" pos:end="22:15">LOG_TAG</name></cpp:macro> <cpp:value pos:start="22:17" pos:end="22:33">"OSNetworkSystem"</cpp:value></cpp:define>

<comment type="line" pos:start="24:1" pos:end="24:22">//#include "JNIHelp.h"</comment>
<cpp:include pos:start="25:1" pos:end="25:16">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:16">"jni.h"</cpp:file></cpp:include>
<cpp:include pos:start="26:1" pos:end="26:18">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:18">"errno.h"</cpp:file></cpp:include>

<cpp:include pos:start="28:1" pos:end="28:19">#<cpp:directive pos:start="28:2" pos:end="28:8">include</cpp:directive> <cpp:file pos:start="28:10" pos:end="28:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="29:1" pos:end="29:18">#<cpp:directive pos:start="29:2" pos:end="29:8">include</cpp:directive> <cpp:file pos:start="29:10" pos:end="29:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="30:1" pos:end="30:23">#<cpp:directive pos:start="30:2" pos:end="30:8">include</cpp:directive> <cpp:file pos:start="30:10" pos:end="30:23">&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="31:1" pos:end="31:23">#<cpp:directive pos:start="31:2" pos:end="31:8">include</cpp:directive> <cpp:file pos:start="31:10" pos:end="31:23">&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="32:1" pos:end="32:24">#<cpp:directive pos:start="32:2" pos:end="32:8">include</cpp:directive> <cpp:file pos:start="32:10" pos:end="32:24">&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="33:1" pos:end="33:18">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:18">&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="34:1" pos:end="34:21">#<cpp:directive pos:start="34:2" pos:end="34:8">include</cpp:directive> <cpp:file pos:start="34:10" pos:end="34:21">&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="35:1" pos:end="35:19">#<cpp:directive pos:start="35:2" pos:end="35:8">include</cpp:directive> <cpp:file pos:start="35:10" pos:end="35:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="36:1" pos:end="36:22">#<cpp:directive pos:start="36:2" pos:end="36:8">include</cpp:directive> <cpp:file pos:start="36:10" pos:end="36:22">&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="37:1" pos:end="37:19">#<cpp:directive pos:start="37:2" pos:end="37:8">include</cpp:directive> <cpp:file pos:start="37:10" pos:end="37:19">&lt;sys/un.h&gt;</cpp:file></cpp:include>

<comment type="line" pos:start="39:1" pos:end="39:32">//#include &lt;cutils/properties.h&gt;</comment>
<comment type="line" pos:start="40:1" pos:end="40:36">//#include &lt;cutils/adb_networking.h&gt;</comment>
<comment type="line" pos:start="41:1" pos:end="41:30">//#include &lt;utils/LogSocket.h&gt;</comment>
<comment type="line" pos:start="42:1" pos:end="42:35">//#include "AndroidSystemNatives.h"</comment>

<comment type="block" format="doxygen" pos:start="44:1" pos:end="49:3">/**
 * @name Socket Errors
 * Error codes for socket operations
 *
 * @internal SOCKERR* range from -200 to -299 avoid overlap
 */</comment>
<cpp:define pos:start="50:1" pos:end="50:39">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:25"><name pos:start="50:9" pos:end="50:25">SOCKERR_BADSOCKET</name></cpp:macro>          <cpp:value pos:start="50:36" pos:end="50:39">-200</cpp:value></cpp:define> <comment type="block" pos:start="50:41" pos:end="50:59">/* generic error */</comment>
<cpp:define pos:start="51:1" pos:end="51:39">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:30">SOCKERR_NOTINITIALIZED</name></cpp:macro>     <cpp:value pos:start="51:36" pos:end="51:39">-201</cpp:value></cpp:define> <comment type="block" pos:start="51:41" pos:end="51:74">/* socket library uninitialized */</comment>
<cpp:define pos:start="52:1" pos:end="52:39">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:21"><name pos:start="52:9" pos:end="52:21">SOCKERR_BADAF</name></cpp:macro>              <cpp:value pos:start="52:36" pos:end="52:39">-202</cpp:value></cpp:define> <comment type="block" pos:start="52:41" pos:end="52:64">/* bad address family */</comment>
<cpp:define pos:start="53:1" pos:end="53:39">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:24">SOCKERR_BADPROTO</name></cpp:macro>           <cpp:value pos:start="53:36" pos:end="53:39">-203</cpp:value></cpp:define> <comment type="block" pos:start="53:41" pos:end="53:58">/* bad protocol */</comment>
<cpp:define pos:start="54:1" pos:end="54:39">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:23"><name pos:start="54:9" pos:end="54:23">SOCKERR_BADTYPE</name></cpp:macro>            <cpp:value pos:start="54:36" pos:end="54:39">-204</cpp:value></cpp:define> <comment type="block" pos:start="54:41" pos:end="54:54">/* bad type */</comment>
<cpp:define pos:start="55:1" pos:end="55:39">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:26">SOCKERR_SYSTEMBUSY</name></cpp:macro>         <cpp:value pos:start="55:36" pos:end="55:39">-205</cpp:value></cpp:define> <comment type="block" pos:start="55:41" pos:end="55:75">/* system busy handling requests */</comment>
<cpp:define pos:start="56:1" pos:end="56:39">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:26"><name pos:start="56:9" pos:end="56:26">SOCKERR_SYSTEMFULL</name></cpp:macro>         <cpp:value pos:start="56:36" pos:end="56:39">-206</cpp:value></cpp:define> <comment type="block" pos:start="56:41" pos:end="56:62">/* too many sockets */</comment>
<cpp:define pos:start="57:1" pos:end="57:39">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:28">SOCKERR_NOTCONNECTED</name></cpp:macro>       <cpp:value pos:start="57:36" pos:end="57:39">-207</cpp:value></cpp:define> <comment type="block" pos:start="57:41" pos:end="57:69">/* socket is not connected */</comment>
<cpp:define pos:start="58:1" pos:end="58:39">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:27"><name pos:start="58:9" pos:end="58:27">SOCKERR_INTERRUPTED</name></cpp:macro>        <cpp:value pos:start="58:36" pos:end="58:39">-208</cpp:value></cpp:define> <comment type="block" pos:start="58:41" pos:end="58:68">/* the call was cancelled */</comment>
<cpp:define pos:start="59:1" pos:end="59:39">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:23">SOCKERR_TIMEOUT</name></cpp:macro>            <cpp:value pos:start="59:36" pos:end="59:39">-209</cpp:value></cpp:define> <comment type="block" pos:start="59:41" pos:end="59:69">/* the operation timed out */</comment>
<cpp:define pos:start="60:1" pos:end="60:39">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:25"><name pos:start="60:9" pos:end="60:25">SOCKERR_CONNRESET</name></cpp:macro>          <cpp:value pos:start="60:36" pos:end="60:39">-210</cpp:value></cpp:define> <comment type="block" pos:start="60:41" pos:end="60:70">/* the connection was reset */</comment>
<cpp:define pos:start="61:1" pos:end="61:39">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:26">SOCKERR_WOULDBLOCK</name></cpp:macro>         <cpp:value pos:start="61:36" pos:end="61:39">-211</cpp:value></cpp:define> <comment type="block" pos:start="61:41" pos:end="61:103">/* the socket is marked as nonblocking operation would block */</comment>
<cpp:define pos:start="62:1" pos:end="62:39">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:28"><name pos:start="62:9" pos:end="62:28">SOCKERR_ADDRNOTAVAIL</name></cpp:macro>       <cpp:value pos:start="62:36" pos:end="62:39">-212</cpp:value></cpp:define> <comment type="block" pos:start="62:41" pos:end="62:67">/* address not available */</comment>
<cpp:define pos:start="63:1" pos:end="63:39">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:25">SOCKERR_ADDRINUSE</name></cpp:macro>          <cpp:value pos:start="63:36" pos:end="63:39">-213</cpp:value></cpp:define> <comment type="block" pos:start="63:41" pos:end="63:68">/* address already in use */</comment>
<cpp:define pos:start="64:1" pos:end="64:39">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:24"><name pos:start="64:9" pos:end="64:24">SOCKERR_NOTBOUND</name></cpp:macro>           <cpp:value pos:start="64:36" pos:end="64:39">-214</cpp:value></cpp:define> <comment type="block" pos:start="64:41" pos:end="64:69">/* the socket is not bound */</comment>
<cpp:define pos:start="65:1" pos:end="65:39">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:29">SOCKERR_UNKNOWNSOCKET</name></cpp:macro>      <cpp:value pos:start="65:36" pos:end="65:39">-215</cpp:value></cpp:define> <comment type="block" pos:start="65:41" pos:end="65:91">/* resolution of fileDescriptor to socket failed */</comment>
<cpp:define pos:start="66:1" pos:end="66:39">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:30"><name pos:start="66:9" pos:end="66:30">SOCKERR_INVALIDTIMEOUT</name></cpp:macro>     <cpp:value pos:start="66:36" pos:end="66:39">-216</cpp:value></cpp:define> <comment type="block" pos:start="66:41" pos:end="66:78">/* the specified timeout is invalid */</comment>
<cpp:define pos:start="67:1" pos:end="67:39">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:25">SOCKERR_FDSETFULL</name></cpp:macro>          <cpp:value pos:start="67:36" pos:end="67:39">-217</cpp:value></cpp:define> <comment type="block" pos:start="67:41" pos:end="67:71">/* Unable to create an FDSET */</comment>
<cpp:define pos:start="68:1" pos:end="68:39">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:27"><name pos:start="68:9" pos:end="68:27">SOCKERR_TIMEVALFULL</name></cpp:macro>        <cpp:value pos:start="68:36" pos:end="68:39">-218</cpp:value></cpp:define> <comment type="block" pos:start="68:41" pos:end="68:72">/* Unable to create a TIMEVAL */</comment>
<cpp:define pos:start="69:1" pos:end="69:39">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:31">SOCKERR_REMSOCKSHUTDOWN</name></cpp:macro>    <cpp:value pos:start="69:36" pos:end="69:39">-219</cpp:value></cpp:define> <comment type="block" pos:start="69:41" pos:end="69:87">/* The remote socket has shutdown gracefully */</comment>
<cpp:define pos:start="70:1" pos:end="70:39">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:28"><name pos:start="70:9" pos:end="70:28">SOCKERR_NOTLISTENING</name></cpp:macro>       <cpp:value pos:start="70:36" pos:end="70:39">-220</cpp:value></cpp:define> <comment type="block" pos:start="70:41" pos:end="70:88">/* listen() was not invoked prior to accept() */</comment>
<cpp:define pos:start="71:1" pos:end="71:39">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:29">SOCKERR_NOTSTREAMSOCK</name></cpp:macro>      <cpp:value pos:start="71:36" pos:end="71:39">-221</cpp:value></cpp:define> <comment type="block" pos:start="71:41" pos:end="71:101">/* The socket does not support connection-oriented service */</comment>
<cpp:define pos:start="72:1" pos:end="72:39">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:28"><name pos:start="72:9" pos:end="72:28">SOCKERR_ALREADYBOUND</name></cpp:macro>       <cpp:value pos:start="72:36" pos:end="72:39">-222</cpp:value></cpp:define> <comment type="block" pos:start="72:41" pos:end="72:87">/* The socket is already bound to an address */</comment>
<cpp:define pos:start="73:1" pos:end="73:39">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:28">SOCKERR_NBWITHLINGER</name></cpp:macro>       <cpp:value pos:start="73:36" pos:end="73:39">-223</cpp:value></cpp:define> <comment type="block" pos:start="73:41" pos:end="73:103">/* The socket is marked non-blocking &amp; SO_LINGER is non-zero */</comment>
<cpp:define pos:start="74:1" pos:end="74:39">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:27"><name pos:start="74:9" pos:end="74:27">SOCKERR_ISCONNECTED</name></cpp:macro>        <cpp:value pos:start="74:36" pos:end="74:39">-224</cpp:value></cpp:define> <comment type="block" pos:start="74:41" pos:end="74:77">/* The socket is already connected */</comment>
<cpp:define pos:start="75:1" pos:end="75:39">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:25">SOCKERR_NOBUFFERS</name></cpp:macro>          <cpp:value pos:start="75:36" pos:end="75:39">-225</cpp:value></cpp:define> <comment type="block" pos:start="75:41" pos:end="75:74">/* No buffer space is available */</comment>
<cpp:define pos:start="76:1" pos:end="76:39">#<cpp:directive pos:start="76:2" pos:end="76:7">define</cpp:directive> <cpp:macro pos:start="76:9" pos:end="76:28"><name pos:start="76:9" pos:end="76:28">SOCKERR_HOSTNOTFOUND</name></cpp:macro>       <cpp:value pos:start="76:36" pos:end="76:39">-226</cpp:value></cpp:define> <comment type="block" pos:start="76:41" pos:end="76:81">/* Authoritative Answer Host not found */</comment>
<cpp:define pos:start="77:1" pos:end="77:39">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:22">SOCKERR_NODATA</name></cpp:macro>             <cpp:value pos:start="77:36" pos:end="77:39">-227</cpp:value></cpp:define> <comment type="block" pos:start="77:41" pos:end="77:90">/* Valid name, no data record of requested type */</comment>
<cpp:define pos:start="78:1" pos:end="78:39">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:27"><name pos:start="78:9" pos:end="78:27">SOCKERR_BOUNDORCONN</name></cpp:macro>        <cpp:value pos:start="78:36" pos:end="78:39">-228</cpp:value></cpp:define> <comment type="block" pos:start="78:41" pos:end="78:99">/* The socket has not been bound or is already connected */</comment>
<cpp:define pos:start="79:1" pos:end="79:39">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:25">SOCKERR_OPNOTSUPP</name></cpp:macro>          <cpp:value pos:start="79:36" pos:end="79:39">-229</cpp:value></cpp:define> <comment type="block" pos:start="79:41" pos:end="79:87">/* The socket does not support the operation */</comment>
<cpp:define pos:start="80:1" pos:end="80:39">#<cpp:directive pos:start="80:2" pos:end="80:7">define</cpp:directive> <cpp:macro pos:start="80:9" pos:end="80:25"><name pos:start="80:9" pos:end="80:25">SOCKERR_OPTUNSUPP</name></cpp:macro>          <cpp:value pos:start="80:36" pos:end="80:39">-230</cpp:value></cpp:define> <comment type="block" pos:start="80:41" pos:end="80:80">/* The socket option is not supported */</comment>
<cpp:define pos:start="81:1" pos:end="81:39">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:30">SOCKERR_OPTARGSINVALID</name></cpp:macro>     <cpp:value pos:start="81:36" pos:end="81:39">-231</cpp:value></cpp:define> <comment type="block" pos:start="81:41" pos:end="81:85">/* The socket option arguments are invalid */</comment>
<cpp:define pos:start="82:1" pos:end="82:39">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:32"><name pos:start="82:9" pos:end="82:32">SOCKERR_SOCKLEVELINVALID</name></cpp:macro>   <cpp:value pos:start="82:36" pos:end="82:39">-232</cpp:value></cpp:define> <comment type="block" pos:start="82:41" pos:end="82:73">/* The socket level is invalid */</comment>
<cpp:define pos:start="83:1" pos:end="83:39">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:30">SOCKERR_TIMEOUTFAILURE</name></cpp:macro>     <cpp:value pos:start="83:36" pos:end="83:39">-233</cpp:value></cpp:define>
<cpp:define pos:start="84:1" pos:end="84:39">#<cpp:directive pos:start="84:2" pos:end="84:7">define</cpp:directive> <cpp:macro pos:start="84:9" pos:end="84:33"><name pos:start="84:9" pos:end="84:33">SOCKERR_SOCKADDRALLOCFAIL</name></cpp:macro>  <cpp:value pos:start="84:36" pos:end="84:39">-234</cpp:value></cpp:define> <comment type="block" pos:start="84:41" pos:end="84:87">/* Unable to allocate the sockaddr structure */</comment>
<cpp:define pos:start="85:1" pos:end="85:39">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:29">SOCKERR_FDSET_SIZEBAD</name></cpp:macro>      <cpp:value pos:start="85:36" pos:end="85:39">-235</cpp:value></cpp:define> <comment type="block" pos:start="85:41" pos:end="85:107">/* The calculated maximum size of the file descriptor set is bad */</comment>
<cpp:define pos:start="86:1" pos:end="86:39">#<cpp:directive pos:start="86:2" pos:end="86:7">define</cpp:directive> <cpp:macro pos:start="86:9" pos:end="86:27"><name pos:start="86:9" pos:end="86:27">SOCKERR_UNKNOWNFLAG</name></cpp:macro>        <cpp:value pos:start="86:36" pos:end="86:39">-236</cpp:value></cpp:define> <comment type="block" pos:start="86:41" pos:end="86:65">/* The flag is unknown */</comment>
<cpp:define pos:start="87:1" pos:end="87:39">#<cpp:directive pos:start="87:2" pos:end="87:7">define</cpp:directive> <cpp:macro pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:23">SOCKERR_MSGSIZE</name></cpp:macro>            <cpp:value pos:start="87:36" pos:end="87:39">-237</cpp:value></cpp:define> <comment type="block" pos:start="87:41" pos:end="87:115">/* The datagram was too big to fit the specified buffer &amp; was truncated. */</comment>
<cpp:define pos:start="88:1" pos:end="88:39">#<cpp:directive pos:start="88:2" pos:end="88:7">define</cpp:directive> <cpp:macro pos:start="88:9" pos:end="88:26"><name pos:start="88:9" pos:end="88:26">SOCKERR_NORECOVERY</name></cpp:macro>         <cpp:value pos:start="88:36" pos:end="88:39">-238</cpp:value></cpp:define> <comment type="block" pos:start="88:41" pos:end="88:92">/* The operation failed with no recovery possible */</comment>
<cpp:define pos:start="89:1" pos:end="89:39">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:27">SOCKERR_ARGSINVALID</name></cpp:macro>        <cpp:value pos:start="89:36" pos:end="89:39">-239</cpp:value></cpp:define> <comment type="block" pos:start="89:41" pos:end="89:71">/* The arguments are invalid */</comment>
<cpp:define pos:start="90:1" pos:end="90:39">#<cpp:directive pos:start="90:2" pos:end="90:7">define</cpp:directive> <cpp:macro pos:start="90:9" pos:end="90:23"><name pos:start="90:9" pos:end="90:23">SOCKERR_BADDESC</name></cpp:macro>            <cpp:value pos:start="90:36" pos:end="90:39">-240</cpp:value></cpp:define> <comment type="block" pos:start="90:41" pos:end="90:96">/* The socket argument is not a valid file descriptor */</comment>
<cpp:define pos:start="91:1" pos:end="91:39">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:23">SOCKERR_NOTSOCK</name></cpp:macro>            <cpp:value pos:start="91:36" pos:end="91:39">-241</cpp:value></cpp:define> <comment type="block" pos:start="91:41" pos:end="91:81">/* The socket argument is not a socket */</comment>
<cpp:define pos:start="92:1" pos:end="92:39">#<cpp:directive pos:start="92:2" pos:end="92:7">define</cpp:directive> <cpp:macro pos:start="92:9" pos:end="92:32"><name pos:start="92:9" pos:end="92:32">SOCKERR_HOSTENTALLOCFAIL</name></cpp:macro>   <cpp:value pos:start="92:36" pos:end="92:39">-242</cpp:value></cpp:define> <comment type="block" pos:start="92:41" pos:end="92:86">/* Unable to allocate the hostent structure */</comment>
<cpp:define pos:start="93:1" pos:end="93:39">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:32">SOCKERR_TIMEVALALLOCFAIL</name></cpp:macro>   <cpp:value pos:start="93:36" pos:end="93:39">-243</cpp:value></cpp:define> <comment type="block" pos:start="93:41" pos:end="93:86">/* Unable to allocate the timeval structure */</comment>
<cpp:define pos:start="94:1" pos:end="94:39">#<cpp:directive pos:start="94:2" pos:end="94:7">define</cpp:directive> <cpp:macro pos:start="94:9" pos:end="94:31"><name pos:start="94:9" pos:end="94:31">SOCKERR_LINGERALLOCFAIL</name></cpp:macro>    <cpp:value pos:start="94:36" pos:end="94:39">-244</cpp:value></cpp:define> <comment type="block" pos:start="94:41" pos:end="94:85">/* Unable to allocate the linger structure */</comment>
<cpp:define pos:start="95:1" pos:end="95:39">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive> <cpp:macro pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:31">SOCKERR_IPMREQALLOCFAIL</name></cpp:macro>    <cpp:value pos:start="95:36" pos:end="95:39">-245</cpp:value></cpp:define> <comment type="block" pos:start="95:41" pos:end="95:85">/* Unable to allocate the ipmreq structure */</comment>
<cpp:define pos:start="96:1" pos:end="96:39">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:30"><name pos:start="96:9" pos:end="96:30">SOCKERR_FDSETALLOCFAIL</name></cpp:macro>     <cpp:value pos:start="96:36" pos:end="96:39">-246</cpp:value></cpp:define> <comment type="block" pos:start="96:41" pos:end="96:84">/* Unable to allocate the fdset structure */</comment>
<cpp:define pos:start="97:1" pos:end="97:39">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:24">SOCKERR_OPFAILED</name></cpp:macro>           <cpp:value pos:start="97:36" pos:end="97:39">-247</cpp:value></cpp:define> <comment type="block" pos:start="97:41" pos:end="97:62">/* Operation failed */</comment>
<cpp:define pos:start="98:1" pos:end="98:39">#<cpp:directive pos:start="98:2" pos:end="98:7">define</cpp:directive> <cpp:macro pos:start="98:9" pos:end="98:26"><name pos:start="98:9" pos:end="98:26">SOCKERR_VALUE_NULL</name></cpp:macro>         <cpp:value pos:start="98:36" pos:end="98:39">-248</cpp:value></cpp:define> <comment type="block" pos:start="98:41" pos:end="98:72">/* The value indexed was NULL */</comment>
<cpp:define pos:start="99:1" pos:end="99:39">#<cpp:directive pos:start="99:2" pos:end="99:7">define</cpp:directive> <cpp:macro pos:start="99:9" pos:end="99:34"><name pos:start="99:9" pos:end="99:34">SOCKERR_CONNECTION_REFUSED</name></cpp:macro> <cpp:value pos:start="99:36" pos:end="99:39">-249</cpp:value></cpp:define> <comment type="block" pos:start="99:41" pos:end="99:68">/* connection was refused */</comment>
<cpp:define pos:start="100:1" pos:end="100:39">#<cpp:directive pos:start="100:2" pos:end="100:7">define</cpp:directive> <cpp:macro pos:start="100:9" pos:end="100:27"><name pos:start="100:9" pos:end="100:27">SOCKERR_ENETUNREACH</name></cpp:macro>        <cpp:value pos:start="100:36" pos:end="100:39">-250</cpp:value></cpp:define> <comment type="block" pos:start="100:41" pos:end="100:70">/* network is not reachable */</comment>
<cpp:define pos:start="101:1" pos:end="101:39">#<cpp:directive pos:start="101:2" pos:end="101:7">define</cpp:directive> <cpp:macro pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:22">SOCKERR_EACCES</name></cpp:macro>             <cpp:value pos:start="101:36" pos:end="101:39">-251</cpp:value></cpp:define> <comment type="block" pos:start="101:41" pos:end="101:87">/* permissions do not allow action on socket */</comment>
<cpp:define pos:start="102:1" pos:end="102:39">#<cpp:directive pos:start="102:2" pos:end="102:7">define</cpp:directive> <cpp:macro pos:start="102:9" pos:end="102:28"><name pos:start="102:9" pos:end="102:28">SOCKERR_EHOSTUNREACH</name></cpp:macro>       <cpp:value pos:start="102:36" pos:end="102:39">-252</cpp:value></cpp:define> <comment type="block" pos:start="102:41" pos:end="102:62">/* no route to host */</comment>
<cpp:define pos:start="103:1" pos:end="103:39">#<cpp:directive pos:start="103:2" pos:end="103:7">define</cpp:directive> <cpp:macro pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:21">SOCKERR_EPIPE</name></cpp:macro>              <cpp:value pos:start="103:36" pos:end="103:39">-253</cpp:value></cpp:define> <comment type="block" pos:start="103:41" pos:end="103:57">/* broken pipe */</comment>

<cpp:define pos:start="105:1" pos:end="105:33">#<cpp:directive pos:start="105:2" pos:end="105:7">define</cpp:directive> <cpp:macro pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:31">JAVASOCKOPT_TCP_NODELAY</name></cpp:macro> <cpp:value pos:start="105:33" pos:end="105:33">1</cpp:value></cpp:define>
<cpp:define pos:start="106:1" pos:end="106:28">#<cpp:directive pos:start="106:2" pos:end="106:7">define</cpp:directive> <cpp:macro pos:start="106:9" pos:end="106:26"><name pos:start="106:9" pos:end="106:26">JAVASOCKOPT_IP_TOS</name></cpp:macro> <cpp:value pos:start="106:28" pos:end="106:28">3</cpp:value></cpp:define>
<cpp:define pos:start="107:1" pos:end="107:34">#<cpp:directive pos:start="107:2" pos:end="107:7">define</cpp:directive> <cpp:macro pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:32">JAVASOCKOPT_SO_REUSEADDR</name></cpp:macro> <cpp:value pos:start="107:34" pos:end="107:34">4</cpp:value></cpp:define>
<cpp:define pos:start="108:1" pos:end="108:34">#<cpp:directive pos:start="108:2" pos:end="108:7">define</cpp:directive> <cpp:macro pos:start="108:9" pos:end="108:32"><name pos:start="108:9" pos:end="108:32">JAVASOCKOPT_SO_KEEPALIVE</name></cpp:macro> <cpp:value pos:start="108:34" pos:end="108:34">8</cpp:value></cpp:define>
<cpp:define pos:start="109:1" pos:end="109:41">#<cpp:directive pos:start="109:2" pos:end="109:7">define</cpp:directive> <cpp:macro pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:38">JAVASOCKOPT_MCAST_TIME_TO_LIVE</name></cpp:macro> <cpp:value pos:start="109:40" pos:end="109:41">10</cpp:value></cpp:define> <comment type="block" pos:start="109:43" pos:end="109:64">/* Currently unused */</comment>
<cpp:define pos:start="110:1" pos:end="110:34">#<cpp:directive pos:start="110:2" pos:end="110:7">define</cpp:directive> <cpp:macro pos:start="110:9" pos:end="110:31"><name pos:start="110:9" pos:end="110:31">JAVASOCKOPT_SO_BINDADDR</name></cpp:macro> <cpp:value pos:start="110:33" pos:end="110:34">15</cpp:value></cpp:define>
<cpp:define pos:start="111:1" pos:end="111:38">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:35"><name pos:start="111:9" pos:end="111:35">JAVASOCKOPT_MCAST_INTERFACE</name></cpp:macro> <cpp:value pos:start="111:37" pos:end="111:38">16</cpp:value></cpp:define>
<cpp:define pos:start="112:1" pos:end="112:32">#<cpp:directive pos:start="112:2" pos:end="112:7">define</cpp:directive> <cpp:macro pos:start="112:9" pos:end="112:29"><name pos:start="112:9" pos:end="112:29">JAVASOCKOPT_MCAST_TTL</name></cpp:macro> <cpp:value pos:start="112:31" pos:end="112:32">17</cpp:value></cpp:define>
<cpp:define pos:start="113:1" pos:end="113:40">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:37"><name pos:start="113:9" pos:end="113:37">JAVASOCKOPT_IP_MULTICAST_LOOP</name></cpp:macro> <cpp:value pos:start="113:39" pos:end="113:40">18</cpp:value></cpp:define>
<cpp:define pos:start="114:1" pos:end="114:43">#<cpp:directive pos:start="114:2" pos:end="114:7">define</cpp:directive> <cpp:macro pos:start="114:9" pos:end="114:40"><name pos:start="114:9" pos:end="114:40">JAVASOCKOPT_MCAST_ADD_MEMBERSHIP</name></cpp:macro> <cpp:value pos:start="114:42" pos:end="114:43">19</cpp:value></cpp:define>
<cpp:define pos:start="115:1" pos:end="115:44">#<cpp:directive pos:start="115:2" pos:end="115:7">define</cpp:directive> <cpp:macro pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:41">JAVASOCKOPT_MCAST_DROP_MEMBERSHIP</name></cpp:macro> <cpp:value pos:start="115:43" pos:end="115:44">20</cpp:value></cpp:define>
<cpp:define pos:start="116:1" pos:end="116:39">#<cpp:directive pos:start="116:2" pos:end="116:7">define</cpp:directive> <cpp:macro pos:start="116:9" pos:end="116:36"><name pos:start="116:9" pos:end="116:36">JAVASOCKOPT_IP_MULTICAST_IF2</name></cpp:macro> <cpp:value pos:start="116:38" pos:end="116:39">31</cpp:value></cpp:define>
<cpp:define pos:start="117:1" pos:end="117:35">#<cpp:directive pos:start="117:2" pos:end="117:7">define</cpp:directive> <cpp:macro pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:32">JAVASOCKOPT_SO_BROADCAST</name></cpp:macro> <cpp:value pos:start="117:34" pos:end="117:35">32</cpp:value></cpp:define>
<cpp:define pos:start="118:1" pos:end="118:33">#<cpp:directive pos:start="118:2" pos:end="118:7">define</cpp:directive> <cpp:macro pos:start="118:9" pos:end="118:29"><name pos:start="118:9" pos:end="118:29">JAVASOCKOPT_SO_LINGER</name></cpp:macro> <cpp:value pos:start="118:31" pos:end="118:33">128</cpp:value></cpp:define>
<cpp:define pos:start="119:1" pos:end="119:50">#<cpp:directive pos:start="119:2" pos:end="119:7">define</cpp:directive> <cpp:macro pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:43">JAVASOCKOPT_REUSEADDR_AND_REUSEPORT</name></cpp:macro>  <cpp:value pos:start="119:46" pos:end="119:50">10001</cpp:value></cpp:define>
<cpp:define pos:start="120:1" pos:end="120:34">#<cpp:directive pos:start="120:2" pos:end="120:7">define</cpp:directive> <cpp:macro pos:start="120:9" pos:end="120:29"><name pos:start="120:9" pos:end="120:29">JAVASOCKOPT_SO_SNDBUF</name></cpp:macro> <cpp:value pos:start="120:31" pos:end="120:34">4097</cpp:value></cpp:define>
<cpp:define pos:start="121:1" pos:end="121:34">#<cpp:directive pos:start="121:2" pos:end="121:7">define</cpp:directive> <cpp:macro pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:29">JAVASOCKOPT_SO_RCVBUF</name></cpp:macro> <cpp:value pos:start="121:31" pos:end="121:34">4098</cpp:value></cpp:define>
<cpp:define pos:start="122:1" pos:end="122:39">#<cpp:directive pos:start="122:2" pos:end="122:7">define</cpp:directive> <cpp:macro pos:start="122:9" pos:end="122:33"><name pos:start="122:9" pos:end="122:33">JAVASOCKOPT_SO_RCVTIMEOUT</name></cpp:macro>  <cpp:value pos:start="122:36" pos:end="122:39">4102</cpp:value></cpp:define>
<cpp:define pos:start="123:1" pos:end="123:38">#<cpp:directive pos:start="123:2" pos:end="123:7">define</cpp:directive> <cpp:macro pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:32">JAVASOCKOPT_SO_OOBINLINE</name></cpp:macro>  <cpp:value pos:start="123:35" pos:end="123:38">4099</cpp:value></cpp:define>

<comment type="block" pos:start="125:1" pos:end="125:48">/* constants for calling multi-call functions */</comment>
<cpp:define pos:start="126:1" pos:end="126:28">#<cpp:directive pos:start="126:2" pos:end="126:7">define</cpp:directive> <cpp:macro pos:start="126:9" pos:end="126:25"><name pos:start="126:9" pos:end="126:25">SOCKET_STEP_START</name></cpp:macro> <cpp:value pos:start="126:27" pos:end="126:28">10</cpp:value></cpp:define>
<cpp:define pos:start="127:1" pos:end="127:28">#<cpp:directive pos:start="127:2" pos:end="127:7">define</cpp:directive> <cpp:macro pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:25">SOCKET_STEP_CHECK</name></cpp:macro> <cpp:value pos:start="127:27" pos:end="127:28">20</cpp:value></cpp:define>
<cpp:define pos:start="128:1" pos:end="128:27">#<cpp:directive pos:start="128:2" pos:end="128:7">define</cpp:directive> <cpp:macro pos:start="128:9" pos:end="128:24"><name pos:start="128:9" pos:end="128:24">SOCKET_STEP_DONE</name></cpp:macro> <cpp:value pos:start="128:26" pos:end="128:27">30</cpp:value></cpp:define>

<cpp:define pos:start="130:1" pos:end="130:29">#<cpp:directive pos:start="130:2" pos:end="130:7">define</cpp:directive> <cpp:macro pos:start="130:9" pos:end="130:27"><name pos:start="130:9" pos:end="130:27">BROKEN_MULTICAST_IF</name></cpp:macro> <cpp:value pos:start="130:29" pos:end="130:29">1</cpp:value></cpp:define>
<cpp:define pos:start="131:1" pos:end="131:30">#<cpp:directive pos:start="131:2" pos:end="131:7">define</cpp:directive> <cpp:macro pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:28">BROKEN_MULTICAST_TTL</name></cpp:macro> <cpp:value pos:start="131:30" pos:end="131:30">2</cpp:value></cpp:define>
<cpp:define pos:start="132:1" pos:end="132:28">#<cpp:directive pos:start="132:2" pos:end="132:7">define</cpp:directive> <cpp:macro pos:start="132:9" pos:end="132:26"><name pos:start="132:9" pos:end="132:26">BROKEN_TCP_NODELAY</name></cpp:macro> <cpp:value pos:start="132:28" pos:end="132:28">4</cpp:value></cpp:define>

<cpp:define pos:start="134:1" pos:end="134:35">#<cpp:directive pos:start="134:2" pos:end="134:7">define</cpp:directive> <cpp:macro pos:start="134:9" pos:end="134:33"><name pos:start="134:9" pos:end="134:33">SOCKET_CONNECT_STEP_START</name></cpp:macro> <cpp:value pos:start="134:35" pos:end="134:35">0</cpp:value></cpp:define>
<cpp:define pos:start="135:1" pos:end="135:35">#<cpp:directive pos:start="135:2" pos:end="135:7">define</cpp:directive> <cpp:macro pos:start="135:9" pos:end="135:33"><name pos:start="135:9" pos:end="135:33">SOCKET_CONNECT_STEP_CHECK</name></cpp:macro> <cpp:value pos:start="135:35" pos:end="135:35">1</cpp:value></cpp:define>

<cpp:define pos:start="137:1" pos:end="137:24">#<cpp:directive pos:start="137:2" pos:end="137:7">define</cpp:directive> <cpp:macro pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:22">SOCKET_OP_NONE</name></cpp:macro> <cpp:value pos:start="137:24" pos:end="137:24">0</cpp:value></cpp:define>
<cpp:define pos:start="138:1" pos:end="138:24">#<cpp:directive pos:start="138:2" pos:end="138:7">define</cpp:directive> <cpp:macro pos:start="138:9" pos:end="138:22"><name pos:start="138:9" pos:end="138:22">SOCKET_OP_READ</name></cpp:macro> <cpp:value pos:start="138:24" pos:end="138:24">1</cpp:value></cpp:define>
<cpp:define pos:start="139:1" pos:end="139:25">#<cpp:directive pos:start="139:2" pos:end="139:7">define</cpp:directive> <cpp:macro pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:23">SOCKET_OP_WRITE</name></cpp:macro> <cpp:value pos:start="139:25" pos:end="139:25">2</cpp:value></cpp:define>
<cpp:define pos:start="140:1" pos:end="140:27">#<cpp:directive pos:start="140:2" pos:end="140:7">define</cpp:directive> <cpp:macro pos:start="140:9" pos:end="140:25"><name pos:start="140:9" pos:end="140:25">SOCKET_READ_WRITE</name></cpp:macro> <cpp:value pos:start="140:27" pos:end="140:27">3</cpp:value></cpp:define>

<cpp:define pos:start="142:1" pos:end="142:25">#<cpp:directive pos:start="142:2" pos:end="142:7">define</cpp:directive> <cpp:macro pos:start="142:9" pos:end="142:23"><name pos:start="142:9" pos:end="142:23">SOCKET_MSG_PEEK</name></cpp:macro> <cpp:value pos:start="142:25" pos:end="142:25">1</cpp:value></cpp:define>
<cpp:define pos:start="143:1" pos:end="143:24">#<cpp:directive pos:start="143:2" pos:end="143:7">define</cpp:directive> <cpp:macro pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:22">SOCKET_MSG_OOB</name></cpp:macro> <cpp:value pos:start="143:24" pos:end="143:24">2</cpp:value></cpp:define>

<cpp:define pos:start="145:1" pos:end="145:24">#<cpp:directive pos:start="145:2" pos:end="145:7">define</cpp:directive> <cpp:macro pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:22">SOCKET_NOFLAGS</name></cpp:macro> <cpp:value pos:start="145:24" pos:end="145:24">0</cpp:value></cpp:define>

<cpp:undef pos:start="147:1" pos:end="147:17">#<cpp:directive pos:start="147:2" pos:end="147:6">undef</cpp:directive> <name pos:start="147:8" pos:end="147:17">BUFFERSIZE</name></cpp:undef>
<cpp:define pos:start="148:1" pos:end="148:23">#<cpp:directive pos:start="148:2" pos:end="148:7">define</cpp:directive> <cpp:macro pos:start="148:9" pos:end="148:18"><name pos:start="148:9" pos:end="148:18">BUFFERSIZE</name></cpp:macro> <cpp:value pos:start="148:20" pos:end="148:23">2048</cpp:value></cpp:define>

<comment type="line" pos:start="150:1" pos:end="150:36">// wait for 500000 usec = 0.5 second</comment>
<cpp:define pos:start="151:1" pos:end="151:30">#<cpp:directive pos:start="151:2" pos:end="151:7">define</cpp:directive> <cpp:macro pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:23">SEND_RETRY_TIME</name></cpp:macro> <cpp:value pos:start="151:25" pos:end="151:30">500000</cpp:value></cpp:define>


<struct pos:start="154:1" pos:end="180:16">struct <name pos:start="154:8" pos:end="154:19">CachedFields</name> <block pos:start="154:21" pos:end="180:1">{<public type="default" pos:start="155:5" pos:end="179:24">
    <decl_stmt pos:start="155:5" pos:end="155:27"><decl pos:start="155:5" pos:end="155:26"><type pos:start="155:5" pos:end="155:12"><name pos:start="155:5" pos:end="155:12">jfieldID</name></type> <name pos:start="155:14" pos:end="155:26">fd_descriptor</name></decl>;</decl_stmt>
    <decl_stmt pos:start="156:5" pos:end="156:23"><decl pos:start="156:5" pos:end="156:22"><type pos:start="156:5" pos:end="156:10"><name pos:start="156:5" pos:end="156:10">jclass</name></type> <name pos:start="156:12" pos:end="156:22">iaddr_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="157:5" pos:end="157:31"><decl pos:start="157:5" pos:end="157:30"><type pos:start="157:5" pos:end="157:13"><name pos:start="157:5" pos:end="157:13">jmethodID</name></type> <name pos:start="157:15" pos:end="157:30">iaddr_class_init</name></decl>;</decl_stmt>
    <decl_stmt pos:start="158:5" pos:end="158:33"><decl pos:start="158:5" pos:end="158:32"><type pos:start="158:5" pos:end="158:13"><name pos:start="158:5" pos:end="158:13">jmethodID</name></type> <name pos:start="158:15" pos:end="158:32">iaddr_getbyaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="159:5" pos:end="159:29"><decl pos:start="159:5" pos:end="159:28"><type pos:start="159:5" pos:end="159:12"><name pos:start="159:5" pos:end="159:12">jfieldID</name></type> <name pos:start="159:14" pos:end="159:28">iaddr_ipaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="160:5" pos:end="160:31"><decl pos:start="160:5" pos:end="160:30"><type pos:start="160:5" pos:end="160:10"><name pos:start="160:5" pos:end="160:10">jclass</name></type> <name pos:start="160:12" pos:end="160:30">genericipmreq_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="161:5" pos:end="161:25"><decl pos:start="161:5" pos:end="161:24"><type pos:start="161:5" pos:end="161:10"><name pos:start="161:5" pos:end="161:10">jclass</name></type> <name pos:start="161:12" pos:end="161:24">integer_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="162:5" pos:end="162:33"><decl pos:start="162:5" pos:end="162:32"><type pos:start="162:5" pos:end="162:13"><name pos:start="162:5" pos:end="162:13">jmethodID</name></type> <name pos:start="162:15" pos:end="162:32">integer_class_init</name></decl>;</decl_stmt>
    <decl_stmt pos:start="163:5" pos:end="163:33"><decl pos:start="163:5" pos:end="163:32"><type pos:start="163:5" pos:end="163:12"><name pos:start="163:5" pos:end="163:12">jfieldID</name></type> <name pos:start="163:14" pos:end="163:32">integer_class_value</name></decl>;</decl_stmt>
    <decl_stmt pos:start="164:5" pos:end="164:25"><decl pos:start="164:5" pos:end="164:24"><type pos:start="164:5" pos:end="164:10"><name pos:start="164:5" pos:end="164:10">jclass</name></type> <name pos:start="164:12" pos:end="164:24">boolean_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="165:5" pos:end="165:33"><decl pos:start="165:5" pos:end="165:32"><type pos:start="165:5" pos:end="165:13"><name pos:start="165:5" pos:end="165:13">jmethodID</name></type> <name pos:start="165:15" pos:end="165:32">boolean_class_init</name></decl>;</decl_stmt>
    <decl_stmt pos:start="166:5" pos:end="166:33"><decl pos:start="166:5" pos:end="166:32"><type pos:start="166:5" pos:end="166:12"><name pos:start="166:5" pos:end="166:12">jfieldID</name></type> <name pos:start="166:14" pos:end="166:32">boolean_class_value</name></decl>;</decl_stmt>
    <decl_stmt pos:start="167:5" pos:end="167:22"><decl pos:start="167:5" pos:end="167:21"><type pos:start="167:5" pos:end="167:10"><name pos:start="167:5" pos:end="167:10">jclass</name></type> <name pos:start="167:12" pos:end="167:21">byte_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="168:5" pos:end="168:30"><decl pos:start="168:5" pos:end="168:29"><type pos:start="168:5" pos:end="168:13"><name pos:start="168:5" pos:end="168:13">jmethodID</name></type> <name pos:start="168:15" pos:end="168:29">byte_class_init</name></decl>;</decl_stmt>
    <decl_stmt pos:start="169:5" pos:end="169:30"><decl pos:start="169:5" pos:end="169:29"><type pos:start="169:5" pos:end="169:12"><name pos:start="169:5" pos:end="169:12">jfieldID</name></type> <name pos:start="169:14" pos:end="169:29">byte_class_value</name></decl>;</decl_stmt>
    <decl_stmt pos:start="170:5" pos:end="170:24"><decl pos:start="170:5" pos:end="170:23"><type pos:start="170:5" pos:end="170:10"><name pos:start="170:5" pos:end="170:10">jclass</name></type> <name pos:start="170:12" pos:end="170:23">string_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="171:5" pos:end="171:32"><decl pos:start="171:5" pos:end="171:31"><type pos:start="171:5" pos:end="171:13"><name pos:start="171:5" pos:end="171:13">jmethodID</name></type> <name pos:start="171:15" pos:end="171:31">string_class_init</name></decl>;</decl_stmt>
    <decl_stmt pos:start="172:5" pos:end="172:32"><decl pos:start="172:5" pos:end="172:31"><type pos:start="172:5" pos:end="172:12"><name pos:start="172:5" pos:end="172:12">jfieldID</name></type> <name pos:start="172:14" pos:end="172:31">socketimpl_address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="173:5" pos:end="173:29"><decl pos:start="173:5" pos:end="173:28"><type pos:start="173:5" pos:end="173:12"><name pos:start="173:5" pos:end="173:12">jfieldID</name></type> <name pos:start="173:14" pos:end="173:28">socketimpl_port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="174:5" pos:end="174:23"><decl pos:start="174:5" pos:end="174:22"><type pos:start="174:5" pos:end="174:10"><name pos:start="174:5" pos:end="174:10">jclass</name></type> <name pos:start="174:12" pos:end="174:22">dpack_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="175:5" pos:end="175:27"><decl pos:start="175:5" pos:end="175:26"><type pos:start="175:5" pos:end="175:12"><name pos:start="175:5" pos:end="175:12">jfieldID</name></type> <name pos:start="175:14" pos:end="175:26">dpack_address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="176:5" pos:end="176:24"><decl pos:start="176:5" pos:end="176:23"><type pos:start="176:5" pos:end="176:12"><name pos:start="176:5" pos:end="176:12">jfieldID</name></type> <name pos:start="176:14" pos:end="176:23">dpack_port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="177:5" pos:end="177:26"><decl pos:start="177:5" pos:end="177:25"><type pos:start="177:5" pos:end="177:12"><name pos:start="177:5" pos:end="177:12">jfieldID</name></type> <name pos:start="177:14" pos:end="177:25">dpack_length</name></decl>;</decl_stmt>
    <decl_stmt pos:start="178:5" pos:end="178:20"><decl pos:start="178:5" pos:end="178:19"><type pos:start="178:5" pos:end="178:10"><name pos:start="178:5" pos:end="178:10">jclass</name></type> <name pos:start="178:12" pos:end="178:19">fd_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="179:5" pos:end="179:24"><decl pos:start="179:5" pos:end="179:23"><type pos:start="179:5" pos:end="179:12"><name pos:start="179:5" pos:end="179:12">jfieldID</name></type> <name pos:start="179:14" pos:end="179:23">descriptor</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="180:3" pos:end="180:15"><name pos:start="180:3" pos:end="180:15">gCachedFields</name></decl>;</struct>

<decl_stmt pos:start="182:1" pos:end="182:32"><decl pos:start="182:1" pos:end="182:31"><type pos:start="182:1" pos:end="182:10"><specifier pos:start="182:1" pos:end="182:6">static</specifier> <name pos:start="182:8" pos:end="182:10">int</name></type> <name pos:start="182:12" pos:end="182:27">useAdbNetworking</name> <init pos:start="182:29" pos:end="182:31">= <expr pos:start="182:31" pos:end="182:31"><literal type="number" pos:start="182:31" pos:end="182:31">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" pos:start="184:1" pos:end="184:40">/* needed for connecting with timeout */</comment>
<typedef pos:start="185:1" pos:end="191:14">typedef <type pos:start="185:9" pos:end="191:1"><struct pos:start="185:9" pos:end="191:1">struct <name pos:start="185:16" pos:end="185:26">selectFDSet</name> <block pos:start="185:28" pos:end="191:1">{<public type="default" pos:start="186:3" pos:end="190:22">
  <decl_stmt pos:start="186:3" pos:end="186:11"><decl pos:start="186:3" pos:end="186:10"><type pos:start="186:3" pos:end="186:5"><name pos:start="186:3" pos:end="186:5">int</name></type> <name pos:start="186:7" pos:end="186:10">nfds</name></decl>;</decl_stmt>
  <decl_stmt pos:start="187:3" pos:end="187:11"><decl pos:start="187:3" pos:end="187:10"><type pos:start="187:3" pos:end="187:5"><name pos:start="187:3" pos:end="187:5">int</name></type> <name pos:start="187:7" pos:end="187:10">sock</name></decl>;</decl_stmt>
  <decl_stmt pos:start="188:3" pos:end="188:18"><decl pos:start="188:3" pos:end="188:17"><type pos:start="188:3" pos:end="188:8"><name pos:start="188:3" pos:end="188:8">fd_set</name></type> <name pos:start="188:10" pos:end="188:17">writeSet</name></decl>;</decl_stmt>
  <decl_stmt pos:start="189:3" pos:end="189:17"><decl pos:start="189:3" pos:end="189:16"><type pos:start="189:3" pos:end="189:8"><name pos:start="189:3" pos:end="189:8">fd_set</name></type> <name pos:start="189:10" pos:end="189:16">readSet</name></decl>;</decl_stmt>
  <decl_stmt pos:start="190:3" pos:end="190:22"><decl pos:start="190:3" pos:end="190:21"><type pos:start="190:3" pos:end="190:8"><name pos:start="190:3" pos:end="190:8">fd_set</name></type> <name pos:start="190:10" pos:end="190:21">exceptionSet</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name pos:start="191:3" pos:end="191:13">selectFDSet</name>;</typedef>

<function_decl pos:start="193:1" pos:end="204:0"><type pos:start="193:1" pos:end="193:19"><specifier pos:start="193:1" pos:end="193:6">static</specifier> <specifier pos:start="193:8" pos:end="193:12">const</specifier> <name pos:start="193:14" pos:end="193:17">char</name> <modifier pos:start="193:19" pos:end="193:19">*</modifier></type> <name pos:start="193:21" pos:end="193:40">netLookupErrorString</name><parameter_list pos:start="193:41" pos:end="193:56">(<parameter pos:start="193:42" pos:end="193:55"><decl pos:start="193:42" pos:end="193:55"><type pos:start="193:42" pos:end="193:44"><name pos:start="193:42" pos:end="193:44">int</name></type> <name pos:start="193:46" pos:end="193:55">anErrorNum</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define pos:start="195:1" pos:end="195:29">#<cpp:directive pos:start="195:2" pos:end="195:7">define</cpp:directive> <cpp:macro pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:24">log_socket_close</name><parameter_list pos:start="195:25" pos:end="195:29">(<parameter pos:start="195:26" pos:end="195:26"><type pos:start="195:26" pos:end="195:26"><name pos:start="195:26" pos:end="195:26">a</name></type></parameter>,<parameter pos:start="195:28" pos:end="195:28"><type pos:start="195:28" pos:end="195:28"><name pos:start="195:28" pos:end="195:28">b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:start="196:1" pos:end="196:33">#<cpp:directive pos:start="196:2" pos:end="196:7">define</cpp:directive> <cpp:macro pos:start="196:9" pos:end="196:33"><name pos:start="196:9" pos:end="196:26">log_socket_connect</name><parameter_list pos:start="196:27" pos:end="196:33">(<parameter pos:start="196:28" pos:end="196:28"><type pos:start="196:28" pos:end="196:28"><name pos:start="196:28" pos:end="196:28">a</name></type></parameter>,<parameter pos:start="196:30" pos:end="196:30"><type pos:start="196:30" pos:end="196:30"><name pos:start="196:30" pos:end="196:30">b</name></type></parameter>,<parameter pos:start="196:32" pos:end="196:32"><type pos:start="196:32" pos:end="196:32"><name pos:start="196:32" pos:end="196:32">c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:start="197:1" pos:end="197:27">#<cpp:directive pos:start="197:2" pos:end="197:7">define</cpp:directive> <cpp:macro pos:start="197:9" pos:end="197:27"><name pos:start="197:9" pos:end="197:22">add_send_stats</name><parameter_list pos:start="197:23" pos:end="197:27">(<parameter pos:start="197:24" pos:end="197:24"><type pos:start="197:24" pos:end="197:24"><name pos:start="197:24" pos:end="197:24">a</name></type></parameter>,<parameter pos:start="197:26" pos:end="197:26"><type pos:start="197:26" pos:end="197:26"><name pos:start="197:26" pos:end="197:26">b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:start="198:1" pos:end="198:27">#<cpp:directive pos:start="198:2" pos:end="198:7">define</cpp:directive> <cpp:macro pos:start="198:9" pos:end="198:27"><name pos:start="198:9" pos:end="198:22">add_recv_stats</name><parameter_list pos:start="198:23" pos:end="198:27">(<parameter pos:start="198:24" pos:end="198:24"><type pos:start="198:24" pos:end="198:24"><name pos:start="198:24" pos:end="198:24">a</name></type></parameter>,<parameter pos:start="198:26" pos:end="198:26"><type pos:start="198:26" pos:end="198:26"><name pos:start="198:26" pos:end="198:26">b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:start="199:1" pos:end="199:40">#<cpp:directive pos:start="199:2" pos:end="199:7">define</cpp:directive> <cpp:macro pos:start="199:9" pos:end="199:38"><name pos:start="199:9" pos:end="199:33">adb_networking_connect_fd</name><parameter_list pos:start="199:34" pos:end="199:38">(<parameter pos:start="199:35" pos:end="199:35"><type pos:start="199:35" pos:end="199:35"><name pos:start="199:35" pos:end="199:35">a</name></type></parameter>,<parameter pos:start="199:37" pos:end="199:37"><type pos:start="199:37" pos:end="199:37"><name pos:start="199:37" pos:end="199:37">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="199:40" pos:end="199:40">0</cpp:value></cpp:define>
<cpp:define pos:start="200:1" pos:end="200:43">#<cpp:directive pos:start="200:2" pos:end="200:7">define</cpp:directive> <cpp:macro pos:start="200:9" pos:end="200:41"><name pos:start="200:9" pos:end="200:36">adb_networking_gethostbyname</name><parameter_list pos:start="200:37" pos:end="200:41">(<parameter pos:start="200:38" pos:end="200:38"><type pos:start="200:38" pos:end="200:38"><name pos:start="200:38" pos:end="200:38">a</name></type></parameter>,<parameter pos:start="200:40" pos:end="200:40"><type pos:start="200:40" pos:end="200:40"><name pos:start="200:40" pos:end="200:40">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="200:43" pos:end="200:43">0</cpp:value></cpp:define>
<cpp:define pos:start="201:1" pos:end="201:28">#<cpp:directive pos:start="201:2" pos:end="201:7">define</cpp:directive> <cpp:macro pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:26">PROPERTY_VALUE_MAX</name></cpp:macro> <cpp:value pos:start="201:28" pos:end="201:28">1</cpp:value></cpp:define>
<cpp:define pos:start="202:1" pos:end="202:27">#<cpp:directive pos:start="202:2" pos:end="202:7">define</cpp:directive> <cpp:macro pos:start="202:9" pos:end="202:27"><name pos:start="202:9" pos:end="202:20">property_get</name><parameter_list pos:start="202:21" pos:end="202:27">(<parameter pos:start="202:22" pos:end="202:22"><type pos:start="202:22" pos:end="202:22"><name pos:start="202:22" pos:end="202:22">a</name></type></parameter>,<parameter pos:start="202:24" pos:end="202:24"><type pos:start="202:24" pos:end="202:24"><name pos:start="202:24" pos:end="202:24">b</name></type></parameter>,<parameter pos:start="202:26" pos:end="202:26"><type pos:start="202:26" pos:end="202:26"><name pos:start="202:26" pos:end="202:26">c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:start="203:1" pos:end="203:17">#<cpp:directive pos:start="203:2" pos:end="203:7">define</cpp:directive> <cpp:macro pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:14">assert</name><parameter_list pos:start="203:15" pos:end="203:17">(<parameter pos:start="203:16" pos:end="203:16"><type pos:start="203:16" pos:end="203:16"><name pos:start="203:16" pos:end="203:16">a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<comment type="block" pos:start="204:1" pos:end="206:3">/*
 * Throw an exception with the specified class and an optional message.
 */</comment>
<function pos:start="207:1" pos:end="223:1"><type pos:start="207:1" pos:end="207:3"><name pos:start="207:1" pos:end="207:3">int</name></type> <name pos:start="207:5" pos:end="207:21">jniThrowException</name><parameter_list pos:start="207:22" pos:end="207:74">(<parameter pos:start="207:23" pos:end="207:33"><decl pos:start="207:23" pos:end="207:33"><type pos:start="207:23" pos:end="207:33"><name pos:start="207:23" pos:end="207:28">JNIEnv</name><modifier pos:start="207:29" pos:end="207:29">*</modifier></type> <name pos:start="207:31" pos:end="207:33">env</name></decl></parameter>, <parameter pos:start="207:36" pos:end="207:56"><decl pos:start="207:36" pos:end="207:56"><type pos:start="207:36" pos:end="207:56"><specifier pos:start="207:36" pos:end="207:40">const</specifier> <name pos:start="207:42" pos:end="207:45">char</name><modifier pos:start="207:46" pos:end="207:46">*</modifier></type> <name pos:start="207:48" pos:end="207:56">className</name></decl></parameter>, <parameter pos:start="207:59" pos:end="207:73"><decl pos:start="207:59" pos:end="207:73"><type pos:start="207:59" pos:end="207:73"><specifier pos:start="207:59" pos:end="207:63">const</specifier> <name pos:start="207:65" pos:end="207:68">char</name><modifier pos:start="207:69" pos:end="207:69">*</modifier></type> <name pos:start="207:71" pos:end="207:73">msg</name></decl></parameter>)</parameter_list>
<block pos:start="208:1" pos:end="223:1">{<block_content pos:start="209:5" pos:end="222:13">
    <decl_stmt pos:start="209:5" pos:end="209:26"><decl pos:start="209:5" pos:end="209:25"><type pos:start="209:5" pos:end="209:10"><name pos:start="209:5" pos:end="209:10">jclass</name></type> <name pos:start="209:12" pos:end="209:25">exceptionClass</name></decl>;</decl_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:47"><expr pos:start="211:5" pos:end="211:46"><name pos:start="211:5" pos:end="211:18">exceptionClass</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <call pos:start="211:22" pos:end="211:46"><name pos:start="211:22" pos:end="211:35"><name pos:start="211:22" pos:end="211:24">env</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:35">FindClass</name></name><argument_list pos:start="211:36" pos:end="211:46">(<argument pos:start="211:37" pos:end="211:45"><expr pos:start="211:37" pos:end="211:45"><name pos:start="211:37" pos:end="211:45">className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="212:5" pos:end="216:5"><if pos:start="212:5" pos:end="216:5">if <condition pos:start="212:8" pos:end="212:31">(<expr pos:start="212:9" pos:end="212:30"><name pos:start="212:9" pos:end="212:22">exceptionClass</name> <operator pos:start="212:24" pos:end="212:25">==</operator> <name pos:start="212:27" pos:end="212:30">NULL</name></expr>)</condition> <block pos:start="212:33" pos:end="216:5">{<block_content pos:start="214:9" pos:end="215:18">
<comment type="line" pos:start="213:1" pos:end="213:65">//        LOGE("Unable to find exception class %s\n", className);</comment>
        <expr_stmt pos:start="214:9" pos:end="214:18"><expr pos:start="214:9" pos:end="214:17"><call pos:start="214:9" pos:end="214:17"><name pos:start="214:9" pos:end="214:14">assert</name><argument_list pos:start="214:15" pos:end="214:17">(<argument pos:start="214:16" pos:end="214:16"><expr pos:start="214:16" pos:end="214:16"><literal type="number" pos:start="214:16" pos:end="214:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="214:25" pos:end="214:71">/* fatal during dev; should always be fatal? */</comment>
        <return pos:start="215:9" pos:end="215:18">return <expr pos:start="215:16" pos:end="215:17"><operator pos:start="215:16" pos:end="215:16">-</operator><literal type="number" pos:start="215:17" pos:end="215:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="218:5" pos:end="221:5"><if pos:start="218:5" pos:end="221:5">if <condition pos:start="218:8" pos:end="218:53">(<expr pos:start="218:9" pos:end="218:52"><call pos:start="218:9" pos:end="218:42"><name pos:start="218:9" pos:end="218:21"><name pos:start="218:9" pos:end="218:11">env</name><operator pos:start="218:12" pos:end="218:13">-&gt;</operator><name pos:start="218:14" pos:end="218:21">ThrowNew</name></name><argument_list pos:start="218:22" pos:end="218:42">(<argument pos:start="218:23" pos:end="218:36"><expr pos:start="218:23" pos:end="218:36"><name pos:start="218:23" pos:end="218:36">exceptionClass</name></expr></argument>, <argument pos:start="218:39" pos:end="218:41"><expr pos:start="218:39" pos:end="218:41"><name pos:start="218:39" pos:end="218:41">msg</name></expr></argument>)</argument_list></call> <operator pos:start="218:44" pos:end="218:45">!=</operator> <name pos:start="218:47" pos:end="218:52">JNI_OK</name></expr>)</condition> <block pos:start="218:55" pos:end="221:5">{<block_content pos:start="220:9" pos:end="220:35">
<comment type="line" pos:start="219:1" pos:end="219:62">//        LOGE("Failed throwing '%s' '%s'\n", className, msg);</comment>
        <expr_stmt pos:start="220:9" pos:end="220:35"><expr pos:start="220:9" pos:end="220:34"><call pos:start="220:9" pos:end="220:34"><name pos:start="220:9" pos:end="220:14">assert</name><argument_list pos:start="220:15" pos:end="220:34">(<argument pos:start="220:16" pos:end="220:33"><expr pos:start="220:16" pos:end="220:33"><operator pos:start="220:16" pos:end="220:16">!</operator><literal type="string" pos:start="220:17" pos:end="220:33">"failed to throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="222:5" pos:end="222:13">return <expr pos:start="222:12" pos:end="222:12"><literal type="number" pos:start="222:12" pos:end="222:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="225:1" pos:end="229:3">/*
 * Internal helper function.
 *
 * Get the file descriptor.
 */</comment>
<function pos:start="230:1" pos:end="233:1"><type pos:start="230:1" pos:end="230:17"><specifier pos:start="230:1" pos:end="230:6">static</specifier> <specifier pos:start="230:8" pos:end="230:13">inline</specifier> <name pos:start="230:15" pos:end="230:17">int</name></type> <name pos:start="230:19" pos:end="230:23">getFd</name><parameter_list pos:start="230:24" pos:end="230:49">(<parameter pos:start="230:25" pos:end="230:35"><decl pos:start="230:25" pos:end="230:35"><type pos:start="230:25" pos:end="230:35"><name pos:start="230:25" pos:end="230:30">JNIEnv</name><modifier pos:start="230:31" pos:end="230:31">*</modifier></type> <name pos:start="230:33" pos:end="230:35">env</name></decl></parameter>, <parameter pos:start="230:38" pos:end="230:48"><decl pos:start="230:38" pos:end="230:48"><type pos:start="230:38" pos:end="230:48"><name pos:start="230:38" pos:end="230:44">jobject</name></type> <name pos:start="230:46" pos:end="230:48">obj</name></decl></parameter>)</parameter_list>
<block pos:start="231:1" pos:end="233:1">{<block_content pos:start="232:5" pos:end="232:59">
    <return pos:start="232:5" pos:end="232:59">return <expr pos:start="232:12" pos:end="232:58"><call pos:start="232:12" pos:end="232:58"><name pos:start="232:12" pos:end="232:27"><name pos:start="232:12" pos:end="232:14">env</name><operator pos:start="232:15" pos:end="232:16">-&gt;</operator><name pos:start="232:17" pos:end="232:27">GetIntField</name></name><argument_list pos:start="232:28" pos:end="232:58">(<argument pos:start="232:29" pos:end="232:31"><expr pos:start="232:29" pos:end="232:31"><name pos:start="232:29" pos:end="232:31">obj</name></expr></argument>, <argument pos:start="232:34" pos:end="232:57"><expr pos:start="232:34" pos:end="232:57"><name pos:start="232:34" pos:end="232:57"><name pos:start="232:34" pos:end="232:46">gCachedFields</name><operator pos:start="232:47" pos:end="232:47">.</operator><name pos:start="232:48" pos:end="232:57">descriptor</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="235:1" pos:end="239:3">/*
 * Internal helper function.
 *
 * Set the file descriptor.
 */</comment>
<function pos:start="240:1" pos:end="243:1"><type pos:start="240:1" pos:end="240:18"><specifier pos:start="240:1" pos:end="240:6">static</specifier> <specifier pos:start="240:8" pos:end="240:13">inline</specifier> <name pos:start="240:15" pos:end="240:18">void</name></type> <name pos:start="240:20" pos:end="240:24">setFd</name><parameter_list pos:start="240:25" pos:end="240:62">(<parameter pos:start="240:26" pos:end="240:36"><decl pos:start="240:26" pos:end="240:36"><type pos:start="240:26" pos:end="240:36"><name pos:start="240:26" pos:end="240:31">JNIEnv</name><modifier pos:start="240:32" pos:end="240:32">*</modifier></type> <name pos:start="240:34" pos:end="240:36">env</name></decl></parameter>, <parameter pos:start="240:39" pos:end="240:49"><decl pos:start="240:39" pos:end="240:49"><type pos:start="240:39" pos:end="240:49"><name pos:start="240:39" pos:end="240:45">jobject</name></type> <name pos:start="240:47" pos:end="240:49">obj</name></decl></parameter>, <parameter pos:start="240:52" pos:end="240:61"><decl pos:start="240:52" pos:end="240:61"><type pos:start="240:52" pos:end="240:61"><name pos:start="240:52" pos:end="240:55">jint</name></type> <name pos:start="240:57" pos:end="240:61">value</name></decl></parameter>)</parameter_list>
<block pos:start="241:1" pos:end="243:1">{<block_content pos:start="242:5" pos:end="242:59">
    <expr_stmt pos:start="242:5" pos:end="242:59"><expr pos:start="242:5" pos:end="242:58"><call pos:start="242:5" pos:end="242:58"><name pos:start="242:5" pos:end="242:20"><name pos:start="242:5" pos:end="242:7">env</name><operator pos:start="242:8" pos:end="242:9">-&gt;</operator><name pos:start="242:10" pos:end="242:20">SetIntField</name></name><argument_list pos:start="242:21" pos:end="242:58">(<argument pos:start="242:22" pos:end="242:24"><expr pos:start="242:22" pos:end="242:24"><name pos:start="242:22" pos:end="242:24">obj</name></expr></argument>, <argument pos:start="242:27" pos:end="242:50"><expr pos:start="242:27" pos:end="242:50"><name pos:start="242:27" pos:end="242:50"><name pos:start="242:27" pos:end="242:39">gCachedFields</name><operator pos:start="242:40" pos:end="242:40">.</operator><name pos:start="242:41" pos:end="242:50">descriptor</name></name></expr></argument>, <argument pos:start="242:53" pos:end="242:57"><expr pos:start="242:53" pos:end="242:57"><name pos:start="242:53" pos:end="242:57">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="245:1" pos:end="248:3">/* 
 * For JNIHelp.c
 * Get an int file descriptor from a java.io.FileDescriptor
 */</comment>

<function pos:start="250:1" pos:end="253:1"><type pos:start="250:1" pos:end="250:10"><specifier pos:start="250:1" pos:end="250:6">static</specifier> <name pos:start="250:8" pos:end="250:10">int</name></type> <name pos:start="250:12" pos:end="250:37">jniGetFDFromFileDescriptor</name> <parameter_list pos:start="250:39" pos:end="250:75">(<parameter pos:start="250:40" pos:end="250:50"><decl pos:start="250:40" pos:end="250:50"><type pos:start="250:40" pos:end="250:50"><name pos:start="250:40" pos:end="250:45">JNIEnv</name><modifier pos:start="250:46" pos:end="250:46">*</modifier></type> <name pos:start="250:48" pos:end="250:50">env</name></decl></parameter>, <parameter pos:start="250:53" pos:end="250:74"><decl pos:start="250:53" pos:end="250:74"><type pos:start="250:53" pos:end="250:74"><name pos:start="250:53" pos:end="250:59">jobject</name></type> <name pos:start="250:61" pos:end="250:74">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="250:77" pos:end="253:1">{<block_content pos:start="252:5" pos:end="252:38">

    <return pos:start="252:5" pos:end="252:38">return <expr pos:start="252:12" pos:end="252:37"><call pos:start="252:12" pos:end="252:37"><name pos:start="252:12" pos:end="252:16">getFd</name><argument_list pos:start="252:17" pos:end="252:37">(<argument pos:start="252:18" pos:end="252:20"><expr pos:start="252:18" pos:end="252:20"><name pos:start="252:18" pos:end="252:20">env</name></expr></argument>, <argument pos:start="252:23" pos:end="252:36"><expr pos:start="252:23" pos:end="252:36"><name pos:start="252:23" pos:end="252:36">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="255:1" pos:end="258:3">/*
 * For JNIHelp.c
 * Set the descriptor of a java.io.FileDescriptor
 */</comment>

<function pos:start="260:1" pos:end="263:1"><type pos:start="260:1" pos:end="260:11"><specifier pos:start="260:1" pos:end="260:6">static</specifier> <name pos:start="260:8" pos:end="260:11">void</name></type> <name pos:start="260:13" pos:end="260:36">jniSetFileDescriptorOfFD</name> <parameter_list pos:start="260:38" pos:end="260:85">(<parameter pos:start="260:39" pos:end="260:49"><decl pos:start="260:39" pos:end="260:49"><type pos:start="260:39" pos:end="260:49"><name pos:start="260:39" pos:end="260:44">JNIEnv</name><modifier pos:start="260:45" pos:end="260:45">*</modifier></type> <name pos:start="260:47" pos:end="260:49">env</name></decl></parameter>, <parameter pos:start="260:52" pos:end="260:73"><decl pos:start="260:52" pos:end="260:73"><type pos:start="260:52" pos:end="260:73"><name pos:start="260:52" pos:end="260:58">jobject</name></type> <name pos:start="260:60" pos:end="260:73">fileDescriptor</name></decl></parameter>, <parameter pos:start="260:76" pos:end="260:84"><decl pos:start="260:76" pos:end="260:84"><type pos:start="260:76" pos:end="260:84"><name pos:start="260:76" pos:end="260:78">int</name></type> <name pos:start="260:80" pos:end="260:84">value</name></decl></parameter>)</parameter_list> <block pos:start="260:87" pos:end="263:1">{<block_content pos:start="262:5" pos:end="262:38">

    <expr_stmt pos:start="262:5" pos:end="262:38"><expr pos:start="262:5" pos:end="262:37"><call pos:start="262:5" pos:end="262:37"><name pos:start="262:5" pos:end="262:9">setFd</name><argument_list pos:start="262:10" pos:end="262:37">(<argument pos:start="262:11" pos:end="262:13"><expr pos:start="262:11" pos:end="262:13"><name pos:start="262:11" pos:end="262:13">env</name></expr></argument>, <argument pos:start="262:16" pos:end="262:29"><expr pos:start="262:16" pos:end="262:29"><name pos:start="262:16" pos:end="262:29">fileDescriptor</name></expr></argument>, <argument pos:start="262:32" pos:end="262:36"><expr pos:start="262:32" pos:end="262:36"><name pos:start="262:32" pos:end="262:36">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="265:1" pos:end="267:3">/**
 * Throws an SocketException with the message affiliated with the errorCode.
 */</comment>
<function pos:start="268:1" pos:end="271:1"><type pos:start="268:1" pos:end="268:11"><specifier pos:start="268:1" pos:end="268:6">static</specifier> <name pos:start="268:8" pos:end="268:11">void</name></type> <name pos:start="268:13" pos:end="268:32">throwSocketException</name><parameter_list pos:start="268:33" pos:end="268:60">(<parameter pos:start="268:34" pos:end="268:44"><decl pos:start="268:34" pos:end="268:44"><type pos:start="268:34" pos:end="268:44"><name pos:start="268:34" pos:end="268:39">JNIEnv</name> <modifier pos:start="268:41" pos:end="268:41">*</modifier></type><name pos:start="268:42" pos:end="268:44">env</name></decl></parameter>, <parameter pos:start="268:47" pos:end="268:59"><decl pos:start="268:47" pos:end="268:59"><type pos:start="268:47" pos:end="268:59"><name pos:start="268:47" pos:end="268:49">int</name></type> <name pos:start="268:51" pos:end="268:59">errorCode</name></decl></parameter>)</parameter_list> <block pos:start="268:62" pos:end="271:1">{<block_content pos:start="269:5" pos:end="270:41">
    <expr_stmt pos:start="269:5" pos:end="270:41"><expr pos:start="269:5" pos:end="270:40"><call pos:start="269:5" pos:end="270:40"><name pos:start="269:5" pos:end="269:21">jniThrowException</name><argument_list pos:start="269:22" pos:end="270:40">(<argument pos:start="269:23" pos:end="269:25"><expr pos:start="269:23" pos:end="269:25"><name pos:start="269:23" pos:end="269:25">env</name></expr></argument>, <argument pos:start="269:28" pos:end="269:53"><expr pos:start="269:28" pos:end="269:53"><literal type="string" pos:start="269:28" pos:end="269:53">"java/net/SocketException"</literal></expr></argument>,
        <argument pos:start="270:9" pos:end="270:39"><expr pos:start="270:9" pos:end="270:39"><call pos:start="270:9" pos:end="270:39"><name pos:start="270:9" pos:end="270:28">netLookupErrorString</name><argument_list pos:start="270:29" pos:end="270:39">(<argument pos:start="270:30" pos:end="270:38"><expr pos:start="270:30" pos:end="270:38"><name pos:start="270:30" pos:end="270:38">errorCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="273:1" pos:end="275:3">/**
 * Throws an IOException with the given message.
 */</comment>
<function pos:start="276:1" pos:end="278:1"><type pos:start="276:1" pos:end="276:11"><specifier pos:start="276:1" pos:end="276:6">static</specifier> <name pos:start="276:8" pos:end="276:11">void</name></type> <name pos:start="276:13" pos:end="276:31">throwIOExceptionStr</name><parameter_list pos:start="276:32" pos:end="276:65">(<parameter pos:start="276:33" pos:end="276:43"><decl pos:start="276:33" pos:end="276:43"><type pos:start="276:33" pos:end="276:43"><name pos:start="276:33" pos:end="276:38">JNIEnv</name> <modifier pos:start="276:40" pos:end="276:40">*</modifier></type><name pos:start="276:41" pos:end="276:43">env</name></decl></parameter>, <parameter pos:start="276:46" pos:end="276:64"><decl pos:start="276:46" pos:end="276:64"><type pos:start="276:46" pos:end="276:64"><specifier pos:start="276:46" pos:end="276:50">const</specifier> <name pos:start="276:52" pos:end="276:55">char</name> <modifier pos:start="276:57" pos:end="276:57">*</modifier></type><name pos:start="276:58" pos:end="276:64">message</name></decl></parameter>)</parameter_list> <block pos:start="276:67" pos:end="278:1">{<block_content pos:start="277:5" pos:end="277:59">
    <expr_stmt pos:start="277:5" pos:end="277:59"><expr pos:start="277:5" pos:end="277:58"><call pos:start="277:5" pos:end="277:58"><name pos:start="277:5" pos:end="277:21">jniThrowException</name><argument_list pos:start="277:22" pos:end="277:58">(<argument pos:start="277:23" pos:end="277:25"><expr pos:start="277:23" pos:end="277:25"><name pos:start="277:23" pos:end="277:25">env</name></expr></argument>, <argument pos:start="277:28" pos:end="277:48"><expr pos:start="277:28" pos:end="277:48"><literal type="string" pos:start="277:28" pos:end="277:48">"java/io/IOException"</literal></expr></argument>, <argument pos:start="277:51" pos:end="277:57"><expr pos:start="277:51" pos:end="277:57"><name pos:start="277:51" pos:end="277:57">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="280:1" pos:end="282:3">/**
 * Throws a NullPointerException.
 */</comment>
<function pos:start="283:1" pos:end="285:1"><type pos:start="283:1" pos:end="283:11"><specifier pos:start="283:1" pos:end="283:6">static</specifier> <name pos:start="283:8" pos:end="283:11">void</name></type> <name pos:start="283:13" pos:end="283:37">throwNullPointerException</name><parameter_list pos:start="283:38" pos:end="283:50">(<parameter pos:start="283:39" pos:end="283:49"><decl pos:start="283:39" pos:end="283:49"><type pos:start="283:39" pos:end="283:46"><name pos:start="283:39" pos:end="283:44">JNIEnv</name> <modifier pos:start="283:46" pos:end="283:46">*</modifier></type><name pos:start="283:47" pos:end="283:49">env</name></decl></parameter>)</parameter_list> <block pos:start="283:52" pos:end="285:1">{<block_content pos:start="284:5" pos:end="284:67">
    <expr_stmt pos:start="284:5" pos:end="284:67"><expr pos:start="284:5" pos:end="284:66"><call pos:start="284:5" pos:end="284:66"><name pos:start="284:5" pos:end="284:21">jniThrowException</name><argument_list pos:start="284:22" pos:end="284:66">(<argument pos:start="284:23" pos:end="284:25"><expr pos:start="284:23" pos:end="284:25"><name pos:start="284:23" pos:end="284:25">env</name></expr></argument>, <argument pos:start="284:28" pos:end="284:59"><expr pos:start="284:28" pos:end="284:59"><literal type="string" pos:start="284:28" pos:end="284:59">"java/lang/NullPointerException"</literal></expr></argument>, <argument pos:start="284:62" pos:end="284:65"><expr pos:start="284:62" pos:end="284:65"><name pos:start="284:62" pos:end="284:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="287:1" pos:end="291:3">/**
 * Converts a 4-byte array to a native address structure. Throws a
 * NullPointerException or an IOException in case of error. This is
 * signaled by a return value of -1. The normal return value is 0.
 */</comment>
<function pos:start="292:1" pos:end="315:1"><type pos:start="292:1" pos:end="292:10"><specifier pos:start="292:1" pos:end="292:6">static</specifier> <name pos:start="292:8" pos:end="292:10">int</name></type> <name pos:start="292:12" pos:end="292:32">javaAddressToStructIn</name><parameter_list pos:start="292:33" pos:end="293:70">(
        <parameter pos:start="293:9" pos:end="293:19"><decl pos:start="293:9" pos:end="293:19"><type pos:start="293:9" pos:end="293:19"><name pos:start="293:9" pos:end="293:14">JNIEnv</name> <modifier pos:start="293:16" pos:end="293:16">*</modifier></type><name pos:start="293:17" pos:end="293:19">env</name></decl></parameter>, <parameter pos:start="293:22" pos:end="293:44"><decl pos:start="293:22" pos:end="293:44"><type pos:start="293:22" pos:end="293:44"><name pos:start="293:22" pos:end="293:31">jbyteArray</name></type> <name pos:start="293:33" pos:end="293:44">java_address</name></decl></parameter>, <parameter pos:start="293:47" pos:end="293:69"><decl pos:start="293:47" pos:end="293:69"><type pos:start="293:47" pos:end="293:69"><name pos:start="293:47" pos:end="293:60"><name pos:start="293:47" pos:end="293:52">struct</name> <name pos:start="293:54" pos:end="293:60">in_addr</name></name> <modifier pos:start="293:62" pos:end="293:62">*</modifier></type><name pos:start="293:63" pos:end="293:69">address</name></decl></parameter>)</parameter_list> <block pos:start="293:72" pos:end="315:1">{<block_content pos:start="295:5" pos:end="314:13">

    <expr_stmt pos:start="295:5" pos:end="295:40"><expr pos:start="295:5" pos:end="295:39"><call pos:start="295:5" pos:end="295:39"><name pos:start="295:5" pos:end="295:10">memset</name><argument_list pos:start="295:11" pos:end="295:39">(<argument pos:start="295:12" pos:end="295:18"><expr pos:start="295:12" pos:end="295:18"><name pos:start="295:12" pos:end="295:18">address</name></expr></argument>, <argument pos:start="295:21" pos:end="295:21"><expr pos:start="295:21" pos:end="295:21"><literal type="number" pos:start="295:21" pos:end="295:21">0</literal></expr></argument>, <argument pos:start="295:24" pos:end="295:38"><expr pos:start="295:24" pos:end="295:38"><sizeof pos:start="295:24" pos:end="295:38">sizeof<argument_list pos:start="295:30" pos:end="295:38">(<argument pos:start="295:31" pos:end="295:37"><expr pos:start="295:31" pos:end="295:37"><name pos:start="295:31" pos:end="295:37">address</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="299:5"><if pos:start="297:5" pos:end="299:5">if <condition pos:start="297:8" pos:end="297:29">(<expr pos:start="297:9" pos:end="297:28"><name pos:start="297:9" pos:end="297:20">java_address</name> <operator pos:start="297:22" pos:end="297:23">==</operator> <name pos:start="297:25" pos:end="297:28">NULL</name></expr>)</condition> <block pos:start="297:31" pos:end="299:5">{<block_content pos:start="298:9" pos:end="298:18">
        <return pos:start="298:9" pos:end="298:18">return <expr pos:start="298:16" pos:end="298:17"><operator pos:start="298:16" pos:end="298:16">-</operator><literal type="number" pos:start="298:17" pos:end="298:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="301:5" pos:end="303:5"><if pos:start="301:5" pos:end="303:5">if <condition pos:start="301:8" pos:end="301:69">(<expr pos:start="301:9" pos:end="301:68"><call pos:start="301:9" pos:end="301:41"><name pos:start="301:9" pos:end="301:27"><name pos:start="301:9" pos:end="301:11">env</name><operator pos:start="301:12" pos:end="301:13">-&gt;</operator><name pos:start="301:14" pos:end="301:27">GetArrayLength</name></name><argument_list pos:start="301:28" pos:end="301:41">(<argument pos:start="301:29" pos:end="301:40"><expr pos:start="301:29" pos:end="301:40"><name pos:start="301:29" pos:end="301:40">java_address</name></expr></argument>)</argument_list></call> <operator pos:start="301:43" pos:end="301:44">!=</operator> <sizeof pos:start="301:46" pos:end="301:68">sizeof<argument_list pos:start="301:52" pos:end="301:68">(<argument pos:start="301:53" pos:end="301:67"><expr pos:start="301:53" pos:end="301:67"><name pos:start="301:53" pos:end="301:67"><name pos:start="301:53" pos:end="301:59">address</name><operator pos:start="301:60" pos:end="301:61">-&gt;</operator><name pos:start="301:62" pos:end="301:67">s_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="301:71" pos:end="303:5">{<block_content pos:start="302:9" pos:end="302:18">
        <return pos:start="302:9" pos:end="302:18">return <expr pos:start="302:16" pos:end="302:17"><operator pos:start="302:16" pos:end="302:16">-</operator><literal type="number" pos:start="302:17" pos:end="302:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="305:5" pos:end="306:57"><decl pos:start="305:5" pos:end="306:56"><type pos:start="305:5" pos:end="305:11"><name pos:start="305:5" pos:end="305:9">jbyte</name> <modifier pos:start="305:11" pos:end="305:11">*</modifier></type> <name pos:start="305:13" pos:end="305:30">java_address_bytes</name>
        <init pos:start="306:9" pos:end="306:56">=  <expr pos:start="306:12" pos:end="306:56"><call pos:start="306:12" pos:end="306:56"><name pos:start="306:12" pos:end="306:36"><name pos:start="306:12" pos:end="306:14">env</name><operator pos:start="306:15" pos:end="306:16">-&gt;</operator><name pos:start="306:17" pos:end="306:36">GetByteArrayElements</name></name><argument_list pos:start="306:37" pos:end="306:56">(<argument pos:start="306:38" pos:end="306:49"><expr pos:start="306:38" pos:end="306:49"><name pos:start="306:38" pos:end="306:49">java_address</name></expr></argument>, <argument pos:start="306:52" pos:end="306:55"><expr pos:start="306:52" pos:end="306:55"><name pos:start="306:52" pos:end="306:55">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="308:5" pos:end="310:33"><expr pos:start="308:5" pos:end="310:32"><call pos:start="308:5" pos:end="310:32"><name pos:start="308:5" pos:end="308:10">memcpy</name><argument_list pos:start="308:11" pos:end="310:32">(<argument pos:start="308:12" pos:end="308:29"><expr pos:start="308:12" pos:end="308:29"><operator pos:start="308:12" pos:end="308:12">&amp;</operator><operator pos:start="308:13" pos:end="308:13">(</operator><name pos:start="308:14" pos:end="308:28"><name pos:start="308:14" pos:end="308:20">address</name><operator pos:start="308:21" pos:end="308:22">-&gt;</operator><name pos:start="308:23" pos:end="308:28">s_addr</name></name><operator pos:start="308:29" pos:end="308:29">)</operator></expr></argument>,
        <argument pos:start="309:9" pos:end="309:26"><expr pos:start="309:9" pos:end="309:26"><name pos:start="309:9" pos:end="309:26">java_address_bytes</name></expr></argument>,
        <argument pos:start="310:9" pos:end="310:31"><expr pos:start="310:9" pos:end="310:31"><sizeof pos:start="310:9" pos:end="310:31">sizeof<argument_list pos:start="310:15" pos:end="310:31">(<argument pos:start="310:16" pos:end="310:30"><expr pos:start="310:16" pos:end="310:30"><name pos:start="310:16" pos:end="310:30"><name pos:start="310:16" pos:end="310:22">address</name><operator pos:start="310:23" pos:end="310:24">-&gt;</operator><name pos:start="310:25" pos:end="310:30">s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="312:5" pos:end="312:79"><expr pos:start="312:5" pos:end="312:78"><call pos:start="312:5" pos:end="312:78"><name pos:start="312:5" pos:end="312:33"><name pos:start="312:5" pos:end="312:7">env</name><operator pos:start="312:8" pos:end="312:9">-&gt;</operator><name pos:start="312:10" pos:end="312:33">ReleaseByteArrayElements</name></name><argument_list pos:start="312:34" pos:end="312:78">(<argument pos:start="312:35" pos:end="312:46"><expr pos:start="312:35" pos:end="312:46"><name pos:start="312:35" pos:end="312:46">java_address</name></expr></argument>, <argument pos:start="312:49" pos:end="312:66"><expr pos:start="312:49" pos:end="312:66"><name pos:start="312:49" pos:end="312:66">java_address_bytes</name></expr></argument>, <argument pos:start="312:69" pos:end="312:77"><expr pos:start="312:69" pos:end="312:77"><name pos:start="312:69" pos:end="312:77">JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="314:5" pos:end="314:13">return <expr pos:start="314:12" pos:end="314:12"><literal type="number" pos:start="314:12" pos:end="314:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="317:1" pos:end="321:3">/**
 * Converts a native address structure to a 4-byte array. Throws a
 * NullPointerException or an IOException in case of error. This is
 * signaled by a return value of -1. The normal return value is 0.
 */</comment>
<function pos:start="322:1" pos:end="342:1"><type pos:start="322:1" pos:end="322:10"><specifier pos:start="322:1" pos:end="322:6">static</specifier> <name pos:start="322:8" pos:end="322:10">int</name></type> <name pos:start="322:12" pos:end="322:32">structInToJavaAddress</name><parameter_list pos:start="322:33" pos:end="323:70">(
        <parameter pos:start="323:9" pos:end="323:19"><decl pos:start="323:9" pos:end="323:19"><type pos:start="323:9" pos:end="323:19"><name pos:start="323:9" pos:end="323:14">JNIEnv</name> <modifier pos:start="323:16" pos:end="323:16">*</modifier></type><name pos:start="323:17" pos:end="323:19">env</name></decl></parameter>, <parameter pos:start="323:22" pos:end="323:44"><decl pos:start="323:22" pos:end="323:44"><type pos:start="323:22" pos:end="323:44"><name pos:start="323:22" pos:end="323:35"><name pos:start="323:22" pos:end="323:27">struct</name> <name pos:start="323:29" pos:end="323:35">in_addr</name></name> <modifier pos:start="323:37" pos:end="323:37">*</modifier></type><name pos:start="323:38" pos:end="323:44">address</name></decl></parameter>, <parameter pos:start="323:47" pos:end="323:69"><decl pos:start="323:47" pos:end="323:69"><type pos:start="323:47" pos:end="323:69"><name pos:start="323:47" pos:end="323:56">jbyteArray</name></type> <name pos:start="323:58" pos:end="323:69">java_address</name></decl></parameter>)</parameter_list> <block pos:start="323:72" pos:end="342:1">{<block_content pos:start="325:5" pos:end="341:13">

    <if_stmt pos:start="325:5" pos:end="327:5"><if pos:start="325:5" pos:end="327:5">if <condition pos:start="325:8" pos:end="325:29">(<expr pos:start="325:9" pos:end="325:28"><name pos:start="325:9" pos:end="325:20">java_address</name> <operator pos:start="325:22" pos:end="325:23">==</operator> <name pos:start="325:25" pos:end="325:28">NULL</name></expr>)</condition> <block pos:start="325:31" pos:end="327:5">{<block_content pos:start="326:9" pos:end="326:18">
        <return pos:start="326:9" pos:end="326:18">return <expr pos:start="326:16" pos:end="326:17"><operator pos:start="326:16" pos:end="326:16">-</operator><literal type="number" pos:start="326:17" pos:end="326:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="329:5" pos:end="331:5"><if pos:start="329:5" pos:end="331:5">if <condition pos:start="329:8" pos:end="329:69">(<expr pos:start="329:9" pos:end="329:68"><call pos:start="329:9" pos:end="329:41"><name pos:start="329:9" pos:end="329:27"><name pos:start="329:9" pos:end="329:11">env</name><operator pos:start="329:12" pos:end="329:13">-&gt;</operator><name pos:start="329:14" pos:end="329:27">GetArrayLength</name></name><argument_list pos:start="329:28" pos:end="329:41">(<argument pos:start="329:29" pos:end="329:40"><expr pos:start="329:29" pos:end="329:40"><name pos:start="329:29" pos:end="329:40">java_address</name></expr></argument>)</argument_list></call> <operator pos:start="329:43" pos:end="329:44">!=</operator> <sizeof pos:start="329:46" pos:end="329:68">sizeof<argument_list pos:start="329:52" pos:end="329:68">(<argument pos:start="329:53" pos:end="329:67"><expr pos:start="329:53" pos:end="329:67"><name pos:start="329:53" pos:end="329:67"><name pos:start="329:53" pos:end="329:59">address</name><operator pos:start="329:60" pos:end="329:61">-&gt;</operator><name pos:start="329:62" pos:end="329:67">s_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="329:71" pos:end="331:5">{<block_content pos:start="330:9" pos:end="330:18">
        <return pos:start="330:9" pos:end="330:18">return <expr pos:start="330:16" pos:end="330:17"><operator pos:start="330:16" pos:end="330:16">-</operator><literal type="number" pos:start="330:17" pos:end="330:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="333:5" pos:end="333:30"><decl pos:start="333:5" pos:end="333:29"><type pos:start="333:5" pos:end="333:11"><name pos:start="333:5" pos:end="333:9">jbyte</name> <modifier pos:start="333:11" pos:end="333:11">*</modifier></type><name pos:start="333:12" pos:end="333:29">java_address_bytes</name></decl>;</decl_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:71"><expr pos:start="335:5" pos:end="335:70"><name pos:start="335:5" pos:end="335:22">java_address_bytes</name> <operator pos:start="335:24" pos:end="335:24">=</operator> <call pos:start="335:26" pos:end="335:70"><name pos:start="335:26" pos:end="335:50"><name pos:start="335:26" pos:end="335:28">env</name><operator pos:start="335:29" pos:end="335:30">-&gt;</operator><name pos:start="335:31" pos:end="335:50">GetByteArrayElements</name></name><argument_list pos:start="335:51" pos:end="335:70">(<argument pos:start="335:52" pos:end="335:63"><expr pos:start="335:52" pos:end="335:63"><name pos:start="335:52" pos:end="335:63">java_address</name></expr></argument>, <argument pos:start="335:66" pos:end="335:69"><expr pos:start="335:66" pos:end="335:69"><name pos:start="335:66" pos:end="335:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:76"><expr pos:start="337:5" pos:end="337:75"><call pos:start="337:5" pos:end="337:75"><name pos:start="337:5" pos:end="337:10">memcpy</name><argument_list pos:start="337:11" pos:end="337:75">(<argument pos:start="337:12" pos:end="337:29"><expr pos:start="337:12" pos:end="337:29"><name pos:start="337:12" pos:end="337:29">java_address_bytes</name></expr></argument>, <argument pos:start="337:32" pos:end="337:49"><expr pos:start="337:32" pos:end="337:49"><operator pos:start="337:32" pos:end="337:32">&amp;</operator><operator pos:start="337:33" pos:end="337:33">(</operator><name pos:start="337:34" pos:end="337:48"><name pos:start="337:34" pos:end="337:40">address</name><operator pos:start="337:41" pos:end="337:42">-&gt;</operator><name pos:start="337:43" pos:end="337:48">s_addr</name></name><operator pos:start="337:49" pos:end="337:49">)</operator></expr></argument>, <argument pos:start="337:52" pos:end="337:74"><expr pos:start="337:52" pos:end="337:74"><sizeof pos:start="337:52" pos:end="337:74">sizeof<argument_list pos:start="337:58" pos:end="337:74">(<argument pos:start="337:59" pos:end="337:73"><expr pos:start="337:59" pos:end="337:73"><name pos:start="337:59" pos:end="337:73"><name pos:start="337:59" pos:end="337:65">address</name><operator pos:start="337:66" pos:end="337:67">-&gt;</operator><name pos:start="337:68" pos:end="337:73">s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:71"><expr pos:start="339:5" pos:end="339:70"><call pos:start="339:5" pos:end="339:70"><name pos:start="339:5" pos:end="339:33"><name pos:start="339:5" pos:end="339:7">env</name><operator pos:start="339:8" pos:end="339:9">-&gt;</operator><name pos:start="339:10" pos:end="339:33">ReleaseByteArrayElements</name></name><argument_list pos:start="339:34" pos:end="339:70">(<argument pos:start="339:35" pos:end="339:46"><expr pos:start="339:35" pos:end="339:46"><name pos:start="339:35" pos:end="339:46">java_address</name></expr></argument>, <argument pos:start="339:49" pos:end="339:66"><expr pos:start="339:49" pos:end="339:66"><name pos:start="339:49" pos:end="339:66">java_address_bytes</name></expr></argument>, <argument pos:start="339:69" pos:end="339:69"><expr pos:start="339:69" pos:end="339:69"><literal type="number" pos:start="339:69" pos:end="339:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="341:5" pos:end="341:13">return <expr pos:start="341:12" pos:end="341:12"><literal type="number" pos:start="341:12" pos:end="341:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="344:1" pos:end="349:3">/**
 * Converts a native address structure to an InetAddress object.
 * Throws a NullPointerException or an IOException in case of
 * error. This is signaled by a return value of -1. The normal
 * return value is 0.
 */</comment>
<function pos:start="350:1" pos:end="366:1"><type pos:start="350:1" pos:end="350:10"><specifier pos:start="350:1" pos:end="350:6">static</specifier> <name pos:start="350:8" pos:end="350:10">int</name></type> <name pos:start="350:12" pos:end="350:37">socketAddressToInetAddress</name><parameter_list pos:start="350:38" pos:end="351:72">(<parameter pos:start="350:39" pos:end="350:49"><decl pos:start="350:39" pos:end="350:49"><type pos:start="350:39" pos:end="350:49"><name pos:start="350:39" pos:end="350:44">JNIEnv</name> <modifier pos:start="350:46" pos:end="350:46">*</modifier></type><name pos:start="350:47" pos:end="350:49">env</name></decl></parameter>,
        <parameter pos:start="351:9" pos:end="351:39"><decl pos:start="351:9" pos:end="351:39"><type pos:start="351:9" pos:end="351:39"><name pos:start="351:9" pos:end="351:26"><name pos:start="351:9" pos:end="351:14">struct</name> <name pos:start="351:16" pos:end="351:26">sockaddr_in</name></name> <modifier pos:start="351:28" pos:end="351:28">*</modifier></type><name pos:start="351:29" pos:end="351:39">sockaddress</name></decl></parameter>, <parameter pos:start="351:42" pos:end="351:60"><decl pos:start="351:42" pos:end="351:60"><type pos:start="351:42" pos:end="351:60"><name pos:start="351:42" pos:end="351:48">jobject</name></type> <name pos:start="351:50" pos:end="351:60">inetaddress</name></decl></parameter>, <parameter pos:start="351:63" pos:end="351:71"><decl pos:start="351:63" pos:end="351:71"><type pos:start="351:63" pos:end="351:71"><name pos:start="351:63" pos:end="351:65">int</name> <modifier pos:start="351:67" pos:end="351:67">*</modifier></type><name pos:start="351:68" pos:end="351:71">port</name></decl></parameter>)</parameter_list> <block pos:start="351:74" pos:end="366:1">{<block_content pos:start="353:5" pos:end="365:13">

    <decl_stmt pos:start="353:5" pos:end="353:25"><decl pos:start="353:5" pos:end="353:24"><type pos:start="353:5" pos:end="353:14"><name pos:start="353:5" pos:end="353:14">jbyteArray</name></type> <name pos:start="353:16" pos:end="353:24">ipaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="354:5" pos:end="354:15"><decl pos:start="354:5" pos:end="354:14"><type pos:start="354:5" pos:end="354:7"><name pos:start="354:5" pos:end="354:7">int</name></type> <name pos:start="354:9" pos:end="354:14">result</name></decl>;</decl_stmt>

    <expr_stmt pos:start="356:5" pos:end="357:43"><expr pos:start="356:5" pos:end="357:42"><name pos:start="356:5" pos:end="356:13">ipaddress</name> <operator pos:start="356:15" pos:end="356:15">=</operator> <operator pos:start="356:17" pos:end="356:17">(</operator><name pos:start="356:18" pos:end="356:27">jbyteArray</name><operator pos:start="356:28" pos:end="356:28">)</operator><call pos:start="356:29" pos:end="357:42"><name pos:start="356:29" pos:end="356:47"><name pos:start="356:29" pos:end="356:31">env</name><operator pos:start="356:32" pos:end="356:33">-&gt;</operator><name pos:start="356:34" pos:end="356:47">GetObjectField</name></name><argument_list pos:start="356:48" pos:end="357:42">(<argument pos:start="356:49" pos:end="356:59"><expr pos:start="356:49" pos:end="356:59"><name pos:start="356:49" pos:end="356:59">inetaddress</name></expr></argument>,
            <argument pos:start="357:13" pos:end="357:41"><expr pos:start="357:13" pos:end="357:41"><name pos:start="357:13" pos:end="357:41"><name pos:start="357:13" pos:end="357:25">gCachedFields</name><operator pos:start="357:26" pos:end="357:26">.</operator><name pos:start="357:27" pos:end="357:41">iaddr_ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="359:5" pos:end="361:5"><if pos:start="359:5" pos:end="361:5">if <condition pos:start="359:8" pos:end="359:74">(<expr pos:start="359:9" pos:end="359:73"><call pos:start="359:9" pos:end="359:69"><name pos:start="359:9" pos:end="359:29">structInToJavaAddress</name><argument_list pos:start="359:30" pos:end="359:69">(<argument pos:start="359:31" pos:end="359:33"><expr pos:start="359:31" pos:end="359:33"><name pos:start="359:31" pos:end="359:33">env</name></expr></argument>, <argument pos:start="359:36" pos:end="359:57"><expr pos:start="359:36" pos:end="359:57"><operator pos:start="359:36" pos:end="359:36">&amp;</operator><name pos:start="359:37" pos:end="359:57"><name pos:start="359:37" pos:end="359:47">sockaddress</name><operator pos:start="359:48" pos:end="359:49">-&gt;</operator><name pos:start="359:50" pos:end="359:57">sin_addr</name></name></expr></argument>, <argument pos:start="359:60" pos:end="359:68"><expr pos:start="359:60" pos:end="359:68"><name pos:start="359:60" pos:end="359:68">ipaddress</name></expr></argument>)</argument_list></call> <operator pos:start="359:71" pos:end="359:71">&lt;</operator> <literal type="number" pos:start="359:73" pos:end="359:73">0</literal></expr>)</condition> <block pos:start="359:76" pos:end="361:5">{<block_content pos:start="360:9" pos:end="360:18">
        <return pos:start="360:9" pos:end="360:18">return <expr pos:start="360:16" pos:end="360:17"><operator pos:start="360:16" pos:end="360:16">-</operator><literal type="number" pos:start="360:17" pos:end="360:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:41"><expr pos:start="363:5" pos:end="363:40"><operator pos:start="363:5" pos:end="363:5">*</operator><name pos:start="363:6" pos:end="363:9">port</name> <operator pos:start="363:11" pos:end="363:11">=</operator> <call pos:start="363:13" pos:end="363:40"><name pos:start="363:13" pos:end="363:17">ntohs</name><argument_list pos:start="363:18" pos:end="363:40">(<argument pos:start="363:19" pos:end="363:39"><expr pos:start="363:19" pos:end="363:39"><name pos:start="363:19" pos:end="363:39"><name pos:start="363:19" pos:end="363:29">sockaddress</name><operator pos:start="363:30" pos:end="363:31">-&gt;</operator><name pos:start="363:32" pos:end="363:39">sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="365:5" pos:end="365:13">return <expr pos:start="365:12" pos:end="365:12"><literal type="number" pos:start="365:12" pos:end="365:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="368:1" pos:end="373:3">/**
 * Converts an InetAddress object to a native address structure.
 * Throws a NullPointerException or an IOException in case of
 * error. This is signaled by a return value of -1. The normal
 * return value is 0.
 */</comment>
<function pos:start="374:1" pos:end="393:1"><type pos:start="374:1" pos:end="374:10"><specifier pos:start="374:1" pos:end="374:6">static</specifier> <name pos:start="374:8" pos:end="374:10">int</name></type> <name pos:start="374:12" pos:end="374:37">inetAddressToSocketAddress</name><parameter_list pos:start="374:38" pos:end="375:71">(<parameter pos:start="374:39" pos:end="374:49"><decl pos:start="374:39" pos:end="374:49"><type pos:start="374:39" pos:end="374:49"><name pos:start="374:39" pos:end="374:44">JNIEnv</name> <modifier pos:start="374:46" pos:end="374:46">*</modifier></type><name pos:start="374:47" pos:end="374:49">env</name></decl></parameter>,
        <parameter pos:start="375:9" pos:end="375:27"><decl pos:start="375:9" pos:end="375:27"><type pos:start="375:9" pos:end="375:27"><name pos:start="375:9" pos:end="375:15">jobject</name></type> <name pos:start="375:17" pos:end="375:27">inetaddress</name></decl></parameter>, <parameter pos:start="375:30" pos:end="375:37"><decl pos:start="375:30" pos:end="375:37"><type pos:start="375:30" pos:end="375:37"><name pos:start="375:30" pos:end="375:32">int</name></type> <name pos:start="375:34" pos:end="375:37">port</name></decl></parameter>, <parameter pos:start="375:40" pos:end="375:70"><decl pos:start="375:40" pos:end="375:70"><type pos:start="375:40" pos:end="375:70"><name pos:start="375:40" pos:end="375:57"><name pos:start="375:40" pos:end="375:45">struct</name> <name pos:start="375:47" pos:end="375:57">sockaddr_in</name></name> <modifier pos:start="375:59" pos:end="375:59">*</modifier></type><name pos:start="375:60" pos:end="375:70">sockaddress</name></decl></parameter>)</parameter_list> <block pos:start="375:73" pos:end="393:1">{<block_content pos:start="377:5" pos:end="392:13">

    <decl_stmt pos:start="377:5" pos:end="377:25"><decl pos:start="377:5" pos:end="377:24"><type pos:start="377:5" pos:end="377:14"><name pos:start="377:5" pos:end="377:14">jbyteArray</name></type> <name pos:start="377:16" pos:end="377:24">ipaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="378:5" pos:end="378:15"><decl pos:start="378:5" pos:end="378:14"><type pos:start="378:5" pos:end="378:7"><name pos:start="378:5" pos:end="378:7">int</name></type> <name pos:start="378:9" pos:end="378:14">result</name></decl>;</decl_stmt>

    <expr_stmt pos:start="380:5" pos:end="381:43"><expr pos:start="380:5" pos:end="381:42"><name pos:start="380:5" pos:end="380:13">ipaddress</name> <operator pos:start="380:15" pos:end="380:15">=</operator> <operator pos:start="380:17" pos:end="380:17">(</operator><name pos:start="380:18" pos:end="380:27">jbyteArray</name><operator pos:start="380:28" pos:end="380:28">)</operator><call pos:start="380:29" pos:end="381:42"><name pos:start="380:29" pos:end="380:47"><name pos:start="380:29" pos:end="380:31">env</name><operator pos:start="380:32" pos:end="380:33">-&gt;</operator><name pos:start="380:34" pos:end="380:47">GetObjectField</name></name><argument_list pos:start="380:48" pos:end="381:42">(<argument pos:start="380:49" pos:end="380:59"><expr pos:start="380:49" pos:end="380:59"><name pos:start="380:49" pos:end="380:59">inetaddress</name></expr></argument>,
            <argument pos:start="381:13" pos:end="381:41"><expr pos:start="381:13" pos:end="381:41"><name pos:start="381:13" pos:end="381:41"><name pos:start="381:13" pos:end="381:25">gCachedFields</name><operator pos:start="381:26" pos:end="381:26">.</operator><name pos:start="381:27" pos:end="381:41">iaddr_ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:48"><expr pos:start="383:5" pos:end="383:47"><call pos:start="383:5" pos:end="383:47"><name pos:start="383:5" pos:end="383:10">memset</name><argument_list pos:start="383:11" pos:end="383:47">(<argument pos:start="383:12" pos:end="383:22"><expr pos:start="383:12" pos:end="383:22"><name pos:start="383:12" pos:end="383:22">sockaddress</name></expr></argument>, <argument pos:start="383:25" pos:end="383:25"><expr pos:start="383:25" pos:end="383:25"><literal type="number" pos:start="383:25" pos:end="383:25">0</literal></expr></argument>, <argument pos:start="383:28" pos:end="383:46"><expr pos:start="383:28" pos:end="383:46"><sizeof pos:start="383:28" pos:end="383:46">sizeof<argument_list pos:start="383:34" pos:end="383:46">(<argument pos:start="383:35" pos:end="383:45"><expr pos:start="383:35" pos:end="383:45"><name pos:start="383:35" pos:end="383:45">sockaddress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:38"><expr pos:start="385:5" pos:end="385:37"><name pos:start="385:5" pos:end="385:27"><name pos:start="385:5" pos:end="385:15">sockaddress</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:27">sin_family</name></name> <operator pos:start="385:29" pos:end="385:29">=</operator> <name pos:start="385:31" pos:end="385:37">AF_INET</name></expr>;</expr_stmt>
    <expr_stmt pos:start="386:5" pos:end="386:40"><expr pos:start="386:5" pos:end="386:39"><name pos:start="386:5" pos:end="386:25"><name pos:start="386:5" pos:end="386:15">sockaddress</name><operator pos:start="386:16" pos:end="386:17">-&gt;</operator><name pos:start="386:18" pos:end="386:25">sin_port</name></name> <operator pos:start="386:27" pos:end="386:27">=</operator> <call pos:start="386:29" pos:end="386:39"><name pos:start="386:29" pos:end="386:33">htons</name><argument_list pos:start="386:34" pos:end="386:39">(<argument pos:start="386:35" pos:end="386:38"><expr pos:start="386:35" pos:end="386:38"><name pos:start="386:35" pos:end="386:38">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="388:5" pos:end="390:5"><if pos:start="388:5" pos:end="390:5">if <condition pos:start="388:8" pos:end="388:76">(<expr pos:start="388:9" pos:end="388:75"><call pos:start="388:9" pos:end="388:71"><name pos:start="388:9" pos:end="388:29">javaAddressToStructIn</name><argument_list pos:start="388:30" pos:end="388:71">(<argument pos:start="388:31" pos:end="388:33"><expr pos:start="388:31" pos:end="388:33"><name pos:start="388:31" pos:end="388:33">env</name></expr></argument>, <argument pos:start="388:36" pos:end="388:44"><expr pos:start="388:36" pos:end="388:44"><name pos:start="388:36" pos:end="388:44">ipaddress</name></expr></argument>, <argument pos:start="388:47" pos:end="388:70"><expr pos:start="388:47" pos:end="388:70"><operator pos:start="388:47" pos:end="388:47">&amp;</operator><operator pos:start="388:48" pos:end="388:48">(</operator><name pos:start="388:49" pos:end="388:69"><name pos:start="388:49" pos:end="388:59">sockaddress</name><operator pos:start="388:60" pos:end="388:61">-&gt;</operator><name pos:start="388:62" pos:end="388:69">sin_addr</name></name><operator pos:start="388:70" pos:end="388:70">)</operator></expr></argument>)</argument_list></call> <operator pos:start="388:73" pos:end="388:73">&lt;</operator> <literal type="number" pos:start="388:75" pos:end="388:75">0</literal></expr>)</condition> <block pos:start="388:78" pos:end="390:5">{<block_content pos:start="389:9" pos:end="389:18">
        <return pos:start="389:9" pos:end="389:18">return <expr pos:start="389:16" pos:end="389:17"><operator pos:start="389:16" pos:end="389:16">-</operator><literal type="number" pos:start="389:17" pos:end="389:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="392:5" pos:end="392:13">return <expr pos:start="392:12" pos:end="392:12"><literal type="number" pos:start="392:12" pos:end="392:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="395:1" pos:end="411:1"><type pos:start="395:1" pos:end="395:14"><specifier pos:start="395:1" pos:end="395:6">static</specifier> <name pos:start="395:8" pos:end="395:14">jobject</name></type> <name pos:start="395:16" pos:end="395:36">structInToInetAddress</name><parameter_list pos:start="395:37" pos:end="395:74">(<parameter pos:start="395:38" pos:end="395:48"><decl pos:start="395:38" pos:end="395:48"><type pos:start="395:38" pos:end="395:48"><name pos:start="395:38" pos:end="395:43">JNIEnv</name> <modifier pos:start="395:45" pos:end="395:45">*</modifier></type><name pos:start="395:46" pos:end="395:48">env</name></decl></parameter>, <parameter pos:start="395:51" pos:end="395:73"><decl pos:start="395:51" pos:end="395:73"><type pos:start="395:51" pos:end="395:73"><name pos:start="395:51" pos:end="395:64"><name pos:start="395:51" pos:end="395:56">struct</name> <name pos:start="395:58" pos:end="395:64">in_addr</name></name> <modifier pos:start="395:66" pos:end="395:66">*</modifier></type><name pos:start="395:67" pos:end="395:73">address</name></decl></parameter>)</parameter_list> <block pos:start="395:76" pos:end="411:1">{<block_content pos:start="396:5" pos:end="410:53">
    <decl_stmt pos:start="396:5" pos:end="396:21"><decl pos:start="396:5" pos:end="396:20"><type pos:start="396:5" pos:end="396:14"><name pos:start="396:5" pos:end="396:14">jbyteArray</name></type> <name pos:start="396:16" pos:end="396:20">bytes</name></decl>;</decl_stmt>
    <decl_stmt pos:start="397:5" pos:end="397:16"><decl pos:start="397:5" pos:end="397:15"><type pos:start="397:5" pos:end="397:7"><name pos:start="397:5" pos:end="397:7">int</name></type> <name pos:start="397:9" pos:end="397:15">success</name></decl>;</decl_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:33"><expr pos:start="399:5" pos:end="399:32"><name pos:start="399:5" pos:end="399:9">bytes</name> <operator pos:start="399:11" pos:end="399:11">=</operator> <call pos:start="399:13" pos:end="399:32"><name pos:start="399:13" pos:end="399:29"><name pos:start="399:13" pos:end="399:15">env</name><operator pos:start="399:16" pos:end="399:17">-&gt;</operator><name pos:start="399:18" pos:end="399:29">NewByteArray</name></name><argument_list pos:start="399:30" pos:end="399:32">(<argument pos:start="399:31" pos:end="399:31"><expr pos:start="399:31" pos:end="399:31"><literal type="number" pos:start="399:31" pos:end="399:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="401:5" pos:end="403:5"><if pos:start="401:5" pos:end="403:5">if <condition pos:start="401:8" pos:end="401:22">(<expr pos:start="401:9" pos:end="401:21"><name pos:start="401:9" pos:end="401:13">bytes</name> <operator pos:start="401:15" pos:end="401:16">==</operator> <name pos:start="401:18" pos:end="401:21">NULL</name></expr>)</condition> <block pos:start="401:24" pos:end="403:5">{<block_content pos:start="402:9" pos:end="402:20">
        <return pos:start="402:9" pos:end="402:20">return <expr pos:start="402:16" pos:end="402:19"><name pos:start="402:16" pos:end="402:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="405:5" pos:end="407:5"><if pos:start="405:5" pos:end="407:5">if <condition pos:start="405:8" pos:end="405:55">(<expr pos:start="405:9" pos:end="405:54"><call pos:start="405:9" pos:end="405:50"><name pos:start="405:9" pos:end="405:29">structInToJavaAddress</name><argument_list pos:start="405:30" pos:end="405:50">(<argument pos:start="405:31" pos:end="405:33"><expr pos:start="405:31" pos:end="405:33"><name pos:start="405:31" pos:end="405:33">env</name></expr></argument>, <argument pos:start="405:36" pos:end="405:42"><expr pos:start="405:36" pos:end="405:42"><name pos:start="405:36" pos:end="405:42">address</name></expr></argument>, <argument pos:start="405:45" pos:end="405:49"><expr pos:start="405:45" pos:end="405:49"><name pos:start="405:45" pos:end="405:49">bytes</name></expr></argument>)</argument_list></call> <operator pos:start="405:52" pos:end="405:52">&lt;</operator> <literal type="number" pos:start="405:54" pos:end="405:54">0</literal></expr>)</condition> <block pos:start="405:57" pos:end="407:5">{<block_content pos:start="406:9" pos:end="406:20">
        <return pos:start="406:9" pos:end="406:20">return <expr pos:start="406:16" pos:end="406:19"><name pos:start="406:16" pos:end="406:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="409:5" pos:end="410:53">return <expr pos:start="409:12" pos:end="410:52"><call pos:start="409:12" pos:end="410:52"><name pos:start="409:12" pos:end="409:38"><name pos:start="409:12" pos:end="409:14">env</name><operator pos:start="409:15" pos:end="409:16">-&gt;</operator><name pos:start="409:17" pos:end="409:38">CallStaticObjectMethod</name></name><argument_list pos:start="409:39" pos:end="410:52">(<argument pos:start="409:40" pos:end="409:64"><expr pos:start="409:40" pos:end="409:64"><name pos:start="409:40" pos:end="409:64"><name pos:start="409:40" pos:end="409:52">gCachedFields</name><operator pos:start="409:53" pos:end="409:53">.</operator><name pos:start="409:54" pos:end="409:64">iaddr_class</name></name></expr></argument>,
            <argument pos:start="410:13" pos:end="410:44"><expr pos:start="410:13" pos:end="410:44"><name pos:start="410:13" pos:end="410:44"><name pos:start="410:13" pos:end="410:25">gCachedFields</name><operator pos:start="410:26" pos:end="410:26">.</operator><name pos:start="410:27" pos:end="410:44">iaddr_getbyaddress</name></name></expr></argument>, <argument pos:start="410:47" pos:end="410:51"><expr pos:start="410:47" pos:end="410:51"><name pos:start="410:47" pos:end="410:51">bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="413:1" pos:end="420:3">/**
 * Answer a new java.lang.Boolean object.
 *
 * @param env   pointer to the JNI library
 * @param anInt the Boolean constructor argument
 *
 * @return  the new Boolean
 */</comment>

<function pos:start="422:1" pos:end="429:1"><type pos:start="422:1" pos:end="422:14"><specifier pos:start="422:1" pos:end="422:6">static</specifier> <name pos:start="422:8" pos:end="422:14">jobject</name></type> <name pos:start="422:16" pos:end="422:33">newJavaLangBoolean</name><parameter_list pos:start="422:34" pos:end="422:59">(<parameter pos:start="422:35" pos:end="422:46"><decl pos:start="422:35" pos:end="422:46"><type pos:start="422:35" pos:end="422:46"><name pos:start="422:35" pos:end="422:40">JNIEnv</name> <modifier pos:start="422:42" pos:end="422:42">*</modifier></type> <name pos:start="422:44" pos:end="422:46">env</name></decl></parameter>, <parameter pos:start="422:49" pos:end="422:58"><decl pos:start="422:49" pos:end="422:58"><type pos:start="422:49" pos:end="422:58"><name pos:start="422:49" pos:end="422:52">jint</name></type> <name pos:start="422:54" pos:end="422:58">anInt</name></decl></parameter>)</parameter_list> <block pos:start="422:61" pos:end="429:1">{<block_content pos:start="423:5" pos:end="428:74">
    <decl_stmt pos:start="423:5" pos:end="423:21"><decl pos:start="423:5" pos:end="423:20"><type pos:start="423:5" pos:end="423:10"><name pos:start="423:5" pos:end="423:10">jclass</name></type> <name pos:start="423:12" pos:end="423:20">tempClass</name></decl>;</decl_stmt>
    <decl_stmt pos:start="424:5" pos:end="424:25"><decl pos:start="424:5" pos:end="424:24"><type pos:start="424:5" pos:end="424:13"><name pos:start="424:5" pos:end="424:13">jmethodID</name></type> <name pos:start="424:15" pos:end="424:24">tempMethod</name></decl>;</decl_stmt>

    <expr_stmt pos:start="426:5" pos:end="426:44"><expr pos:start="426:5" pos:end="426:43"><name pos:start="426:5" pos:end="426:13">tempClass</name> <operator pos:start="426:15" pos:end="426:15">=</operator> <name pos:start="426:17" pos:end="426:43"><name pos:start="426:17" pos:end="426:29">gCachedFields</name><operator pos:start="426:30" pos:end="426:30">.</operator><name pos:start="426:31" pos:end="426:43">boolean_class</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:50"><expr pos:start="427:5" pos:end="427:49"><name pos:start="427:5" pos:end="427:14">tempMethod</name> <operator pos:start="427:16" pos:end="427:16">=</operator> <name pos:start="427:18" pos:end="427:49"><name pos:start="427:18" pos:end="427:30">gCachedFields</name><operator pos:start="427:31" pos:end="427:31">.</operator><name pos:start="427:32" pos:end="427:49">boolean_class_init</name></name></expr>;</expr_stmt>
    <return pos:start="428:5" pos:end="428:74">return <expr pos:start="428:12" pos:end="428:73"><call pos:start="428:12" pos:end="428:73"><name pos:start="428:12" pos:end="428:25"><name pos:start="428:12" pos:end="428:14">env</name><operator pos:start="428:15" pos:end="428:16">-&gt;</operator><name pos:start="428:17" pos:end="428:25">NewObject</name></name><argument_list pos:start="428:26" pos:end="428:73">(<argument pos:start="428:27" pos:end="428:35"><expr pos:start="428:27" pos:end="428:35"><name pos:start="428:27" pos:end="428:35">tempClass</name></expr></argument>, <argument pos:start="428:38" pos:end="428:47"><expr pos:start="428:38" pos:end="428:47"><name pos:start="428:38" pos:end="428:47">tempMethod</name></expr></argument>, <argument pos:start="428:50" pos:end="428:72"><expr pos:start="428:50" pos:end="428:72"><operator pos:start="428:50" pos:end="428:50">(</operator><name pos:start="428:51" pos:end="428:58">jboolean</name><operator pos:start="428:59" pos:end="428:59">)</operator> <operator pos:start="428:61" pos:end="428:61">(</operator><name pos:start="428:62" pos:end="428:66">anInt</name> <operator pos:start="428:68" pos:end="428:69">!=</operator> <literal type="number" pos:start="428:71" pos:end="428:71">0</literal><operator pos:start="428:72" pos:end="428:72">)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="431:1" pos:end="438:3">/**
 * Answer a new java.lang.Byte object.
 *
 * @param env   pointer to the JNI library
 * @param anInt the Byte constructor argument
 *
 * @return  the new Byte
 */</comment>

<function pos:start="440:1" pos:end="447:1"><type pos:start="440:1" pos:end="440:14"><specifier pos:start="440:1" pos:end="440:6">static</specifier> <name pos:start="440:8" pos:end="440:14">jobject</name></type> <name pos:start="440:16" pos:end="440:30">newJavaLangByte</name><parameter_list pos:start="440:31" pos:end="440:55">(<parameter pos:start="440:32" pos:end="440:43"><decl pos:start="440:32" pos:end="440:43"><type pos:start="440:32" pos:end="440:43"><name pos:start="440:32" pos:end="440:37">JNIEnv</name> <modifier pos:start="440:39" pos:end="440:39">*</modifier></type> <name pos:start="440:41" pos:end="440:43">env</name></decl></parameter>, <parameter pos:start="440:46" pos:end="440:54"><decl pos:start="440:46" pos:end="440:54"><type pos:start="440:46" pos:end="440:54"><name pos:start="440:46" pos:end="440:50">jbyte</name></type> <name pos:start="440:52" pos:end="440:54">val</name></decl></parameter>)</parameter_list> <block pos:start="440:57" pos:end="447:1">{<block_content pos:start="441:5" pos:end="446:54">
    <decl_stmt pos:start="441:5" pos:end="441:21"><decl pos:start="441:5" pos:end="441:20"><type pos:start="441:5" pos:end="441:10"><name pos:start="441:5" pos:end="441:10">jclass</name></type> <name pos:start="441:12" pos:end="441:20">tempClass</name></decl>;</decl_stmt>
    <decl_stmt pos:start="442:5" pos:end="442:25"><decl pos:start="442:5" pos:end="442:24"><type pos:start="442:5" pos:end="442:13"><name pos:start="442:5" pos:end="442:13">jmethodID</name></type> <name pos:start="442:15" pos:end="442:24">tempMethod</name></decl>;</decl_stmt>

    <expr_stmt pos:start="444:5" pos:end="444:41"><expr pos:start="444:5" pos:end="444:40"><name pos:start="444:5" pos:end="444:13">tempClass</name> <operator pos:start="444:15" pos:end="444:15">=</operator> <name pos:start="444:17" pos:end="444:40"><name pos:start="444:17" pos:end="444:29">gCachedFields</name><operator pos:start="444:30" pos:end="444:30">.</operator><name pos:start="444:31" pos:end="444:40">byte_class</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="445:5" pos:end="445:47"><expr pos:start="445:5" pos:end="445:46"><name pos:start="445:5" pos:end="445:14">tempMethod</name> <operator pos:start="445:16" pos:end="445:16">=</operator> <name pos:start="445:18" pos:end="445:46"><name pos:start="445:18" pos:end="445:30">gCachedFields</name><operator pos:start="445:31" pos:end="445:31">.</operator><name pos:start="445:32" pos:end="445:46">byte_class_init</name></name></expr>;</expr_stmt>
    <return pos:start="446:5" pos:end="446:54">return <expr pos:start="446:12" pos:end="446:53"><call pos:start="446:12" pos:end="446:53"><name pos:start="446:12" pos:end="446:25"><name pos:start="446:12" pos:end="446:14">env</name><operator pos:start="446:15" pos:end="446:16">-&gt;</operator><name pos:start="446:17" pos:end="446:25">NewObject</name></name><argument_list pos:start="446:26" pos:end="446:53">(<argument pos:start="446:27" pos:end="446:35"><expr pos:start="446:27" pos:end="446:35"><name pos:start="446:27" pos:end="446:35">tempClass</name></expr></argument>, <argument pos:start="446:38" pos:end="446:47"><expr pos:start="446:38" pos:end="446:47"><name pos:start="446:38" pos:end="446:47">tempMethod</name></expr></argument>, <argument pos:start="446:50" pos:end="446:52"><expr pos:start="446:50" pos:end="446:52"><name pos:start="446:50" pos:end="446:52">val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="449:1" pos:end="456:3">/**
 * Answer a new java.lang.Integer object.
 *
 * @param env   pointer to the JNI library
 * @param anInt the Integer constructor argument
 *
 * @return  the new Integer
 */</comment>

<function pos:start="458:1" pos:end="465:1"><type pos:start="458:1" pos:end="458:14"><specifier pos:start="458:1" pos:end="458:6">static</specifier> <name pos:start="458:8" pos:end="458:14">jobject</name></type> <name pos:start="458:16" pos:end="458:33">newJavaLangInteger</name><parameter_list pos:start="458:34" pos:end="458:59">(<parameter pos:start="458:35" pos:end="458:46"><decl pos:start="458:35" pos:end="458:46"><type pos:start="458:35" pos:end="458:46"><name pos:start="458:35" pos:end="458:40">JNIEnv</name> <modifier pos:start="458:42" pos:end="458:42">*</modifier></type> <name pos:start="458:44" pos:end="458:46">env</name></decl></parameter>, <parameter pos:start="458:49" pos:end="458:58"><decl pos:start="458:49" pos:end="458:58"><type pos:start="458:49" pos:end="458:58"><name pos:start="458:49" pos:end="458:52">jint</name></type> <name pos:start="458:54" pos:end="458:58">anInt</name></decl></parameter>)</parameter_list> <block pos:start="458:61" pos:end="465:1">{<block_content pos:start="459:5" pos:end="464:56">
    <decl_stmt pos:start="459:5" pos:end="459:21"><decl pos:start="459:5" pos:end="459:20"><type pos:start="459:5" pos:end="459:10"><name pos:start="459:5" pos:end="459:10">jclass</name></type> <name pos:start="459:12" pos:end="459:20">tempClass</name></decl>;</decl_stmt>
    <decl_stmt pos:start="460:5" pos:end="460:25"><decl pos:start="460:5" pos:end="460:24"><type pos:start="460:5" pos:end="460:13"><name pos:start="460:5" pos:end="460:13">jmethodID</name></type> <name pos:start="460:15" pos:end="460:24">tempMethod</name></decl>;</decl_stmt>

    <expr_stmt pos:start="462:5" pos:end="462:44"><expr pos:start="462:5" pos:end="462:43"><name pos:start="462:5" pos:end="462:13">tempClass</name> <operator pos:start="462:15" pos:end="462:15">=</operator> <name pos:start="462:17" pos:end="462:43"><name pos:start="462:17" pos:end="462:29">gCachedFields</name><operator pos:start="462:30" pos:end="462:30">.</operator><name pos:start="462:31" pos:end="462:43">integer_class</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="463:5" pos:end="463:50"><expr pos:start="463:5" pos:end="463:49"><name pos:start="463:5" pos:end="463:14">tempMethod</name> <operator pos:start="463:16" pos:end="463:16">=</operator> <name pos:start="463:18" pos:end="463:49"><name pos:start="463:18" pos:end="463:30">gCachedFields</name><operator pos:start="463:31" pos:end="463:31">.</operator><name pos:start="463:32" pos:end="463:49">integer_class_init</name></name></expr>;</expr_stmt>
    <return pos:start="464:5" pos:end="464:56">return <expr pos:start="464:12" pos:end="464:55"><call pos:start="464:12" pos:end="464:55"><name pos:start="464:12" pos:end="464:25"><name pos:start="464:12" pos:end="464:14">env</name><operator pos:start="464:15" pos:end="464:16">-&gt;</operator><name pos:start="464:17" pos:end="464:25">NewObject</name></name><argument_list pos:start="464:26" pos:end="464:55">(<argument pos:start="464:27" pos:end="464:35"><expr pos:start="464:27" pos:end="464:35"><name pos:start="464:27" pos:end="464:35">tempClass</name></expr></argument>, <argument pos:start="464:38" pos:end="464:47"><expr pos:start="464:38" pos:end="464:47"><name pos:start="464:38" pos:end="464:47">tempMethod</name></expr></argument>, <argument pos:start="464:50" pos:end="464:54"><expr pos:start="464:50" pos:end="464:54"><name pos:start="464:50" pos:end="464:54">anInt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="467:1" pos:end="474:3">/**
 * Answer a new java.lang.String object.
 *
 * @param env   pointer to the JNI library
 * @param anInt the byte[] constructor argument
 *
 * @return  the new String
 */</comment>

<function pos:start="476:1" pos:end="483:1"><type pos:start="476:1" pos:end="476:14"><specifier pos:start="476:1" pos:end="476:6">static</specifier> <name pos:start="476:8" pos:end="476:14">jobject</name></type> <name pos:start="476:16" pos:end="476:32">newJavaLangString</name><parameter_list pos:start="476:33" pos:end="476:64">(<parameter pos:start="476:34" pos:end="476:45"><decl pos:start="476:34" pos:end="476:45"><type pos:start="476:34" pos:end="476:45"><name pos:start="476:34" pos:end="476:39">JNIEnv</name> <modifier pos:start="476:41" pos:end="476:41">*</modifier></type> <name pos:start="476:43" pos:end="476:45">env</name></decl></parameter>, <parameter pos:start="476:48" pos:end="476:63"><decl pos:start="476:48" pos:end="476:63"><type pos:start="476:48" pos:end="476:63"><name pos:start="476:48" pos:end="476:57">jbyteArray</name></type> <name pos:start="476:59" pos:end="476:63">bytes</name></decl></parameter>)</parameter_list> <block pos:start="476:66" pos:end="483:1">{<block_content pos:start="477:5" pos:end="482:69">
    <decl_stmt pos:start="477:5" pos:end="477:21"><decl pos:start="477:5" pos:end="477:20"><type pos:start="477:5" pos:end="477:10"><name pos:start="477:5" pos:end="477:10">jclass</name></type> <name pos:start="477:12" pos:end="477:20">tempClass</name></decl>;</decl_stmt>
    <decl_stmt pos:start="478:5" pos:end="478:25"><decl pos:start="478:5" pos:end="478:24"><type pos:start="478:5" pos:end="478:13"><name pos:start="478:5" pos:end="478:13">jmethodID</name></type> <name pos:start="478:15" pos:end="478:24">tempMethod</name></decl>;</decl_stmt>

    <expr_stmt pos:start="480:5" pos:end="480:43"><expr pos:start="480:5" pos:end="480:42"><name pos:start="480:5" pos:end="480:13">tempClass</name> <operator pos:start="480:15" pos:end="480:15">=</operator> <name pos:start="480:17" pos:end="480:42"><name pos:start="480:17" pos:end="480:29">gCachedFields</name><operator pos:start="480:30" pos:end="480:30">.</operator><name pos:start="480:31" pos:end="480:42">string_class</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="481:5" pos:end="481:49"><expr pos:start="481:5" pos:end="481:48"><name pos:start="481:5" pos:end="481:14">tempMethod</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <name pos:start="481:18" pos:end="481:48"><name pos:start="481:18" pos:end="481:30">gCachedFields</name><operator pos:start="481:31" pos:end="481:31">.</operator><name pos:start="481:32" pos:end="481:48">string_class_init</name></name></expr>;</expr_stmt>
    <return pos:start="482:5" pos:end="482:69">return <expr pos:start="482:12" pos:end="482:68"><call pos:start="482:12" pos:end="482:68"><name pos:start="482:12" pos:end="482:25"><name pos:start="482:12" pos:end="482:14">env</name><operator pos:start="482:15" pos:end="482:16">-&gt;</operator><name pos:start="482:17" pos:end="482:25">NewObject</name></name><argument_list pos:start="482:26" pos:end="482:68">(<argument pos:start="482:27" pos:end="482:35"><expr pos:start="482:27" pos:end="482:35"><name pos:start="482:27" pos:end="482:35">tempClass</name></expr></argument>, <argument pos:start="482:38" pos:end="482:47"><expr pos:start="482:38" pos:end="482:47"><name pos:start="482:38" pos:end="482:47">tempMethod</name></expr></argument>, <argument pos:start="482:50" pos:end="482:67"><expr pos:start="482:50" pos:end="482:67"><operator pos:start="482:50" pos:end="482:50">(</operator><name pos:start="482:51" pos:end="482:60">jbyteArray</name><operator pos:start="482:61" pos:end="482:61">)</operator> <name pos:start="482:63" pos:end="482:67">bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="485:1" pos:end="496:3">/**
 * Query OS for timestamp.
 * Retrieve the current value of system clock and convert to milliseconds.
 *
 * @param[in] portLibrary The port library.
 *
 * @return 0 on failure, time value in milliseconds on success.
 * @deprecated Use @ref time_hires_clock and @ref time_hires_delta
 *
 * technically, this should return I_64 since both timeval.tv_sec and
 * timeval.tv_usec are long
 */</comment>

<function pos:start="498:1" pos:end="504:1"><type pos:start="498:1" pos:end="498:10"><specifier pos:start="498:1" pos:end="498:6">static</specifier> <name pos:start="498:8" pos:end="498:10">int</name></type> <name pos:start="498:12" pos:end="498:26">time_msec_clock</name><parameter_list pos:start="498:27" pos:end="498:28">()</parameter_list> <block pos:start="498:30" pos:end="504:1">{<block_content pos:start="499:5" pos:end="503:52">
    <decl_stmt pos:start="499:5" pos:end="499:22"><decl pos:start="499:5" pos:end="499:21"><type pos:start="499:5" pos:end="499:18"><name pos:start="499:5" pos:end="499:18"><name pos:start="499:5" pos:end="499:10">struct</name> <name pos:start="499:12" pos:end="499:18">timeval</name></name></type> <name pos:start="499:20" pos:end="499:21">tp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="500:5" pos:end="500:24"><decl pos:start="500:5" pos:end="500:23"><type pos:start="500:5" pos:end="500:19"><name pos:start="500:5" pos:end="500:19"><name pos:start="500:5" pos:end="500:10">struct</name> <name pos:start="500:12" pos:end="500:19">timezone</name></name></type> <name pos:start="500:21" pos:end="500:23">tzp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="502:5" pos:end="502:28"><expr pos:start="502:5" pos:end="502:27"><call pos:start="502:5" pos:end="502:27"><name pos:start="502:5" pos:end="502:16">gettimeofday</name><argument_list pos:start="502:17" pos:end="502:27">(<argument pos:start="502:18" pos:end="502:20"><expr pos:start="502:18" pos:end="502:20"><operator pos:start="502:18" pos:end="502:18">&amp;</operator><name pos:start="502:19" pos:end="502:20">tp</name></expr></argument>, <argument pos:start="502:23" pos:end="502:26"><expr pos:start="502:23" pos:end="502:26"><operator pos:start="502:23" pos:end="502:23">&amp;</operator><name pos:start="502:24" pos:end="502:26">tzp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="503:5" pos:end="503:52">return <expr pos:start="503:12" pos:end="503:51"><operator pos:start="503:12" pos:end="503:12">(</operator><name pos:start="503:13" pos:end="503:21"><name pos:start="503:13" pos:end="503:14">tp</name><operator pos:start="503:15" pos:end="503:15">.</operator><name pos:start="503:16" pos:end="503:21">tv_sec</name></name> <operator pos:start="503:23" pos:end="503:23">*</operator> <literal type="number" pos:start="503:25" pos:end="503:28">1000</literal><operator pos:start="503:29" pos:end="503:29">)</operator> <operator pos:start="503:31" pos:end="503:31">+</operator> <operator pos:start="503:33" pos:end="503:33">(</operator><name pos:start="503:34" pos:end="503:43"><name pos:start="503:34" pos:end="503:35">tp</name><operator pos:start="503:36" pos:end="503:36">.</operator><name pos:start="503:37" pos:end="503:43">tv_usec</name></name> <operator pos:start="503:45" pos:end="503:45">/</operator> <literal type="number" pos:start="503:47" pos:end="503:50">1000</literal><operator pos:start="503:51" pos:end="503:51">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="506:1" pos:end="512:3">/**
 * check if the passed sockaddr_in struct contains a localhost address
 *
 * @param[in] address pointer to the address to check
 *
 * @return 0 if the passed address isn't a localhost address
 */</comment>
<function pos:start="513:1" pos:end="516:1"><type pos:start="513:1" pos:end="513:10"><specifier pos:start="513:1" pos:end="513:6">static</specifier> <name pos:start="513:8" pos:end="513:10">int</name></type> <name pos:start="513:12" pos:end="513:22">isLocalhost</name><parameter_list pos:start="513:23" pos:end="513:51">(<parameter pos:start="513:24" pos:end="513:50"><decl pos:start="513:24" pos:end="513:50"><type pos:start="513:24" pos:end="513:50"><name pos:start="513:24" pos:end="513:41"><name pos:start="513:24" pos:end="513:29">struct</name> <name pos:start="513:31" pos:end="513:41">sockaddr_in</name></name> <modifier pos:start="513:43" pos:end="513:43">*</modifier></type><name pos:start="513:44" pos:end="513:50">address</name></decl></parameter>)</parameter_list> <block pos:start="513:53" pos:end="516:1">{<block_content pos:start="515:5" pos:end="515:63">
    <comment type="line" pos:start="514:5" pos:end="514:34">// return address == 127.0.0.1</comment>
    <return pos:start="515:5" pos:end="515:63">return <expr pos:start="515:12" pos:end="515:62"><operator pos:start="515:12" pos:end="515:12">(</operator><name pos:start="515:13" pos:end="515:20">unsigned</name> <name pos:start="515:22" pos:end="515:24">int</name><operator pos:start="515:25" pos:end="515:25">)</operator> <name pos:start="515:27" pos:end="515:50"><name pos:start="515:27" pos:end="515:33">address</name><operator pos:start="515:34" pos:end="515:35">-&gt;</operator><name pos:start="515:36" pos:end="515:43">sin_addr</name><operator pos:start="515:44" pos:end="515:44">.</operator><name pos:start="515:45" pos:end="515:50">s_addr</name></name> <operator pos:start="515:52" pos:end="515:53">==</operator> <literal type="number" pos:start="515:55" pos:end="515:62">16777343</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="518:1" pos:end="529:3">/**
 * Answer the errorString corresponding to the errorNumber, if available.
 * This function will answer a default error string, if the errorNumber is not
 * recognized.
 *
 * This function will have to be reworked to handle internationalization
 * properly, removing the explicit strings.
 *
 * @param anErrorNum    the error code to resolve to a human readable string
 *
 * @return  a human readable error string
 */</comment>

<function pos:start="531:1" pos:end="644:1"><type pos:start="531:1" pos:end="531:19"><specifier pos:start="531:1" pos:end="531:6">static</specifier> <specifier pos:start="531:8" pos:end="531:12">const</specifier> <name pos:start="531:14" pos:end="531:17">char</name> <modifier pos:start="531:19" pos:end="531:19">*</modifier></type> <name pos:start="531:21" pos:end="531:40">netLookupErrorString</name><parameter_list pos:start="531:41" pos:end="531:56">(<parameter pos:start="531:42" pos:end="531:55"><decl pos:start="531:42" pos:end="531:55"><type pos:start="531:42" pos:end="531:44"><name pos:start="531:42" pos:end="531:44">int</name></type> <name pos:start="531:46" pos:end="531:55">anErrorNum</name></decl></parameter>)</parameter_list> <block pos:start="531:58" pos:end="644:1">{<block_content pos:start="532:5" pos:end="643:5">
    <switch pos:start="532:5" pos:end="643:5">switch <condition pos:start="532:12" pos:end="532:23">(<expr pos:start="532:13" pos:end="532:22"><name pos:start="532:13" pos:end="532:22">anErrorNum</name></expr>)</condition> <block pos:start="532:25" pos:end="643:5">{<block_content pos:start="533:9" pos:end="642:35">
        <case pos:start="533:9" pos:end="533:31">case <expr pos:start="533:14" pos:end="533:30"><name pos:start="533:14" pos:end="533:30">SOCKERR_BADSOCKET</name></expr>:</case>
            <return pos:start="534:13" pos:end="534:32">return <expr pos:start="534:20" pos:end="534:31"><literal type="string" pos:start="534:20" pos:end="534:31">"Bad socket"</literal></expr>;</return>
        <case pos:start="535:9" pos:end="535:36">case <expr pos:start="535:14" pos:end="535:35"><name pos:start="535:14" pos:end="535:35">SOCKERR_NOTINITIALIZED</name></expr>:</case>
            <return pos:start="536:13" pos:end="536:50">return <expr pos:start="536:20" pos:end="536:49"><literal type="string" pos:start="536:20" pos:end="536:49">"Socket library uninitialized"</literal></expr>;</return>
        <case pos:start="537:9" pos:end="537:27">case <expr pos:start="537:14" pos:end="537:26"><name pos:start="537:14" pos:end="537:26">SOCKERR_BADAF</name></expr>:</case>
            <return pos:start="538:13" pos:end="538:40">return <expr pos:start="538:20" pos:end="538:39"><literal type="string" pos:start="538:20" pos:end="538:39">"Bad address family"</literal></expr>;</return>
        <case pos:start="539:9" pos:end="539:30">case <expr pos:start="539:14" pos:end="539:29"><name pos:start="539:14" pos:end="539:29">SOCKERR_BADPROTO</name></expr>:</case>
            <return pos:start="540:13" pos:end="540:34">return <expr pos:start="540:20" pos:end="540:33"><literal type="string" pos:start="540:20" pos:end="540:33">"Bad protocol"</literal></expr>;</return>
        <case pos:start="541:9" pos:end="541:29">case <expr pos:start="541:14" pos:end="541:28"><name pos:start="541:14" pos:end="541:28">SOCKERR_BADTYPE</name></expr>:</case>
            <return pos:start="542:13" pos:end="542:30">return <expr pos:start="542:20" pos:end="542:29"><literal type="string" pos:start="542:20" pos:end="542:29">"Bad type"</literal></expr>;</return>
        <case pos:start="543:9" pos:end="543:32">case <expr pos:start="543:14" pos:end="543:31"><name pos:start="543:14" pos:end="543:31">SOCKERR_SYSTEMBUSY</name></expr>:</case>
            <return pos:start="544:13" pos:end="544:51">return <expr pos:start="544:20" pos:end="544:50"><literal type="string" pos:start="544:20" pos:end="544:50">"System busy handling requests"</literal></expr>;</return>
        <case pos:start="545:9" pos:end="545:32">case <expr pos:start="545:14" pos:end="545:31"><name pos:start="545:14" pos:end="545:31">SOCKERR_SYSTEMFULL</name></expr>:</case>
            <return pos:start="546:13" pos:end="546:48">return <expr pos:start="546:20" pos:end="546:47"><literal type="string" pos:start="546:20" pos:end="546:47">"Too many sockets allocated"</literal></expr>;</return>
        <case pos:start="547:9" pos:end="547:34">case <expr pos:start="547:14" pos:end="547:33"><name pos:start="547:14" pos:end="547:33">SOCKERR_NOTCONNECTED</name></expr>:</case>
            <return pos:start="548:13" pos:end="548:45">return <expr pos:start="548:20" pos:end="548:44"><literal type="string" pos:start="548:20" pos:end="548:44">"Socket is not connected"</literal></expr>;</return>
        <case pos:start="549:9" pos:end="549:33">case <expr pos:start="549:14" pos:end="549:32"><name pos:start="549:14" pos:end="549:32">SOCKERR_INTERRUPTED</name></expr>:</case>
            <return pos:start="550:13" pos:end="550:51">return <expr pos:start="550:20" pos:end="550:50"><literal type="string" pos:start="550:20" pos:end="550:50">"The system call was cancelled"</literal></expr>;</return>
        <case pos:start="551:9" pos:end="551:29">case <expr pos:start="551:14" pos:end="551:28"><name pos:start="551:14" pos:end="551:28">SOCKERR_TIMEOUT</name></expr>:</case>
            <return pos:start="552:13" pos:end="552:45">return <expr pos:start="552:20" pos:end="552:44"><literal type="string" pos:start="552:20" pos:end="552:44">"The operation timed out"</literal></expr>;</return>
        <case pos:start="553:9" pos:end="553:31">case <expr pos:start="553:14" pos:end="553:30"><name pos:start="553:14" pos:end="553:30">SOCKERR_CONNRESET</name></expr>:</case>
            <return pos:start="554:13" pos:end="554:46">return <expr pos:start="554:20" pos:end="554:45"><literal type="string" pos:start="554:20" pos:end="554:45">"The connection was reset"</literal></expr>;</return>
        <case pos:start="555:9" pos:end="555:32">case <expr pos:start="555:14" pos:end="555:31"><name pos:start="555:14" pos:end="555:31">SOCKERR_WOULDBLOCK</name></expr>:</case>
            <return pos:start="556:13" pos:end="556:59">return <expr pos:start="556:20" pos:end="556:58"><literal type="string" pos:start="556:20" pos:end="556:58">"The nonblocking operation would block"</literal></expr>;</return>
        <case pos:start="557:9" pos:end="557:34">case <expr pos:start="557:14" pos:end="557:33"><name pos:start="557:14" pos:end="557:33">SOCKERR_ADDRNOTAVAIL</name></expr>:</case>
            <return pos:start="558:13" pos:end="558:50">return <expr pos:start="558:20" pos:end="558:49"><literal type="string" pos:start="558:20" pos:end="558:49">"The address is not available"</literal></expr>;</return>
        <case pos:start="559:9" pos:end="559:31">case <expr pos:start="559:14" pos:end="559:30"><name pos:start="559:14" pos:end="559:30">SOCKERR_ADDRINUSE</name></expr>:</case>
            <return pos:start="560:13" pos:end="560:51">return <expr pos:start="560:20" pos:end="560:50"><literal type="string" pos:start="560:20" pos:end="560:50">"The address is already in use"</literal></expr>;</return>
        <case pos:start="561:9" pos:end="561:30">case <expr pos:start="561:14" pos:end="561:29"><name pos:start="561:14" pos:end="561:29">SOCKERR_NOTBOUND</name></expr>:</case>
            <return pos:start="562:13" pos:end="562:45">return <expr pos:start="562:20" pos:end="562:44"><literal type="string" pos:start="562:20" pos:end="562:44">"The socket is not bound"</literal></expr>;</return>
        <case pos:start="563:9" pos:end="563:35">case <expr pos:start="563:14" pos:end="563:34"><name pos:start="563:14" pos:end="563:34">SOCKERR_UNKNOWNSOCKET</name></expr>:</case>
            <return pos:start="564:13" pos:end="564:71">return <expr pos:start="564:20" pos:end="564:70"><literal type="string" pos:start="564:20" pos:end="564:70">"Resolution of the FileDescriptor to socket failed"</literal></expr>;</return>
        <case pos:start="565:9" pos:end="565:36">case <expr pos:start="565:14" pos:end="565:35"><name pos:start="565:14" pos:end="565:35">SOCKERR_INVALIDTIMEOUT</name></expr>:</case>
            <return pos:start="566:13" pos:end="566:54">return <expr pos:start="566:20" pos:end="566:53"><literal type="string" pos:start="566:20" pos:end="566:53">"The specified timeout is invalid"</literal></expr>;</return>
        <case pos:start="567:9" pos:end="567:31">case <expr pos:start="567:14" pos:end="567:30"><name pos:start="567:14" pos:end="567:30">SOCKERR_FDSETFULL</name></expr>:</case>
            <return pos:start="568:13" pos:end="568:47">return <expr pos:start="568:20" pos:end="568:46"><literal type="string" pos:start="568:20" pos:end="568:46">"Unable to create an FDSET"</literal></expr>;</return>
        <case pos:start="569:9" pos:end="569:33">case <expr pos:start="569:14" pos:end="569:32"><name pos:start="569:14" pos:end="569:32">SOCKERR_TIMEVALFULL</name></expr>:</case>
            <return pos:start="570:13" pos:end="570:48">return <expr pos:start="570:20" pos:end="570:47"><literal type="string" pos:start="570:20" pos:end="570:47">"Unable to create a TIMEVAL"</literal></expr>;</return>
        <case pos:start="571:9" pos:end="571:37">case <expr pos:start="571:14" pos:end="571:36"><name pos:start="571:14" pos:end="571:36">SOCKERR_REMSOCKSHUTDOWN</name></expr>:</case>
            <return pos:start="572:13" pos:end="572:63">return <expr pos:start="572:20" pos:end="572:62"><literal type="string" pos:start="572:20" pos:end="572:62">"The remote socket has shutdown gracefully"</literal></expr>;</return>
        <case pos:start="573:9" pos:end="573:34">case <expr pos:start="573:14" pos:end="573:33"><name pos:start="573:14" pos:end="573:33">SOCKERR_NOTLISTENING</name></expr>:</case>
            <return pos:start="574:13" pos:end="574:64">return <expr pos:start="574:20" pos:end="574:63"><literal type="string" pos:start="574:20" pos:end="574:63">"Listen() was not invoked prior to accept()"</literal></expr>;</return>
        <case pos:start="575:9" pos:end="575:35">case <expr pos:start="575:14" pos:end="575:34"><name pos:start="575:14" pos:end="575:34">SOCKERR_NOTSTREAMSOCK</name></expr>:</case>
            <return pos:start="576:13" pos:end="576:77">return <expr pos:start="576:20" pos:end="576:76"><literal type="string" pos:start="576:20" pos:end="576:76">"The socket does not support connection-oriented service"</literal></expr>;</return>
        <case pos:start="577:9" pos:end="577:34">case <expr pos:start="577:14" pos:end="577:33"><name pos:start="577:14" pos:end="577:33">SOCKERR_ALREADYBOUND</name></expr>:</case>
            <return pos:start="578:13" pos:end="578:63">return <expr pos:start="578:20" pos:end="578:62"><literal type="string" pos:start="578:20" pos:end="578:62">"The socket is already bound to an address"</literal></expr>;</return>
        <case pos:start="579:9" pos:end="579:34">case <expr pos:start="579:14" pos:end="579:33"><name pos:start="579:14" pos:end="579:33">SOCKERR_NBWITHLINGER</name></expr>:</case>
            <return pos:start="580:13" pos:end="580:79">return <expr pos:start="580:20" pos:end="580:78"><literal type="string" pos:start="580:20" pos:end="580:78">"The socket is marked non-blocking &amp; SO_LINGER is non-zero"</literal></expr>;</return>
        <case pos:start="581:9" pos:end="581:33">case <expr pos:start="581:14" pos:end="581:32"><name pos:start="581:14" pos:end="581:32">SOCKERR_ISCONNECTED</name></expr>:</case>
            <return pos:start="582:13" pos:end="582:53">return <expr pos:start="582:20" pos:end="582:52"><literal type="string" pos:start="582:20" pos:end="582:52">"The socket is already connected"</literal></expr>;</return>
        <case pos:start="583:9" pos:end="583:31">case <expr pos:start="583:14" pos:end="583:30"><name pos:start="583:14" pos:end="583:30">SOCKERR_NOBUFFERS</name></expr>:</case>
            <return pos:start="584:13" pos:end="584:50">return <expr pos:start="584:20" pos:end="584:49"><literal type="string" pos:start="584:20" pos:end="584:49">"No buffer space is available"</literal></expr>;</return>
        <case pos:start="585:9" pos:end="585:34">case <expr pos:start="585:14" pos:end="585:33"><name pos:start="585:14" pos:end="585:33">SOCKERR_HOSTNOTFOUND</name></expr>:</case>
            <return pos:start="586:13" pos:end="586:57">return <expr pos:start="586:20" pos:end="586:56"><literal type="string" pos:start="586:20" pos:end="586:56">"Authoritative Answer Host not found"</literal></expr>;</return>
        <case pos:start="587:9" pos:end="587:28">case <expr pos:start="587:14" pos:end="587:27"><name pos:start="587:14" pos:end="587:27">SOCKERR_NODATA</name></expr>:</case>
            <return pos:start="588:13" pos:end="588:66">return <expr pos:start="588:20" pos:end="588:65"><literal type="string" pos:start="588:20" pos:end="588:65">"Valid name, no data record of requested type"</literal></expr>;</return>
        <case pos:start="589:9" pos:end="589:33">case <expr pos:start="589:14" pos:end="589:32"><name pos:start="589:14" pos:end="589:32">SOCKERR_BOUNDORCONN</name></expr>:</case>
            <return pos:start="590:13" pos:end="590:75">return <expr pos:start="590:20" pos:end="590:74"><literal type="string" pos:start="590:20" pos:end="590:74">"The socket has not been bound or is already connected"</literal></expr>;</return>
        <case pos:start="591:9" pos:end="591:31">case <expr pos:start="591:14" pos:end="591:30"><name pos:start="591:14" pos:end="591:30">SOCKERR_OPNOTSUPP</name></expr>:</case>
            <return pos:start="592:13" pos:end="592:63">return <expr pos:start="592:20" pos:end="592:62"><literal type="string" pos:start="592:20" pos:end="592:62">"The socket does not support the operation"</literal></expr>;</return>
        <case pos:start="593:9" pos:end="593:31">case <expr pos:start="593:14" pos:end="593:30"><name pos:start="593:14" pos:end="593:30">SOCKERR_OPTUNSUPP</name></expr>:</case>
            <return pos:start="594:13" pos:end="594:56">return <expr pos:start="594:20" pos:end="594:55"><literal type="string" pos:start="594:20" pos:end="594:55">"The socket option is not supported"</literal></expr>;</return>
        <case pos:start="595:9" pos:end="595:36">case <expr pos:start="595:14" pos:end="595:35"><name pos:start="595:14" pos:end="595:35">SOCKERR_OPTARGSINVALID</name></expr>:</case>
            <return pos:start="596:13" pos:end="596:61">return <expr pos:start="596:20" pos:end="596:60"><literal type="string" pos:start="596:20" pos:end="596:60">"The socket option arguments are invalid"</literal></expr>;</return>
        <case pos:start="597:9" pos:end="597:38">case <expr pos:start="597:14" pos:end="597:37"><name pos:start="597:14" pos:end="597:37">SOCKERR_SOCKLEVELINVALID</name></expr>:</case>
            <return pos:start="598:13" pos:end="598:49">return <expr pos:start="598:20" pos:end="598:48"><literal type="string" pos:start="598:20" pos:end="598:48">"The socket level is invalid"</literal></expr>;</return>
        <case pos:start="599:9" pos:end="599:36">case <expr pos:start="599:14" pos:end="599:35"><name pos:start="599:14" pos:end="599:35">SOCKERR_TIMEOUTFAILURE</name></expr>:</case>
            <return pos:start="600:13" pos:end="600:50">return <expr pos:start="600:20" pos:end="600:49"><literal type="string" pos:start="600:20" pos:end="600:49">"The timeout operation failed"</literal></expr>;</return>
        <case pos:start="601:9" pos:end="601:39">case <expr pos:start="601:14" pos:end="601:38"><name pos:start="601:14" pos:end="601:38">SOCKERR_SOCKADDRALLOCFAIL</name></expr>:</case>
            <return pos:start="602:13" pos:end="602:58">return <expr pos:start="602:20" pos:end="602:57"><literal type="string" pos:start="602:20" pos:end="602:57">"Failed to allocate address structure"</literal></expr>;</return>
        <case pos:start="603:9" pos:end="603:35">case <expr pos:start="603:14" pos:end="603:34"><name pos:start="603:14" pos:end="603:34">SOCKERR_FDSET_SIZEBAD</name></expr>:</case>
            <return pos:start="604:13" pos:end="604:83">return <expr pos:start="604:20" pos:end="604:82"><literal type="string" pos:start="604:20" pos:end="604:82">"The calculated maximum size of the file descriptor set is bad"</literal></expr>;</return>
        <case pos:start="605:9" pos:end="605:33">case <expr pos:start="605:14" pos:end="605:32"><name pos:start="605:14" pos:end="605:32">SOCKERR_UNKNOWNFLAG</name></expr>:</case>
            <return pos:start="606:13" pos:end="606:41">return <expr pos:start="606:20" pos:end="606:40"><literal type="string" pos:start="606:20" pos:end="606:40">"The flag is unknown"</literal></expr>;</return>
        <case pos:start="607:9" pos:end="607:29">case <expr pos:start="607:14" pos:end="607:28"><name pos:start="607:14" pos:end="607:28">SOCKERR_MSGSIZE</name></expr>:</case>
            <return pos:start="608:13" pos:end="608:88">return <expr pos:start="608:20" pos:end="608:87"><literal type="string" pos:start="608:20" pos:end="608:87">"The datagram was too big to fit the specified buffer, so truncated"</literal></expr>;</return>
        <case pos:start="609:9" pos:end="609:32">case <expr pos:start="609:14" pos:end="609:31"><name pos:start="609:14" pos:end="609:31">SOCKERR_NORECOVERY</name></expr>:</case>
            <return pos:start="610:13" pos:end="610:68">return <expr pos:start="610:20" pos:end="610:67"><literal type="string" pos:start="610:20" pos:end="610:67">"The operation failed with no recovery possible"</literal></expr>;</return>
        <case pos:start="611:9" pos:end="611:33">case <expr pos:start="611:14" pos:end="611:32"><name pos:start="611:14" pos:end="611:32">SOCKERR_ARGSINVALID</name></expr>:</case>
            <return pos:start="612:13" pos:end="612:47">return <expr pos:start="612:20" pos:end="612:46"><literal type="string" pos:start="612:20" pos:end="612:46">"The arguments are invalid"</literal></expr>;</return>
        <case pos:start="613:9" pos:end="613:29">case <expr pos:start="613:14" pos:end="613:28"><name pos:start="613:14" pos:end="613:28">SOCKERR_BADDESC</name></expr>:</case>
            <return pos:start="614:13" pos:end="614:72">return <expr pos:start="614:20" pos:end="614:71"><literal type="string" pos:start="614:20" pos:end="614:71">"The socket argument is not a valid file descriptor"</literal></expr>;</return>
        <case pos:start="615:9" pos:end="615:29">case <expr pos:start="615:14" pos:end="615:28"><name pos:start="615:14" pos:end="615:28">SOCKERR_NOTSOCK</name></expr>:</case>
            <return pos:start="616:13" pos:end="616:57">return <expr pos:start="616:20" pos:end="616:56"><literal type="string" pos:start="616:20" pos:end="616:56">"The socket argument is not a socket"</literal></expr>;</return>
        <case pos:start="617:9" pos:end="617:38">case <expr pos:start="617:14" pos:end="617:37"><name pos:start="617:14" pos:end="617:37">SOCKERR_HOSTENTALLOCFAIL</name></expr>:</case>
            <return pos:start="618:13" pos:end="618:62">return <expr pos:start="618:20" pos:end="618:61"><literal type="string" pos:start="618:20" pos:end="618:61">"Unable to allocate the hostent structure"</literal></expr>;</return>
        <case pos:start="619:9" pos:end="619:38">case <expr pos:start="619:14" pos:end="619:37"><name pos:start="619:14" pos:end="619:37">SOCKERR_TIMEVALALLOCFAIL</name></expr>:</case>
            <return pos:start="620:13" pos:end="620:62">return <expr pos:start="620:20" pos:end="620:61"><literal type="string" pos:start="620:20" pos:end="620:61">"Unable to allocate the timeval structure"</literal></expr>;</return>
        <case pos:start="621:9" pos:end="621:37">case <expr pos:start="621:14" pos:end="621:36"><name pos:start="621:14" pos:end="621:36">SOCKERR_LINGERALLOCFAIL</name></expr>:</case>
            <return pos:start="622:13" pos:end="622:61">return <expr pos:start="622:20" pos:end="622:60"><literal type="string" pos:start="622:20" pos:end="622:60">"Unable to allocate the linger structure"</literal></expr>;</return>
        <case pos:start="623:9" pos:end="623:37">case <expr pos:start="623:14" pos:end="623:36"><name pos:start="623:14" pos:end="623:36">SOCKERR_IPMREQALLOCFAIL</name></expr>:</case>
            <return pos:start="624:13" pos:end="624:61">return <expr pos:start="624:20" pos:end="624:60"><literal type="string" pos:start="624:20" pos:end="624:60">"Unable to allocate the ipmreq structure"</literal></expr>;</return>
        <case pos:start="625:9" pos:end="625:36">case <expr pos:start="625:14" pos:end="625:35"><name pos:start="625:14" pos:end="625:35">SOCKERR_FDSETALLOCFAIL</name></expr>:</case>
            <return pos:start="626:13" pos:end="626:60">return <expr pos:start="626:20" pos:end="626:59"><literal type="string" pos:start="626:20" pos:end="626:59">"Unable to allocate the fdset structure"</literal></expr>;</return>
        <case pos:start="627:9" pos:end="627:30">case <expr pos:start="627:14" pos:end="627:29"><name pos:start="627:14" pos:end="627:29">SOCKERR_OPFAILED</name></expr>:</case>
            <return pos:start="628:13" pos:end="628:38">return <expr pos:start="628:20" pos:end="628:37"><literal type="string" pos:start="628:20" pos:end="628:37">"Operation failed"</literal></expr>;</return>
        <case pos:start="629:9" pos:end="629:40">case <expr pos:start="629:14" pos:end="629:39"><name pos:start="629:14" pos:end="629:39">SOCKERR_CONNECTION_REFUSED</name></expr>:</case>
            <return pos:start="630:13" pos:end="630:40">return <expr pos:start="630:20" pos:end="630:39"><literal type="string" pos:start="630:20" pos:end="630:39">"Connection refused"</literal></expr>;</return>
        <case pos:start="631:9" pos:end="631:33">case <expr pos:start="631:14" pos:end="631:32"><name pos:start="631:14" pos:end="631:32">SOCKERR_ENETUNREACH</name></expr>:</case>
            <return pos:start="632:13" pos:end="632:41">return <expr pos:start="632:20" pos:end="632:40"><literal type="string" pos:start="632:20" pos:end="632:40">"Network unreachable"</literal></expr>;</return>
        <case pos:start="633:9" pos:end="633:34">case <expr pos:start="633:14" pos:end="633:33"><name pos:start="633:14" pos:end="633:33">SOCKERR_EHOSTUNREACH</name></expr>:</case>
            <return pos:start="634:13" pos:end="634:38">return <expr pos:start="634:20" pos:end="634:37"><literal type="string" pos:start="634:20" pos:end="634:37">"No route to host"</literal></expr>;</return>
        <case pos:start="635:9" pos:end="635:27">case <expr pos:start="635:14" pos:end="635:26"><name pos:start="635:14" pos:end="635:26">SOCKERR_EPIPE</name></expr>:</case>
            <return pos:start="636:13" pos:end="636:33">return <expr pos:start="636:20" pos:end="636:32"><literal type="string" pos:start="636:20" pos:end="636:32">"Broken pipe"</literal></expr>;</return>
        <case pos:start="637:9" pos:end="637:28">case <expr pos:start="637:14" pos:end="637:27"><name pos:start="637:14" pos:end="637:27">SOCKERR_EACCES</name></expr>:</case>
            <return pos:start="638:13" pos:end="638:75">return <expr pos:start="638:20" pos:end="638:74"><literal type="string" pos:start="638:20" pos:end="638:74">"Permission denied (maybe missing INTERNET permission)"</literal></expr>;</return>

        <default pos:start="640:9" pos:end="640:16">default:</default>
<comment type="line" pos:start="641:1" pos:end="641:58">//            LOGE("unknown socket error %d", anErrorNum);</comment>
            <return pos:start="642:13" pos:end="642:35">return <expr pos:start="642:20" pos:end="642:34"><literal type="string" pos:start="642:20" pos:end="642:34">"unknown error"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function pos:start="646:1" pos:end="698:1"><type pos:start="646:1" pos:end="646:10"><specifier pos:start="646:1" pos:end="646:6">static</specifier> <name pos:start="646:8" pos:end="646:10">int</name></type> <name pos:start="646:12" pos:end="646:23">convertError</name><parameter_list pos:start="646:24" pos:end="646:38">(<parameter pos:start="646:25" pos:end="646:37"><decl pos:start="646:25" pos:end="646:37"><type pos:start="646:25" pos:end="646:27"><name pos:start="646:25" pos:end="646:27">int</name></type> <name pos:start="646:29" pos:end="646:37">errorCode</name></decl></parameter>)</parameter_list> <block pos:start="646:40" pos:end="698:1">{<block_content pos:start="647:5" pos:end="697:5">
    <switch pos:start="647:5" pos:end="697:5">switch <condition pos:start="647:12" pos:end="647:22">(<expr pos:start="647:13" pos:end="647:21"><name pos:start="647:13" pos:end="647:21">errorCode</name></expr>)</condition> <block pos:start="647:24" pos:end="697:5">{<block_content pos:start="648:9" pos:end="696:36">
        <case pos:start="648:9" pos:end="648:19">case <expr pos:start="648:14" pos:end="648:18"><name pos:start="648:14" pos:end="648:18">EBADF</name></expr>:</case>
            <return pos:start="649:13" pos:end="649:35">return <expr pos:start="649:20" pos:end="649:34"><name pos:start="649:20" pos:end="649:34">SOCKERR_BADDESC</name></expr>;</return>
        <case pos:start="650:9" pos:end="650:21">case <expr pos:start="650:14" pos:end="650:20"><name pos:start="650:14" pos:end="650:20">ENOBUFS</name></expr>:</case>
            <return pos:start="651:13" pos:end="651:37">return <expr pos:start="651:20" pos:end="651:36"><name pos:start="651:20" pos:end="651:36">SOCKERR_NOBUFFERS</name></expr>;</return>
        <case pos:start="652:9" pos:end="652:24">case <expr pos:start="652:14" pos:end="652:23"><name pos:start="652:14" pos:end="652:23">EOPNOTSUPP</name></expr>:</case>
            <return pos:start="653:13" pos:end="653:37">return <expr pos:start="653:20" pos:end="653:36"><name pos:start="653:20" pos:end="653:36">SOCKERR_OPNOTSUPP</name></expr>;</return>
        <case pos:start="654:9" pos:end="654:25">case <expr pos:start="654:14" pos:end="654:24"><name pos:start="654:14" pos:end="654:24">ENOPROTOOPT</name></expr>:</case>
            <return pos:start="655:13" pos:end="655:37">return <expr pos:start="655:20" pos:end="655:36"><name pos:start="655:20" pos:end="655:36">SOCKERR_OPTUNSUPP</name></expr>;</return>
        <case pos:start="656:9" pos:end="656:20">case <expr pos:start="656:14" pos:end="656:19"><name pos:start="656:14" pos:end="656:19">EINVAL</name></expr>:</case>
            <return pos:start="657:13" pos:end="657:44">return <expr pos:start="657:20" pos:end="657:43"><name pos:start="657:20" pos:end="657:43">SOCKERR_SOCKLEVELINVALID</name></expr>;</return>
        <case pos:start="658:9" pos:end="658:22">case <expr pos:start="658:14" pos:end="658:21"><name pos:start="658:14" pos:end="658:21">ENOTSOCK</name></expr>:</case>
            <return pos:start="659:13" pos:end="659:35">return <expr pos:start="659:20" pos:end="659:34"><name pos:start="659:20" pos:end="659:34">SOCKERR_NOTSOCK</name></expr>;</return>
        <case pos:start="660:9" pos:end="660:19">case <expr pos:start="660:14" pos:end="660:18"><name pos:start="660:14" pos:end="660:18">EINTR</name></expr>:</case>
            <return pos:start="661:13" pos:end="661:39">return <expr pos:start="661:20" pos:end="661:38"><name pos:start="661:20" pos:end="661:38">SOCKERR_INTERRUPTED</name></expr>;</return>
        <case pos:start="662:9" pos:end="662:22">case <expr pos:start="662:14" pos:end="662:21"><name pos:start="662:14" pos:end="662:21">ENOTCONN</name></expr>:</case>
            <return pos:start="663:13" pos:end="663:40">return <expr pos:start="663:20" pos:end="663:39"><name pos:start="663:20" pos:end="663:39">SOCKERR_NOTCONNECTED</name></expr>;</return>
        <case pos:start="664:9" pos:end="664:26">case <expr pos:start="664:14" pos:end="664:25"><name pos:start="664:14" pos:end="664:25">EAFNOSUPPORT</name></expr>:</case>
            <return pos:start="665:13" pos:end="665:33">return <expr pos:start="665:20" pos:end="665:32"><name pos:start="665:20" pos:end="665:32">SOCKERR_BADAF</name></expr>;</return>
            <comment type="block" pos:start="666:13" pos:end="667:76">/* note: CONNRESET not included because it has the same
             * value as ECONNRESET and they both map to SOCKERR_CONNRESET */</comment>
        <case pos:start="668:9" pos:end="668:24">case <expr pos:start="668:14" pos:end="668:23"><name pos:start="668:14" pos:end="668:23">ECONNRESET</name></expr>:</case>
            <return pos:start="669:13" pos:end="669:37">return <expr pos:start="669:20" pos:end="669:36"><name pos:start="669:20" pos:end="669:36">SOCKERR_CONNRESET</name></expr>;</return>
        <case pos:start="670:9" pos:end="670:20">case <expr pos:start="670:14" pos:end="670:19"><name pos:start="670:14" pos:end="670:19">EAGAIN</name></expr>:</case>
            <return pos:start="671:13" pos:end="671:38">return <expr pos:start="671:20" pos:end="671:37"><name pos:start="671:20" pos:end="671:37">SOCKERR_WOULDBLOCK</name></expr>;</return>
        <case pos:start="672:9" pos:end="672:29">case <expr pos:start="672:14" pos:end="672:28"><name pos:start="672:14" pos:end="672:28">EPROTONOSUPPORT</name></expr>:</case>
            <return pos:start="673:13" pos:end="673:36">return <expr pos:start="673:20" pos:end="673:35"><name pos:start="673:20" pos:end="673:35">SOCKERR_BADPROTO</name></expr>;</return>
        <case pos:start="674:9" pos:end="674:20">case <expr pos:start="674:14" pos:end="674:19"><name pos:start="674:14" pos:end="674:19">EFAULT</name></expr>:</case>
            <return pos:start="675:13" pos:end="675:39">return <expr pos:start="675:20" pos:end="675:38"><name pos:start="675:20" pos:end="675:38">SOCKERR_ARGSINVALID</name></expr>;</return>
        <case pos:start="676:9" pos:end="676:23">case <expr pos:start="676:14" pos:end="676:22"><name pos:start="676:14" pos:end="676:22">ETIMEDOUT</name></expr>:</case>
            <return pos:start="677:13" pos:end="677:35">return <expr pos:start="677:20" pos:end="677:34"><name pos:start="677:20" pos:end="677:34">SOCKERR_TIMEOUT</name></expr>;</return>
        <case pos:start="678:9" pos:end="678:26">case <expr pos:start="678:14" pos:end="678:25"><name pos:start="678:14" pos:end="678:25">ECONNREFUSED</name></expr>:</case>
            <return pos:start="679:13" pos:end="679:46">return <expr pos:start="679:20" pos:end="679:45"><name pos:start="679:20" pos:end="679:45">SOCKERR_CONNECTION_REFUSED</name></expr>;</return>
        <case pos:start="680:9" pos:end="680:25">case <expr pos:start="680:14" pos:end="680:24"><name pos:start="680:14" pos:end="680:24">ENETUNREACH</name></expr>:</case>
            <return pos:start="681:13" pos:end="681:39">return <expr pos:start="681:20" pos:end="681:38"><name pos:start="681:20" pos:end="681:38">SOCKERR_ENETUNREACH</name></expr>;</return>
        <case pos:start="682:9" pos:end="682:20">case <expr pos:start="682:14" pos:end="682:19"><name pos:start="682:14" pos:end="682:19">EACCES</name></expr>:</case>
            <return pos:start="683:13" pos:end="683:34">return <expr pos:start="683:20" pos:end="683:33"><name pos:start="683:20" pos:end="683:33">SOCKERR_EACCES</name></expr>;</return>
        <case pos:start="684:9" pos:end="684:19">case <expr pos:start="684:14" pos:end="684:18"><name pos:start="684:14" pos:end="684:18">EPIPE</name></expr>:</case>
            <return pos:start="685:13" pos:end="685:33">return <expr pos:start="685:20" pos:end="685:32"><name pos:start="685:20" pos:end="685:32">SOCKERR_EPIPE</name></expr>;</return>
        <case pos:start="686:9" pos:end="686:26">case <expr pos:start="686:14" pos:end="686:25"><name pos:start="686:14" pos:end="686:25">EHOSTUNREACH</name></expr>:</case>
            <return pos:start="687:13" pos:end="687:40">return <expr pos:start="687:20" pos:end="687:39"><name pos:start="687:20" pos:end="687:39">SOCKERR_EHOSTUNREACH</name></expr>;</return>
        <case pos:start="688:9" pos:end="688:24">case <expr pos:start="688:14" pos:end="688:23"><name pos:start="688:14" pos:end="688:23">EADDRINUSE</name></expr>:</case>
            <return pos:start="689:13" pos:end="689:37">return <expr pos:start="689:20" pos:end="689:36"><name pos:start="689:20" pos:end="689:36">SOCKERR_ADDRINUSE</name></expr>;</return>
        <case pos:start="690:9" pos:end="690:27">case <expr pos:start="690:14" pos:end="690:26"><name pos:start="690:14" pos:end="690:26">EADDRNOTAVAIL</name></expr>:</case>
            <return pos:start="691:13" pos:end="691:40">return <expr pos:start="691:20" pos:end="691:39"><name pos:start="691:20" pos:end="691:39">SOCKERR_ADDRNOTAVAIL</name></expr>;</return>
        <case pos:start="692:9" pos:end="692:22">case <expr pos:start="692:14" pos:end="692:21"><name pos:start="692:14" pos:end="692:21">EMSGSIZE</name></expr>:</case>
            <return pos:start="693:13" pos:end="693:35">return <expr pos:start="693:20" pos:end="693:34"><name pos:start="693:20" pos:end="693:34">SOCKERR_MSGSIZE</name></expr>;</return>
        <default pos:start="694:9" pos:end="694:16">default:</default>
<comment type="line" pos:start="695:1" pos:end="695:81">//            LOGE("unclassified errno %d (%s)", errorCode, strerror(errorCode));</comment>
            <return pos:start="696:13" pos:end="696:36">return <expr pos:start="696:20" pos:end="696:35"><name pos:start="696:20" pos:end="696:35">SOCKERR_OPFAILED</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function pos:start="700:1" pos:end="719:0"><type pos:start="700:1" pos:end="700:10"><specifier pos:start="700:1" pos:end="700:6">static</specifier> <name pos:start="700:8" pos:end="700:10">int</name></type> <name pos:start="700:12" pos:end="700:21">sockSelect</name><parameter_list pos:start="700:22" pos:end="701:51">(<parameter pos:start="700:23" pos:end="700:30"><decl pos:start="700:23" pos:end="700:30"><type pos:start="700:23" pos:end="700:30"><name pos:start="700:23" pos:end="700:25">int</name></type> <name pos:start="700:27" pos:end="700:30">nfds</name></decl></parameter>, <parameter pos:start="700:33" pos:end="700:47"><decl pos:start="700:33" pos:end="700:47"><type pos:start="700:33" pos:end="700:47"><name pos:start="700:33" pos:end="700:38">fd_set</name> <modifier pos:start="700:40" pos:end="700:40">*</modifier></type><name pos:start="700:41" pos:end="700:47">readfds</name></decl></parameter>, <parameter pos:start="700:50" pos:end="700:65"><decl pos:start="700:50" pos:end="700:65"><type pos:start="700:50" pos:end="700:65"><name pos:start="700:50" pos:end="700:55">fd_set</name> <modifier pos:start="700:57" pos:end="700:57">*</modifier></type><name pos:start="700:58" pos:end="700:65">writefds</name></decl></parameter>,
        <parameter pos:start="701:9" pos:end="701:25"><decl pos:start="701:9" pos:end="701:25"><type pos:start="701:9" pos:end="701:25"><name pos:start="701:9" pos:end="701:14">fd_set</name> <modifier pos:start="701:16" pos:end="701:16">*</modifier></type><name pos:start="701:17" pos:end="701:25">exceptfds</name></decl></parameter>, <parameter pos:start="701:28" pos:end="701:50"><decl pos:start="701:28" pos:end="701:50"><type pos:start="701:28" pos:end="701:50"><name pos:start="701:28" pos:end="701:41"><name pos:start="701:28" pos:end="701:33">struct</name> <name pos:start="701:35" pos:end="701:41">timeval</name></name> <modifier pos:start="701:43" pos:end="701:43">*</modifier></type><name pos:start="701:44" pos:end="701:50">timeout</name></decl></parameter>)</parameter_list> <block pos:start="701:53" pos:end="719:0">{<block_content pos:start="703:5" pos:end="714:18">

    <decl_stmt pos:start="703:5" pos:end="703:69"><decl pos:start="703:5" pos:end="703:68"><type pos:start="703:5" pos:end="703:7"><name pos:start="703:5" pos:end="703:7">int</name></type> <name pos:start="703:9" pos:end="703:14">result</name> <init pos:start="703:16" pos:end="703:68">= <expr pos:start="703:18" pos:end="703:68"><call pos:start="703:18" pos:end="703:68"><name pos:start="703:18" pos:end="703:23">select</name><argument_list pos:start="703:24" pos:end="703:68">(<argument pos:start="703:25" pos:end="703:28"><expr pos:start="703:25" pos:end="703:28"><name pos:start="703:25" pos:end="703:28">nfds</name></expr></argument>, <argument pos:start="703:31" pos:end="703:37"><expr pos:start="703:31" pos:end="703:37"><name pos:start="703:31" pos:end="703:37">readfds</name></expr></argument>, <argument pos:start="703:40" pos:end="703:47"><expr pos:start="703:40" pos:end="703:47"><name pos:start="703:40" pos:end="703:47">writefds</name></expr></argument>, <argument pos:start="703:50" pos:end="703:58"><expr pos:start="703:50" pos:end="703:58"><name pos:start="703:50" pos:end="703:58">exceptfds</name></expr></argument>, <argument pos:start="703:61" pos:end="703:67"><expr pos:start="703:61" pos:end="703:67"><name pos:start="703:61" pos:end="703:67">timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="705:5" pos:end="713:5"><if pos:start="705:5" pos:end="711:5">if <condition pos:start="705:8" pos:end="705:19">(<expr pos:start="705:9" pos:end="705:18"><name pos:start="705:9" pos:end="705:14">result</name> <operator pos:start="705:16" pos:end="705:16">&lt;</operator> <literal type="number" pos:start="705:18" pos:end="705:18">0</literal></expr>)</condition> <block pos:start="705:21" pos:end="711:5">{<block_content pos:start="706:9" pos:end="710:9">
        <if_stmt pos:start="706:9" pos:end="710:9"><if pos:start="706:9" pos:end="708:9">if <condition pos:start="706:12" pos:end="706:27">(<expr pos:start="706:13" pos:end="706:26"><name pos:start="706:13" pos:end="706:17">errno</name> <operator pos:start="706:19" pos:end="706:20">==</operator> <name pos:start="706:22" pos:end="706:26">EINTR</name></expr>)</condition> <block pos:start="706:29" pos:end="708:9">{<block_content pos:start="707:13" pos:end="707:41">
            <expr_stmt pos:start="707:13" pos:end="707:41"><expr pos:start="707:13" pos:end="707:40"><name pos:start="707:13" pos:end="707:18">result</name> <operator pos:start="707:20" pos:end="707:20">=</operator> <name pos:start="707:22" pos:end="707:40">SOCKERR_INTERRUPTED</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="708:11" pos:end="710:9">else <block pos:start="708:16" pos:end="710:9">{<block_content pos:start="709:13" pos:end="709:38">
            <expr_stmt pos:start="709:13" pos:end="709:38"><expr pos:start="709:13" pos:end="709:37"><name pos:start="709:13" pos:end="709:18">result</name> <operator pos:start="709:20" pos:end="709:20">=</operator> <name pos:start="709:22" pos:end="709:37">SOCKERR_OPFAILED</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="711:7" pos:end="713:5">else if <condition pos:start="711:15" pos:end="711:27">(<expr pos:start="711:16" pos:end="711:26"><name pos:start="711:16" pos:end="711:21">result</name> <operator pos:start="711:23" pos:end="711:24">==</operator> <literal type="number" pos:start="711:26" pos:end="711:26">0</literal></expr>)</condition> <block pos:start="711:29" pos:end="713:5">{<block_content pos:start="712:9" pos:end="712:33">
        <expr_stmt pos:start="712:9" pos:end="712:33"><expr pos:start="712:9" pos:end="712:32"><name pos:start="712:9" pos:end="712:14">result</name> <operator pos:start="712:16" pos:end="712:16">=</operator> <name pos:start="712:18" pos:end="712:32">SOCKERR_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="714:5" pos:end="714:18">return <expr pos:start="714:12" pos:end="714:17"><name pos:start="714:12" pos:end="714:17">result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="717:1" pos:end="717:26">#<cpp:directive pos:start="717:2" pos:end="717:7">define</cpp:directive> <cpp:macro pos:start="717:9" pos:end="717:24"><name pos:start="717:9" pos:end="717:24">SELECT_READ_TYPE</name></cpp:macro> <cpp:value pos:start="717:26" pos:end="717:26">0</cpp:value></cpp:define>
<cpp:define pos:start="718:1" pos:end="718:27">#<cpp:directive pos:start="718:2" pos:end="718:7">define</cpp:directive> <cpp:macro pos:start="718:9" pos:end="718:25"><name pos:start="718:9" pos:end="718:25">SELECT_WRITE_TYPE</name></cpp:macro> <cpp:value pos:start="718:27" pos:end="718:27">1</cpp:value></cpp:define>

<function pos:start="720:1" pos:end="745:1"><type pos:start="720:1" pos:end="720:10"><specifier pos:start="720:1" pos:end="720:6">static</specifier> <name pos:start="720:8" pos:end="720:10">int</name></type> <name pos:start="720:12" pos:end="720:21">selectWait</name><parameter_list pos:start="720:22" pos:end="720:57">(<parameter pos:start="720:23" pos:end="720:32"><decl pos:start="720:23" pos:end="720:32"><type pos:start="720:23" pos:end="720:32"><name pos:start="720:23" pos:end="720:25">int</name></type> <name pos:start="720:27" pos:end="720:32">handle</name></decl></parameter>, <parameter pos:start="720:35" pos:end="720:46"><decl pos:start="720:35" pos:end="720:46"><type pos:start="720:35" pos:end="720:46"><name pos:start="720:35" pos:end="720:37">int</name></type> <name pos:start="720:39" pos:end="720:46">uSecTime</name></decl></parameter>, <parameter pos:start="720:49" pos:end="720:56"><decl pos:start="720:49" pos:end="720:56"><type pos:start="720:49" pos:end="720:56"><name pos:start="720:49" pos:end="720:51">int</name></type> <name pos:start="720:53" pos:end="720:56">type</name></decl></parameter>)</parameter_list> <block pos:start="720:59" pos:end="745:1">{<block_content pos:start="721:5" pos:end="744:18">
    <decl_stmt pos:start="721:5" pos:end="721:17"><decl pos:start="721:5" pos:end="721:16"><type pos:start="721:5" pos:end="721:10"><name pos:start="721:5" pos:end="721:10">fd_set</name></type> <name pos:start="721:12" pos:end="721:16">fdset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="722:5" pos:end="722:34"><decl pos:start="722:5" pos:end="722:23"><type pos:start="722:5" pos:end="722:18"><name pos:start="722:5" pos:end="722:18"><name pos:start="722:5" pos:end="722:10">struct</name> <name pos:start="722:12" pos:end="722:18">timeval</name></name></type> <name pos:start="722:20" pos:end="722:23">time</name></decl>, <decl pos:start="722:26" pos:end="722:33"><type ref="prev" pos:start="722:5" pos:end="722:18"><modifier pos:start="722:26" pos:end="722:26">*</modifier></type><name pos:start="722:27" pos:end="722:33">timePtr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="723:5" pos:end="723:19"><decl pos:start="723:5" pos:end="723:18"><type pos:start="723:5" pos:end="723:7"><name pos:start="723:5" pos:end="723:7">int</name></type> <name pos:start="723:9" pos:end="723:14">result</name> <init pos:start="723:16" pos:end="723:18">= <expr pos:start="723:18" pos:end="723:18"><literal type="number" pos:start="723:18" pos:end="723:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="724:5" pos:end="724:26"><decl pos:start="724:5" pos:end="724:25"><type pos:start="724:5" pos:end="724:7"><name pos:start="724:5" pos:end="724:7">int</name></type> <name pos:start="724:9" pos:end="724:12">size</name> <init pos:start="724:14" pos:end="724:25">= <expr pos:start="724:16" pos:end="724:25"><name pos:start="724:16" pos:end="724:21">handle</name> <operator pos:start="724:23" pos:end="724:23">+</operator> <literal type="number" pos:start="724:25" pos:end="724:25">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="726:5" pos:end="726:20"><expr pos:start="726:5" pos:end="726:19"><call pos:start="726:5" pos:end="726:19"><name pos:start="726:5" pos:end="726:11">FD_ZERO</name><argument_list pos:start="726:12" pos:end="726:19">(<argument pos:start="726:13" pos:end="726:18"><expr pos:start="726:13" pos:end="726:18"><operator pos:start="726:13" pos:end="726:13">&amp;</operator><name pos:start="726:14" pos:end="726:18">fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="727:5" pos:end="727:27"><expr pos:start="727:5" pos:end="727:26"><call pos:start="727:5" pos:end="727:26"><name pos:start="727:5" pos:end="727:10">FD_SET</name><argument_list pos:start="727:11" pos:end="727:26">(<argument pos:start="727:12" pos:end="727:17"><expr pos:start="727:12" pos:end="727:17"><name pos:start="727:12" pos:end="727:17">handle</name></expr></argument>, <argument pos:start="727:20" pos:end="727:25"><expr pos:start="727:20" pos:end="727:25"><operator pos:start="727:20" pos:end="727:20">&amp;</operator><name pos:start="727:21" pos:end="727:25">fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="729:5" pos:end="737:5"><if pos:start="729:5" pos:end="734:5">if <condition pos:start="729:8" pos:end="729:22">(<expr pos:start="729:9" pos:end="729:21"><literal type="number" pos:start="729:9" pos:end="729:9">0</literal> <operator pos:start="729:11" pos:end="729:12">&lt;=</operator> <name pos:start="729:14" pos:end="729:21">uSecTime</name></expr>)</condition> <block pos:start="729:24" pos:end="734:5">{<block_content pos:start="731:9" pos:end="733:24">
        <comment type="block" pos:start="730:9" pos:end="730:44">/* Use a timeout if uSecTime &gt;= 0 */</comment>
        <expr_stmt pos:start="731:9" pos:end="731:39"><expr pos:start="731:9" pos:end="731:38"><call pos:start="731:9" pos:end="731:38"><name pos:start="731:9" pos:end="731:14">memset</name><argument_list pos:start="731:15" pos:end="731:38">(<argument pos:start="731:16" pos:end="731:20"><expr pos:start="731:16" pos:end="731:20"><operator pos:start="731:16" pos:end="731:16">&amp;</operator><name pos:start="731:17" pos:end="731:20">time</name></expr></argument>, <argument pos:start="731:23" pos:end="731:23"><expr pos:start="731:23" pos:end="731:23"><literal type="number" pos:start="731:23" pos:end="731:23">0</literal></expr></argument>, <argument pos:start="731:26" pos:end="731:37"><expr pos:start="731:26" pos:end="731:37"><sizeof pos:start="731:26" pos:end="731:37">sizeof<argument_list pos:start="731:32" pos:end="731:37">(<argument pos:start="731:33" pos:end="731:36"><expr pos:start="731:33" pos:end="731:36"><name pos:start="731:33" pos:end="731:36">time</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="732:9" pos:end="732:32"><expr pos:start="732:9" pos:end="732:31"><name pos:start="732:9" pos:end="732:20"><name pos:start="732:9" pos:end="732:12">time</name><operator pos:start="732:13" pos:end="732:13">.</operator><name pos:start="732:14" pos:end="732:20">tv_usec</name></name> <operator pos:start="732:22" pos:end="732:22">=</operator> <name pos:start="732:24" pos:end="732:31">uSecTime</name></expr>;</expr_stmt>
        <expr_stmt pos:start="733:9" pos:end="733:24"><expr pos:start="733:9" pos:end="733:23"><name pos:start="733:9" pos:end="733:15">timePtr</name> <operator pos:start="733:17" pos:end="733:17">=</operator> <operator pos:start="733:19" pos:end="733:19">&amp;</operator><name pos:start="733:20" pos:end="733:23">time</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="734:7" pos:end="737:5">else <block pos:start="734:12" pos:end="737:5">{<block_content pos:start="736:9" pos:end="736:23">
        <comment type="block" pos:start="735:9" pos:end="735:46">/* Infinite timeout if uSecTime &lt; 0 */</comment>
        <expr_stmt pos:start="736:9" pos:end="736:23"><expr pos:start="736:9" pos:end="736:22"><name pos:start="736:9" pos:end="736:15">timePtr</name> <operator pos:start="736:17" pos:end="736:17">=</operator> <name pos:start="736:19" pos:end="736:22">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="739:5" pos:end="743:5"><if pos:start="739:5" pos:end="741:5">if <condition pos:start="739:8" pos:end="739:33">(<expr pos:start="739:9" pos:end="739:32"><name pos:start="739:9" pos:end="739:12">type</name> <operator pos:start="739:14" pos:end="739:15">==</operator> <name pos:start="739:17" pos:end="739:32">SELECT_READ_TYPE</name></expr>)</condition> <block pos:start="739:35" pos:end="741:5">{<block_content pos:start="740:9" pos:end="740:63">
        <expr_stmt pos:start="740:9" pos:end="740:63"><expr pos:start="740:9" pos:end="740:62"><name pos:start="740:9" pos:end="740:14">result</name> <operator pos:start="740:16" pos:end="740:16">=</operator> <call pos:start="740:18" pos:end="740:62"><name pos:start="740:18" pos:end="740:27">sockSelect</name><argument_list pos:start="740:28" pos:end="740:62">(<argument pos:start="740:29" pos:end="740:32"><expr pos:start="740:29" pos:end="740:32"><name pos:start="740:29" pos:end="740:32">size</name></expr></argument>, <argument pos:start="740:35" pos:end="740:40"><expr pos:start="740:35" pos:end="740:40"><operator pos:start="740:35" pos:end="740:35">&amp;</operator><name pos:start="740:36" pos:end="740:40">fdset</name></expr></argument>, <argument pos:start="740:43" pos:end="740:46"><expr pos:start="740:43" pos:end="740:46"><name pos:start="740:43" pos:end="740:46">NULL</name></expr></argument>, <argument pos:start="740:49" pos:end="740:52"><expr pos:start="740:49" pos:end="740:52"><name pos:start="740:49" pos:end="740:52">NULL</name></expr></argument>, <argument pos:start="740:55" pos:end="740:61"><expr pos:start="740:55" pos:end="740:61"><name pos:start="740:55" pos:end="740:61">timePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="741:7" pos:end="743:5">else <block pos:start="741:12" pos:end="743:5">{<block_content pos:start="742:9" pos:end="742:63">
        <expr_stmt pos:start="742:9" pos:end="742:63"><expr pos:start="742:9" pos:end="742:62"><name pos:start="742:9" pos:end="742:14">result</name> <operator pos:start="742:16" pos:end="742:16">=</operator> <call pos:start="742:18" pos:end="742:62"><name pos:start="742:18" pos:end="742:27">sockSelect</name><argument_list pos:start="742:28" pos:end="742:62">(<argument pos:start="742:29" pos:end="742:32"><expr pos:start="742:29" pos:end="742:32"><name pos:start="742:29" pos:end="742:32">size</name></expr></argument>, <argument pos:start="742:35" pos:end="742:38"><expr pos:start="742:35" pos:end="742:38"><name pos:start="742:35" pos:end="742:38">NULL</name></expr></argument>, <argument pos:start="742:41" pos:end="742:46"><expr pos:start="742:41" pos:end="742:46"><operator pos:start="742:41" pos:end="742:41">&amp;</operator><name pos:start="742:42" pos:end="742:46">fdset</name></expr></argument>, <argument pos:start="742:49" pos:end="742:52"><expr pos:start="742:49" pos:end="742:52"><name pos:start="742:49" pos:end="742:52">NULL</name></expr></argument>, <argument pos:start="742:55" pos:end="742:61"><expr pos:start="742:55" pos:end="742:61"><name pos:start="742:55" pos:end="742:61">timePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="744:5" pos:end="744:18">return <expr pos:start="744:12" pos:end="744:17"><name pos:start="744:12" pos:end="744:17">result</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="747:1" pos:end="833:1"><type pos:start="747:1" pos:end="747:10"><specifier pos:start="747:1" pos:end="747:6">static</specifier> <name pos:start="747:8" pos:end="747:10">int</name></type> <name pos:start="747:12" pos:end="747:25">pollSelectWait</name><parameter_list pos:start="747:26" pos:end="747:85">(<parameter pos:start="747:27" pos:end="747:37"><decl pos:start="747:27" pos:end="747:37"><type pos:start="747:27" pos:end="747:37"><name pos:start="747:27" pos:end="747:32">JNIEnv</name> <modifier pos:start="747:34" pos:end="747:34">*</modifier></type><name pos:start="747:35" pos:end="747:37">env</name></decl></parameter>, <parameter pos:start="747:40" pos:end="747:61"><decl pos:start="747:40" pos:end="747:61"><type pos:start="747:40" pos:end="747:61"><name pos:start="747:40" pos:end="747:46">jobject</name></type> <name pos:start="747:48" pos:end="747:61">fileDescriptor</name></decl></parameter>, <parameter pos:start="747:64" pos:end="747:74"><decl pos:start="747:64" pos:end="747:74"><type pos:start="747:64" pos:end="747:74"><name pos:start="747:64" pos:end="747:66">int</name></type> <name pos:start="747:68" pos:end="747:74">timeout</name></decl></parameter>, <parameter pos:start="747:77" pos:end="747:84"><decl pos:start="747:77" pos:end="747:84"><type pos:start="747:77" pos:end="747:84"><name pos:start="747:77" pos:end="747:79">int</name></type> <name pos:start="747:81" pos:end="747:84">type</name></decl></parameter>)</parameter_list> <block pos:start="747:87" pos:end="833:1">{<block_content pos:start="752:5" pos:end="832:18">
    <comment type="block" pos:start="748:5" pos:end="751:7">/* now try reading the socket for the timespan timeout.
     * if timeout is 0 try forever until the soclets gets ready or until an
     * exception occurs.
     */</comment>
    <decl_stmt pos:start="752:5" pos:end="752:49"><decl pos:start="752:5" pos:end="752:32"><type pos:start="752:5" pos:end="752:7"><name pos:start="752:5" pos:end="752:7">int</name></type> <name pos:start="752:9" pos:end="752:23">pollTimeoutUSec</name> <init pos:start="752:25" pos:end="752:32">= <expr pos:start="752:27" pos:end="752:32"><literal type="number" pos:start="752:27" pos:end="752:32">100000</literal></expr></init></decl>, <decl pos:start="752:35" pos:end="752:48"><type ref="prev" pos:start="752:5" pos:end="752:7"/><name pos:start="752:35" pos:end="752:42">pollMsec</name> <init pos:start="752:44" pos:end="752:48">= <expr pos:start="752:46" pos:end="752:48"><literal type="number" pos:start="752:46" pos:end="752:48">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="753:5" pos:end="753:23"><decl pos:start="753:5" pos:end="753:22"><type pos:start="753:5" pos:end="753:7"><name pos:start="753:5" pos:end="753:7">int</name></type> <name pos:start="753:9" pos:end="753:18">finishTime</name> <init pos:start="753:20" pos:end="753:22">= <expr pos:start="753:22" pos:end="753:22"><literal type="number" pos:start="753:22" pos:end="753:22">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="754:5" pos:end="754:27"><decl pos:start="754:5" pos:end="754:26"><type pos:start="754:5" pos:end="754:7"><name pos:start="754:5" pos:end="754:7">int</name></type> <name pos:start="754:9" pos:end="754:16">timeLeft</name> <init pos:start="754:18" pos:end="754:26">= <expr pos:start="754:20" pos:end="754:26"><name pos:start="754:20" pos:end="754:26">timeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="755:5" pos:end="755:41"><decl pos:start="755:5" pos:end="755:40"><type pos:start="755:5" pos:end="755:7"><name pos:start="755:5" pos:end="755:7">int</name></type> <name pos:start="755:9" pos:end="755:18">hasTimeout</name> <init pos:start="755:20" pos:end="755:40">= <expr pos:start="755:22" pos:end="755:40"><ternary pos:start="755:22" pos:end="755:40"><condition pos:start="755:22" pos:end="755:34"><expr pos:start="755:22" pos:end="755:32"><name pos:start="755:22" pos:end="755:28">timeout</name> <operator pos:start="755:30" pos:end="755:30">&gt;</operator> <literal type="number" pos:start="755:32" pos:end="755:32">0</literal></expr> ?</condition><then pos:start="755:36" pos:end="755:36"> <expr pos:start="755:36" pos:end="755:36"><literal type="number" pos:start="755:36" pos:end="755:36">1</literal></expr> </then><else pos:start="755:38" pos:end="755:40">: <expr pos:start="755:40" pos:end="755:40"><literal type="number" pos:start="755:40" pos:end="755:40">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="756:5" pos:end="756:19"><decl pos:start="756:5" pos:end="756:18"><type pos:start="756:5" pos:end="756:7"><name pos:start="756:5" pos:end="756:7">int</name></type> <name pos:start="756:9" pos:end="756:14">result</name> <init pos:start="756:16" pos:end="756:18">= <expr pos:start="756:18" pos:end="756:18"><literal type="number" pos:start="756:18" pos:end="756:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="757:5" pos:end="757:15"><decl pos:start="757:5" pos:end="757:14"><type pos:start="757:5" pos:end="757:7"><name pos:start="757:5" pos:end="757:7">int</name></type> <name pos:start="757:9" pos:end="757:14">handle</name></decl>;</decl_stmt>

    <if_stmt pos:start="759:5" pos:end="761:5"><if pos:start="759:5" pos:end="761:5">if <condition pos:start="759:8" pos:end="759:19">(<expr pos:start="759:9" pos:end="759:18"><name pos:start="759:9" pos:end="759:18">hasTimeout</name></expr>)</condition> <block pos:start="759:21" pos:end="761:5">{<block_content pos:start="760:9" pos:end="760:49">
        <expr_stmt pos:start="760:9" pos:end="760:49"><expr pos:start="760:9" pos:end="760:48"><name pos:start="760:9" pos:end="760:18">finishTime</name> <operator pos:start="760:20" pos:end="760:20">=</operator> <call pos:start="760:22" pos:end="760:38"><name pos:start="760:22" pos:end="760:36">time_msec_clock</name><argument_list pos:start="760:37" pos:end="760:38">()</argument_list></call> <operator pos:start="760:40" pos:end="760:40">+</operator> <name pos:start="760:42" pos:end="760:48">timeout</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="763:5" pos:end="763:17"><decl pos:start="763:5" pos:end="763:16"><type pos:start="763:5" pos:end="763:7"><name pos:start="763:5" pos:end="763:7">int</name></type> <name pos:start="763:9" pos:end="763:12">poll</name> <init pos:start="763:14" pos:end="763:16">= <expr pos:start="763:16" pos:end="763:16"><literal type="number" pos:start="763:16" pos:end="763:16">1</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="765:5" pos:end="830:5">while <condition pos:start="765:11" pos:end="765:16">(<expr pos:start="765:12" pos:end="765:15"><name pos:start="765:12" pos:end="765:15">poll</name></expr>)</condition> <block pos:start="765:18" pos:end="830:5">{<block_content pos:start="770:9" pos:end="829:9"> <comment type="block" pos:start="765:20" pos:end="765:43">/* begin polling loop */</comment>

        <comment type="block" pos:start="767:9" pos:end="769:11">/*
         * Fetch the handle every time in case the socket is closed.
         */</comment>
        <expr_stmt pos:start="770:9" pos:end="770:65"><expr pos:start="770:9" pos:end="770:64"><name pos:start="770:9" pos:end="770:14">handle</name> <operator pos:start="770:16" pos:end="770:16">=</operator> <call pos:start="770:18" pos:end="770:64"><name pos:start="770:18" pos:end="770:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="770:44" pos:end="770:64">(<argument pos:start="770:45" pos:end="770:47"><expr pos:start="770:45" pos:end="770:47"><name pos:start="770:45" pos:end="770:47">env</name></expr></argument>, <argument pos:start="770:50" pos:end="770:63"><expr pos:start="770:50" pos:end="770:63"><name pos:start="770:50" pos:end="770:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="772:9" pos:end="775:9"><if pos:start="772:9" pos:end="775:9">if <condition pos:start="772:12" pos:end="772:40">(<expr pos:start="772:13" pos:end="772:39"><name pos:start="772:13" pos:end="772:18">handle</name> <operator pos:start="772:20" pos:end="772:21">==</operator> <literal type="number" pos:start="772:23" pos:end="772:23">0</literal> <operator pos:start="772:25" pos:end="772:26">||</operator> <name pos:start="772:28" pos:end="772:33">handle</name> <operator pos:start="772:35" pos:end="772:36">==</operator> <operator pos:start="772:38" pos:end="772:38">-</operator><literal type="number" pos:start="772:39" pos:end="772:39">1</literal></expr>)</condition> <block pos:start="772:42" pos:end="775:9">{<block_content pos:start="773:13" pos:end="774:22">
            <expr_stmt pos:start="773:13" pos:end="773:59"><expr pos:start="773:13" pos:end="773:58"><call pos:start="773:13" pos:end="773:58"><name pos:start="773:13" pos:end="773:32">throwSocketException</name><argument_list pos:start="773:33" pos:end="773:58">(<argument pos:start="773:34" pos:end="773:36"><expr pos:start="773:34" pos:end="773:36"><name pos:start="773:34" pos:end="773:36">env</name></expr></argument>, <argument pos:start="773:39" pos:end="773:57"><expr pos:start="773:39" pos:end="773:57"><name pos:start="773:39" pos:end="773:57">SOCKERR_INTERRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="774:13" pos:end="774:22">return <expr pos:start="774:20" pos:end="774:21"><operator pos:start="774:20" pos:end="774:20">-</operator><literal type="number" pos:start="774:21" pos:end="774:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="777:9" pos:end="829:9"><if pos:start="777:9" pos:end="813:9">if <condition pos:start="777:12" pos:end="777:23">(<expr pos:start="777:13" pos:end="777:22"><name pos:start="777:13" pos:end="777:22">hasTimeout</name></expr>)</condition> <block pos:start="777:25" pos:end="813:9">{<block_content pos:start="779:13" pos:end="811:21">

            <if_stmt pos:start="779:13" pos:end="781:13"><if pos:start="779:13" pos:end="781:13">if <condition pos:start="779:16" pos:end="779:41">(<expr pos:start="779:17" pos:end="779:40"><name pos:start="779:17" pos:end="779:24">timeLeft</name> <operator pos:start="779:26" pos:end="779:26">-</operator> <literal type="number" pos:start="779:28" pos:end="779:29">10</literal> <operator pos:start="779:31" pos:end="779:31">&lt;</operator> <name pos:start="779:33" pos:end="779:40">pollMsec</name></expr>)</condition> <block pos:start="779:43" pos:end="781:13">{<block_content pos:start="780:17" pos:end="780:72">
                <expr_stmt pos:start="780:17" pos:end="780:72"><expr pos:start="780:17" pos:end="780:71"><name pos:start="780:17" pos:end="780:31">pollTimeoutUSec</name> <operator pos:start="780:33" pos:end="780:33">=</operator> <ternary pos:start="780:35" pos:end="780:71"><condition pos:start="780:35" pos:end="780:49"><expr pos:start="780:35" pos:end="780:47"><name pos:start="780:35" pos:end="780:42">timeLeft</name> <operator pos:start="780:44" pos:end="780:45">&lt;=</operator> <literal type="number" pos:start="780:47" pos:end="780:47">0</literal></expr> ?</condition><then pos:start="780:51" pos:end="780:51"> <expr pos:start="780:51" pos:end="780:51"><literal type="number" pos:start="780:51" pos:end="780:51">0</literal></expr> </then><else pos:start="780:53" pos:end="780:71">: <expr pos:start="780:55" pos:end="780:71"><operator pos:start="780:55" pos:end="780:55">(</operator><name pos:start="780:56" pos:end="780:63">timeLeft</name> <operator pos:start="780:65" pos:end="780:65">*</operator> <literal type="number" pos:start="780:67" pos:end="780:70">1000</literal><operator pos:start="780:71" pos:end="780:71">)</operator></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:63"><expr pos:start="783:13" pos:end="783:62"><name pos:start="783:13" pos:end="783:18">result</name> <operator pos:start="783:20" pos:end="783:20">=</operator> <call pos:start="783:22" pos:end="783:62"><name pos:start="783:22" pos:end="783:31">selectWait</name><argument_list pos:start="783:32" pos:end="783:62">(<argument pos:start="783:33" pos:end="783:38"><expr pos:start="783:33" pos:end="783:38"><name pos:start="783:33" pos:end="783:38">handle</name></expr></argument>, <argument pos:start="783:41" pos:end="783:55"><expr pos:start="783:41" pos:end="783:55"><name pos:start="783:41" pos:end="783:55">pollTimeoutUSec</name></expr></argument>, <argument pos:start="783:58" pos:end="783:61"><expr pos:start="783:58" pos:end="783:61"><name pos:start="783:58" pos:end="783:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="785:13" pos:end="789:15">/*
             * because we are polling at a time smaller than timeout
             * (presumably) lets treat an interrupt and timeout the same - go
             * see if we're done timewise, and then just try again if not.
             */</comment>
            <if_stmt pos:start="790:13" pos:end="810:13"><if pos:start="790:13" pos:end="807:13">if <condition pos:start="790:16" pos:end="791:46">(<expr pos:start="790:17" pos:end="791:45"><name pos:start="790:17" pos:end="790:31">SOCKERR_TIMEOUT</name> <operator pos:start="790:33" pos:end="790:34">==</operator> <name pos:start="790:36" pos:end="790:41">result</name> <operator pos:start="790:43" pos:end="790:44">||</operator>
                <name pos:start="791:17" pos:end="791:35">SOCKERR_INTERRUPTED</name> <operator pos:start="791:37" pos:end="791:38">==</operator> <name pos:start="791:40" pos:end="791:45">result</name></expr>)</condition> <block pos:start="791:48" pos:end="807:13">{<block_content pos:start="793:17" pos:end="805:17">

                <expr_stmt pos:start="793:17" pos:end="793:58"><expr pos:start="793:17" pos:end="793:57"><name pos:start="793:17" pos:end="793:24">timeLeft</name> <operator pos:start="793:26" pos:end="793:26">=</operator> <name pos:start="793:28" pos:end="793:37">finishTime</name> <operator pos:start="793:39" pos:end="793:39">-</operator> <call pos:start="793:41" pos:end="793:57"><name pos:start="793:41" pos:end="793:55">time_msec_clock</name><argument_list pos:start="793:56" pos:end="793:57">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="795:17" pos:end="805:17"><if pos:start="795:17" pos:end="803:17">if <condition pos:start="795:20" pos:end="795:34">(<expr pos:start="795:21" pos:end="795:33"><name pos:start="795:21" pos:end="795:28">timeLeft</name> <operator pos:start="795:30" pos:end="795:31">&lt;=</operator> <literal type="number" pos:start="795:33" pos:end="795:33">0</literal></expr>)</condition> <block pos:start="795:36" pos:end="803:17">{<block_content pos:start="801:21" pos:end="802:67">
                    <comment type="block" pos:start="796:21" pos:end="800:23">/*
                     * Always throw the "timeout" message because that is
                     * effectively what has happened, even if we happen to
                     * have been interrupted.
                     */</comment>
                    <expr_stmt pos:start="801:21" pos:end="802:67"><expr pos:start="801:21" pos:end="802:66"><call pos:start="801:21" pos:end="802:66"><name pos:start="801:21" pos:end="801:37">jniThrowException</name><argument_list pos:start="801:38" pos:end="802:66">(<argument pos:start="801:39" pos:end="801:41"><expr pos:start="801:39" pos:end="801:41"><name pos:start="801:39" pos:end="801:41">env</name></expr></argument>, <argument pos:start="801:44" pos:end="801:76"><expr pos:start="801:44" pos:end="801:76"><literal type="string" pos:start="801:44" pos:end="801:76">"java/net/SocketTimeoutException"</literal></expr></argument>,
                            <argument pos:start="802:29" pos:end="802:65"><expr pos:start="802:29" pos:end="802:65"><call pos:start="802:29" pos:end="802:65"><name pos:start="802:29" pos:end="802:48">netLookupErrorString</name><argument_list pos:start="802:49" pos:end="802:65">(<argument pos:start="802:50" pos:end="802:64"><expr pos:start="802:50" pos:end="802:64"><name pos:start="802:50" pos:end="802:64">SOCKERR_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="803:19" pos:end="805:17">else <block pos:start="803:24" pos:end="805:17">{<block_content pos:start="804:21" pos:end="804:29">
                    <continue pos:start="804:21" pos:end="804:29">continue;</continue> <comment type="line" pos:start="804:31" pos:end="804:42">// try again</comment>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="807:15" pos:end="810:13">else if <condition pos:start="807:23" pos:end="807:34">(<expr pos:start="807:24" pos:end="807:33"><literal type="number" pos:start="807:24" pos:end="807:24">0</literal> <operator pos:start="807:26" pos:end="807:26">&gt;</operator> <name pos:start="807:28" pos:end="807:33">result</name></expr>)</condition> <block pos:start="807:36" pos:end="810:13">{<block_content pos:start="808:17" pos:end="809:50">
                <expr_stmt pos:start="808:17" pos:end="808:49"><expr pos:start="808:17" pos:end="808:48"><call pos:start="808:17" pos:end="808:48"><name pos:start="808:17" pos:end="808:32">log_socket_close</name><argument_list pos:start="808:33" pos:end="808:48">(<argument pos:start="808:34" pos:end="808:39"><expr pos:start="808:34" pos:end="808:39"><name pos:start="808:34" pos:end="808:39">handle</name></expr></argument>, <argument pos:start="808:42" pos:end="808:47"><expr pos:start="808:42" pos:end="808:47"><name pos:start="808:42" pos:end="808:47">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="809:17" pos:end="809:50"><expr pos:start="809:17" pos:end="809:49"><call pos:start="809:17" pos:end="809:49"><name pos:start="809:17" pos:end="809:36">throwSocketException</name><argument_list pos:start="809:37" pos:end="809:49">(<argument pos:start="809:38" pos:end="809:40"><expr pos:start="809:38" pos:end="809:40"><name pos:start="809:38" pos:end="809:40">env</name></expr></argument>, <argument pos:start="809:43" pos:end="809:48"><expr pos:start="809:43" pos:end="809:48"><name pos:start="809:43" pos:end="809:48">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="811:13" pos:end="811:21"><expr pos:start="811:13" pos:end="811:20"><name pos:start="811:13" pos:end="811:16">poll</name> <operator pos:start="811:18" pos:end="811:18">=</operator> <literal type="number" pos:start="811:20" pos:end="811:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="813:11" pos:end="829:9">else <block pos:start="813:16" pos:end="829:9">{<block_content pos:start="815:13" pos:end="828:21"> <comment type="block" pos:start="813:18" pos:end="813:70">/* polling with no timeout (why would you do this?)*/</comment>

            <expr_stmt pos:start="815:13" pos:end="815:63"><expr pos:start="815:13" pos:end="815:62"><name pos:start="815:13" pos:end="815:18">result</name> <operator pos:start="815:20" pos:end="815:20">=</operator> <call pos:start="815:22" pos:end="815:62"><name pos:start="815:22" pos:end="815:31">selectWait</name><argument_list pos:start="815:32" pos:end="815:62">(<argument pos:start="815:33" pos:end="815:38"><expr pos:start="815:33" pos:end="815:38"><name pos:start="815:33" pos:end="815:38">handle</name></expr></argument>, <argument pos:start="815:41" pos:end="815:55"><expr pos:start="815:41" pos:end="815:55"><name pos:start="815:41" pos:end="815:55">pollTimeoutUSec</name></expr></argument>, <argument pos:start="815:58" pos:end="815:61"><expr pos:start="815:58" pos:end="815:61"><name pos:start="815:58" pos:end="815:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="817:13" pos:end="819:15">/*
             *  if interrupted (or a timeout) just retry
             */</comment>
            <if_stmt pos:start="820:13" pos:end="827:13"><if pos:start="820:13" pos:end="824:13">if <condition pos:start="820:16" pos:end="821:45">(<expr pos:start="820:17" pos:end="821:44"><name pos:start="820:17" pos:end="820:31">SOCKERR_TIMEOUT</name> <operator pos:start="820:33" pos:end="820:34">==</operator> <name pos:start="820:36" pos:end="820:41">result</name> <operator pos:start="820:43" pos:end="820:44">||</operator>
               <name pos:start="821:16" pos:end="821:34">SOCKERR_INTERRUPTED</name> <operator pos:start="821:36" pos:end="821:37">==</operator> <name pos:start="821:39" pos:end="821:44">result</name></expr>)</condition> <block pos:start="821:47" pos:end="824:13">{<block_content pos:start="823:17" pos:end="823:25">

                <continue pos:start="823:17" pos:end="823:25">continue;</continue> <comment type="line" pos:start="823:27" pos:end="823:38">// try again</comment>
            </block_content>}</block></if> <if type="elseif" pos:start="824:15" pos:end="827:13">else if <condition pos:start="824:23" pos:end="824:34">(<expr pos:start="824:24" pos:end="824:33"><literal type="number" pos:start="824:24" pos:end="824:24">0</literal> <operator pos:start="824:26" pos:end="824:26">&gt;</operator> <name pos:start="824:28" pos:end="824:33">result</name></expr>)</condition> <block pos:start="824:36" pos:end="827:13">{<block_content pos:start="825:17" pos:end="826:50">
                <expr_stmt pos:start="825:17" pos:end="825:49"><expr pos:start="825:17" pos:end="825:48"><call pos:start="825:17" pos:end="825:48"><name pos:start="825:17" pos:end="825:32">log_socket_close</name><argument_list pos:start="825:33" pos:end="825:48">(<argument pos:start="825:34" pos:end="825:39"><expr pos:start="825:34" pos:end="825:39"><name pos:start="825:34" pos:end="825:39">handle</name></expr></argument>, <argument pos:start="825:42" pos:end="825:47"><expr pos:start="825:42" pos:end="825:47"><name pos:start="825:42" pos:end="825:47">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="826:17" pos:end="826:50"><expr pos:start="826:17" pos:end="826:49"><call pos:start="826:17" pos:end="826:49"><name pos:start="826:17" pos:end="826:36">throwSocketException</name><argument_list pos:start="826:37" pos:end="826:49">(<argument pos:start="826:38" pos:end="826:40"><expr pos:start="826:38" pos:end="826:40"><name pos:start="826:38" pos:end="826:40">env</name></expr></argument>, <argument pos:start="826:43" pos:end="826:48"><expr pos:start="826:43" pos:end="826:48"><name pos:start="826:43" pos:end="826:48">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="828:13" pos:end="828:21"><expr pos:start="828:13" pos:end="828:20"><name pos:start="828:13" pos:end="828:16">poll</name> <operator pos:start="828:18" pos:end="828:18">=</operator> <literal type="number" pos:start="828:20" pos:end="828:20">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while> <comment type="block" pos:start="830:7" pos:end="830:28">/* end polling loop */</comment>

    <return pos:start="832:5" pos:end="832:18">return <expr pos:start="832:12" pos:end="832:17"><name pos:start="832:12" pos:end="832:17">result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="835:1" pos:end="840:3">/**
 * A helper method, to set the connect context to a Long object.
 *
 * @param env  pointer to the JNI library
 * @param longclass Java Long Object
 */</comment>
<function pos:start="841:1" pos:end="847:1"><type pos:start="841:1" pos:end="841:4"><name pos:start="841:1" pos:end="841:4">void</name></type> <name pos:start="841:6" pos:end="841:22">setConnectContext</name><parameter_list pos:start="841:23" pos:end="841:69">(<parameter pos:start="841:24" pos:end="841:34"><decl pos:start="841:24" pos:end="841:34"><type pos:start="841:24" pos:end="841:34"><name pos:start="841:24" pos:end="841:29">JNIEnv</name> <modifier pos:start="841:31" pos:end="841:31">*</modifier></type><name pos:start="841:32" pos:end="841:34">env</name></decl></parameter>,<parameter pos:start="841:36" pos:end="841:52"><decl pos:start="841:36" pos:end="841:52"><type pos:start="841:36" pos:end="841:52"><name pos:start="841:36" pos:end="841:42">jobject</name></type> <name pos:start="841:44" pos:end="841:52">longclass</name></decl></parameter>,<parameter pos:start="841:54" pos:end="841:68"><decl pos:start="841:54" pos:end="841:68"><type pos:start="841:54" pos:end="841:68"><name pos:start="841:54" pos:end="841:58">jbyte</name> <modifier pos:start="841:60" pos:end="841:60">*</modifier></type> <name pos:start="841:62" pos:end="841:68">context</name></decl></parameter>)</parameter_list> <block pos:start="841:71" pos:end="847:1">{<block_content pos:start="842:5" pos:end="846:72">
    <decl_stmt pos:start="842:5" pos:end="842:25"><decl pos:start="842:5" pos:end="842:24"><type pos:start="842:5" pos:end="842:10"><name pos:start="842:5" pos:end="842:10">jclass</name></type> <name pos:start="842:12" pos:end="842:24">descriptorCLS</name></decl>;</decl_stmt>
    <decl_stmt pos:start="843:5" pos:end="843:27"><decl pos:start="843:5" pos:end="843:26"><type pos:start="843:5" pos:end="843:12"><name pos:start="843:5" pos:end="843:12">jfieldID</name></type> <name pos:start="843:14" pos:end="843:26">descriptorFID</name></decl>;</decl_stmt>
    <expr_stmt pos:start="844:5" pos:end="844:53"><expr pos:start="844:5" pos:end="844:52"><name pos:start="844:5" pos:end="844:17">descriptorCLS</name> <operator pos:start="844:19" pos:end="844:19">=</operator> <call pos:start="844:21" pos:end="844:52"><name pos:start="844:21" pos:end="844:34"><name pos:start="844:21" pos:end="844:23">env</name><operator pos:start="844:24" pos:end="844:25">-&gt;</operator><name pos:start="844:26" pos:end="844:34">FindClass</name></name><argument_list pos:start="844:35" pos:end="844:52">(<argument pos:start="844:36" pos:end="844:51"><expr pos:start="844:36" pos:end="844:51"><literal type="string" pos:start="844:36" pos:end="844:51">"java/lang/Long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="845:5" pos:end="845:65"><expr pos:start="845:5" pos:end="845:64"><name pos:start="845:5" pos:end="845:17">descriptorFID</name> <operator pos:start="845:19" pos:end="845:19">=</operator> <call pos:start="845:21" pos:end="845:64"><name pos:start="845:21" pos:end="845:35"><name pos:start="845:21" pos:end="845:23">env</name><operator pos:start="845:24" pos:end="845:25">-&gt;</operator><name pos:start="845:26" pos:end="845:35">GetFieldID</name></name><argument_list pos:start="845:36" pos:end="845:64">(<argument pos:start="845:37" pos:end="845:49"><expr pos:start="845:37" pos:end="845:49"><name pos:start="845:37" pos:end="845:49">descriptorCLS</name></expr></argument>, <argument pos:start="845:52" pos:end="845:58"><expr pos:start="845:52" pos:end="845:58"><literal type="string" pos:start="845:52" pos:end="845:58">"value"</literal></expr></argument>, <argument pos:start="845:61" pos:end="845:63"><expr pos:start="845:61" pos:end="845:63"><literal type="string" pos:start="845:61" pos:end="845:63">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="846:5" pos:end="846:72"><expr pos:start="846:5" pos:end="846:71"><call pos:start="846:5" pos:end="846:71"><name pos:start="846:5" pos:end="846:21"><name pos:start="846:5" pos:end="846:7">env</name><operator pos:start="846:8" pos:end="846:9">-&gt;</operator><name pos:start="846:10" pos:end="846:21">SetLongField</name></name><argument_list pos:start="846:22" pos:end="846:71">(<argument pos:start="846:23" pos:end="846:31"><expr pos:start="846:23" pos:end="846:31"><name pos:start="846:23" pos:end="846:31">longclass</name></expr></argument>, <argument pos:start="846:34" pos:end="846:46"><expr pos:start="846:34" pos:end="846:46"><name pos:start="846:34" pos:end="846:46">descriptorFID</name></expr></argument>, <argument pos:start="846:49" pos:end="846:70"><expr pos:start="846:49" pos:end="846:70"><operator pos:start="846:49" pos:end="846:49">(</operator><name pos:start="846:50" pos:end="846:54">jlong</name><operator pos:start="846:55" pos:end="846:55">)</operator><operator pos:start="846:56" pos:end="846:56">(</operator><operator pos:start="846:57" pos:end="846:57">(</operator><name pos:start="846:58" pos:end="846:61">jint</name><operator pos:start="846:62" pos:end="846:62">)</operator><name pos:start="846:63" pos:end="846:69">context</name><operator pos:start="846:70" pos:end="846:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt pos:start="847:2" pos:end="847:2">;</empty_stmt>

<comment type="block" format="doxygen" pos:start="849:1" pos:end="854:3">/**
 * A helper method, to get the connect context.
 *
 * @param env  pointer to the JNI library
 * @param longclass Java Long Object
 */</comment>
<function pos:start="855:1" pos:end="861:1"><type pos:start="855:1" pos:end="855:7"><name pos:start="855:1" pos:end="855:5">jbyte</name> <modifier pos:start="855:7" pos:end="855:7">*</modifier></type><name pos:start="855:8" pos:end="855:24">getConnectContext</name><parameter_list pos:start="855:25" pos:end="855:56">(<parameter pos:start="855:26" pos:end="855:36"><decl pos:start="855:26" pos:end="855:36"><type pos:start="855:26" pos:end="855:36"><name pos:start="855:26" pos:end="855:31">JNIEnv</name> <modifier pos:start="855:33" pos:end="855:33">*</modifier></type><name pos:start="855:34" pos:end="855:36">env</name></decl></parameter>, <parameter pos:start="855:39" pos:end="855:55"><decl pos:start="855:39" pos:end="855:55"><type pos:start="855:39" pos:end="855:55"><name pos:start="855:39" pos:end="855:45">jobject</name></type> <name pos:start="855:47" pos:end="855:55">longclass</name></decl></parameter>)</parameter_list> <block pos:start="855:58" pos:end="861:1">{<block_content pos:start="856:5" pos:end="860:72">
    <decl_stmt pos:start="856:5" pos:end="856:25"><decl pos:start="856:5" pos:end="856:24"><type pos:start="856:5" pos:end="856:10"><name pos:start="856:5" pos:end="856:10">jclass</name></type> <name pos:start="856:12" pos:end="856:24">descriptorCLS</name></decl>;</decl_stmt>
    <decl_stmt pos:start="857:5" pos:end="857:27"><decl pos:start="857:5" pos:end="857:26"><type pos:start="857:5" pos:end="857:12"><name pos:start="857:5" pos:end="857:12">jfieldID</name></type> <name pos:start="857:14" pos:end="857:26">descriptorFID</name></decl>;</decl_stmt>
    <expr_stmt pos:start="858:5" pos:end="858:53"><expr pos:start="858:5" pos:end="858:52"><name pos:start="858:5" pos:end="858:17">descriptorCLS</name> <operator pos:start="858:19" pos:end="858:19">=</operator> <call pos:start="858:21" pos:end="858:52"><name pos:start="858:21" pos:end="858:34"><name pos:start="858:21" pos:end="858:23">env</name><operator pos:start="858:24" pos:end="858:25">-&gt;</operator><name pos:start="858:26" pos:end="858:34">FindClass</name></name><argument_list pos:start="858:35" pos:end="858:52">(<argument pos:start="858:36" pos:end="858:51"><expr pos:start="858:36" pos:end="858:51"><literal type="string" pos:start="858:36" pos:end="858:51">"java/lang/Long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="859:5" pos:end="859:65"><expr pos:start="859:5" pos:end="859:64"><name pos:start="859:5" pos:end="859:17">descriptorFID</name> <operator pos:start="859:19" pos:end="859:19">=</operator> <call pos:start="859:21" pos:end="859:64"><name pos:start="859:21" pos:end="859:35"><name pos:start="859:21" pos:end="859:23">env</name><operator pos:start="859:24" pos:end="859:25">-&gt;</operator><name pos:start="859:26" pos:end="859:35">GetFieldID</name></name><argument_list pos:start="859:36" pos:end="859:64">(<argument pos:start="859:37" pos:end="859:49"><expr pos:start="859:37" pos:end="859:49"><name pos:start="859:37" pos:end="859:49">descriptorCLS</name></expr></argument>, <argument pos:start="859:52" pos:end="859:58"><expr pos:start="859:52" pos:end="859:58"><literal type="string" pos:start="859:52" pos:end="859:58">"value"</literal></expr></argument>, <argument pos:start="859:61" pos:end="859:63"><expr pos:start="859:61" pos:end="859:63"><literal type="string" pos:start="859:61" pos:end="859:63">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="860:5" pos:end="860:72">return <expr pos:start="860:12" pos:end="860:71"><operator pos:start="860:12" pos:end="860:12">(</operator><name pos:start="860:13" pos:end="860:17">jbyte</name><operator pos:start="860:18" pos:end="860:18">*</operator><operator pos:start="860:19" pos:end="860:19">)</operator> <operator pos:start="860:21" pos:end="860:21">(</operator><operator pos:start="860:22" pos:end="860:22">(</operator><name pos:start="860:23" pos:end="860:26">jint</name><operator pos:start="860:27" pos:end="860:27">)</operator><call pos:start="860:28" pos:end="860:70"><name pos:start="860:28" pos:end="860:44"><name pos:start="860:28" pos:end="860:30">env</name><operator pos:start="860:31" pos:end="860:32">-&gt;</operator><name pos:start="860:33" pos:end="860:44">GetLongField</name></name><argument_list pos:start="860:45" pos:end="860:70">(<argument pos:start="860:46" pos:end="860:54"><expr pos:start="860:46" pos:end="860:54"><name pos:start="860:46" pos:end="860:54">longclass</name></expr></argument>, <argument pos:start="860:57" pos:end="860:69"><expr pos:start="860:57" pos:end="860:69"><name pos:start="860:57" pos:end="860:69">descriptorFID</name></expr></argument>)</argument_list></call><operator pos:start="860:71" pos:end="860:71">)</operator></expr>;</return>
</block_content>}</block></function><empty_stmt pos:start="861:2" pos:end="861:2">;</empty_stmt>

<comment type="line" pos:start="863:1" pos:end="863:22">// typical ip checksum</comment>
<function pos:start="864:1" pos:end="880:1"><type pos:start="864:1" pos:end="864:14"><name pos:start="864:1" pos:end="864:8">unsigned</name> <name pos:start="864:10" pos:end="864:14">short</name></type> <name pos:start="864:16" pos:end="864:26">ip_checksum</name><parameter_list pos:start="864:27" pos:end="864:60">(<parameter pos:start="864:28" pos:end="864:49"><decl pos:start="864:28" pos:end="864:49"><type pos:start="864:28" pos:end="864:49"><name pos:start="864:28" pos:end="864:35">unsigned</name> <name pos:start="864:37" pos:end="864:41">short</name><modifier pos:start="864:42" pos:end="864:42">*</modifier></type> <name pos:start="864:44" pos:end="864:49">buffer</name></decl></parameter>, <parameter pos:start="864:52" pos:end="864:59"><decl pos:start="864:52" pos:end="864:59"><type pos:start="864:52" pos:end="864:59"><name pos:start="864:52" pos:end="864:54">int</name></type> <name pos:start="864:56" pos:end="864:59">size</name></decl></parameter>)</parameter_list> <block pos:start="864:62" pos:end="880:1">{<block_content pos:start="865:5" pos:end="879:35">
    <decl_stmt pos:start="865:5" pos:end="865:43"><decl pos:start="865:5" pos:end="865:42"><type pos:start="865:5" pos:end="865:29"><specifier pos:start="865:5" pos:end="865:12">register</specifier> <name pos:start="865:14" pos:end="865:21">unsigned</name> <name pos:start="865:23" pos:end="865:27">short</name> <modifier pos:start="865:29" pos:end="865:29">*</modifier></type> <name pos:start="865:31" pos:end="865:33">buf</name> <init pos:start="865:35" pos:end="865:42">= <expr pos:start="865:37" pos:end="865:42"><name pos:start="865:37" pos:end="865:42">buffer</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="866:5" pos:end="866:32"><decl pos:start="866:5" pos:end="866:31"><type pos:start="866:5" pos:end="866:16"><specifier pos:start="866:5" pos:end="866:12">register</specifier> <name pos:start="866:14" pos:end="866:16">int</name></type> <name pos:start="866:18" pos:end="866:24">bufleft</name> <init pos:start="866:26" pos:end="866:31">= <expr pos:start="866:28" pos:end="866:31"><name pos:start="866:28" pos:end="866:31">size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="867:5" pos:end="867:35"><decl pos:start="867:5" pos:end="867:34"><type pos:start="867:5" pos:end="867:26"><specifier pos:start="867:5" pos:end="867:12">register</specifier> <name pos:start="867:14" pos:end="867:21">unsigned</name> <name pos:start="867:23" pos:end="867:26">long</name></type> <name pos:start="867:28" pos:end="867:30">sum</name> <init pos:start="867:32" pos:end="867:34">= <expr pos:start="867:34" pos:end="867:34"><literal type="number" pos:start="867:34" pos:end="867:34">0</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="869:5" pos:end="872:5">while <condition pos:start="869:11" pos:end="869:23">(<expr pos:start="869:12" pos:end="869:22"><name pos:start="869:12" pos:end="869:18">bufleft</name> <operator pos:start="869:20" pos:end="869:20">&gt;</operator> <literal type="number" pos:start="869:22" pos:end="869:22">1</literal></expr>)</condition> <block pos:start="869:25" pos:end="872:5">{<block_content pos:start="870:9" pos:end="871:52">
        <expr_stmt pos:start="870:9" pos:end="870:29"><expr pos:start="870:9" pos:end="870:28"><name pos:start="870:9" pos:end="870:11">sum</name> <operator pos:start="870:13" pos:end="870:13">=</operator> <name pos:start="870:15" pos:end="870:17">sum</name> <operator pos:start="870:19" pos:end="870:19">+</operator> <operator pos:start="870:21" pos:end="870:21">(</operator><operator pos:start="870:22" pos:end="870:22">*</operator><name pos:start="870:23" pos:end="870:25">buf</name><operator pos:start="870:26" pos:end="870:27">++</operator><operator pos:start="870:28" pos:end="870:28">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="871:9" pos:end="871:52"><expr pos:start="871:9" pos:end="871:51"><name pos:start="871:9" pos:end="871:15">bufleft</name> <operator pos:start="871:17" pos:end="871:17">=</operator> <name pos:start="871:19" pos:end="871:25">bufleft</name> <operator pos:start="871:27" pos:end="871:27">-</operator> sizeof<operator pos:start="871:35" pos:end="871:35">(</operator><name pos:start="871:36" pos:end="871:43">unsigned</name> <name pos:start="871:45" pos:end="871:49">short</name> <operator pos:start="871:51" pos:end="871:51">)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="873:5" pos:end="875:5"><if pos:start="873:5" pos:end="875:5">if <condition pos:start="873:8" pos:end="873:16">(<expr pos:start="873:9" pos:end="873:15"><name pos:start="873:9" pos:end="873:15">bufleft</name></expr>)</condition> <block pos:start="873:18" pos:end="875:5">{<block_content pos:start="874:9" pos:end="874:43">
        <expr_stmt pos:start="874:9" pos:end="874:43"><expr pos:start="874:9" pos:end="874:42"><name pos:start="874:9" pos:end="874:11">sum</name> <operator pos:start="874:13" pos:end="874:13">=</operator> <name pos:start="874:15" pos:end="874:17">sum</name> <operator pos:start="874:19" pos:end="874:19">+</operator> <operator pos:start="874:21" pos:end="874:21">(</operator><operator pos:start="874:22" pos:end="874:22">*</operator><operator pos:start="874:23" pos:end="874:23">(</operator><name pos:start="874:24" pos:end="874:31">unsigned</name> <name pos:start="874:33" pos:end="874:36">char</name><operator pos:start="874:37" pos:end="874:37">*</operator><operator pos:start="874:38" pos:end="874:38">)</operator><name pos:start="874:39" pos:end="874:41">buf</name><operator pos:start="874:42" pos:end="874:42">)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="876:5" pos:end="876:39"><expr pos:start="876:5" pos:end="876:38"><name pos:start="876:5" pos:end="876:7">sum</name> <operator pos:start="876:9" pos:end="876:9">=</operator> <operator pos:start="876:11" pos:end="876:11">(</operator><name pos:start="876:12" pos:end="876:14">sum</name> <operator pos:start="876:16" pos:end="876:17">&gt;&gt;</operator> <literal type="number" pos:start="876:19" pos:end="876:20">16</literal><operator pos:start="876:21" pos:end="876:21">)</operator> <operator pos:start="876:23" pos:end="876:23">+</operator> <operator pos:start="876:25" pos:end="876:25">(</operator><name pos:start="876:26" pos:end="876:28">sum</name> <operator pos:start="876:30" pos:end="876:30">&amp;</operator> <literal type="number" pos:start="876:32" pos:end="876:37">0xffff</literal><operator pos:start="876:38" pos:end="876:38">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="877:5" pos:end="877:23"><expr pos:start="877:5" pos:end="877:22"><name pos:start="877:5" pos:end="877:7">sum</name> <operator pos:start="877:9" pos:end="877:10">+=</operator> <operator pos:start="877:12" pos:end="877:12">(</operator><name pos:start="877:13" pos:end="877:15">sum</name> <operator pos:start="877:17" pos:end="877:18">&gt;&gt;</operator> <literal type="number" pos:start="877:20" pos:end="877:21">16</literal><operator pos:start="877:22" pos:end="877:22">)</operator></expr>;</expr_stmt>

    <return pos:start="879:5" pos:end="879:35">return <expr pos:start="879:12" pos:end="879:34"><operator pos:start="879:12" pos:end="879:12">(</operator><name pos:start="879:13" pos:end="879:20">unsigned</name> <name pos:start="879:22" pos:end="879:26">short</name> <operator pos:start="879:28" pos:end="879:28">)</operator><operator pos:start="879:29" pos:end="879:29">(</operator><operator pos:start="879:30" pos:end="879:30">~</operator><name pos:start="879:31" pos:end="879:33">sum</name><operator pos:start="879:34" pos:end="879:34">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="882:1" pos:end="902:3">/**
 * Establish a connection to a peer with a timeout.  This function is called
 * repeatedly in order to carry out the connect and to allow other tasks to
 * proceed on certain platforms. The caller must first call with
 * step = SOCKET_STEP_START, if the result is SOCKERR_NOTCONNECTED it will then
 * call it with step = CHECK until either another error or 0 is returned to
 * indicate the connect is complete.  Each time the function should sleep for no
 * more than timeout milliseconds.  If the connect succeeds or an error occurs,
 * the caller must always end the process by calling the function with
 * step = SOCKET_STEP_DONE
 *
 * @param[in] portLibrary The port library.
 * @param[in] sock pointer to the unconnected local socket.
 * @param[in] addr pointer to the sockaddr, specifying remote host/port.
 * @param[in] timeout the timeout in milliseconds. If timeout is negative,
 *         perform a block operation.
 * @param[in,out] pointer to context pointer. Filled in on first call and then
 *         to be passed into each subsequent call.
 *
 * @return 0, if no errors occurred, otherwise the (negative) error code.
 */</comment>
<function pos:start="903:1" pos:end="1049:1"><type pos:start="903:1" pos:end="903:10"><specifier pos:start="903:1" pos:end="903:6">static</specifier> <name pos:start="903:8" pos:end="903:10">int</name></type> <name pos:start="903:12" pos:end="903:33">sockConnectWithTimeout</name><parameter_list pos:start="903:34" pos:end="904:61">(<parameter pos:start="903:35" pos:end="903:44"><decl pos:start="903:35" pos:end="903:44"><type pos:start="903:35" pos:end="903:44"><name pos:start="903:35" pos:end="903:37">int</name></type> <name pos:start="903:39" pos:end="903:44">handle</name></decl></parameter>, <parameter pos:start="903:47" pos:end="903:69"><decl pos:start="903:47" pos:end="903:69"><type pos:start="903:47" pos:end="903:69"><name pos:start="903:47" pos:end="903:64"><name pos:start="903:47" pos:end="903:52">struct</name> <name pos:start="903:54" pos:end="903:64">sockaddr_in</name></name></type> <name pos:start="903:66" pos:end="903:69">addr</name></decl></parameter>,
        <parameter pos:start="904:9" pos:end="904:28"><decl pos:start="904:9" pos:end="904:28"><type pos:start="904:9" pos:end="904:28"><name pos:start="904:9" pos:end="904:16">unsigned</name> <name pos:start="904:18" pos:end="904:20">int</name></type> <name pos:start="904:22" pos:end="904:28">timeout</name></decl></parameter>, <parameter pos:start="904:31" pos:end="904:47"><decl pos:start="904:31" pos:end="904:47"><type pos:start="904:31" pos:end="904:47"><name pos:start="904:31" pos:end="904:38">unsigned</name> <name pos:start="904:40" pos:end="904:42">int</name></type> <name pos:start="904:44" pos:end="904:47">step</name></decl></parameter>, <parameter pos:start="904:50" pos:end="904:60"><decl pos:start="904:50" pos:end="904:60"><type pos:start="904:50" pos:end="904:60"><name pos:start="904:50" pos:end="904:54">jbyte</name> <modifier pos:start="904:56" pos:end="904:56">*</modifier></type><name pos:start="904:57" pos:end="904:60">ctxt</name></decl></parameter>)</parameter_list> <block pos:start="904:63" pos:end="1049:1">{<block_content pos:start="905:5" pos:end="1048:31">
    <decl_stmt pos:start="905:5" pos:end="905:15"><decl pos:start="905:5" pos:end="905:14"><type pos:start="905:5" pos:end="905:7"><name pos:start="905:5" pos:end="905:7">int</name></type> <name pos:start="905:9" pos:end="905:10">rc</name> <init pos:start="905:12" pos:end="905:14">= <expr pos:start="905:14" pos:end="905:14"><literal type="number" pos:start="905:14" pos:end="905:14">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="906:5" pos:end="906:33"><decl pos:start="906:5" pos:end="906:32"><type pos:start="906:5" pos:end="906:18"><name pos:start="906:5" pos:end="906:18"><name pos:start="906:5" pos:end="906:10">struct</name> <name pos:start="906:12" pos:end="906:18">timeval</name></name></type> <name pos:start="906:20" pos:end="906:32">passedTimeout</name></decl>;</decl_stmt>
    <decl_stmt pos:start="907:5" pos:end="907:17"><decl pos:start="907:5" pos:end="907:16"><type pos:start="907:5" pos:end="907:7"><name pos:start="907:5" pos:end="907:7">int</name></type> <name pos:start="907:9" pos:end="907:16">errorVal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="908:5" pos:end="908:40"><decl pos:start="908:5" pos:end="908:39"><type pos:start="908:5" pos:end="908:13"><name pos:start="908:5" pos:end="908:13">socklen_t</name></type> <name pos:start="908:15" pos:end="908:25">errorValLen</name> <init pos:start="908:27" pos:end="908:39">= <expr pos:start="908:29" pos:end="908:39"><sizeof pos:start="908:29" pos:end="908:39">sizeof<argument_list pos:start="908:35" pos:end="908:39">(<argument pos:start="908:36" pos:end="908:38"><expr pos:start="908:36" pos:end="908:38"><name pos:start="908:36" pos:end="908:38">int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="909:5" pos:end="909:39"><decl pos:start="909:5" pos:end="909:38"><type pos:start="909:5" pos:end="909:24"><name pos:start="909:5" pos:end="909:22"><name pos:start="909:5" pos:end="909:10">struct</name> <name pos:start="909:12" pos:end="909:22">selectFDSet</name></name> <modifier pos:start="909:24" pos:end="909:24">*</modifier></type><name pos:start="909:25" pos:end="909:31">context</name> <init pos:start="909:33" pos:end="909:38">= <expr pos:start="909:35" pos:end="909:38"><name pos:start="909:35" pos:end="909:38">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="911:5" pos:end="1047:5"><if pos:start="911:5" pos:end="962:5">if <condition pos:start="911:8" pos:end="911:34">(<expr pos:start="911:9" pos:end="911:33"><name pos:start="911:9" pos:end="911:25">SOCKET_STEP_START</name> <operator pos:start="911:27" pos:end="911:28">==</operator> <name pos:start="911:30" pos:end="911:33">step</name></expr>)</condition> <block pos:start="911:36" pos:end="962:5">{<block_content pos:start="913:9" pos:end="960:18">

        <expr_stmt pos:start="913:9" pos:end="913:46"><expr pos:start="913:9" pos:end="913:45"><name pos:start="913:9" pos:end="913:15">context</name> <operator pos:start="913:17" pos:end="913:17">=</operator> <operator pos:start="913:19" pos:end="913:19">(</operator>struct <name pos:start="913:27" pos:end="913:37">selectFDSet</name> <operator pos:start="913:39" pos:end="913:39">*</operator><operator pos:start="913:40" pos:end="913:40">)</operator> <name pos:start="913:42" pos:end="913:45">ctxt</name></expr>;</expr_stmt>

        <expr_stmt pos:start="915:9" pos:end="915:31"><expr pos:start="915:9" pos:end="915:30"><name pos:start="915:9" pos:end="915:21"><name pos:start="915:9" pos:end="915:15">context</name><operator pos:start="915:16" pos:end="915:17">-&gt;</operator><name pos:start="915:18" pos:end="915:21">sock</name></name> <operator pos:start="915:23" pos:end="915:23">=</operator> <name pos:start="915:25" pos:end="915:30">handle</name></expr>;</expr_stmt>
        <expr_stmt pos:start="916:9" pos:end="916:35"><expr pos:start="916:9" pos:end="916:34"><name pos:start="916:9" pos:end="916:21"><name pos:start="916:9" pos:end="916:15">context</name><operator pos:start="916:16" pos:end="916:17">-&gt;</operator><name pos:start="916:18" pos:end="916:21">nfds</name></name> <operator pos:start="916:23" pos:end="916:23">=</operator> <name pos:start="916:25" pos:end="916:30">handle</name> <operator pos:start="916:32" pos:end="916:32">+</operator> <literal type="number" pos:start="916:34" pos:end="916:34">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="918:9" pos:end="944:9"><if pos:start="918:9" pos:end="925:9">if <condition pos:start="918:12" pos:end="918:52">(<expr pos:start="918:13" pos:end="918:51"><name pos:start="918:13" pos:end="918:28">useAdbNetworking</name> <operator pos:start="918:30" pos:end="918:31">&amp;&amp;</operator> <operator pos:start="918:33" pos:end="918:33">!</operator><call pos:start="918:34" pos:end="918:51"><name pos:start="918:34" pos:end="918:44">isLocalhost</name><argument_list pos:start="918:45" pos:end="918:51">(<argument pos:start="918:46" pos:end="918:50"><expr pos:start="918:46" pos:end="918:50"><operator pos:start="918:46" pos:end="918:46">&amp;</operator><name pos:start="918:47" pos:end="918:50">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="918:54" pos:end="925:9">{<block_content pos:start="922:13" pos:end="922:58">

            <comment type="line" pos:start="920:13" pos:end="920:59">// LOGD("+connect to address 0x%08x (via adb)",</comment>
            <comment type="line" pos:start="921:13" pos:end="921:45">//         addr.sin_addr.s_addr);</comment>
            <expr_stmt pos:start="922:13" pos:end="922:58"><expr pos:start="922:13" pos:end="922:57"><name pos:start="922:13" pos:end="922:14">rc</name> <operator pos:start="922:16" pos:end="922:16">=</operator> <call pos:start="922:18" pos:end="922:57"><name pos:start="922:18" pos:end="922:42">adb_networking_connect_fd</name><argument_list pos:start="922:43" pos:end="922:57">(<argument pos:start="922:44" pos:end="922:49"><expr pos:start="922:44" pos:end="922:49"><name pos:start="922:44" pos:end="922:49">handle</name></expr></argument>, <argument pos:start="922:52" pos:end="922:56"><expr pos:start="922:52" pos:end="922:56"><operator pos:start="922:52" pos:end="922:52">&amp;</operator><name pos:start="922:53" pos:end="922:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:start="923:13" pos:end="923:69">// LOGD("-connect ret %d errno %d (via adb)", rc, errno);</comment>

        </block_content>}</block></if> <else pos:start="925:11" pos:end="944:9">else <block pos:start="925:16" pos:end="944:9">{<block_content pos:start="926:13" pos:end="940:47">
            <expr_stmt pos:start="926:13" pos:end="927:42"><expr pos:start="926:13" pos:end="927:41"><call pos:start="926:13" pos:end="927:41"><name pos:start="926:13" pos:end="926:30">log_socket_connect</name><argument_list pos:start="926:31" pos:end="927:41">(<argument pos:start="926:32" pos:end="926:37"><expr pos:start="926:32" pos:end="926:37"><name pos:start="926:32" pos:end="926:37">handle</name></expr></argument>, <argument pos:start="926:40" pos:end="926:66"><expr pos:start="926:40" pos:end="926:66"><call pos:start="926:40" pos:end="926:66"><name pos:start="926:40" pos:end="926:44">ntohl</name><argument_list pos:start="926:45" pos:end="926:66">(<argument pos:start="926:46" pos:end="926:65"><expr pos:start="926:46" pos:end="926:65"><name pos:start="926:46" pos:end="926:65"><name pos:start="926:46" pos:end="926:49">addr</name><operator pos:start="926:50" pos:end="926:50">.</operator><name pos:start="926:51" pos:end="926:58">sin_addr</name><operator pos:start="926:59" pos:end="926:59">.</operator><name pos:start="926:60" pos:end="926:65">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument pos:start="927:21" pos:end="927:40"><expr pos:start="927:21" pos:end="927:40"><call pos:start="927:21" pos:end="927:40"><name pos:start="927:21" pos:end="927:25">ntohs</name><argument_list pos:start="927:26" pos:end="927:40">(<argument pos:start="927:27" pos:end="927:39"><expr pos:start="927:27" pos:end="927:39"><name pos:start="927:27" pos:end="927:39"><name pos:start="927:27" pos:end="927:30">addr</name><operator pos:start="927:31" pos:end="927:31">.</operator><name pos:start="927:32" pos:end="927:39">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="928:13" pos:end="928:48">/* set the socket to non-blocking */</comment>
            <decl_stmt pos:start="929:13" pos:end="929:33"><decl pos:start="929:13" pos:end="929:32"><type pos:start="929:13" pos:end="929:15"><name pos:start="929:13" pos:end="929:15">int</name></type> <name pos:start="929:17" pos:end="929:21">block</name> <init pos:start="929:23" pos:end="929:32">= <expr pos:start="929:25" pos:end="929:32"><name pos:start="929:25" pos:end="929:32">JNI_TRUE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="930:13" pos:end="930:48"><expr pos:start="930:13" pos:end="930:47"><name pos:start="930:13" pos:end="930:14">rc</name> <operator pos:start="930:16" pos:end="930:16">=</operator> <call pos:start="930:18" pos:end="930:47"><name pos:start="930:18" pos:end="930:22">ioctl</name><argument_list pos:start="930:23" pos:end="930:47">(<argument pos:start="930:24" pos:end="930:29"><expr pos:start="930:24" pos:end="930:29"><name pos:start="930:24" pos:end="930:29">handle</name></expr></argument>, <argument pos:start="930:32" pos:end="930:38"><expr pos:start="930:32" pos:end="930:38"><name pos:start="930:32" pos:end="930:38">FIONBIO</name></expr></argument>, <argument pos:start="930:41" pos:end="930:46"><expr pos:start="930:41" pos:end="930:46"><operator pos:start="930:41" pos:end="930:41">&amp;</operator><name pos:start="930:42" pos:end="930:46">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="931:13" pos:end="933:13"><if pos:start="931:13" pos:end="933:13">if <condition pos:start="931:16" pos:end="931:24">(<expr pos:start="931:17" pos:end="931:23"><literal type="number" pos:start="931:17" pos:end="931:17">0</literal> <operator pos:start="931:19" pos:end="931:20">!=</operator> <name pos:start="931:22" pos:end="931:23">rc</name></expr>)</condition> <block pos:start="931:26" pos:end="933:13">{<block_content pos:start="932:17" pos:end="932:40">
                <return pos:start="932:17" pos:end="932:40">return <expr pos:start="932:24" pos:end="932:39"><call pos:start="932:24" pos:end="932:39"><name pos:start="932:24" pos:end="932:35">convertError</name><argument_list pos:start="932:36" pos:end="932:39">(<argument pos:start="932:37" pos:end="932:38"><expr pos:start="932:37" pos:end="932:38"><name pos:start="932:37" pos:end="932:38">rc</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="935:13" pos:end="935:75">// LOGD("+connect to address 0x%08x (via normal) on handle %d",</comment>
            <comment type="line" pos:start="936:13" pos:end="936:53">//         addr.sin_addr.s_addr, handle);</comment>
            <do pos:start="937:13" pos:end="940:47">do <block pos:start="937:16" pos:end="940:13">{<block_content pos:start="938:17" pos:end="939:49">
                <expr_stmt pos:start="938:17" pos:end="939:49"><expr pos:start="938:17" pos:end="939:48"><name pos:start="938:17" pos:end="938:18">rc</name> <operator pos:start="938:20" pos:end="938:20">=</operator> <call pos:start="938:22" pos:end="939:48"><name pos:start="938:22" pos:end="938:28">connect</name><argument_list pos:start="938:29" pos:end="939:48">(<argument pos:start="938:30" pos:end="938:35"><expr pos:start="938:30" pos:end="938:35"><name pos:start="938:30" pos:end="938:35">handle</name></expr></argument>, <argument pos:start="938:38" pos:end="938:62"><expr pos:start="938:38" pos:end="938:62"><operator pos:start="938:38" pos:end="938:38">(</operator>struct <name pos:start="938:46" pos:end="938:53">sockaddr</name> <operator pos:start="938:55" pos:end="938:55">*</operator><operator pos:start="938:56" pos:end="938:56">)</operator> <operator pos:start="938:58" pos:end="938:58">&amp;</operator><name pos:start="938:59" pos:end="938:62">addr</name></expr></argument>,
                        <argument pos:start="939:25" pos:end="939:47"><expr pos:start="939:25" pos:end="939:47"><sizeof pos:start="939:25" pos:end="939:47">sizeof<argument_list pos:start="939:31" pos:end="939:47">(<argument pos:start="939:32" pos:end="939:46"><expr pos:start="939:32" pos:end="939:46">struct <name pos:start="939:39" pos:end="939:46">sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition pos:start="940:21" pos:end="940:46">(<expr pos:start="940:22" pos:end="940:45"><name pos:start="940:22" pos:end="940:23">rc</name> <operator pos:start="940:25" pos:end="940:25">&lt;</operator> <literal type="number" pos:start="940:27" pos:end="940:27">0</literal> <operator pos:start="940:29" pos:end="940:30">&amp;&amp;</operator> <name pos:start="940:32" pos:end="940:36">errno</name> <operator pos:start="940:38" pos:end="940:39">==</operator> <name pos:start="940:41" pos:end="940:45">EINTR</name></expr>)</condition>;</do>
            <comment type="line" pos:start="941:13" pos:end="941:74">// LOGD("-connect to address 0x%08x (via normal) returned %d",</comment>
            <comment type="line" pos:start="942:13" pos:end="942:55">//         addr.sin_addr.s_addr, (int) rc);</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="946:9" pos:end="957:9"><if pos:start="946:9" pos:end="957:9">if <condition pos:start="946:12" pos:end="946:21">(<expr pos:start="946:13" pos:end="946:20"><name pos:start="946:13" pos:end="946:14">rc</name> <operator pos:start="946:16" pos:end="946:17">==</operator> <operator pos:start="946:19" pos:end="946:19">-</operator><literal type="number" pos:start="946:20" pos:end="946:20">1</literal></expr>)</condition> <block pos:start="946:23" pos:end="957:9">{<block_content pos:start="947:13" pos:end="956:13">
            <expr_stmt pos:start="947:13" pos:end="947:23"><expr pos:start="947:13" pos:end="947:22"><name pos:start="947:13" pos:end="947:14">rc</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <name pos:start="947:18" pos:end="947:22">errno</name></expr>;</expr_stmt>
            <switch pos:start="948:13" pos:end="956:13">switch <condition pos:start="948:20" pos:end="948:23">(<expr pos:start="948:21" pos:end="948:22"><name pos:start="948:21" pos:end="948:22">rc</name></expr>)</condition> <block pos:start="948:25" pos:end="956:13">{<block_content pos:start="949:17" pos:end="955:44">
                <case pos:start="949:17" pos:end="949:27">case <expr pos:start="949:22" pos:end="949:26"><name pos:start="949:22" pos:end="949:26">EINTR</name></expr>:</case>
                    <return pos:start="950:21" pos:end="950:48">return <expr pos:start="950:28" pos:end="950:47"><name pos:start="950:28" pos:end="950:47">SOCKERR_ALREADYBOUND</name></expr>;</return>
                <case pos:start="951:17" pos:end="951:28">case <expr pos:start="951:22" pos:end="951:27"><name pos:start="951:22" pos:end="951:27">EAGAIN</name></expr>:</case>
                <case pos:start="952:17" pos:end="952:33">case <expr pos:start="952:22" pos:end="952:32"><name pos:start="952:22" pos:end="952:32">EINPROGRESS</name></expr>:</case>
                    <return pos:start="953:21" pos:end="953:48">return <expr pos:start="953:28" pos:end="953:47"><name pos:start="953:28" pos:end="953:47">SOCKERR_NOTCONNECTED</name></expr>;</return>
                <default pos:start="954:17" pos:end="954:24">default:</default>
                    <return pos:start="955:21" pos:end="955:44">return <expr pos:start="955:28" pos:end="955:43"><call pos:start="955:28" pos:end="955:43"><name pos:start="955:28" pos:end="955:39">convertError</name><argument_list pos:start="955:40" pos:end="955:43">(<argument pos:start="955:41" pos:end="955:42"><expr pos:start="955:41" pos:end="955:42"><name pos:start="955:41" pos:end="955:42">rc</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="959:9" pos:end="959:59">/* we connected right off the bat so just return */</comment>
        <return pos:start="960:9" pos:end="960:18">return <expr pos:start="960:16" pos:end="960:17"><name pos:start="960:16" pos:end="960:17">rc</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="962:7" pos:end="1040:5">else if <condition pos:start="962:15" pos:end="962:41">(<expr pos:start="962:16" pos:end="962:40"><name pos:start="962:16" pos:end="962:32">SOCKET_STEP_CHECK</name> <operator pos:start="962:34" pos:end="962:35">==</operator> <name pos:start="962:37" pos:end="962:40">step</name></expr>)</condition> <block pos:start="962:43" pos:end="1040:5">{<block_content pos:start="965:9" pos:end="1039:36">
        <comment type="block" pos:start="963:9" pos:end="963:48">/* now check if we have connected yet */</comment>

        <expr_stmt pos:start="965:9" pos:end="965:46"><expr pos:start="965:9" pos:end="965:45"><name pos:start="965:9" pos:end="965:15">context</name> <operator pos:start="965:17" pos:end="965:17">=</operator> <operator pos:start="965:19" pos:end="965:19">(</operator>struct <name pos:start="965:27" pos:end="965:37">selectFDSet</name> <operator pos:start="965:39" pos:end="965:39">*</operator><operator pos:start="965:40" pos:end="965:40">)</operator> <name pos:start="965:42" pos:end="965:45">ctxt</name></expr>;</expr_stmt>

        <comment type="block" pos:start="967:9" pos:end="971:11">/*
         * set the timeout value to be used. Because on some unix platforms we
         * don't get notified when a socket is closed we only sleep for 100ms
         * at a time
         */</comment>
        <expr_stmt pos:start="972:9" pos:end="972:33"><expr pos:start="972:9" pos:end="972:32"><name pos:start="972:9" pos:end="972:28"><name pos:start="972:9" pos:end="972:21">passedTimeout</name><operator pos:start="972:22" pos:end="972:22">.</operator><name pos:start="972:23" pos:end="972:28">tv_sec</name></name> <operator pos:start="972:30" pos:end="972:30">=</operator> <literal type="number" pos:start="972:32" pos:end="972:32">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="973:9" pos:end="977:9"><if pos:start="973:9" pos:end="975:9">if <condition pos:start="973:12" pos:end="973:26">(<expr pos:start="973:13" pos:end="973:25"><name pos:start="973:13" pos:end="973:19">timeout</name> <operator pos:start="973:21" pos:end="973:21">&gt;</operator> <literal type="number" pos:start="973:23" pos:end="973:25">100</literal></expr>)</condition> <block pos:start="973:28" pos:end="975:9">{<block_content pos:start="974:13" pos:end="974:47">
            <expr_stmt pos:start="974:13" pos:end="974:47"><expr pos:start="974:13" pos:end="974:46"><name pos:start="974:13" pos:end="974:33"><name pos:start="974:13" pos:end="974:25">passedTimeout</name><operator pos:start="974:26" pos:end="974:26">.</operator><name pos:start="974:27" pos:end="974:33">tv_usec</name></name> <operator pos:start="974:35" pos:end="974:35">=</operator> <literal type="number" pos:start="974:37" pos:end="974:39">100</literal> <operator pos:start="974:41" pos:end="974:41">*</operator> <literal type="number" pos:start="974:43" pos:end="974:46">1000</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="975:11" pos:end="977:9">else if <condition pos:start="975:19" pos:end="975:37">(<expr pos:start="975:20" pos:end="975:36"><operator pos:start="975:20" pos:end="975:20">(</operator><name pos:start="975:21" pos:end="975:23">int</name><operator pos:start="975:24" pos:end="975:24">)</operator><name pos:start="975:25" pos:end="975:31">timeout</name> <operator pos:start="975:33" pos:end="975:34">&gt;=</operator> <literal type="number" pos:start="975:36" pos:end="975:36">0</literal></expr>)</condition> <block pos:start="975:39" pos:end="977:9">{<block_content pos:start="976:11" pos:end="976:49">
          <expr_stmt pos:start="976:11" pos:end="976:49"><expr pos:start="976:11" pos:end="976:48"><name pos:start="976:11" pos:end="976:31"><name pos:start="976:11" pos:end="976:23">passedTimeout</name><operator pos:start="976:24" pos:end="976:24">.</operator><name pos:start="976:25" pos:end="976:31">tv_usec</name></name> <operator pos:start="976:33" pos:end="976:33">=</operator> <name pos:start="976:35" pos:end="976:41">timeout</name> <operator pos:start="976:43" pos:end="976:43">*</operator> <literal type="number" pos:start="976:45" pos:end="976:48">1000</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="979:9" pos:end="979:51">/* initialize the FD sets for the select */</comment>
        <expr_stmt pos:start="980:9" pos:end="980:42"><expr pos:start="980:9" pos:end="980:41"><call pos:start="980:9" pos:end="980:41"><name pos:start="980:9" pos:end="980:15">FD_ZERO</name><argument_list pos:start="980:16" pos:end="980:41">(<argument pos:start="980:17" pos:end="980:40"><expr pos:start="980:17" pos:end="980:40"><operator pos:start="980:17" pos:end="980:17">&amp;</operator><operator pos:start="980:18" pos:end="980:18">(</operator><name pos:start="980:19" pos:end="980:39"><name pos:start="980:19" pos:end="980:25">context</name><operator pos:start="980:26" pos:end="980:27">-&gt;</operator><name pos:start="980:28" pos:end="980:39">exceptionSet</name></name><operator pos:start="980:40" pos:end="980:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="981:9" pos:end="981:38"><expr pos:start="981:9" pos:end="981:37"><call pos:start="981:9" pos:end="981:37"><name pos:start="981:9" pos:end="981:15">FD_ZERO</name><argument_list pos:start="981:16" pos:end="981:37">(<argument pos:start="981:17" pos:end="981:36"><expr pos:start="981:17" pos:end="981:36"><operator pos:start="981:17" pos:end="981:17">&amp;</operator><operator pos:start="981:18" pos:end="981:18">(</operator><name pos:start="981:19" pos:end="981:35"><name pos:start="981:19" pos:end="981:25">context</name><operator pos:start="981:26" pos:end="981:27">-&gt;</operator><name pos:start="981:28" pos:end="981:35">writeSet</name></name><operator pos:start="981:36" pos:end="981:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="982:9" pos:end="982:37"><expr pos:start="982:9" pos:end="982:36"><call pos:start="982:9" pos:end="982:36"><name pos:start="982:9" pos:end="982:15">FD_ZERO</name><argument_list pos:start="982:16" pos:end="982:36">(<argument pos:start="982:17" pos:end="982:35"><expr pos:start="982:17" pos:end="982:35"><operator pos:start="982:17" pos:end="982:17">&amp;</operator><operator pos:start="982:18" pos:end="982:18">(</operator><name pos:start="982:19" pos:end="982:34"><name pos:start="982:19" pos:end="982:25">context</name><operator pos:start="982:26" pos:end="982:27">-&gt;</operator><name pos:start="982:28" pos:end="982:34">readSet</name></name><operator pos:start="982:35" pos:end="982:35">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="983:9" pos:end="983:52"><expr pos:start="983:9" pos:end="983:51"><call pos:start="983:9" pos:end="983:51"><name pos:start="983:9" pos:end="983:14">FD_SET</name><argument_list pos:start="983:15" pos:end="983:51">(<argument pos:start="983:16" pos:end="983:28"><expr pos:start="983:16" pos:end="983:28"><name pos:start="983:16" pos:end="983:28"><name pos:start="983:16" pos:end="983:22">context</name><operator pos:start="983:23" pos:end="983:24">-&gt;</operator><name pos:start="983:25" pos:end="983:28">sock</name></name></expr></argument>, <argument pos:start="983:31" pos:end="983:50"><expr pos:start="983:31" pos:end="983:50"><operator pos:start="983:31" pos:end="983:31">&amp;</operator><operator pos:start="983:32" pos:end="983:32">(</operator><name pos:start="983:33" pos:end="983:49"><name pos:start="983:33" pos:end="983:39">context</name><operator pos:start="983:40" pos:end="983:41">-&gt;</operator><name pos:start="983:42" pos:end="983:49">writeSet</name></name><operator pos:start="983:50" pos:end="983:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="984:9" pos:end="984:51"><expr pos:start="984:9" pos:end="984:50"><call pos:start="984:9" pos:end="984:50"><name pos:start="984:9" pos:end="984:14">FD_SET</name><argument_list pos:start="984:15" pos:end="984:50">(<argument pos:start="984:16" pos:end="984:28"><expr pos:start="984:16" pos:end="984:28"><name pos:start="984:16" pos:end="984:28"><name pos:start="984:16" pos:end="984:22">context</name><operator pos:start="984:23" pos:end="984:24">-&gt;</operator><name pos:start="984:25" pos:end="984:28">sock</name></name></expr></argument>, <argument pos:start="984:31" pos:end="984:49"><expr pos:start="984:31" pos:end="984:49"><operator pos:start="984:31" pos:end="984:31">&amp;</operator><operator pos:start="984:32" pos:end="984:32">(</operator><name pos:start="984:33" pos:end="984:48"><name pos:start="984:33" pos:end="984:39">context</name><operator pos:start="984:40" pos:end="984:41">-&gt;</operator><name pos:start="984:42" pos:end="984:48">readSet</name></name><operator pos:start="984:49" pos:end="984:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="985:9" pos:end="985:56"><expr pos:start="985:9" pos:end="985:55"><call pos:start="985:9" pos:end="985:55"><name pos:start="985:9" pos:end="985:14">FD_SET</name><argument_list pos:start="985:15" pos:end="985:55">(<argument pos:start="985:16" pos:end="985:28"><expr pos:start="985:16" pos:end="985:28"><name pos:start="985:16" pos:end="985:28"><name pos:start="985:16" pos:end="985:22">context</name><operator pos:start="985:23" pos:end="985:24">-&gt;</operator><name pos:start="985:25" pos:end="985:28">sock</name></name></expr></argument>, <argument pos:start="985:31" pos:end="985:54"><expr pos:start="985:31" pos:end="985:54"><operator pos:start="985:31" pos:end="985:31">&amp;</operator><operator pos:start="985:32" pos:end="985:32">(</operator><name pos:start="985:33" pos:end="985:53"><name pos:start="985:33" pos:end="985:39">context</name><operator pos:start="985:40" pos:end="985:41">-&gt;</operator><name pos:start="985:42" pos:end="985:53">exceptionSet</name></name><operator pos:start="985:54" pos:end="985:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="987:9" pos:end="991:62"><expr pos:start="987:9" pos:end="991:61"><name pos:start="987:9" pos:end="987:10">rc</name> <operator pos:start="987:12" pos:end="987:12">=</operator> <call pos:start="987:14" pos:end="991:61"><name pos:start="987:14" pos:end="987:19">select</name><argument_list pos:start="987:20" pos:end="991:61">(<argument pos:start="987:21" pos:end="987:33"><expr pos:start="987:21" pos:end="987:33"><name pos:start="987:21" pos:end="987:33"><name pos:start="987:21" pos:end="987:27">context</name><operator pos:start="987:28" pos:end="987:29">-&gt;</operator><name pos:start="987:30" pos:end="987:33">nfds</name></name></expr></argument>,
                   <argument pos:start="988:20" pos:end="988:38"><expr pos:start="988:20" pos:end="988:38"><operator pos:start="988:20" pos:end="988:20">&amp;</operator><operator pos:start="988:21" pos:end="988:21">(</operator><name pos:start="988:22" pos:end="988:37"><name pos:start="988:22" pos:end="988:28">context</name><operator pos:start="988:29" pos:end="988:30">-&gt;</operator><name pos:start="988:31" pos:end="988:37">readSet</name></name><operator pos:start="988:38" pos:end="988:38">)</operator></expr></argument>,
                   <argument pos:start="989:20" pos:end="989:39"><expr pos:start="989:20" pos:end="989:39"><operator pos:start="989:20" pos:end="989:20">&amp;</operator><operator pos:start="989:21" pos:end="989:21">(</operator><name pos:start="989:22" pos:end="989:38"><name pos:start="989:22" pos:end="989:28">context</name><operator pos:start="989:29" pos:end="989:30">-&gt;</operator><name pos:start="989:31" pos:end="989:38">writeSet</name></name><operator pos:start="989:39" pos:end="989:39">)</operator></expr></argument>,
                   <argument pos:start="990:20" pos:end="990:43"><expr pos:start="990:20" pos:end="990:43"><operator pos:start="990:20" pos:end="990:20">&amp;</operator><operator pos:start="990:21" pos:end="990:21">(</operator><name pos:start="990:22" pos:end="990:42"><name pos:start="990:22" pos:end="990:28">context</name><operator pos:start="990:29" pos:end="990:30">-&gt;</operator><name pos:start="990:31" pos:end="990:42">exceptionSet</name></name><operator pos:start="990:43" pos:end="990:43">)</operator></expr></argument>,
                   <argument pos:start="991:20" pos:end="991:60"><expr pos:start="991:20" pos:end="991:60"><ternary pos:start="991:20" pos:end="991:60"><condition pos:start="991:20" pos:end="991:38"><expr pos:start="991:20" pos:end="991:36"><operator pos:start="991:20" pos:end="991:20">(</operator><name pos:start="991:21" pos:end="991:23">int</name><operator pos:start="991:24" pos:end="991:24">)</operator><name pos:start="991:25" pos:end="991:31">timeout</name> <operator pos:start="991:33" pos:end="991:34">&gt;=</operator> <literal type="number" pos:start="991:36" pos:end="991:36">0</literal></expr> ?</condition><then pos:start="991:40" pos:end="991:53"> <expr pos:start="991:40" pos:end="991:53"><operator pos:start="991:40" pos:end="991:40">&amp;</operator><name pos:start="991:41" pos:end="991:53">passedTimeout</name></expr> </then><else pos:start="991:55" pos:end="991:60">: <expr pos:start="991:57" pos:end="991:60"><name pos:start="991:57" pos:end="991:60">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="993:9" pos:end="993:69">/* if there is at least one descriptor ready to be checked */</comment>
        <if_stmt pos:start="994:9" pos:end="1033:9"><if pos:start="994:9" pos:end="1022:9">if <condition pos:start="994:12" pos:end="994:19">(<expr pos:start="994:13" pos:end="994:18"><literal type="number" pos:start="994:13" pos:end="994:13">0</literal> <operator pos:start="994:15" pos:end="994:15">&lt;</operator> <name pos:start="994:17" pos:end="994:18">rc</name></expr>)</condition> <block pos:start="994:21" pos:end="1022:9">{<block_content pos:start="996:13" pos:end="1020:13">
            <comment type="block" pos:start="995:13" pos:end="995:78">/* if the descriptor is in the write set we connected or failed */</comment>
            <if_stmt pos:start="996:13" pos:end="1010:13"><if pos:start="996:13" pos:end="1010:13">if <condition pos:start="996:16" pos:end="996:62">(<expr pos:start="996:17" pos:end="996:61"><call pos:start="996:17" pos:end="996:61"><name pos:start="996:17" pos:end="996:24">FD_ISSET</name><argument_list pos:start="996:25" pos:end="996:61">(<argument pos:start="996:26" pos:end="996:38"><expr pos:start="996:26" pos:end="996:38"><name pos:start="996:26" pos:end="996:38"><name pos:start="996:26" pos:end="996:32">context</name><operator pos:start="996:33" pos:end="996:34">-&gt;</operator><name pos:start="996:35" pos:end="996:38">sock</name></name></expr></argument>, <argument pos:start="996:41" pos:end="996:60"><expr pos:start="996:41" pos:end="996:60"><operator pos:start="996:41" pos:end="996:41">&amp;</operator><operator pos:start="996:42" pos:end="996:42">(</operator><name pos:start="996:43" pos:end="996:59"><name pos:start="996:43" pos:end="996:49">context</name><operator pos:start="996:50" pos:end="996:51">-&gt;</operator><name pos:start="996:52" pos:end="996:59">writeSet</name></name><operator pos:start="996:60" pos:end="996:60">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="996:64" pos:end="1010:13">{<block_content pos:start="998:17" pos:end="1009:17">

                <if_stmt pos:start="998:17" pos:end="1009:17"><if pos:start="998:17" pos:end="1001:17">if <condition pos:start="998:20" pos:end="998:66">(<expr pos:start="998:21" pos:end="998:65"><operator pos:start="998:21" pos:end="998:21">!</operator><call pos:start="998:22" pos:end="998:65"><name pos:start="998:22" pos:end="998:29">FD_ISSET</name><argument_list pos:start="998:30" pos:end="998:65">(<argument pos:start="998:31" pos:end="998:43"><expr pos:start="998:31" pos:end="998:43"><name pos:start="998:31" pos:end="998:43"><name pos:start="998:31" pos:end="998:37">context</name><operator pos:start="998:38" pos:end="998:39">-&gt;</operator><name pos:start="998:40" pos:end="998:43">sock</name></name></expr></argument>, <argument pos:start="998:46" pos:end="998:64"><expr pos:start="998:46" pos:end="998:64"><operator pos:start="998:46" pos:end="998:46">&amp;</operator><operator pos:start="998:47" pos:end="998:47">(</operator><name pos:start="998:48" pos:end="998:63"><name pos:start="998:48" pos:end="998:54">context</name><operator pos:start="998:55" pos:end="998:56">-&gt;</operator><name pos:start="998:57" pos:end="998:63">readSet</name></name><operator pos:start="998:64" pos:end="998:64">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="998:68" pos:end="1001:17">{<block_content pos:start="1000:21" pos:end="1000:29">
                    <comment type="block" pos:start="999:21" pos:end="999:49">/* ok we have connected ok */</comment>
                    <return pos:start="1000:21" pos:end="1000:29">return <expr pos:start="1000:28" pos:end="1000:28"><literal type="number" pos:start="1000:28" pos:end="1000:28">0</literal></expr>;</return>
                </block_content>}</block></if> <else pos:start="1001:19" pos:end="1009:17">else <block pos:start="1001:24" pos:end="1009:17">{<block_content pos:start="1003:21" pos:end="1008:21">
                    <comment type="block" pos:start="1002:21" pos:end="1002:69">/* ok we have more work to do to figure it out */</comment>
                    <if_stmt pos:start="1003:21" pos:end="1008:21"><if pos:start="1003:21" pos:end="1006:21">if <condition pos:start="1003:24" pos:end="1004:58">(<expr pos:start="1003:25" pos:end="1004:57"><call pos:start="1003:25" pos:end="1004:52"><name pos:start="1003:25" pos:end="1003:34">getsockopt</name><argument_list pos:start="1003:35" pos:end="1004:52">(<argument pos:start="1003:36" pos:end="1003:48"><expr pos:start="1003:36" pos:end="1003:48"><name pos:start="1003:36" pos:end="1003:48"><name pos:start="1003:36" pos:end="1003:42">context</name><operator pos:start="1003:43" pos:end="1003:44">-&gt;</operator><name pos:start="1003:45" pos:end="1003:48">sock</name></name></expr></argument>, <argument pos:start="1003:51" pos:end="1003:60"><expr pos:start="1003:51" pos:end="1003:60"><name pos:start="1003:51" pos:end="1003:60">SOL_SOCKET</name></expr></argument>, <argument pos:start="1003:63" pos:end="1003:70"><expr pos:start="1003:63" pos:end="1003:70"><name pos:start="1003:63" pos:end="1003:70">SO_ERROR</name></expr></argument>,
                            <argument pos:start="1004:29" pos:end="1004:37"><expr pos:start="1004:29" pos:end="1004:37"><operator pos:start="1004:29" pos:end="1004:29">&amp;</operator><name pos:start="1004:30" pos:end="1004:37">errorVal</name></expr></argument>, <argument pos:start="1004:40" pos:end="1004:51"><expr pos:start="1004:40" pos:end="1004:51"><operator pos:start="1004:40" pos:end="1004:40">&amp;</operator><name pos:start="1004:41" pos:end="1004:51">errorValLen</name></expr></argument>)</argument_list></call> <operator pos:start="1004:54" pos:end="1004:55">&gt;=</operator> <literal type="number" pos:start="1004:57" pos:end="1004:57">0</literal></expr>)</condition> <block pos:start="1004:60" pos:end="1006:21">{<block_content pos:start="1005:25" pos:end="1005:69">
                        <return pos:start="1005:25" pos:end="1005:69">return <expr pos:start="1005:32" pos:end="1005:68"><ternary pos:start="1005:32" pos:end="1005:68"><condition pos:start="1005:32" pos:end="1005:41"><expr pos:start="1005:32" pos:end="1005:39"><name pos:start="1005:32" pos:end="1005:39">errorVal</name></expr> ?</condition><then pos:start="1005:43" pos:end="1005:64"> <expr pos:start="1005:43" pos:end="1005:64"><call pos:start="1005:43" pos:end="1005:64"><name pos:start="1005:43" pos:end="1005:54">convertError</name><argument_list pos:start="1005:55" pos:end="1005:64">(<argument pos:start="1005:56" pos:end="1005:63"><expr pos:start="1005:56" pos:end="1005:63"><name pos:start="1005:56" pos:end="1005:63">errorVal</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="1005:66" pos:end="1005:68">: <expr pos:start="1005:68" pos:end="1005:68"><literal type="number" pos:start="1005:68" pos:end="1005:68">0</literal></expr></else></ternary></expr>;</return>
                    </block_content>}</block></if> <else pos:start="1006:23" pos:end="1008:21">else <block pos:start="1006:28" pos:end="1008:21">{<block_content pos:start="1007:25" pos:end="1007:51">
                        <return pos:start="1007:25" pos:end="1007:51">return <expr pos:start="1007:32" pos:end="1007:50"><call pos:start="1007:32" pos:end="1007:50"><name pos:start="1007:32" pos:end="1007:43">convertError</name><argument_list pos:start="1007:44" pos:end="1007:50">(<argument pos:start="1007:45" pos:end="1007:49"><expr pos:start="1007:45" pos:end="1007:49"><name pos:start="1007:45" pos:end="1007:49">errno</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1012:13" pos:end="1012:78">/* if the descriptor is in the exception set the connect failed */</comment>
            <if_stmt pos:start="1013:13" pos:end="1020:13"><if pos:start="1013:13" pos:end="1020:13">if <condition pos:start="1013:16" pos:end="1013:66">(<expr pos:start="1013:17" pos:end="1013:65"><call pos:start="1013:17" pos:end="1013:65"><name pos:start="1013:17" pos:end="1013:24">FD_ISSET</name><argument_list pos:start="1013:25" pos:end="1013:65">(<argument pos:start="1013:26" pos:end="1013:38"><expr pos:start="1013:26" pos:end="1013:38"><name pos:start="1013:26" pos:end="1013:38"><name pos:start="1013:26" pos:end="1013:32">context</name><operator pos:start="1013:33" pos:end="1013:34">-&gt;</operator><name pos:start="1013:35" pos:end="1013:38">sock</name></name></expr></argument>, <argument pos:start="1013:41" pos:end="1013:64"><expr pos:start="1013:41" pos:end="1013:64"><operator pos:start="1013:41" pos:end="1013:41">&amp;</operator><operator pos:start="1013:42" pos:end="1013:42">(</operator><name pos:start="1013:43" pos:end="1013:63"><name pos:start="1013:43" pos:end="1013:49">context</name><operator pos:start="1013:50" pos:end="1013:51">-&gt;</operator><name pos:start="1013:52" pos:end="1013:63">exceptionSet</name></name><operator pos:start="1013:64" pos:end="1013:64">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1013:68" pos:end="1020:13">{<block_content pos:start="1014:17" pos:end="1019:40">
                <if_stmt pos:start="1014:17" pos:end="1017:17"><if pos:start="1014:17" pos:end="1017:17">if <condition pos:start="1014:20" pos:end="1015:43">(<expr pos:start="1014:21" pos:end="1015:42"><call pos:start="1014:21" pos:end="1015:37"><name pos:start="1014:21" pos:end="1014:30">getsockopt</name><argument_list pos:start="1014:31" pos:end="1015:37">(<argument pos:start="1014:32" pos:end="1014:44"><expr pos:start="1014:32" pos:end="1014:44"><name pos:start="1014:32" pos:end="1014:44"><name pos:start="1014:32" pos:end="1014:38">context</name><operator pos:start="1014:39" pos:end="1014:40">-&gt;</operator><name pos:start="1014:41" pos:end="1014:44">sock</name></name></expr></argument>, <argument pos:start="1014:47" pos:end="1014:56"><expr pos:start="1014:47" pos:end="1014:56"><name pos:start="1014:47" pos:end="1014:56">SOL_SOCKET</name></expr></argument>, <argument pos:start="1014:59" pos:end="1014:66"><expr pos:start="1014:59" pos:end="1014:66"><name pos:start="1014:59" pos:end="1014:66">SO_ERROR</name></expr></argument>, <argument pos:start="1014:69" pos:end="1014:77"><expr pos:start="1014:69" pos:end="1014:77"><operator pos:start="1014:69" pos:end="1014:69">&amp;</operator><name pos:start="1014:70" pos:end="1014:77">errorVal</name></expr></argument>,
                        <argument pos:start="1015:25" pos:end="1015:36"><expr pos:start="1015:25" pos:end="1015:36"><operator pos:start="1015:25" pos:end="1015:25">&amp;</operator><name pos:start="1015:26" pos:end="1015:36">errorValLen</name></expr></argument>)</argument_list></call> <operator pos:start="1015:39" pos:end="1015:40">&gt;=</operator> <literal type="number" pos:start="1015:42" pos:end="1015:42">0</literal></expr>)</condition> <block pos:start="1015:45" pos:end="1017:17">{<block_content pos:start="1016:21" pos:end="1016:65">
                    <return pos:start="1016:21" pos:end="1016:65">return <expr pos:start="1016:28" pos:end="1016:64"><ternary pos:start="1016:28" pos:end="1016:64"><condition pos:start="1016:28" pos:end="1016:37"><expr pos:start="1016:28" pos:end="1016:35"><name pos:start="1016:28" pos:end="1016:35">errorVal</name></expr> ?</condition><then pos:start="1016:39" pos:end="1016:60"> <expr pos:start="1016:39" pos:end="1016:60"><call pos:start="1016:39" pos:end="1016:60"><name pos:start="1016:39" pos:end="1016:50">convertError</name><argument_list pos:start="1016:51" pos:end="1016:60">(<argument pos:start="1016:52" pos:end="1016:59"><expr pos:start="1016:52" pos:end="1016:59"><name pos:start="1016:52" pos:end="1016:59">errorVal</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="1016:62" pos:end="1016:64">: <expr pos:start="1016:64" pos:end="1016:64"><literal type="number" pos:start="1016:64" pos:end="1016:64">0</literal></expr></else></ternary></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1018:17" pos:end="1018:27"><expr pos:start="1018:17" pos:end="1018:26"><name pos:start="1018:17" pos:end="1018:18">rc</name> <operator pos:start="1018:20" pos:end="1018:20">=</operator> <name pos:start="1018:22" pos:end="1018:26">errno</name></expr>;</expr_stmt>
                <return pos:start="1019:17" pos:end="1019:40">return <expr pos:start="1019:24" pos:end="1019:39"><call pos:start="1019:24" pos:end="1019:39"><name pos:start="1019:24" pos:end="1019:35">convertError</name><argument_list pos:start="1019:36" pos:end="1019:39">(<argument pos:start="1019:37" pos:end="1019:38"><expr pos:start="1019:37" pos:end="1019:38"><name pos:start="1019:37" pos:end="1019:38">rc</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1022:11" pos:end="1033:9">else if <condition pos:start="1022:19" pos:end="1022:26">(<expr pos:start="1022:20" pos:end="1022:25"><name pos:start="1022:20" pos:end="1022:21">rc</name> <operator pos:start="1022:23" pos:end="1022:23">&lt;</operator> <literal type="number" pos:start="1022:25" pos:end="1022:25">0</literal></expr>)</condition> <block pos:start="1022:28" pos:end="1033:9">{<block_content pos:start="1024:13" pos:end="1032:36">
            <comment type="block" pos:start="1023:13" pos:end="1023:59">/* something went wrong with the select call */</comment>
            <expr_stmt pos:start="1024:13" pos:end="1024:23"><expr pos:start="1024:13" pos:end="1024:22"><name pos:start="1024:13" pos:end="1024:14">rc</name> <operator pos:start="1024:16" pos:end="1024:16">=</operator> <name pos:start="1024:18" pos:end="1024:22">errno</name></expr>;</expr_stmt>

            <comment type="block" pos:start="1026:13" pos:end="1026:77">/* if it was EINTR we can just try again. Return not connected */</comment>
            <if_stmt pos:start="1027:13" pos:end="1029:13"><if pos:start="1027:13" pos:end="1029:13">if <condition pos:start="1027:16" pos:end="1027:28">(<expr pos:start="1027:17" pos:end="1027:27"><name pos:start="1027:17" pos:end="1027:21">EINTR</name> <operator pos:start="1027:23" pos:end="1027:24">==</operator> <name pos:start="1027:26" pos:end="1027:27">rc</name></expr>)</condition> <block pos:start="1027:30" pos:end="1029:13">{<block_content pos:start="1028:17" pos:end="1028:44">
                <return pos:start="1028:17" pos:end="1028:44">return <expr pos:start="1028:24" pos:end="1028:43"><name pos:start="1028:24" pos:end="1028:43">SOCKERR_NOTCONNECTED</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1031:13" pos:end="1031:67">/* some other error occured so look it up and return */</comment>
            <return pos:start="1032:13" pos:end="1032:36">return <expr pos:start="1032:20" pos:end="1032:35"><call pos:start="1032:20" pos:end="1032:35"><name pos:start="1032:20" pos:end="1032:31">convertError</name><argument_list pos:start="1032:32" pos:end="1032:35">(<argument pos:start="1032:33" pos:end="1032:34"><expr pos:start="1032:33" pos:end="1032:34"><name pos:start="1032:33" pos:end="1032:34">rc</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1035:9" pos:end="1038:11">/*
         * if we get here the timeout expired or the connect had not yet
         * completed just indicate that the connect is not yet complete
         */</comment>
        <return pos:start="1039:9" pos:end="1039:36">return <expr pos:start="1039:16" pos:end="1039:35"><name pos:start="1039:16" pos:end="1039:35">SOCKERR_NOTCONNECTED</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="1040:7" pos:end="1047:5">else if <condition pos:start="1040:15" pos:end="1040:40">(<expr pos:start="1040:16" pos:end="1040:39"><name pos:start="1040:16" pos:end="1040:31">SOCKET_STEP_DONE</name> <operator pos:start="1040:33" pos:end="1040:34">==</operator> <name pos:start="1040:36" pos:end="1040:39">step</name></expr>)</condition> <block pos:start="1040:42" pos:end="1047:5">{<block_content pos:start="1042:9" pos:end="1046:17">
        <comment type="block" pos:start="1041:9" pos:end="1041:70">/* we are done the connect or an error occured so clean up  */</comment>
        <if_stmt pos:start="1042:9" pos:end="1045:9"><if pos:start="1042:9" pos:end="1045:9">if <condition pos:start="1042:12" pos:end="1042:25">(<expr pos:start="1042:13" pos:end="1042:24"><name pos:start="1042:13" pos:end="1042:18">handle</name> <operator pos:start="1042:20" pos:end="1042:21">!=</operator> <operator pos:start="1042:23" pos:end="1042:23">-</operator><literal type="number" pos:start="1042:24" pos:end="1042:24">1</literal></expr>)</condition> <block pos:start="1042:27" pos:end="1045:9">{<block_content pos:start="1043:13" pos:end="1044:43">
            <decl_stmt pos:start="1043:13" pos:end="1043:34"><decl pos:start="1043:13" pos:end="1043:33"><type pos:start="1043:13" pos:end="1043:15"><name pos:start="1043:13" pos:end="1043:15">int</name></type> <name pos:start="1043:17" pos:end="1043:21">block</name> <init pos:start="1043:23" pos:end="1043:33">= <expr pos:start="1043:25" pos:end="1043:33"><name pos:start="1043:25" pos:end="1043:33">JNI_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="1044:13" pos:end="1044:43"><expr pos:start="1044:13" pos:end="1044:42"><call pos:start="1044:13" pos:end="1044:42"><name pos:start="1044:13" pos:end="1044:17">ioctl</name><argument_list pos:start="1044:18" pos:end="1044:42">(<argument pos:start="1044:19" pos:end="1044:24"><expr pos:start="1044:19" pos:end="1044:24"><name pos:start="1044:19" pos:end="1044:24">handle</name></expr></argument>, <argument pos:start="1044:27" pos:end="1044:33"><expr pos:start="1044:27" pos:end="1044:33"><name pos:start="1044:27" pos:end="1044:33">FIONBIO</name></expr></argument>, <argument pos:start="1044:36" pos:end="1044:41"><expr pos:start="1044:36" pos:end="1044:41"><operator pos:start="1044:36" pos:end="1044:36">&amp;</operator><name pos:start="1044:37" pos:end="1044:41">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return pos:start="1046:9" pos:end="1046:17">return <expr pos:start="1046:16" pos:end="1046:16"><literal type="number" pos:start="1046:16" pos:end="1046:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1048:5" pos:end="1048:31">return <expr pos:start="1048:12" pos:end="1048:30"><name pos:start="1048:12" pos:end="1048:30">SOCKERR_ARGSINVALID</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="1051:1" pos:end="1071:3">/**
 * Join/Leave the nominated multicast group on the specified socket.
 * Implemented by setting the multicast 'add membership'/'drop membership'
 * option at the HY_IPPROTO_IP level on the socket.
 *
 * Implementation note for multicast sockets in general:
 *
 * - This code is untested, because at the time of this writing multicast can't
 * be properly tested on Android due to GSM routing restrictions. So it might
 * or might not work.
 *
 * - The REUSEPORT socket option that Harmony employs is not supported on Linux
 * and thus also not supported on Android. It's is not needed for multicast
 * to work anyway (REUSEADDR should suffice).
 *
 * @param env pointer to the JNI library.
 * @param socketP pointer to the hysocket to join/leave on.
 * @param optVal pointer to the InetAddress, the multicast group to join/drop.
 *
 * @exception SocketException if an error occurs during the call
 */</comment>
<function pos:start="1072:1" pos:end="1176:1"><type pos:start="1072:1" pos:end="1072:11"><specifier pos:start="1072:1" pos:end="1072:6">static</specifier> <name pos:start="1072:8" pos:end="1072:11">void</name></type> <name pos:start="1072:13" pos:end="1072:34">mcastAddDropMembership</name> <parameter_list pos:start="1072:36" pos:end="1073:40">(<parameter pos:start="1072:37" pos:end="1072:48"><decl pos:start="1072:37" pos:end="1072:48"><type pos:start="1072:37" pos:end="1072:48"><name pos:start="1072:37" pos:end="1072:42">JNIEnv</name> <modifier pos:start="1072:44" pos:end="1072:44">*</modifier></type> <name pos:start="1072:46" pos:end="1072:48">env</name></decl></parameter>, <parameter pos:start="1072:51" pos:end="1072:60"><decl pos:start="1072:51" pos:end="1072:60"><type pos:start="1072:51" pos:end="1072:60"><name pos:start="1072:51" pos:end="1072:53">int</name></type> <name pos:start="1072:55" pos:end="1072:60">handle</name></decl></parameter>, <parameter pos:start="1072:63" pos:end="1072:76"><decl pos:start="1072:63" pos:end="1072:76"><type pos:start="1072:63" pos:end="1072:76"><name pos:start="1072:63" pos:end="1072:69">jobject</name></type> <name pos:start="1072:71" pos:end="1072:76">optVal</name></decl></parameter>,
        <parameter pos:start="1073:9" pos:end="1073:20"><decl pos:start="1073:9" pos:end="1073:20"><type pos:start="1073:9" pos:end="1073:20"><name pos:start="1073:9" pos:end="1073:11">int</name></type> <name pos:start="1073:13" pos:end="1073:20">ignoreIF</name></decl></parameter>, <parameter pos:start="1073:23" pos:end="1073:39"><decl pos:start="1073:23" pos:end="1073:39"><type pos:start="1073:23" pos:end="1073:39"><name pos:start="1073:23" pos:end="1073:25">int</name></type> <name pos:start="1073:27" pos:end="1073:39">setSockOptVal</name></decl></parameter>)</parameter_list> <block pos:start="1073:42" pos:end="1176:1">{<block_content pos:start="1074:5" pos:end="1175:5">
    <decl_stmt pos:start="1074:5" pos:end="1074:15"><decl pos:start="1074:5" pos:end="1074:14"><type pos:start="1074:5" pos:end="1074:7"><name pos:start="1074:5" pos:end="1074:7">int</name></type> <name pos:start="1074:9" pos:end="1074:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1075:5" pos:end="1075:27"><decl pos:start="1075:5" pos:end="1075:26"><type pos:start="1075:5" pos:end="1075:18"><name pos:start="1075:5" pos:end="1075:18"><name pos:start="1075:5" pos:end="1075:10">struct</name> <name pos:start="1075:12" pos:end="1075:18">ip_mreq</name></name></type> <name pos:start="1075:20" pos:end="1075:26">ipmreqP</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1076:5" pos:end="1076:33"><decl pos:start="1076:5" pos:end="1076:32"><type pos:start="1076:5" pos:end="1076:22"><name pos:start="1076:5" pos:end="1076:22"><name pos:start="1076:5" pos:end="1076:10">struct</name> <name pos:start="1076:12" pos:end="1076:22">sockaddr_in</name></name></type> <name pos:start="1076:24" pos:end="1076:32">sockaddrP</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1077:5" pos:end="1077:40"><decl pos:start="1077:5" pos:end="1077:39"><type pos:start="1077:5" pos:end="1077:7"><name pos:start="1077:5" pos:end="1077:7">int</name></type> <name pos:start="1077:9" pos:end="1077:14">length</name> <init pos:start="1077:16" pos:end="1077:39">= <expr pos:start="1077:18" pos:end="1077:39"><sizeof pos:start="1077:18" pos:end="1077:39">sizeof<argument_list pos:start="1077:24" pos:end="1077:39">(<argument pos:start="1077:25" pos:end="1077:38"><expr pos:start="1077:25" pos:end="1077:38">struct <name pos:start="1077:32" pos:end="1077:38">ip_mreq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1078:5" pos:end="1078:52"><decl pos:start="1078:5" pos:end="1078:51"><type pos:start="1078:5" pos:end="1078:13"><name pos:start="1078:5" pos:end="1078:13">socklen_t</name></type> <name pos:start="1078:15" pos:end="1078:22">lengthIF</name> <init pos:start="1078:24" pos:end="1078:51">= <expr pos:start="1078:26" pos:end="1078:51"><sizeof pos:start="1078:26" pos:end="1078:51">sizeof<argument_list pos:start="1078:32" pos:end="1078:51">(<argument pos:start="1078:33" pos:end="1078:50"><expr pos:start="1078:33" pos:end="1078:50">struct <name pos:start="1078:40" pos:end="1078:50">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1080:5" pos:end="1083:7">/*
     * JNI objects needed to access the information in the optVal oject
     * passed in. The object passed in is a GenericIPMreq object
     */</comment>
    <decl_stmt pos:start="1084:5" pos:end="1084:15"><decl pos:start="1084:5" pos:end="1084:14"><type pos:start="1084:5" pos:end="1084:10"><name pos:start="1084:5" pos:end="1084:10">jclass</name></type> <name pos:start="1084:12" pos:end="1084:14">cls</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1085:5" pos:end="1085:25"><decl pos:start="1085:5" pos:end="1085:24"><type pos:start="1085:5" pos:end="1085:12"><name pos:start="1085:5" pos:end="1085:12">jfieldID</name></type> <name pos:start="1085:14" pos:end="1085:24">multiaddrID</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1086:5" pos:end="1086:29"><decl pos:start="1086:5" pos:end="1086:28"><type pos:start="1086:5" pos:end="1086:12"><name pos:start="1086:5" pos:end="1086:12">jfieldID</name></type> <name pos:start="1086:14" pos:end="1086:28">interfaceAddrID</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1087:5" pos:end="1087:22"><decl pos:start="1087:5" pos:end="1087:21"><type pos:start="1087:5" pos:end="1087:11"><name pos:start="1087:5" pos:end="1087:11">jobject</name></type> <name pos:start="1087:13" pos:end="1087:21">multiaddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1088:5" pos:end="1088:26"><decl pos:start="1088:5" pos:end="1088:25"><type pos:start="1088:5" pos:end="1088:11"><name pos:start="1088:5" pos:end="1088:11">jobject</name></type> <name pos:start="1088:13" pos:end="1088:25">interfaceAddr</name></decl>;</decl_stmt>

    <comment type="block" pos:start="1090:5" pos:end="1093:7">/*
     * check whether we are getting an InetAddress or an Generic IPMreq, for now
     * we support both so that we will not break the tests
     */</comment>
    <if_stmt pos:start="1094:5" pos:end="1175:5"><if pos:start="1094:5" pos:end="1125:5">if <condition pos:start="1094:8" pos:end="1094:62">(<expr pos:start="1094:9" pos:end="1094:61"><call pos:start="1094:9" pos:end="1094:61"><name pos:start="1094:9" pos:end="1094:25"><name pos:start="1094:9" pos:end="1094:11">env</name><operator pos:start="1094:12" pos:end="1094:13">-&gt;</operator><name pos:start="1094:14" pos:end="1094:25">IsInstanceOf</name></name> <argument_list pos:start="1094:27" pos:end="1094:61">(<argument pos:start="1094:28" pos:end="1094:33"><expr pos:start="1094:28" pos:end="1094:33"><name pos:start="1094:28" pos:end="1094:33">optVal</name></expr></argument>, <argument pos:start="1094:36" pos:end="1094:60"><expr pos:start="1094:36" pos:end="1094:60"><name pos:start="1094:36" pos:end="1094:60"><name pos:start="1094:36" pos:end="1094:48">gCachedFields</name><operator pos:start="1094:49" pos:end="1094:49">.</operator><name pos:start="1094:50" pos:end="1094:60">iaddr_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1094:64" pos:end="1125:5">{<block_content pos:start="1096:9" pos:end="1123:9">

        <expr_stmt pos:start="1096:9" pos:end="1096:57"><expr pos:start="1096:9" pos:end="1096:56"><name pos:start="1096:9" pos:end="1096:36"><name pos:start="1096:9" pos:end="1096:15">ipmreqP</name><operator pos:start="1096:16" pos:end="1096:16">.</operator><name pos:start="1096:17" pos:end="1096:29">imr_interface</name><operator pos:start="1096:30" pos:end="1096:30">.</operator><name pos:start="1096:31" pos:end="1096:36">s_addr</name></name> <operator pos:start="1096:38" pos:end="1096:38">=</operator> <call pos:start="1096:40" pos:end="1096:56"><name pos:start="1096:40" pos:end="1096:44">htonl</name><argument_list pos:start="1096:45" pos:end="1096:56">(<argument pos:start="1096:46" pos:end="1096:55"><expr pos:start="1096:46" pos:end="1096:55"><name pos:start="1096:46" pos:end="1096:55">INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1097:9" pos:end="1108:9"><if pos:start="1097:9" pos:end="1108:9">if <condition pos:start="1097:12" pos:end="1097:22">(<expr pos:start="1097:13" pos:end="1097:21"><operator pos:start="1097:13" pos:end="1097:13">!</operator><name pos:start="1097:14" pos:end="1097:21">ignoreIF</name></expr>)</condition> <block pos:start="1097:24" pos:end="1108:9">{<block_content pos:start="1099:13" pos:end="1107:78">

            <expr_stmt pos:start="1099:13" pos:end="1100:31"><expr pos:start="1099:13" pos:end="1100:30"><name pos:start="1099:13" pos:end="1099:18">result</name> <operator pos:start="1099:20" pos:end="1099:20">=</operator> <call pos:start="1099:22" pos:end="1100:30"><name pos:start="1099:22" pos:end="1099:31">getsockopt</name><argument_list pos:start="1099:32" pos:end="1100:30">(<argument pos:start="1099:33" pos:end="1099:38"><expr pos:start="1099:33" pos:end="1099:38"><name pos:start="1099:33" pos:end="1099:38">handle</name></expr></argument>, <argument pos:start="1099:41" pos:end="1099:50"><expr pos:start="1099:41" pos:end="1099:50"><name pos:start="1099:41" pos:end="1099:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="1099:53" pos:end="1099:67"><expr pos:start="1099:53" pos:end="1099:67"><name pos:start="1099:53" pos:end="1099:67">IP_MULTICAST_IF</name></expr></argument>, <argument pos:start="1099:70" pos:end="1099:79"><expr pos:start="1099:70" pos:end="1099:79"><operator pos:start="1099:70" pos:end="1099:70">&amp;</operator><name pos:start="1099:71" pos:end="1099:79">sockaddrP</name></expr></argument>,
                    <argument pos:start="1100:21" pos:end="1100:29"><expr pos:start="1100:21" pos:end="1100:29"><operator pos:start="1100:21" pos:end="1100:21">&amp;</operator><name pos:start="1100:22" pos:end="1100:29">lengthIF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1102:13" pos:end="1105:13"><if pos:start="1102:13" pos:end="1105:13">if <condition pos:start="1102:16" pos:end="1102:28">(<expr pos:start="1102:17" pos:end="1102:27"><literal type="number" pos:start="1102:17" pos:end="1102:17">0</literal> <operator pos:start="1102:19" pos:end="1102:20">!=</operator> <name pos:start="1102:22" pos:end="1102:27">result</name></expr>)</condition> <block pos:start="1102:30" pos:end="1105:13">{<block_content pos:start="1103:17" pos:end="1104:23">
                <expr_stmt pos:start="1103:17" pos:end="1103:64"><expr pos:start="1103:17" pos:end="1103:63"><call pos:start="1103:17" pos:end="1103:63"><name pos:start="1103:17" pos:end="1103:36">throwSocketException</name> <argument_list pos:start="1103:38" pos:end="1103:63">(<argument pos:start="1103:39" pos:end="1103:41"><expr pos:start="1103:39" pos:end="1103:41"><name pos:start="1103:39" pos:end="1103:41">env</name></expr></argument>, <argument pos:start="1103:44" pos:end="1103:62"><expr pos:start="1103:44" pos:end="1103:62"><call pos:start="1103:44" pos:end="1103:62"><name pos:start="1103:44" pos:end="1103:55">convertError</name><argument_list pos:start="1103:56" pos:end="1103:62">(<argument pos:start="1103:57" pos:end="1103:61"><expr pos:start="1103:57" pos:end="1103:61"><name pos:start="1103:57" pos:end="1103:61">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1104:17" pos:end="1104:23">return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1107:13" pos:end="1107:78"><expr pos:start="1107:13" pos:end="1107:77"><call pos:start="1107:13" pos:end="1107:77"><name pos:start="1107:13" pos:end="1107:18">memcpy</name><argument_list pos:start="1107:19" pos:end="1107:77">(<argument pos:start="1107:20" pos:end="1107:50"><expr pos:start="1107:20" pos:end="1107:50"><operator pos:start="1107:20" pos:end="1107:20">&amp;</operator><operator pos:start="1107:21" pos:end="1107:21">(</operator><name pos:start="1107:22" pos:end="1107:49"><name pos:start="1107:22" pos:end="1107:28">ipmreqP</name><operator pos:start="1107:29" pos:end="1107:29">.</operator><name pos:start="1107:30" pos:end="1107:42">imr_interface</name><operator pos:start="1107:43" pos:end="1107:43">.</operator><name pos:start="1107:44" pos:end="1107:49">s_addr</name></name><operator pos:start="1107:50" pos:end="1107:50">)</operator></expr></argument>, <argument pos:start="1107:53" pos:end="1107:73"><expr pos:start="1107:53" pos:end="1107:73"><operator pos:start="1107:53" pos:end="1107:53">&amp;</operator><operator pos:start="1107:54" pos:end="1107:54">(</operator><name pos:start="1107:55" pos:end="1107:72"><name pos:start="1107:55" pos:end="1107:63">sockaddrP</name><operator pos:start="1107:64" pos:end="1107:64">.</operator><name pos:start="1107:65" pos:end="1107:72">sin_addr</name></name><operator pos:start="1107:73" pos:end="1107:73">)</operator></expr></argument>, <argument pos:start="1107:76" pos:end="1107:76"><expr pos:start="1107:76" pos:end="1107:76"><literal type="number" pos:start="1107:76" pos:end="1107:76">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1110:9" pos:end="1110:72"><expr pos:start="1110:9" pos:end="1110:71"><name pos:start="1110:9" pos:end="1110:14">result</name> <operator pos:start="1110:16" pos:end="1110:16">=</operator> <call pos:start="1110:18" pos:end="1110:71"><name pos:start="1110:18" pos:end="1110:43">inetAddressToSocketAddress</name><argument_list pos:start="1110:44" pos:end="1110:71">(<argument pos:start="1110:45" pos:end="1110:47"><expr pos:start="1110:45" pos:end="1110:47"><name pos:start="1110:45" pos:end="1110:47">env</name></expr></argument>, <argument pos:start="1110:50" pos:end="1110:55"><expr pos:start="1110:50" pos:end="1110:55"><name pos:start="1110:50" pos:end="1110:55">optVal</name></expr></argument>, <argument pos:start="1110:58" pos:end="1110:58"><expr pos:start="1110:58" pos:end="1110:58"><literal type="number" pos:start="1110:58" pos:end="1110:58">0</literal></expr></argument>, <argument pos:start="1110:61" pos:end="1110:70"><expr pos:start="1110:61" pos:end="1110:70"><operator pos:start="1110:61" pos:end="1110:61">&amp;</operator><name pos:start="1110:62" pos:end="1110:70">sockaddrP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1112:9" pos:end="1115:9"><if pos:start="1112:9" pos:end="1115:9">if <condition pos:start="1112:12" pos:end="1112:23">(<expr pos:start="1112:13" pos:end="1112:22"><name pos:start="1112:13" pos:end="1112:18">result</name> <operator pos:start="1112:20" pos:end="1112:20">&lt;</operator> <literal type="number" pos:start="1112:22" pos:end="1112:22">0</literal></expr>)</condition> <block pos:start="1112:25" pos:end="1115:9">{<block_content pos:start="1113:13" pos:end="1114:19">
            <expr_stmt pos:start="1113:13" pos:end="1113:57"><expr pos:start="1113:13" pos:end="1113:56"><call pos:start="1113:13" pos:end="1113:56"><name pos:start="1113:13" pos:end="1113:32">throwSocketException</name><argument_list pos:start="1113:33" pos:end="1113:56">(<argument pos:start="1113:34" pos:end="1113:36"><expr pos:start="1113:34" pos:end="1113:36"><name pos:start="1113:34" pos:end="1113:36">env</name></expr></argument>, <argument pos:start="1113:39" pos:end="1113:55"><expr pos:start="1113:39" pos:end="1113:55"><name pos:start="1113:39" pos:end="1113:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1114:13" pos:end="1114:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1117:9" pos:end="1117:74"><expr pos:start="1117:9" pos:end="1117:73"><call pos:start="1117:9" pos:end="1117:73"><name pos:start="1117:9" pos:end="1117:14">memcpy</name><argument_list pos:start="1117:15" pos:end="1117:73">(<argument pos:start="1117:16" pos:end="1117:46"><expr pos:start="1117:16" pos:end="1117:46"><operator pos:start="1117:16" pos:end="1117:16">&amp;</operator><operator pos:start="1117:17" pos:end="1117:17">(</operator><name pos:start="1117:18" pos:end="1117:45"><name pos:start="1117:18" pos:end="1117:24">ipmreqP</name><operator pos:start="1117:25" pos:end="1117:25">.</operator><name pos:start="1117:26" pos:end="1117:38">imr_multiaddr</name><operator pos:start="1117:39" pos:end="1117:39">.</operator><name pos:start="1117:40" pos:end="1117:45">s_addr</name></name><operator pos:start="1117:46" pos:end="1117:46">)</operator></expr></argument>, <argument pos:start="1117:49" pos:end="1117:69"><expr pos:start="1117:49" pos:end="1117:69"><operator pos:start="1117:49" pos:end="1117:49">&amp;</operator><operator pos:start="1117:50" pos:end="1117:50">(</operator><name pos:start="1117:51" pos:end="1117:68"><name pos:start="1117:51" pos:end="1117:59">sockaddrP</name><operator pos:start="1117:60" pos:end="1117:60">.</operator><name pos:start="1117:61" pos:end="1117:68">sin_addr</name></name><operator pos:start="1117:69" pos:end="1117:69">)</operator></expr></argument>, <argument pos:start="1117:72" pos:end="1117:72"><expr pos:start="1117:72" pos:end="1117:72"><literal type="number" pos:start="1117:72" pos:end="1117:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1119:9" pos:end="1119:81"><expr pos:start="1119:9" pos:end="1119:80"><name pos:start="1119:9" pos:end="1119:14">result</name> <operator pos:start="1119:16" pos:end="1119:16">=</operator> <call pos:start="1119:18" pos:end="1119:80"><name pos:start="1119:18" pos:end="1119:27">setsockopt</name><argument_list pos:start="1119:28" pos:end="1119:80">(<argument pos:start="1119:29" pos:end="1119:34"><expr pos:start="1119:29" pos:end="1119:34"><name pos:start="1119:29" pos:end="1119:34">handle</name></expr></argument>, <argument pos:start="1119:37" pos:end="1119:46"><expr pos:start="1119:37" pos:end="1119:46"><name pos:start="1119:37" pos:end="1119:46">IPPROTO_IP</name></expr></argument>, <argument pos:start="1119:49" pos:end="1119:61"><expr pos:start="1119:49" pos:end="1119:61"><name pos:start="1119:49" pos:end="1119:61">setSockOptVal</name></expr></argument>, <argument pos:start="1119:64" pos:end="1119:71"><expr pos:start="1119:64" pos:end="1119:71"><operator pos:start="1119:64" pos:end="1119:64">&amp;</operator><name pos:start="1119:65" pos:end="1119:71">ipmreqP</name></expr></argument>, <argument pos:start="1119:74" pos:end="1119:79"><expr pos:start="1119:74" pos:end="1119:79"><name pos:start="1119:74" pos:end="1119:79">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1120:9" pos:end="1123:9"><if pos:start="1120:9" pos:end="1123:9">if <condition pos:start="1120:12" pos:end="1120:24">(<expr pos:start="1120:13" pos:end="1120:23"><literal type="number" pos:start="1120:13" pos:end="1120:13">0</literal> <operator pos:start="1120:15" pos:end="1120:16">!=</operator> <name pos:start="1120:18" pos:end="1120:23">result</name></expr>)</condition> <block pos:start="1120:26" pos:end="1123:9">{<block_content pos:start="1121:13" pos:end="1122:19">
            <expr_stmt pos:start="1121:13" pos:end="1121:60"><expr pos:start="1121:13" pos:end="1121:59"><call pos:start="1121:13" pos:end="1121:59"><name pos:start="1121:13" pos:end="1121:32">throwSocketException</name> <argument_list pos:start="1121:34" pos:end="1121:59">(<argument pos:start="1121:35" pos:end="1121:37"><expr pos:start="1121:35" pos:end="1121:37"><name pos:start="1121:35" pos:end="1121:37">env</name></expr></argument>, <argument pos:start="1121:40" pos:end="1121:58"><expr pos:start="1121:40" pos:end="1121:58"><call pos:start="1121:40" pos:end="1121:58"><name pos:start="1121:40" pos:end="1121:51">convertError</name><argument_list pos:start="1121:52" pos:end="1121:58">(<argument pos:start="1121:53" pos:end="1121:57"><expr pos:start="1121:53" pos:end="1121:57"><name pos:start="1121:53" pos:end="1121:57">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1122:13" pos:end="1122:19">return;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="1125:7" pos:end="1175:5">else <block pos:start="1125:12" pos:end="1175:5">{<block_content pos:start="1128:9" pos:end="1174:9">

        <comment type="block" pos:start="1127:9" pos:end="1127:77">/* we need the multicast address regardless of the type of address */</comment>
        <expr_stmt pos:start="1128:9" pos:end="1128:42"><expr pos:start="1128:9" pos:end="1128:41"><name pos:start="1128:9" pos:end="1128:11">cls</name> <operator pos:start="1128:13" pos:end="1128:13">=</operator> <call pos:start="1128:15" pos:end="1128:41"><name pos:start="1128:15" pos:end="1128:33"><name pos:start="1128:15" pos:end="1128:17">env</name><operator pos:start="1128:18" pos:end="1128:19">-&gt;</operator><name pos:start="1128:20" pos:end="1128:33">GetObjectClass</name></name><argument_list pos:start="1128:34" pos:end="1128:41">(<argument pos:start="1128:35" pos:end="1128:40"><expr pos:start="1128:35" pos:end="1128:40"><name pos:start="1128:35" pos:end="1128:40">optVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1129:9" pos:end="1129:82"><expr pos:start="1129:9" pos:end="1129:81"><name pos:start="1129:9" pos:end="1129:19">multiaddrID</name> <operator pos:start="1129:21" pos:end="1129:21">=</operator> <call pos:start="1129:23" pos:end="1129:81"><name pos:start="1129:23" pos:end="1129:37"><name pos:start="1129:23" pos:end="1129:25">env</name><operator pos:start="1129:26" pos:end="1129:27">-&gt;</operator><name pos:start="1129:28" pos:end="1129:37">GetFieldID</name></name><argument_list pos:start="1129:38" pos:end="1129:81">(<argument pos:start="1129:39" pos:end="1129:41"><expr pos:start="1129:39" pos:end="1129:41"><name pos:start="1129:39" pos:end="1129:41">cls</name></expr></argument>, <argument pos:start="1129:44" pos:end="1129:54"><expr pos:start="1129:44" pos:end="1129:54"><literal type="string" pos:start="1129:44" pos:end="1129:54">"multiaddr"</literal></expr></argument>, <argument pos:start="1129:57" pos:end="1129:80"><expr pos:start="1129:57" pos:end="1129:80"><literal type="string" pos:start="1129:57" pos:end="1129:80">"Ljava/net/InetAddress;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1130:9" pos:end="1130:61"><expr pos:start="1130:9" pos:end="1130:60"><name pos:start="1130:9" pos:end="1130:17">multiaddr</name> <operator pos:start="1130:19" pos:end="1130:19">=</operator> <call pos:start="1130:21" pos:end="1130:60"><name pos:start="1130:21" pos:end="1130:39"><name pos:start="1130:21" pos:end="1130:23">env</name><operator pos:start="1130:24" pos:end="1130:25">-&gt;</operator><name pos:start="1130:26" pos:end="1130:39">GetObjectField</name></name><argument_list pos:start="1130:40" pos:end="1130:60">(<argument pos:start="1130:41" pos:end="1130:46"><expr pos:start="1130:41" pos:end="1130:46"><name pos:start="1130:41" pos:end="1130:46">optVal</name></expr></argument>, <argument pos:start="1130:49" pos:end="1130:59"><expr pos:start="1130:49" pos:end="1130:59"><name pos:start="1130:49" pos:end="1130:59">multiaddrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1132:9" pos:end="1132:75"><expr pos:start="1132:9" pos:end="1132:74"><name pos:start="1132:9" pos:end="1132:14">result</name> <operator pos:start="1132:16" pos:end="1132:16">=</operator> <call pos:start="1132:18" pos:end="1132:74"><name pos:start="1132:18" pos:end="1132:43">inetAddressToSocketAddress</name><argument_list pos:start="1132:44" pos:end="1132:74">(<argument pos:start="1132:45" pos:end="1132:47"><expr pos:start="1132:45" pos:end="1132:47"><name pos:start="1132:45" pos:end="1132:47">env</name></expr></argument>, <argument pos:start="1132:50" pos:end="1132:58"><expr pos:start="1132:50" pos:end="1132:58"><name pos:start="1132:50" pos:end="1132:58">multiaddr</name></expr></argument>, <argument pos:start="1132:61" pos:end="1132:61"><expr pos:start="1132:61" pos:end="1132:61"><literal type="number" pos:start="1132:61" pos:end="1132:61">0</literal></expr></argument>, <argument pos:start="1132:64" pos:end="1132:73"><expr pos:start="1132:64" pos:end="1132:73"><operator pos:start="1132:64" pos:end="1132:64">&amp;</operator><name pos:start="1132:65" pos:end="1132:73">sockaddrP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1134:9" pos:end="1137:9"><if pos:start="1134:9" pos:end="1137:9">if <condition pos:start="1134:12" pos:end="1134:23">(<expr pos:start="1134:13" pos:end="1134:22"><name pos:start="1134:13" pos:end="1134:18">result</name> <operator pos:start="1134:20" pos:end="1134:20">&lt;</operator> <literal type="number" pos:start="1134:22" pos:end="1134:22">0</literal></expr>)</condition> <block pos:start="1134:25" pos:end="1137:9">{<block_content pos:start="1135:13" pos:end="1136:19">
            <expr_stmt pos:start="1135:13" pos:end="1135:57"><expr pos:start="1135:13" pos:end="1135:56"><call pos:start="1135:13" pos:end="1135:56"><name pos:start="1135:13" pos:end="1135:32">throwSocketException</name><argument_list pos:start="1135:33" pos:end="1135:56">(<argument pos:start="1135:34" pos:end="1135:36"><expr pos:start="1135:34" pos:end="1135:36"><name pos:start="1135:34" pos:end="1135:36">env</name></expr></argument>, <argument pos:start="1135:39" pos:end="1135:55"><expr pos:start="1135:39" pos:end="1135:55"><name pos:start="1135:39" pos:end="1135:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1136:13" pos:end="1136:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1139:9" pos:end="1139:74"><expr pos:start="1139:9" pos:end="1139:73"><call pos:start="1139:9" pos:end="1139:73"><name pos:start="1139:9" pos:end="1139:14">memcpy</name><argument_list pos:start="1139:15" pos:end="1139:73">(<argument pos:start="1139:16" pos:end="1139:46"><expr pos:start="1139:16" pos:end="1139:46"><operator pos:start="1139:16" pos:end="1139:16">&amp;</operator><operator pos:start="1139:17" pos:end="1139:17">(</operator><name pos:start="1139:18" pos:end="1139:45"><name pos:start="1139:18" pos:end="1139:24">ipmreqP</name><operator pos:start="1139:25" pos:end="1139:25">.</operator><name pos:start="1139:26" pos:end="1139:38">imr_multiaddr</name><operator pos:start="1139:39" pos:end="1139:39">.</operator><name pos:start="1139:40" pos:end="1139:45">s_addr</name></name><operator pos:start="1139:46" pos:end="1139:46">)</operator></expr></argument>, <argument pos:start="1139:49" pos:end="1139:69"><expr pos:start="1139:49" pos:end="1139:69"><operator pos:start="1139:49" pos:end="1139:49">&amp;</operator><operator pos:start="1139:50" pos:end="1139:50">(</operator><name pos:start="1139:51" pos:end="1139:68"><name pos:start="1139:51" pos:end="1139:59">sockaddrP</name><operator pos:start="1139:60" pos:end="1139:60">.</operator><name pos:start="1139:61" pos:end="1139:68">sin_addr</name></name><operator pos:start="1139:69" pos:end="1139:69">)</operator></expr></argument>, <argument pos:start="1139:72" pos:end="1139:72"><expr pos:start="1139:72" pos:end="1139:72"><literal type="number" pos:start="1139:72" pos:end="1139:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1141:9" pos:end="1141:64">/* we need to use an IP_MREQ as it is an IPV4 address */</comment>
        <expr_stmt pos:start="1142:9" pos:end="1143:42"><expr pos:start="1142:9" pos:end="1143:41"><name pos:start="1142:9" pos:end="1142:23">interfaceAddrID</name> <operator pos:start="1142:25" pos:end="1142:25">=</operator> <call pos:start="1142:27" pos:end="1143:41"><name pos:start="1142:27" pos:end="1142:41"><name pos:start="1142:27" pos:end="1142:29">env</name><operator pos:start="1142:30" pos:end="1142:31">-&gt;</operator><name pos:start="1142:32" pos:end="1142:41">GetFieldID</name></name><argument_list pos:start="1142:42" pos:end="1143:41">(<argument pos:start="1142:43" pos:end="1142:45"><expr pos:start="1142:43" pos:end="1142:45"><name pos:start="1142:43" pos:end="1142:45">cls</name></expr></argument>, <argument pos:start="1142:48" pos:end="1142:62"><expr pos:start="1142:48" pos:end="1142:62"><literal type="string" pos:start="1142:48" pos:end="1142:62">"interfaceAddr"</literal></expr></argument>,
                <argument pos:start="1143:17" pos:end="1143:40"><expr pos:start="1143:17" pos:end="1143:40"><literal type="string" pos:start="1143:17" pos:end="1143:40">"Ljava/net/InetAddress;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1144:9" pos:end="1144:69"><expr pos:start="1144:9" pos:end="1144:68"><name pos:start="1144:9" pos:end="1144:21">interfaceAddr</name> <operator pos:start="1144:23" pos:end="1144:23">=</operator> <call pos:start="1144:25" pos:end="1144:68"><name pos:start="1144:25" pos:end="1144:43"><name pos:start="1144:25" pos:end="1144:27">env</name><operator pos:start="1144:28" pos:end="1144:29">-&gt;</operator><name pos:start="1144:30" pos:end="1144:43">GetObjectField</name></name><argument_list pos:start="1144:44" pos:end="1144:68">(<argument pos:start="1144:45" pos:end="1144:50"><expr pos:start="1144:45" pos:end="1144:50"><name pos:start="1144:45" pos:end="1144:50">optVal</name></expr></argument>, <argument pos:start="1144:53" pos:end="1144:67"><expr pos:start="1144:53" pos:end="1144:67"><name pos:start="1144:53" pos:end="1144:67">interfaceAddrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1146:9" pos:end="1146:57"><expr pos:start="1146:9" pos:end="1146:56"><name pos:start="1146:9" pos:end="1146:36"><name pos:start="1146:9" pos:end="1146:15">ipmreqP</name><operator pos:start="1146:16" pos:end="1146:16">.</operator><name pos:start="1146:17" pos:end="1146:29">imr_interface</name><operator pos:start="1146:30" pos:end="1146:30">.</operator><name pos:start="1146:31" pos:end="1146:36">s_addr</name></name> <operator pos:start="1146:38" pos:end="1146:38">=</operator> <call pos:start="1146:40" pos:end="1146:56"><name pos:start="1146:40" pos:end="1146:44">htonl</name><argument_list pos:start="1146:45" pos:end="1146:56">(<argument pos:start="1146:46" pos:end="1146:55"><expr pos:start="1146:46" pos:end="1146:55"><name pos:start="1146:46" pos:end="1146:55">INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1148:9" pos:end="1152:11">/*
         * if an interfaceAddr was passed then use that value, otherwise set the
         * interface to all 0 to indicate the system should select the interface
         * used
         */</comment>
        <if_stmt pos:start="1153:9" pos:end="1167:9"><if pos:start="1153:9" pos:end="1167:9">if <condition pos:start="1153:12" pos:end="1153:22">(<expr pos:start="1153:13" pos:end="1153:21"><operator pos:start="1153:13" pos:end="1153:13">!</operator><name pos:start="1153:14" pos:end="1153:21">ignoreIF</name></expr>)</condition> <block pos:start="1153:24" pos:end="1167:9">{<block_content pos:start="1154:13" pos:end="1166:13">
            <if_stmt pos:start="1154:13" pos:end="1166:13"><if pos:start="1154:13" pos:end="1166:13">if <condition pos:start="1154:16" pos:end="1154:38">(<expr pos:start="1154:17" pos:end="1154:37"><name pos:start="1154:17" pos:end="1154:20">NULL</name> <operator pos:start="1154:22" pos:end="1154:23">!=</operator> <name pos:start="1154:25" pos:end="1154:37">interfaceAddr</name></expr>)</condition> <block pos:start="1154:40" pos:end="1166:13">{<block_content pos:start="1156:17" pos:end="1164:82">

                <expr_stmt pos:start="1156:17" pos:end="1157:36"><expr pos:start="1156:17" pos:end="1157:35"><name pos:start="1156:17" pos:end="1156:22">result</name> <operator pos:start="1156:24" pos:end="1156:24">=</operator> <call pos:start="1156:26" pos:end="1157:35"><name pos:start="1156:26" pos:end="1156:51">inetAddressToSocketAddress</name><argument_list pos:start="1156:52" pos:end="1157:35">(<argument pos:start="1156:53" pos:end="1156:55"><expr pos:start="1156:53" pos:end="1156:55"><name pos:start="1156:53" pos:end="1156:55">env</name></expr></argument>, <argument pos:start="1156:58" pos:end="1156:70"><expr pos:start="1156:58" pos:end="1156:70"><name pos:start="1156:58" pos:end="1156:70">interfaceAddr</name></expr></argument>, <argument pos:start="1156:73" pos:end="1156:73"><expr pos:start="1156:73" pos:end="1156:73"><literal type="number" pos:start="1156:73" pos:end="1156:73">0</literal></expr></argument>,
                        <argument pos:start="1157:25" pos:end="1157:34"><expr pos:start="1157:25" pos:end="1157:34"><operator pos:start="1157:25" pos:end="1157:25">&amp;</operator><name pos:start="1157:26" pos:end="1157:34">sockaddrP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1159:17" pos:end="1162:17"><if pos:start="1159:17" pos:end="1162:17">if <condition pos:start="1159:20" pos:end="1159:31">(<expr pos:start="1159:21" pos:end="1159:30"><name pos:start="1159:21" pos:end="1159:26">result</name> <operator pos:start="1159:28" pos:end="1159:28">&lt;</operator> <literal type="number" pos:start="1159:30" pos:end="1159:30">0</literal></expr>)</condition> <block pos:start="1159:33" pos:end="1162:17">{<block_content pos:start="1160:21" pos:end="1161:27">
                    <expr_stmt pos:start="1160:21" pos:end="1160:65"><expr pos:start="1160:21" pos:end="1160:64"><call pos:start="1160:21" pos:end="1160:64"><name pos:start="1160:21" pos:end="1160:40">throwSocketException</name><argument_list pos:start="1160:41" pos:end="1160:64">(<argument pos:start="1160:42" pos:end="1160:44"><expr pos:start="1160:42" pos:end="1160:44"><name pos:start="1160:42" pos:end="1160:44">env</name></expr></argument>, <argument pos:start="1160:47" pos:end="1160:63"><expr pos:start="1160:47" pos:end="1160:63"><name pos:start="1160:47" pos:end="1160:63">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1161:21" pos:end="1161:27">return;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1164:17" pos:end="1164:82"><expr pos:start="1164:17" pos:end="1164:81"><call pos:start="1164:17" pos:end="1164:81"><name pos:start="1164:17" pos:end="1164:22">memcpy</name><argument_list pos:start="1164:23" pos:end="1164:81">(<argument pos:start="1164:24" pos:end="1164:54"><expr pos:start="1164:24" pos:end="1164:54"><operator pos:start="1164:24" pos:end="1164:24">&amp;</operator><operator pos:start="1164:25" pos:end="1164:25">(</operator><name pos:start="1164:26" pos:end="1164:53"><name pos:start="1164:26" pos:end="1164:32">ipmreqP</name><operator pos:start="1164:33" pos:end="1164:33">.</operator><name pos:start="1164:34" pos:end="1164:46">imr_interface</name><operator pos:start="1164:47" pos:end="1164:47">.</operator><name pos:start="1164:48" pos:end="1164:53">s_addr</name></name><operator pos:start="1164:54" pos:end="1164:54">)</operator></expr></argument>, <argument pos:start="1164:57" pos:end="1164:77"><expr pos:start="1164:57" pos:end="1164:77"><operator pos:start="1164:57" pos:end="1164:57">&amp;</operator><operator pos:start="1164:58" pos:end="1164:58">(</operator><name pos:start="1164:59" pos:end="1164:76"><name pos:start="1164:59" pos:end="1164:67">sockaddrP</name><operator pos:start="1164:68" pos:end="1164:68">.</operator><name pos:start="1164:69" pos:end="1164:76">sin_addr</name></name><operator pos:start="1164:77" pos:end="1164:77">)</operator></expr></argument>, <argument pos:start="1164:80" pos:end="1164:80"><expr pos:start="1164:80" pos:end="1164:80"><literal type="number" pos:start="1164:80" pos:end="1164:80">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1169:9" pos:end="1169:45">/* join/drop the multicast address */</comment>
        <expr_stmt pos:start="1170:9" pos:end="1170:81"><expr pos:start="1170:9" pos:end="1170:80"><name pos:start="1170:9" pos:end="1170:14">result</name> <operator pos:start="1170:16" pos:end="1170:16">=</operator> <call pos:start="1170:18" pos:end="1170:80"><name pos:start="1170:18" pos:end="1170:27">setsockopt</name><argument_list pos:start="1170:28" pos:end="1170:80">(<argument pos:start="1170:29" pos:end="1170:34"><expr pos:start="1170:29" pos:end="1170:34"><name pos:start="1170:29" pos:end="1170:34">handle</name></expr></argument>, <argument pos:start="1170:37" pos:end="1170:46"><expr pos:start="1170:37" pos:end="1170:46"><name pos:start="1170:37" pos:end="1170:46">IPPROTO_IP</name></expr></argument>, <argument pos:start="1170:49" pos:end="1170:61"><expr pos:start="1170:49" pos:end="1170:61"><name pos:start="1170:49" pos:end="1170:61">setSockOptVal</name></expr></argument>, <argument pos:start="1170:64" pos:end="1170:71"><expr pos:start="1170:64" pos:end="1170:71"><operator pos:start="1170:64" pos:end="1170:64">&amp;</operator><name pos:start="1170:65" pos:end="1170:71">ipmreqP</name></expr></argument>, <argument pos:start="1170:74" pos:end="1170:79"><expr pos:start="1170:74" pos:end="1170:79"><name pos:start="1170:74" pos:end="1170:79">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1171:9" pos:end="1174:9"><if pos:start="1171:9" pos:end="1174:9">if <condition pos:start="1171:12" pos:end="1171:24">(<expr pos:start="1171:13" pos:end="1171:23"><literal type="number" pos:start="1171:13" pos:end="1171:13">0</literal> <operator pos:start="1171:15" pos:end="1171:16">!=</operator> <name pos:start="1171:18" pos:end="1171:23">result</name></expr>)</condition> <block pos:start="1171:26" pos:end="1174:9">{<block_content pos:start="1172:13" pos:end="1173:19">
            <expr_stmt pos:start="1172:13" pos:end="1172:60"><expr pos:start="1172:13" pos:end="1172:59"><call pos:start="1172:13" pos:end="1172:59"><name pos:start="1172:13" pos:end="1172:32">throwSocketException</name> <argument_list pos:start="1172:34" pos:end="1172:59">(<argument pos:start="1172:35" pos:end="1172:37"><expr pos:start="1172:35" pos:end="1172:37"><name pos:start="1172:35" pos:end="1172:37">env</name></expr></argument>, <argument pos:start="1172:40" pos:end="1172:58"><expr pos:start="1172:40" pos:end="1172:58"><call pos:start="1172:40" pos:end="1172:58"><name pos:start="1172:40" pos:end="1172:51">convertError</name><argument_list pos:start="1172:52" pos:end="1172:58">(<argument pos:start="1172:53" pos:end="1172:57"><expr pos:start="1172:53" pos:end="1172:57"><name pos:start="1172:53" pos:end="1172:57">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1173:13" pos:end="1173:19">return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<extern pos:start="1178:1" pos:end="1430:1">extern <literal type="string" pos:start="1178:8" pos:end="1178:10">"C"</literal> <function pos:start="1178:12" pos:end="1430:1"><type pos:start="1178:12" pos:end="1178:15"><name pos:start="1178:12" pos:end="1178:15">void</name></type> <name pos:start="1178:17" pos:end="1178:84">Java_org_sipdroid_net_impl_OSNetworkSystem_oneTimeInitializationImpl</name><parameter_list pos:start="1178:85" pos:end="1179:35">(<parameter pos:start="1178:86" pos:end="1178:96"><decl pos:start="1178:86" pos:end="1178:96"><type pos:start="1178:86" pos:end="1178:96"><name pos:start="1178:86" pos:end="1178:91">JNIEnv</name><modifier pos:start="1178:92" pos:end="1178:92">*</modifier></type> <name pos:start="1178:94" pos:end="1178:96">env</name></decl></parameter>, <parameter pos:start="1178:99" pos:end="1178:109"><decl pos:start="1178:99" pos:end="1178:109"><type pos:start="1178:99" pos:end="1178:109"><name pos:start="1178:99" pos:end="1178:105">jobject</name></type> <name pos:start="1178:107" pos:end="1178:109">obj</name></decl></parameter>,
        <parameter pos:start="1179:9" pos:end="1179:34"><decl pos:start="1179:9" pos:end="1179:34"><type pos:start="1179:9" pos:end="1179:34"><name pos:start="1179:9" pos:end="1179:16">jboolean</name></type> <name pos:start="1179:18" pos:end="1179:34">jcl_supports_ipv6</name></decl></parameter>)</parameter_list> <block pos:start="1179:37" pos:end="1430:1">{<block_content pos:start="1182:5" pos:end="1428:5">
    <comment type="line" pos:start="1180:5" pos:end="1180:66">// LOGD("ENTER oneTimeInitializationImpl of OSNetworkSystem");</comment>

    <decl_stmt pos:start="1182:5" pos:end="1182:54"><decl pos:start="1182:5" pos:end="1182:53"><type pos:start="1182:5" pos:end="1182:8"><name pos:start="1182:5" pos:end="1182:8">char</name></type> <name pos:start="1182:10" pos:end="1182:53"><name pos:start="1182:10" pos:end="1182:33">useAdbNetworkingProperty</name><index pos:start="1182:34" pos:end="1182:53">[<expr pos:start="1182:35" pos:end="1182:52"><name pos:start="1182:35" pos:end="1182:52">PROPERTY_VALUE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1183:5" pos:end="1183:50"><decl pos:start="1183:5" pos:end="1183:49"><type pos:start="1183:5" pos:end="1183:8"><name pos:start="1183:5" pos:end="1183:8">char</name></type> <name pos:start="1183:10" pos:end="1183:49"><name pos:start="1183:10" pos:end="1183:29">adbConnectedProperty</name><index pos:start="1183:30" pos:end="1183:49">[<expr pos:start="1183:31" pos:end="1183:48"><name pos:start="1183:31" pos:end="1183:48">PROPERTY_VALUE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="1185:5" pos:end="1185:81"><expr pos:start="1185:5" pos:end="1185:80"><call pos:start="1185:5" pos:end="1185:80"><name pos:start="1185:5" pos:end="1185:16">property_get</name><argument_list pos:start="1185:17" pos:end="1185:80">(<argument pos:start="1185:18" pos:end="1185:49"><expr pos:start="1185:18" pos:end="1185:49"><literal type="string" pos:start="1185:18" pos:end="1185:49">"android.net.use-adb-networking"</literal></expr></argument>, <argument pos:start="1185:52" pos:end="1185:75"><expr pos:start="1185:52" pos:end="1185:75"><name pos:start="1185:52" pos:end="1185:75">useAdbNetworkingProperty</name></expr></argument>, <argument pos:start="1185:78" pos:end="1185:79"><expr pos:start="1185:78" pos:end="1185:79"><literal type="string" pos:start="1185:78" pos:end="1185:79">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1186:5" pos:end="1186:60"><expr pos:start="1186:5" pos:end="1186:59"><call pos:start="1186:5" pos:end="1186:59"><name pos:start="1186:5" pos:end="1186:16">property_get</name><argument_list pos:start="1186:17" pos:end="1186:59">(<argument pos:start="1186:18" pos:end="1186:32"><expr pos:start="1186:18" pos:end="1186:32"><literal type="string" pos:start="1186:18" pos:end="1186:32">"adb.connected"</literal></expr></argument>, <argument pos:start="1186:35" pos:end="1186:54"><expr pos:start="1186:35" pos:end="1186:54"><name pos:start="1186:35" pos:end="1186:54">adbConnectedProperty</name></expr></argument>, <argument pos:start="1186:57" pos:end="1186:58"><expr pos:start="1186:57" pos:end="1186:58"><literal type="string" pos:start="1186:57" pos:end="1186:58">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1188:5" pos:end="1191:5"><if pos:start="1188:5" pos:end="1191:5">if <condition pos:start="1188:8" pos:end="1189:56">(<expr pos:start="1188:9" pos:end="1189:55"><call pos:start="1188:9" pos:end="1188:48"><name pos:start="1188:9" pos:end="1188:14">strlen</name><argument_list pos:start="1188:15" pos:end="1188:48">(<argument pos:start="1188:16" pos:end="1188:47"><expr pos:start="1188:16" pos:end="1188:47"><operator pos:start="1188:16" pos:end="1188:16">(</operator><name pos:start="1188:17" pos:end="1188:20">char</name> <operator pos:start="1188:22" pos:end="1188:22">*</operator><operator pos:start="1188:23" pos:end="1188:23">)</operator><name pos:start="1188:24" pos:end="1188:47">useAdbNetworkingProperty</name></expr></argument>)</argument_list></call> <operator pos:start="1188:50" pos:end="1188:50">&gt;</operator> <literal type="number" pos:start="1188:52" pos:end="1188:52">0</literal>
            <operator pos:start="1189:13" pos:end="1189:14">&amp;&amp;</operator> <call pos:start="1189:16" pos:end="1189:51"><name pos:start="1189:16" pos:end="1189:21">strlen</name><argument_list pos:start="1189:22" pos:end="1189:51">(<argument pos:start="1189:23" pos:end="1189:50"><expr pos:start="1189:23" pos:end="1189:50"><operator pos:start="1189:23" pos:end="1189:23">(</operator><name pos:start="1189:24" pos:end="1189:27">char</name> <operator pos:start="1189:29" pos:end="1189:29">*</operator><operator pos:start="1189:30" pos:end="1189:30">)</operator><name pos:start="1189:31" pos:end="1189:50">adbConnectedProperty</name></expr></argument>)</argument_list></call> <operator pos:start="1189:53" pos:end="1189:53">&gt;</operator> <literal type="number" pos:start="1189:55" pos:end="1189:55">0</literal></expr>)</condition> <block pos:start="1189:58" pos:end="1191:5">{<block_content pos:start="1190:9" pos:end="1190:29">
        <expr_stmt pos:start="1190:9" pos:end="1190:29"><expr pos:start="1190:9" pos:end="1190:28"><name pos:start="1190:9" pos:end="1190:24">useAdbNetworking</name> <operator pos:start="1190:26" pos:end="1190:26">=</operator> <literal type="number" pos:start="1190:28" pos:end="1190:28">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1193:5" pos:end="1193:53"><expr pos:start="1193:5" pos:end="1193:52"><call pos:start="1193:5" pos:end="1193:52"><name pos:start="1193:5" pos:end="1193:10">memset</name><argument_list pos:start="1193:11" pos:end="1193:52">(<argument pos:start="1193:12" pos:end="1193:25"><expr pos:start="1193:12" pos:end="1193:25"><operator pos:start="1193:12" pos:end="1193:12">&amp;</operator><name pos:start="1193:13" pos:end="1193:25">gCachedFields</name></expr></argument>, <argument pos:start="1193:28" pos:end="1193:28"><expr pos:start="1193:28" pos:end="1193:28"><literal type="number" pos:start="1193:28" pos:end="1193:28">0</literal></expr></argument>, <argument pos:start="1193:31" pos:end="1193:51"><expr pos:start="1193:31" pos:end="1193:51"><sizeof pos:start="1193:31" pos:end="1193:51">sizeof<argument_list pos:start="1193:37" pos:end="1193:51">(<argument pos:start="1193:38" pos:end="1193:50"><expr pos:start="1193:38" pos:end="1193:50"><name pos:start="1193:38" pos:end="1193:50">gCachedFields</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="1195:5" pos:end="1195:31">// initializing InetAddress</comment>

    <decl_stmt pos:start="1197:5" pos:end="1197:63"><decl pos:start="1197:5" pos:end="1197:62"><type pos:start="1197:5" pos:end="1197:10"><name pos:start="1197:5" pos:end="1197:10">jclass</name></type> <name pos:start="1197:12" pos:end="1197:21">iaddrclass</name> <init pos:start="1197:23" pos:end="1197:62">= <expr pos:start="1197:25" pos:end="1197:62"><call pos:start="1197:25" pos:end="1197:62"><name pos:start="1197:25" pos:end="1197:38"><name pos:start="1197:25" pos:end="1197:27">env</name><operator pos:start="1197:28" pos:end="1197:29">-&gt;</operator><name pos:start="1197:30" pos:end="1197:38">FindClass</name></name><argument_list pos:start="1197:39" pos:end="1197:62">(<argument pos:start="1197:40" pos:end="1197:61"><expr pos:start="1197:40" pos:end="1197:61"><literal type="string" pos:start="1197:40" pos:end="1197:61">"java/net/InetAddress"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1199:5" pos:end="1203:5"><if pos:start="1199:5" pos:end="1203:5">if <condition pos:start="1199:8" pos:end="1199:27">(<expr pos:start="1199:9" pos:end="1199:26"><name pos:start="1199:9" pos:end="1199:18">iaddrclass</name> <operator pos:start="1199:20" pos:end="1199:21">==</operator> <name pos:start="1199:23" pos:end="1199:26">NULL</name></expr>)</condition> <block pos:start="1199:29" pos:end="1203:5">{<block_content pos:start="1200:9" pos:end="1202:15">
        <expr_stmt pos:start="1200:9" pos:end="1201:40"><expr pos:start="1200:9" pos:end="1201:39"><call pos:start="1200:9" pos:end="1201:39"><name pos:start="1200:9" pos:end="1200:25">jniThrowException</name><argument_list pos:start="1200:26" pos:end="1201:39">(<argument pos:start="1200:27" pos:end="1200:29"><expr pos:start="1200:27" pos:end="1200:29"><name pos:start="1200:27" pos:end="1200:29">env</name></expr></argument>, <argument pos:start="1200:32" pos:end="1200:65"><expr pos:start="1200:32" pos:end="1200:65"><literal type="string" pos:start="1200:32" pos:end="1200:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1201:17" pos:end="1201:38"><expr pos:start="1201:17" pos:end="1201:38"><literal type="string" pos:start="1201:17" pos:end="1201:38">"java.net.InetAddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1202:9" pos:end="1202:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1205:5" pos:end="1205:71"><expr pos:start="1205:5" pos:end="1205:70"><name pos:start="1205:5" pos:end="1205:29"><name pos:start="1205:5" pos:end="1205:17">gCachedFields</name><operator pos:start="1205:18" pos:end="1205:18">.</operator><name pos:start="1205:19" pos:end="1205:29">iaddr_class</name></name> <operator pos:start="1205:31" pos:end="1205:31">=</operator> <operator pos:start="1205:33" pos:end="1205:33">(</operator><name pos:start="1205:34" pos:end="1205:39">jclass</name><operator pos:start="1205:40" pos:end="1205:40">)</operator> <call pos:start="1205:42" pos:end="1205:70"><name pos:start="1205:42" pos:end="1205:58"><name pos:start="1205:42" pos:end="1205:44">env</name><operator pos:start="1205:45" pos:end="1205:46">-&gt;</operator><name pos:start="1205:47" pos:end="1205:58">NewGlobalRef</name></name><argument_list pos:start="1205:59" pos:end="1205:70">(<argument pos:start="1205:60" pos:end="1205:69"><expr pos:start="1205:60" pos:end="1205:69"><name pos:start="1205:60" pos:end="1205:69">iaddrclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="1207:5" pos:end="1207:77"><decl pos:start="1207:5" pos:end="1207:76"><type pos:start="1207:5" pos:end="1207:13"><name pos:start="1207:5" pos:end="1207:13">jmethodID</name></type> <name pos:start="1207:15" pos:end="1207:28">iaddrclassinit</name> <init pos:start="1207:30" pos:end="1207:76">= <expr pos:start="1207:32" pos:end="1207:76"><call pos:start="1207:32" pos:end="1207:76"><name pos:start="1207:32" pos:end="1207:47"><name pos:start="1207:32" pos:end="1207:34">env</name><operator pos:start="1207:35" pos:end="1207:36">-&gt;</operator><name pos:start="1207:37" pos:end="1207:47">GetMethodID</name></name><argument_list pos:start="1207:48" pos:end="1207:76">(<argument pos:start="1207:49" pos:end="1207:58"><expr pos:start="1207:49" pos:end="1207:58"><name pos:start="1207:49" pos:end="1207:58">iaddrclass</name></expr></argument>, <argument pos:start="1207:61" pos:end="1207:68"><expr pos:start="1207:61" pos:end="1207:68"><literal type="string" pos:start="1207:61" pos:end="1207:68">"&lt;init&gt;"</literal></expr></argument>, <argument pos:start="1207:71" pos:end="1207:75"><expr pos:start="1207:71" pos:end="1207:75"><literal type="string" pos:start="1207:71" pos:end="1207:75">"()V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1209:5" pos:end="1212:5"><if pos:start="1209:5" pos:end="1212:5">if <condition pos:start="1209:8" pos:end="1209:31">(<expr pos:start="1209:9" pos:end="1209:30"><name pos:start="1209:9" pos:end="1209:22">iaddrclassinit</name> <operator pos:start="1209:24" pos:end="1209:25">==</operator> <name pos:start="1209:27" pos:end="1209:30">NULL</name></expr>)</condition> <block pos:start="1209:33" pos:end="1212:5">{<block_content pos:start="1210:9" pos:end="1211:15">
        <expr_stmt pos:start="1210:9" pos:end="1210:86"><expr pos:start="1210:9" pos:end="1210:85"><call pos:start="1210:9" pos:end="1210:85"><name pos:start="1210:9" pos:end="1210:25">jniThrowException</name><argument_list pos:start="1210:26" pos:end="1210:85">(<argument pos:start="1210:27" pos:end="1210:29"><expr pos:start="1210:27" pos:end="1210:29"><name pos:start="1210:27" pos:end="1210:29">env</name></expr></argument>, <argument pos:start="1210:32" pos:end="1210:60"><expr pos:start="1210:32" pos:end="1210:60"><literal type="string" pos:start="1210:32" pos:end="1210:60">"java/lang/NoSuchMethodError"</literal></expr></argument>, <argument pos:start="1210:63" pos:end="1210:84"><expr pos:start="1210:63" pos:end="1210:84"><literal type="string" pos:start="1210:63" pos:end="1210:84">"InetAddress.&lt;init&gt;()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1211:9" pos:end="1211:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1214:5" pos:end="1214:52"><expr pos:start="1214:5" pos:end="1214:51"><name pos:start="1214:5" pos:end="1214:34"><name pos:start="1214:5" pos:end="1214:17">gCachedFields</name><operator pos:start="1214:18" pos:end="1214:18">.</operator><name pos:start="1214:19" pos:end="1214:34">iaddr_class_init</name></name> <operator pos:start="1214:36" pos:end="1214:36">=</operator> <name pos:start="1214:38" pos:end="1214:51">iaddrclassinit</name></expr>;</expr_stmt>

    <decl_stmt pos:start="1216:5" pos:end="1217:58"><decl pos:start="1216:5" pos:end="1217:57"><type pos:start="1216:5" pos:end="1216:13"><name pos:start="1216:5" pos:end="1216:13">jmethodID</name></type> <name pos:start="1216:15" pos:end="1216:31">iaddrgetbyaddress</name> <init pos:start="1216:33" pos:end="1217:57">= <expr pos:start="1216:35" pos:end="1217:57"><call pos:start="1216:35" pos:end="1217:57"><name pos:start="1216:35" pos:end="1216:56"><name pos:start="1216:35" pos:end="1216:37">env</name><operator pos:start="1216:38" pos:end="1216:39">-&gt;</operator><name pos:start="1216:40" pos:end="1216:56">GetStaticMethodID</name></name><argument_list pos:start="1216:57" pos:end="1217:57">(<argument pos:start="1216:58" pos:end="1216:67"><expr pos:start="1216:58" pos:end="1216:67"><name pos:start="1216:58" pos:end="1216:67">iaddrclass</name></expr></argument>,
            <argument pos:start="1217:13" pos:end="1217:26"><expr pos:start="1217:13" pos:end="1217:26"><literal type="string" pos:start="1217:13" pos:end="1217:26">"getByAddress"</literal></expr></argument>, <argument pos:start="1217:29" pos:end="1217:56"><expr pos:start="1217:29" pos:end="1217:56"><literal type="string" pos:start="1217:29" pos:end="1217:56">"([B)Ljava/net/InetAddress;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1219:5" pos:end="1223:5"><if pos:start="1219:5" pos:end="1223:5">if <condition pos:start="1219:8" pos:end="1219:34">(<expr pos:start="1219:9" pos:end="1219:33"><name pos:start="1219:9" pos:end="1219:25">iaddrgetbyaddress</name> <operator pos:start="1219:27" pos:end="1219:28">==</operator> <name pos:start="1219:30" pos:end="1219:33">NULL</name></expr>)</condition> <block pos:start="1219:36" pos:end="1223:5">{<block_content pos:start="1220:9" pos:end="1222:15">
        <expr_stmt pos:start="1220:9" pos:end="1221:56"><expr pos:start="1220:9" pos:end="1221:55"><call pos:start="1220:9" pos:end="1221:55"><name pos:start="1220:9" pos:end="1220:25">jniThrowException</name><argument_list pos:start="1220:26" pos:end="1221:55">(<argument pos:start="1220:27" pos:end="1220:29"><expr pos:start="1220:27" pos:end="1220:29"><name pos:start="1220:27" pos:end="1220:29">env</name></expr></argument>, <argument pos:start="1220:32" pos:end="1220:60"><expr pos:start="1220:32" pos:end="1220:60"><literal type="string" pos:start="1220:32" pos:end="1220:60">"java/lang/NoSuchMethodError"</literal></expr></argument>,
                <argument pos:start="1221:17" pos:end="1221:54"><expr pos:start="1221:17" pos:end="1221:54"><literal type="string" pos:start="1221:17" pos:end="1221:54">"InetAddress.getByAddress(byte[] val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1222:9" pos:end="1222:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1225:5" pos:end="1225:57"><expr pos:start="1225:5" pos:end="1225:56"><name pos:start="1225:5" pos:end="1225:36"><name pos:start="1225:5" pos:end="1225:17">gCachedFields</name><operator pos:start="1225:18" pos:end="1225:18">.</operator><name pos:start="1225:19" pos:end="1225:36">iaddr_getbyaddress</name></name> <operator pos:start="1225:38" pos:end="1225:38">=</operator> <name pos:start="1225:40" pos:end="1225:56">iaddrgetbyaddress</name></expr>;</expr_stmt>

    <decl_stmt pos:start="1227:5" pos:end="1227:77"><decl pos:start="1227:5" pos:end="1227:76"><type pos:start="1227:5" pos:end="1227:12"><name pos:start="1227:5" pos:end="1227:12">jfieldID</name></type> <name pos:start="1227:14" pos:end="1227:27">iaddripaddress</name> <init pos:start="1227:29" pos:end="1227:76">= <expr pos:start="1227:31" pos:end="1227:76"><call pos:start="1227:31" pos:end="1227:76"><name pos:start="1227:31" pos:end="1227:45"><name pos:start="1227:31" pos:end="1227:33">env</name><operator pos:start="1227:34" pos:end="1227:35">-&gt;</operator><name pos:start="1227:36" pos:end="1227:45">GetFieldID</name></name><argument_list pos:start="1227:46" pos:end="1227:76">(<argument pos:start="1227:47" pos:end="1227:56"><expr pos:start="1227:47" pos:end="1227:56"><name pos:start="1227:47" pos:end="1227:56">iaddrclass</name></expr></argument>, <argument pos:start="1227:59" pos:end="1227:69"><expr pos:start="1227:59" pos:end="1227:69"><literal type="string" pos:start="1227:59" pos:end="1227:69">"ipaddress"</literal></expr></argument>, <argument pos:start="1227:72" pos:end="1227:75"><expr pos:start="1227:72" pos:end="1227:75"><literal type="string" pos:start="1227:72" pos:end="1227:75">"[B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1229:5" pos:end="1233:5"><if pos:start="1229:5" pos:end="1233:5">if <condition pos:start="1229:8" pos:end="1229:31">(<expr pos:start="1229:9" pos:end="1229:30"><name pos:start="1229:9" pos:end="1229:22">iaddripaddress</name> <operator pos:start="1229:24" pos:end="1229:25">==</operator> <name pos:start="1229:27" pos:end="1229:30">NULL</name></expr>)</condition> <block pos:start="1229:33" pos:end="1233:5">{<block_content pos:start="1230:9" pos:end="1232:15">
        <expr_stmt pos:start="1230:9" pos:end="1231:58"><expr pos:start="1230:9" pos:end="1231:57"><call pos:start="1230:9" pos:end="1231:57"><name pos:start="1230:9" pos:end="1230:25">jniThrowException</name><argument_list pos:start="1230:26" pos:end="1231:57">(<argument pos:start="1230:27" pos:end="1230:29"><expr pos:start="1230:27" pos:end="1230:29"><name pos:start="1230:27" pos:end="1230:29">env</name></expr></argument>, <argument pos:start="1230:32" pos:end="1230:59"><expr pos:start="1230:32" pos:end="1230:59"><literal type="string" pos:start="1230:32" pos:end="1230:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1231:17" pos:end="1231:56"><expr pos:start="1231:17" pos:end="1231:56"><literal type="string" pos:start="1231:17" pos:end="1231:56">"Can't find field InetAddress.ipaddress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1232:9" pos:end="1232:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1235:5" pos:end="1235:51"><expr pos:start="1235:5" pos:end="1235:50"><name pos:start="1235:5" pos:end="1235:33"><name pos:start="1235:5" pos:end="1235:17">gCachedFields</name><operator pos:start="1235:18" pos:end="1235:18">.</operator><name pos:start="1235:19" pos:end="1235:33">iaddr_ipaddress</name></name> <operator pos:start="1235:35" pos:end="1235:35">=</operator> <name pos:start="1235:37" pos:end="1235:50">iaddripaddress</name></expr>;</expr_stmt>

    <comment type="line" pos:start="1237:5" pos:end="1237:34">// get the GenericIPMreq class</comment>

    <decl_stmt pos:start="1239:5" pos:end="1239:92"><decl pos:start="1239:5" pos:end="1239:91"><type pos:start="1239:5" pos:end="1239:10"><name pos:start="1239:5" pos:end="1239:10">jclass</name></type> <name pos:start="1239:12" pos:end="1239:29">genericipmreqclass</name> <init pos:start="1239:31" pos:end="1239:91">= <expr pos:start="1239:33" pos:end="1239:91"><call pos:start="1239:33" pos:end="1239:91"><name pos:start="1239:33" pos:end="1239:46"><name pos:start="1239:33" pos:end="1239:35">env</name><operator pos:start="1239:36" pos:end="1239:37">-&gt;</operator><name pos:start="1239:38" pos:end="1239:46">FindClass</name></name><argument_list pos:start="1239:47" pos:end="1239:91">(<argument pos:start="1239:48" pos:end="1239:90"><expr pos:start="1239:48" pos:end="1239:90"><literal type="string" pos:start="1239:48" pos:end="1239:90">"org/apache/harmony/luni/net/GenericIPMreq"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1241:5" pos:end="1245:5"><if pos:start="1241:5" pos:end="1245:5">if <condition pos:start="1241:8" pos:end="1241:35">(<expr pos:start="1241:9" pos:end="1241:34"><name pos:start="1241:9" pos:end="1241:26">genericipmreqclass</name> <operator pos:start="1241:28" pos:end="1241:29">==</operator> <name pos:start="1241:31" pos:end="1241:34">NULL</name></expr>)</condition> <block pos:start="1241:37" pos:end="1245:5">{<block_content pos:start="1242:9" pos:end="1244:15">
        <expr_stmt pos:start="1242:9" pos:end="1243:61"><expr pos:start="1242:9" pos:end="1243:60"><call pos:start="1242:9" pos:end="1243:60"><name pos:start="1242:9" pos:end="1242:25">jniThrowException</name><argument_list pos:start="1242:26" pos:end="1243:60">(<argument pos:start="1242:27" pos:end="1242:29"><expr pos:start="1242:27" pos:end="1242:29"><name pos:start="1242:27" pos:end="1242:29">env</name></expr></argument>, <argument pos:start="1242:32" pos:end="1242:65"><expr pos:start="1242:32" pos:end="1242:65"><literal type="string" pos:start="1242:32" pos:end="1242:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1243:17" pos:end="1243:59"><expr pos:start="1243:17" pos:end="1243:59"><literal type="string" pos:start="1243:17" pos:end="1243:59">"org.apache.harmony.luni.net.GenericIPMreq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1244:9" pos:end="1244:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1247:5" pos:end="1247:87"><expr pos:start="1247:5" pos:end="1247:86"><name pos:start="1247:5" pos:end="1247:37"><name pos:start="1247:5" pos:end="1247:17">gCachedFields</name><operator pos:start="1247:18" pos:end="1247:18">.</operator><name pos:start="1247:19" pos:end="1247:37">genericipmreq_class</name></name> <operator pos:start="1247:39" pos:end="1247:39">=</operator> <operator pos:start="1247:41" pos:end="1247:41">(</operator><name pos:start="1247:42" pos:end="1247:47">jclass</name><operator pos:start="1247:48" pos:end="1247:48">)</operator> <call pos:start="1247:50" pos:end="1247:86"><name pos:start="1247:50" pos:end="1247:66"><name pos:start="1247:50" pos:end="1247:52">env</name><operator pos:start="1247:53" pos:end="1247:54">-&gt;</operator><name pos:start="1247:55" pos:end="1247:66">NewGlobalRef</name></name><argument_list pos:start="1247:67" pos:end="1247:86">(<argument pos:start="1247:68" pos:end="1247:85"><expr pos:start="1247:68" pos:end="1247:85"><name pos:start="1247:68" pos:end="1247:85">genericipmreqclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="1249:5" pos:end="1249:27">// initializing Integer</comment>

    <decl_stmt pos:start="1251:5" pos:end="1251:62"><decl pos:start="1251:5" pos:end="1251:61"><type pos:start="1251:5" pos:end="1251:10"><name pos:start="1251:5" pos:end="1251:10">jclass</name></type> <name pos:start="1251:12" pos:end="1251:23">integerclass</name> <init pos:start="1251:25" pos:end="1251:61">= <expr pos:start="1251:27" pos:end="1251:61"><call pos:start="1251:27" pos:end="1251:61"><name pos:start="1251:27" pos:end="1251:40"><name pos:start="1251:27" pos:end="1251:29">env</name><operator pos:start="1251:30" pos:end="1251:31">-&gt;</operator><name pos:start="1251:32" pos:end="1251:40">FindClass</name></name><argument_list pos:start="1251:41" pos:end="1251:61">(<argument pos:start="1251:42" pos:end="1251:60"><expr pos:start="1251:42" pos:end="1251:60"><literal type="string" pos:start="1251:42" pos:end="1251:60">"java/lang/Integer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1253:5" pos:end="1257:5"><if pos:start="1253:5" pos:end="1257:5">if <condition pos:start="1253:8" pos:end="1253:29">(<expr pos:start="1253:9" pos:end="1253:28"><name pos:start="1253:9" pos:end="1253:20">integerclass</name> <operator pos:start="1253:22" pos:end="1253:23">==</operator> <name pos:start="1253:25" pos:end="1253:28">NULL</name></expr>)</condition> <block pos:start="1253:31" pos:end="1257:5">{<block_content pos:start="1254:9" pos:end="1256:15">
        <expr_stmt pos:start="1254:9" pos:end="1255:37"><expr pos:start="1254:9" pos:end="1255:36"><call pos:start="1254:9" pos:end="1255:36"><name pos:start="1254:9" pos:end="1254:25">jniThrowException</name><argument_list pos:start="1254:26" pos:end="1255:36">(<argument pos:start="1254:27" pos:end="1254:29"><expr pos:start="1254:27" pos:end="1254:29"><name pos:start="1254:27" pos:end="1254:29">env</name></expr></argument>, <argument pos:start="1254:32" pos:end="1254:65"><expr pos:start="1254:32" pos:end="1254:65"><literal type="string" pos:start="1254:32" pos:end="1254:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1255:17" pos:end="1255:35"><expr pos:start="1255:17" pos:end="1255:35"><literal type="string" pos:start="1255:17" pos:end="1255:35">"java.lang.Integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1256:9" pos:end="1256:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1259:5" pos:end="1259:82"><decl pos:start="1259:5" pos:end="1259:81"><type pos:start="1259:5" pos:end="1259:13"><name pos:start="1259:5" pos:end="1259:13">jmethodID</name></type> <name pos:start="1259:15" pos:end="1259:30">integerclassinit</name> <init pos:start="1259:32" pos:end="1259:81">= <expr pos:start="1259:34" pos:end="1259:81"><call pos:start="1259:34" pos:end="1259:81"><name pos:start="1259:34" pos:end="1259:49"><name pos:start="1259:34" pos:end="1259:36">env</name><operator pos:start="1259:37" pos:end="1259:38">-&gt;</operator><name pos:start="1259:39" pos:end="1259:49">GetMethodID</name></name><argument_list pos:start="1259:50" pos:end="1259:81">(<argument pos:start="1259:51" pos:end="1259:62"><expr pos:start="1259:51" pos:end="1259:62"><name pos:start="1259:51" pos:end="1259:62">integerclass</name></expr></argument>, <argument pos:start="1259:65" pos:end="1259:72"><expr pos:start="1259:65" pos:end="1259:72"><literal type="string" pos:start="1259:65" pos:end="1259:72">"&lt;init&gt;"</literal></expr></argument>, <argument pos:start="1259:75" pos:end="1259:80"><expr pos:start="1259:75" pos:end="1259:80"><literal type="string" pos:start="1259:75" pos:end="1259:80">"(I)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1261:5" pos:end="1265:5"><if pos:start="1261:5" pos:end="1265:5">if <condition pos:start="1261:8" pos:end="1261:33">(<expr pos:start="1261:9" pos:end="1261:32"><name pos:start="1261:9" pos:end="1261:24">integerclassinit</name> <operator pos:start="1261:26" pos:end="1261:27">==</operator> <name pos:start="1261:29" pos:end="1261:32">NULL</name></expr>)</condition> <block pos:start="1261:35" pos:end="1265:5">{<block_content pos:start="1262:9" pos:end="1264:15">
        <expr_stmt pos:start="1262:9" pos:end="1263:43"><expr pos:start="1262:9" pos:end="1263:42"><call pos:start="1262:9" pos:end="1263:42"><name pos:start="1262:9" pos:end="1262:25">jniThrowException</name><argument_list pos:start="1262:26" pos:end="1263:42">(<argument pos:start="1262:27" pos:end="1262:29"><expr pos:start="1262:27" pos:end="1262:29"><name pos:start="1262:27" pos:end="1262:29">env</name></expr></argument>, <argument pos:start="1262:32" pos:end="1262:60"><expr pos:start="1262:32" pos:end="1262:60"><literal type="string" pos:start="1262:32" pos:end="1262:60">"java/lang/NoSuchMethodError"</literal></expr></argument>,
                <argument pos:start="1263:17" pos:end="1263:41"><expr pos:start="1263:17" pos:end="1263:41"><literal type="string" pos:start="1263:17" pos:end="1263:41">"Integer.&lt;init&gt;(int val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1264:9" pos:end="1264:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1267:5" pos:end="1267:77"><decl pos:start="1267:5" pos:end="1267:76"><type pos:start="1267:5" pos:end="1267:12"><name pos:start="1267:5" pos:end="1267:12">jfieldID</name></type> <name pos:start="1267:14" pos:end="1267:30">integerclassvalue</name> <init pos:start="1267:32" pos:end="1267:76">= <expr pos:start="1267:34" pos:end="1267:76"><call pos:start="1267:34" pos:end="1267:76"><name pos:start="1267:34" pos:end="1267:48"><name pos:start="1267:34" pos:end="1267:36">env</name><operator pos:start="1267:37" pos:end="1267:38">-&gt;</operator><name pos:start="1267:39" pos:end="1267:48">GetFieldID</name></name><argument_list pos:start="1267:49" pos:end="1267:76">(<argument pos:start="1267:50" pos:end="1267:61"><expr pos:start="1267:50" pos:end="1267:61"><name pos:start="1267:50" pos:end="1267:61">integerclass</name></expr></argument>, <argument pos:start="1267:64" pos:end="1267:70"><expr pos:start="1267:64" pos:end="1267:70"><literal type="string" pos:start="1267:64" pos:end="1267:70">"value"</literal></expr></argument>, <argument pos:start="1267:73" pos:end="1267:75"><expr pos:start="1267:73" pos:end="1267:75"><literal type="string" pos:start="1267:73" pos:end="1267:75">"I"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1269:5" pos:end="1272:5"><if pos:start="1269:5" pos:end="1272:5">if <condition pos:start="1269:8" pos:end="1269:34">(<expr pos:start="1269:9" pos:end="1269:33"><name pos:start="1269:9" pos:end="1269:25">integerclassvalue</name> <operator pos:start="1269:27" pos:end="1269:28">==</operator> <name pos:start="1269:30" pos:end="1269:33">NULL</name></expr>)</condition> <block pos:start="1269:36" pos:end="1272:5">{<block_content pos:start="1270:9" pos:end="1271:15">
        <expr_stmt pos:start="1270:9" pos:end="1270:79"><expr pos:start="1270:9" pos:end="1270:78"><call pos:start="1270:9" pos:end="1270:78"><name pos:start="1270:9" pos:end="1270:25">jniThrowException</name><argument_list pos:start="1270:26" pos:end="1270:78">(<argument pos:start="1270:27" pos:end="1270:29"><expr pos:start="1270:27" pos:end="1270:29"><name pos:start="1270:27" pos:end="1270:29">env</name></expr></argument>, <argument pos:start="1270:32" pos:end="1270:60"><expr pos:start="1270:32" pos:end="1270:60"><literal type="string" pos:start="1270:32" pos:end="1270:60">"java/lang/NoSuchMethodError"</literal></expr></argument>, <argument pos:start="1270:63" pos:end="1270:77"><expr pos:start="1270:63" pos:end="1270:77"><literal type="string" pos:start="1270:63" pos:end="1270:77">"Integer.value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1271:9" pos:end="1271:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1274:5" pos:end="1274:75"><expr pos:start="1274:5" pos:end="1274:74"><name pos:start="1274:5" pos:end="1274:31"><name pos:start="1274:5" pos:end="1274:17">gCachedFields</name><operator pos:start="1274:18" pos:end="1274:18">.</operator><name pos:start="1274:19" pos:end="1274:31">integer_class</name></name> <operator pos:start="1274:33" pos:end="1274:33">=</operator> <operator pos:start="1274:35" pos:end="1274:35">(</operator><name pos:start="1274:36" pos:end="1274:41">jclass</name><operator pos:start="1274:42" pos:end="1274:42">)</operator> <call pos:start="1274:44" pos:end="1274:74"><name pos:start="1274:44" pos:end="1274:60"><name pos:start="1274:44" pos:end="1274:46">env</name><operator pos:start="1274:47" pos:end="1274:48">-&gt;</operator><name pos:start="1274:49" pos:end="1274:60">NewGlobalRef</name></name><argument_list pos:start="1274:61" pos:end="1274:74">(<argument pos:start="1274:62" pos:end="1274:73"><expr pos:start="1274:62" pos:end="1274:73"><name pos:start="1274:62" pos:end="1274:73">integerclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1275:5" pos:end="1275:56"><expr pos:start="1275:5" pos:end="1275:55"><name pos:start="1275:5" pos:end="1275:36"><name pos:start="1275:5" pos:end="1275:17">gCachedFields</name><operator pos:start="1275:18" pos:end="1275:18">.</operator><name pos:start="1275:19" pos:end="1275:36">integer_class_init</name></name> <operator pos:start="1275:38" pos:end="1275:38">=</operator> <name pos:start="1275:40" pos:end="1275:55">integerclassinit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1276:5" pos:end="1276:58"><expr pos:start="1276:5" pos:end="1276:57"><name pos:start="1276:5" pos:end="1276:37"><name pos:start="1276:5" pos:end="1276:17">gCachedFields</name><operator pos:start="1276:18" pos:end="1276:18">.</operator><name pos:start="1276:19" pos:end="1276:37">integer_class_value</name></name> <operator pos:start="1276:39" pos:end="1276:39">=</operator> <name pos:start="1276:41" pos:end="1276:57">integerclassvalue</name></expr>;</expr_stmt>

    <comment type="line" pos:start="1278:5" pos:end="1278:27">// initializing Boolean</comment>

    <decl_stmt pos:start="1280:5" pos:end="1280:62"><decl pos:start="1280:5" pos:end="1280:61"><type pos:start="1280:5" pos:end="1280:10"><name pos:start="1280:5" pos:end="1280:10">jclass</name></type> <name pos:start="1280:12" pos:end="1280:23">booleanclass</name> <init pos:start="1280:25" pos:end="1280:61">= <expr pos:start="1280:27" pos:end="1280:61"><call pos:start="1280:27" pos:end="1280:61"><name pos:start="1280:27" pos:end="1280:40"><name pos:start="1280:27" pos:end="1280:29">env</name><operator pos:start="1280:30" pos:end="1280:31">-&gt;</operator><name pos:start="1280:32" pos:end="1280:40">FindClass</name></name><argument_list pos:start="1280:41" pos:end="1280:61">(<argument pos:start="1280:42" pos:end="1280:60"><expr pos:start="1280:42" pos:end="1280:60"><literal type="string" pos:start="1280:42" pos:end="1280:60">"java/lang/Boolean"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1282:5" pos:end="1286:5"><if pos:start="1282:5" pos:end="1286:5">if <condition pos:start="1282:8" pos:end="1282:29">(<expr pos:start="1282:9" pos:end="1282:28"><name pos:start="1282:9" pos:end="1282:20">booleanclass</name> <operator pos:start="1282:22" pos:end="1282:23">==</operator> <name pos:start="1282:25" pos:end="1282:28">NULL</name></expr>)</condition> <block pos:start="1282:31" pos:end="1286:5">{<block_content pos:start="1283:9" pos:end="1285:15">
        <expr_stmt pos:start="1283:9" pos:end="1284:37"><expr pos:start="1283:9" pos:end="1284:36"><call pos:start="1283:9" pos:end="1284:36"><name pos:start="1283:9" pos:end="1283:25">jniThrowException</name><argument_list pos:start="1283:26" pos:end="1284:36">(<argument pos:start="1283:27" pos:end="1283:29"><expr pos:start="1283:27" pos:end="1283:29"><name pos:start="1283:27" pos:end="1283:29">env</name></expr></argument>, <argument pos:start="1283:32" pos:end="1283:65"><expr pos:start="1283:32" pos:end="1283:65"><literal type="string" pos:start="1283:32" pos:end="1283:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1284:17" pos:end="1284:35"><expr pos:start="1284:17" pos:end="1284:35"><literal type="string" pos:start="1284:17" pos:end="1284:35">"java.lang.Boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1285:9" pos:end="1285:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1288:5" pos:end="1288:82"><decl pos:start="1288:5" pos:end="1288:81"><type pos:start="1288:5" pos:end="1288:13"><name pos:start="1288:5" pos:end="1288:13">jmethodID</name></type> <name pos:start="1288:15" pos:end="1288:30">booleanclassinit</name> <init pos:start="1288:32" pos:end="1288:81">= <expr pos:start="1288:34" pos:end="1288:81"><call pos:start="1288:34" pos:end="1288:81"><name pos:start="1288:34" pos:end="1288:49"><name pos:start="1288:34" pos:end="1288:36">env</name><operator pos:start="1288:37" pos:end="1288:38">-&gt;</operator><name pos:start="1288:39" pos:end="1288:49">GetMethodID</name></name><argument_list pos:start="1288:50" pos:end="1288:81">(<argument pos:start="1288:51" pos:end="1288:62"><expr pos:start="1288:51" pos:end="1288:62"><name pos:start="1288:51" pos:end="1288:62">booleanclass</name></expr></argument>, <argument pos:start="1288:65" pos:end="1288:72"><expr pos:start="1288:65" pos:end="1288:72"><literal type="string" pos:start="1288:65" pos:end="1288:72">"&lt;init&gt;"</literal></expr></argument>, <argument pos:start="1288:75" pos:end="1288:80"><expr pos:start="1288:75" pos:end="1288:80"><literal type="string" pos:start="1288:75" pos:end="1288:80">"(Z)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1290:5" pos:end="1294:5"><if pos:start="1290:5" pos:end="1294:5">if <condition pos:start="1290:8" pos:end="1290:33">(<expr pos:start="1290:9" pos:end="1290:32"><name pos:start="1290:9" pos:end="1290:24">booleanclassinit</name> <operator pos:start="1290:26" pos:end="1290:27">==</operator> <name pos:start="1290:29" pos:end="1290:32">NULL</name></expr>)</condition> <block pos:start="1290:35" pos:end="1294:5">{<block_content pos:start="1291:9" pos:end="1293:15">
        <expr_stmt pos:start="1291:9" pos:end="1292:47"><expr pos:start="1291:9" pos:end="1292:46"><call pos:start="1291:9" pos:end="1292:46"><name pos:start="1291:9" pos:end="1291:25">jniThrowException</name><argument_list pos:start="1291:26" pos:end="1292:46">(<argument pos:start="1291:27" pos:end="1291:29"><expr pos:start="1291:27" pos:end="1291:29"><name pos:start="1291:27" pos:end="1291:29">env</name></expr></argument>, <argument pos:start="1291:32" pos:end="1291:60"><expr pos:start="1291:32" pos:end="1291:60"><literal type="string" pos:start="1291:32" pos:end="1291:60">"java/lang/NoSuchMethodError"</literal></expr></argument>,
                <argument pos:start="1292:17" pos:end="1292:45"><expr pos:start="1292:17" pos:end="1292:45"><literal type="string" pos:start="1292:17" pos:end="1292:45">"Boolean.&lt;init&gt;(boolean val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1293:9" pos:end="1293:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1296:5" pos:end="1296:77"><decl pos:start="1296:5" pos:end="1296:76"><type pos:start="1296:5" pos:end="1296:12"><name pos:start="1296:5" pos:end="1296:12">jfieldID</name></type> <name pos:start="1296:14" pos:end="1296:30">booleanclassvalue</name> <init pos:start="1296:32" pos:end="1296:76">= <expr pos:start="1296:34" pos:end="1296:76"><call pos:start="1296:34" pos:end="1296:76"><name pos:start="1296:34" pos:end="1296:48"><name pos:start="1296:34" pos:end="1296:36">env</name><operator pos:start="1296:37" pos:end="1296:38">-&gt;</operator><name pos:start="1296:39" pos:end="1296:48">GetFieldID</name></name><argument_list pos:start="1296:49" pos:end="1296:76">(<argument pos:start="1296:50" pos:end="1296:61"><expr pos:start="1296:50" pos:end="1296:61"><name pos:start="1296:50" pos:end="1296:61">booleanclass</name></expr></argument>, <argument pos:start="1296:64" pos:end="1296:70"><expr pos:start="1296:64" pos:end="1296:70"><literal type="string" pos:start="1296:64" pos:end="1296:70">"value"</literal></expr></argument>, <argument pos:start="1296:73" pos:end="1296:75"><expr pos:start="1296:73" pos:end="1296:75"><literal type="string" pos:start="1296:73" pos:end="1296:75">"Z"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1298:5" pos:end="1301:5"><if pos:start="1298:5" pos:end="1301:5">if <condition pos:start="1298:8" pos:end="1298:34">(<expr pos:start="1298:9" pos:end="1298:33"><name pos:start="1298:9" pos:end="1298:25">booleanclassvalue</name> <operator pos:start="1298:27" pos:end="1298:28">==</operator> <name pos:start="1298:30" pos:end="1298:33">NULL</name></expr>)</condition> <block pos:start="1298:36" pos:end="1301:5">{<block_content pos:start="1299:9" pos:end="1300:15">
        <expr_stmt pos:start="1299:9" pos:end="1299:79"><expr pos:start="1299:9" pos:end="1299:78"><call pos:start="1299:9" pos:end="1299:78"><name pos:start="1299:9" pos:end="1299:25">jniThrowException</name><argument_list pos:start="1299:26" pos:end="1299:78">(<argument pos:start="1299:27" pos:end="1299:29"><expr pos:start="1299:27" pos:end="1299:29"><name pos:start="1299:27" pos:end="1299:29">env</name></expr></argument>, <argument pos:start="1299:32" pos:end="1299:60"><expr pos:start="1299:32" pos:end="1299:60"><literal type="string" pos:start="1299:32" pos:end="1299:60">"java/lang/NoSuchMethodError"</literal></expr></argument>, <argument pos:start="1299:63" pos:end="1299:77"><expr pos:start="1299:63" pos:end="1299:77"><literal type="string" pos:start="1299:63" pos:end="1299:77">"Boolean.value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1300:9" pos:end="1300:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1303:5" pos:end="1303:75"><expr pos:start="1303:5" pos:end="1303:74"><name pos:start="1303:5" pos:end="1303:31"><name pos:start="1303:5" pos:end="1303:17">gCachedFields</name><operator pos:start="1303:18" pos:end="1303:18">.</operator><name pos:start="1303:19" pos:end="1303:31">boolean_class</name></name> <operator pos:start="1303:33" pos:end="1303:33">=</operator> <operator pos:start="1303:35" pos:end="1303:35">(</operator><name pos:start="1303:36" pos:end="1303:41">jclass</name><operator pos:start="1303:42" pos:end="1303:42">)</operator> <call pos:start="1303:44" pos:end="1303:74"><name pos:start="1303:44" pos:end="1303:60"><name pos:start="1303:44" pos:end="1303:46">env</name><operator pos:start="1303:47" pos:end="1303:48">-&gt;</operator><name pos:start="1303:49" pos:end="1303:60">NewGlobalRef</name></name><argument_list pos:start="1303:61" pos:end="1303:74">(<argument pos:start="1303:62" pos:end="1303:73"><expr pos:start="1303:62" pos:end="1303:73"><name pos:start="1303:62" pos:end="1303:73">booleanclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1304:5" pos:end="1304:56"><expr pos:start="1304:5" pos:end="1304:55"><name pos:start="1304:5" pos:end="1304:36"><name pos:start="1304:5" pos:end="1304:17">gCachedFields</name><operator pos:start="1304:18" pos:end="1304:18">.</operator><name pos:start="1304:19" pos:end="1304:36">boolean_class_init</name></name> <operator pos:start="1304:38" pos:end="1304:38">=</operator> <name pos:start="1304:40" pos:end="1304:55">booleanclassinit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1305:5" pos:end="1305:58"><expr pos:start="1305:5" pos:end="1305:57"><name pos:start="1305:5" pos:end="1305:37"><name pos:start="1305:5" pos:end="1305:17">gCachedFields</name><operator pos:start="1305:18" pos:end="1305:18">.</operator><name pos:start="1305:19" pos:end="1305:37">boolean_class_value</name></name> <operator pos:start="1305:39" pos:end="1305:39">=</operator> <name pos:start="1305:41" pos:end="1305:57">booleanclassvalue</name></expr>;</expr_stmt>

    <comment type="line" pos:start="1307:5" pos:end="1307:24">// initializing Byte</comment>

    <decl_stmt pos:start="1309:5" pos:end="1309:56"><decl pos:start="1309:5" pos:end="1309:55"><type pos:start="1309:5" pos:end="1309:10"><name pos:start="1309:5" pos:end="1309:10">jclass</name></type> <name pos:start="1309:12" pos:end="1309:20">byteclass</name> <init pos:start="1309:22" pos:end="1309:55">= <expr pos:start="1309:24" pos:end="1309:55"><call pos:start="1309:24" pos:end="1309:55"><name pos:start="1309:24" pos:end="1309:37"><name pos:start="1309:24" pos:end="1309:26">env</name><operator pos:start="1309:27" pos:end="1309:28">-&gt;</operator><name pos:start="1309:29" pos:end="1309:37">FindClass</name></name><argument_list pos:start="1309:38" pos:end="1309:55">(<argument pos:start="1309:39" pos:end="1309:54"><expr pos:start="1309:39" pos:end="1309:54"><literal type="string" pos:start="1309:39" pos:end="1309:54">"java/lang/Byte"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1311:5" pos:end="1315:5"><if pos:start="1311:5" pos:end="1315:5">if <condition pos:start="1311:8" pos:end="1311:26">(<expr pos:start="1311:9" pos:end="1311:25"><name pos:start="1311:9" pos:end="1311:17">byteclass</name> <operator pos:start="1311:19" pos:end="1311:20">==</operator> <name pos:start="1311:22" pos:end="1311:25">NULL</name></expr>)</condition> <block pos:start="1311:28" pos:end="1315:5">{<block_content pos:start="1312:9" pos:end="1314:15">
        <expr_stmt pos:start="1312:9" pos:end="1313:34"><expr pos:start="1312:9" pos:end="1313:33"><call pos:start="1312:9" pos:end="1313:33"><name pos:start="1312:9" pos:end="1312:25">jniThrowException</name><argument_list pos:start="1312:26" pos:end="1313:33">(<argument pos:start="1312:27" pos:end="1312:29"><expr pos:start="1312:27" pos:end="1312:29"><name pos:start="1312:27" pos:end="1312:29">env</name></expr></argument>, <argument pos:start="1312:32" pos:end="1312:65"><expr pos:start="1312:32" pos:end="1312:65"><literal type="string" pos:start="1312:32" pos:end="1312:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1313:17" pos:end="1313:32"><expr pos:start="1313:17" pos:end="1313:32"><literal type="string" pos:start="1313:17" pos:end="1313:32">"java.lang.Byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1314:9" pos:end="1314:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1317:5" pos:end="1317:76"><decl pos:start="1317:5" pos:end="1317:75"><type pos:start="1317:5" pos:end="1317:13"><name pos:start="1317:5" pos:end="1317:13">jmethodID</name></type> <name pos:start="1317:15" pos:end="1317:27">byteclassinit</name> <init pos:start="1317:29" pos:end="1317:75">= <expr pos:start="1317:31" pos:end="1317:75"><call pos:start="1317:31" pos:end="1317:75"><name pos:start="1317:31" pos:end="1317:46"><name pos:start="1317:31" pos:end="1317:33">env</name><operator pos:start="1317:34" pos:end="1317:35">-&gt;</operator><name pos:start="1317:36" pos:end="1317:46">GetMethodID</name></name><argument_list pos:start="1317:47" pos:end="1317:75">(<argument pos:start="1317:48" pos:end="1317:56"><expr pos:start="1317:48" pos:end="1317:56"><name pos:start="1317:48" pos:end="1317:56">byteclass</name></expr></argument>, <argument pos:start="1317:59" pos:end="1317:66"><expr pos:start="1317:59" pos:end="1317:66"><literal type="string" pos:start="1317:59" pos:end="1317:66">"&lt;init&gt;"</literal></expr></argument>, <argument pos:start="1317:69" pos:end="1317:74"><expr pos:start="1317:69" pos:end="1317:74"><literal type="string" pos:start="1317:69" pos:end="1317:74">"(B)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1319:5" pos:end="1323:5"><if pos:start="1319:5" pos:end="1323:5">if <condition pos:start="1319:8" pos:end="1319:30">(<expr pos:start="1319:9" pos:end="1319:29"><name pos:start="1319:9" pos:end="1319:21">byteclassinit</name> <operator pos:start="1319:23" pos:end="1319:24">==</operator> <name pos:start="1319:26" pos:end="1319:29">NULL</name></expr>)</condition> <block pos:start="1319:32" pos:end="1323:5">{<block_content pos:start="1320:9" pos:end="1322:15">
        <expr_stmt pos:start="1320:9" pos:end="1321:41"><expr pos:start="1320:9" pos:end="1321:40"><call pos:start="1320:9" pos:end="1321:40"><name pos:start="1320:9" pos:end="1320:25">jniThrowException</name><argument_list pos:start="1320:26" pos:end="1321:40">(<argument pos:start="1320:27" pos:end="1320:29"><expr pos:start="1320:27" pos:end="1320:29"><name pos:start="1320:27" pos:end="1320:29">env</name></expr></argument>, <argument pos:start="1320:32" pos:end="1320:60"><expr pos:start="1320:32" pos:end="1320:60"><literal type="string" pos:start="1320:32" pos:end="1320:60">"java/lang/NoSuchMethodError"</literal></expr></argument>,
                <argument pos:start="1321:17" pos:end="1321:39"><expr pos:start="1321:17" pos:end="1321:39"><literal type="string" pos:start="1321:17" pos:end="1321:39">"Byte.&lt;init&gt;(byte val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1322:9" pos:end="1322:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1325:5" pos:end="1325:71"><decl pos:start="1325:5" pos:end="1325:70"><type pos:start="1325:5" pos:end="1325:12"><name pos:start="1325:5" pos:end="1325:12">jfieldID</name></type> <name pos:start="1325:14" pos:end="1325:27">byteclassvalue</name> <init pos:start="1325:29" pos:end="1325:70">= <expr pos:start="1325:31" pos:end="1325:70"><call pos:start="1325:31" pos:end="1325:70"><name pos:start="1325:31" pos:end="1325:45"><name pos:start="1325:31" pos:end="1325:33">env</name><operator pos:start="1325:34" pos:end="1325:35">-&gt;</operator><name pos:start="1325:36" pos:end="1325:45">GetFieldID</name></name><argument_list pos:start="1325:46" pos:end="1325:70">(<argument pos:start="1325:47" pos:end="1325:55"><expr pos:start="1325:47" pos:end="1325:55"><name pos:start="1325:47" pos:end="1325:55">byteclass</name></expr></argument>, <argument pos:start="1325:58" pos:end="1325:64"><expr pos:start="1325:58" pos:end="1325:64"><literal type="string" pos:start="1325:58" pos:end="1325:64">"value"</literal></expr></argument>, <argument pos:start="1325:67" pos:end="1325:69"><expr pos:start="1325:67" pos:end="1325:69"><literal type="string" pos:start="1325:67" pos:end="1325:69">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1327:5" pos:end="1330:5"><if pos:start="1327:5" pos:end="1330:5">if <condition pos:start="1327:8" pos:end="1327:31">(<expr pos:start="1327:9" pos:end="1327:30"><name pos:start="1327:9" pos:end="1327:22">byteclassvalue</name> <operator pos:start="1327:24" pos:end="1327:25">==</operator> <name pos:start="1327:27" pos:end="1327:30">NULL</name></expr>)</condition> <block pos:start="1327:33" pos:end="1330:5">{<block_content pos:start="1328:9" pos:end="1329:15">
        <expr_stmt pos:start="1328:9" pos:end="1328:76"><expr pos:start="1328:9" pos:end="1328:75"><call pos:start="1328:9" pos:end="1328:75"><name pos:start="1328:9" pos:end="1328:25">jniThrowException</name><argument_list pos:start="1328:26" pos:end="1328:75">(<argument pos:start="1328:27" pos:end="1328:29"><expr pos:start="1328:27" pos:end="1328:29"><name pos:start="1328:27" pos:end="1328:29">env</name></expr></argument>, <argument pos:start="1328:32" pos:end="1328:60"><expr pos:start="1328:32" pos:end="1328:60"><literal type="string" pos:start="1328:32" pos:end="1328:60">"java/lang/NoSuchMethodError"</literal></expr></argument>, <argument pos:start="1328:63" pos:end="1328:74"><expr pos:start="1328:63" pos:end="1328:74"><literal type="string" pos:start="1328:63" pos:end="1328:74">"Byte.value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1329:9" pos:end="1329:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1332:5" pos:end="1332:69"><expr pos:start="1332:5" pos:end="1332:68"><name pos:start="1332:5" pos:end="1332:28"><name pos:start="1332:5" pos:end="1332:17">gCachedFields</name><operator pos:start="1332:18" pos:end="1332:18">.</operator><name pos:start="1332:19" pos:end="1332:28">byte_class</name></name> <operator pos:start="1332:30" pos:end="1332:30">=</operator> <operator pos:start="1332:32" pos:end="1332:32">(</operator><name pos:start="1332:33" pos:end="1332:38">jclass</name><operator pos:start="1332:39" pos:end="1332:39">)</operator> <call pos:start="1332:41" pos:end="1332:68"><name pos:start="1332:41" pos:end="1332:57"><name pos:start="1332:41" pos:end="1332:43">env</name><operator pos:start="1332:44" pos:end="1332:45">-&gt;</operator><name pos:start="1332:46" pos:end="1332:57">NewGlobalRef</name></name><argument_list pos:start="1332:58" pos:end="1332:68">(<argument pos:start="1332:59" pos:end="1332:67"><expr pos:start="1332:59" pos:end="1332:67"><name pos:start="1332:59" pos:end="1332:67">byteclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1333:5" pos:end="1333:50"><expr pos:start="1333:5" pos:end="1333:49"><name pos:start="1333:5" pos:end="1333:33"><name pos:start="1333:5" pos:end="1333:17">gCachedFields</name><operator pos:start="1333:18" pos:end="1333:18">.</operator><name pos:start="1333:19" pos:end="1333:33">byte_class_init</name></name> <operator pos:start="1333:35" pos:end="1333:35">=</operator> <name pos:start="1333:37" pos:end="1333:49">byteclassinit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1334:5" pos:end="1334:52"><expr pos:start="1334:5" pos:end="1334:51"><name pos:start="1334:5" pos:end="1334:34"><name pos:start="1334:5" pos:end="1334:17">gCachedFields</name><operator pos:start="1334:18" pos:end="1334:18">.</operator><name pos:start="1334:19" pos:end="1334:34">byte_class_value</name></name> <operator pos:start="1334:36" pos:end="1334:36">=</operator> <name pos:start="1334:38" pos:end="1334:51">byteclassvalue</name></expr>;</expr_stmt>

    <comment type="line" pos:start="1336:5" pos:end="1336:26">// initializing String</comment>

    <decl_stmt pos:start="1338:5" pos:end="1338:60"><decl pos:start="1338:5" pos:end="1338:59"><type pos:start="1338:5" pos:end="1338:10"><name pos:start="1338:5" pos:end="1338:10">jclass</name></type> <name pos:start="1338:12" pos:end="1338:22">stringclass</name> <init pos:start="1338:24" pos:end="1338:59">= <expr pos:start="1338:26" pos:end="1338:59"><call pos:start="1338:26" pos:end="1338:59"><name pos:start="1338:26" pos:end="1338:39"><name pos:start="1338:26" pos:end="1338:28">env</name><operator pos:start="1338:29" pos:end="1338:30">-&gt;</operator><name pos:start="1338:31" pos:end="1338:39">FindClass</name></name><argument_list pos:start="1338:40" pos:end="1338:59">(<argument pos:start="1338:41" pos:end="1338:58"><expr pos:start="1338:41" pos:end="1338:58"><literal type="string" pos:start="1338:41" pos:end="1338:58">"java/lang/String"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1340:5" pos:end="1344:5"><if pos:start="1340:5" pos:end="1344:5">if <condition pos:start="1340:8" pos:end="1340:28">(<expr pos:start="1340:9" pos:end="1340:27"><name pos:start="1340:9" pos:end="1340:19">stringclass</name> <operator pos:start="1340:21" pos:end="1340:22">==</operator> <name pos:start="1340:24" pos:end="1340:27">NULL</name></expr>)</condition> <block pos:start="1340:30" pos:end="1344:5">{<block_content pos:start="1341:9" pos:end="1343:15">
        <expr_stmt pos:start="1341:9" pos:end="1342:36"><expr pos:start="1341:9" pos:end="1342:35"><call pos:start="1341:9" pos:end="1342:35"><name pos:start="1341:9" pos:end="1341:25">jniThrowException</name><argument_list pos:start="1341:26" pos:end="1342:35">(<argument pos:start="1341:27" pos:end="1341:29"><expr pos:start="1341:27" pos:end="1341:29"><name pos:start="1341:27" pos:end="1341:29">env</name></expr></argument>, <argument pos:start="1341:32" pos:end="1341:65"><expr pos:start="1341:32" pos:end="1341:65"><literal type="string" pos:start="1341:32" pos:end="1341:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1342:17" pos:end="1342:34"><expr pos:start="1342:17" pos:end="1342:34"><literal type="string" pos:start="1342:17" pos:end="1342:34">"java.lang.String"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1343:9" pos:end="1343:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1346:5" pos:end="1346:81"><decl pos:start="1346:5" pos:end="1346:80"><type pos:start="1346:5" pos:end="1346:13"><name pos:start="1346:5" pos:end="1346:13">jmethodID</name></type> <name pos:start="1346:15" pos:end="1346:29">stringclassinit</name> <init pos:start="1346:31" pos:end="1346:80">= <expr pos:start="1346:33" pos:end="1346:80"><call pos:start="1346:33" pos:end="1346:80"><name pos:start="1346:33" pos:end="1346:48"><name pos:start="1346:33" pos:end="1346:35">env</name><operator pos:start="1346:36" pos:end="1346:37">-&gt;</operator><name pos:start="1346:38" pos:end="1346:48">GetMethodID</name></name><argument_list pos:start="1346:49" pos:end="1346:80">(<argument pos:start="1346:50" pos:end="1346:60"><expr pos:start="1346:50" pos:end="1346:60"><name pos:start="1346:50" pos:end="1346:60">stringclass</name></expr></argument>, <argument pos:start="1346:63" pos:end="1346:70"><expr pos:start="1346:63" pos:end="1346:70"><literal type="string" pos:start="1346:63" pos:end="1346:70">"&lt;init&gt;"</literal></expr></argument>, <argument pos:start="1346:73" pos:end="1346:79"><expr pos:start="1346:73" pos:end="1346:79"><literal type="string" pos:start="1346:73" pos:end="1346:79">"([B)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1348:5" pos:end="1352:5"><if pos:start="1348:5" pos:end="1352:5">if <condition pos:start="1348:8" pos:end="1348:32">(<expr pos:start="1348:9" pos:end="1348:31"><name pos:start="1348:9" pos:end="1348:23">stringclassinit</name> <operator pos:start="1348:25" pos:end="1348:26">==</operator> <name pos:start="1348:28" pos:end="1348:31">NULL</name></expr>)</condition> <block pos:start="1348:34" pos:end="1352:5">{<block_content pos:start="1349:9" pos:end="1351:15">
        <expr_stmt pos:start="1349:9" pos:end="1350:45"><expr pos:start="1349:9" pos:end="1350:44"><call pos:start="1349:9" pos:end="1350:44"><name pos:start="1349:9" pos:end="1349:25">jniThrowException</name><argument_list pos:start="1349:26" pos:end="1350:44">(<argument pos:start="1349:27" pos:end="1349:29"><expr pos:start="1349:27" pos:end="1349:29"><name pos:start="1349:27" pos:end="1349:29">env</name></expr></argument>, <argument pos:start="1349:32" pos:end="1349:60"><expr pos:start="1349:32" pos:end="1349:60"><literal type="string" pos:start="1349:32" pos:end="1349:60">"java/lang/NoSuchMethodError"</literal></expr></argument>,
                <argument pos:start="1350:17" pos:end="1350:43"><expr pos:start="1350:17" pos:end="1350:43"><literal type="string" pos:start="1350:17" pos:end="1350:43">"String.&lt;init&gt;(byte[] val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1351:9" pos:end="1351:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1354:5" pos:end="1354:73"><expr pos:start="1354:5" pos:end="1354:72"><name pos:start="1354:5" pos:end="1354:30"><name pos:start="1354:5" pos:end="1354:17">gCachedFields</name><operator pos:start="1354:18" pos:end="1354:18">.</operator><name pos:start="1354:19" pos:end="1354:30">string_class</name></name> <operator pos:start="1354:32" pos:end="1354:32">=</operator> <operator pos:start="1354:34" pos:end="1354:34">(</operator><name pos:start="1354:35" pos:end="1354:40">jclass</name><operator pos:start="1354:41" pos:end="1354:41">)</operator> <call pos:start="1354:43" pos:end="1354:72"><name pos:start="1354:43" pos:end="1354:59"><name pos:start="1354:43" pos:end="1354:45">env</name><operator pos:start="1354:46" pos:end="1354:47">-&gt;</operator><name pos:start="1354:48" pos:end="1354:59">NewGlobalRef</name></name><argument_list pos:start="1354:60" pos:end="1354:72">(<argument pos:start="1354:61" pos:end="1354:71"><expr pos:start="1354:61" pos:end="1354:71"><name pos:start="1354:61" pos:end="1354:71">stringclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1355:5" pos:end="1355:54"><expr pos:start="1355:5" pos:end="1355:53"><name pos:start="1355:5" pos:end="1355:35"><name pos:start="1355:5" pos:end="1355:17">gCachedFields</name><operator pos:start="1355:18" pos:end="1355:18">.</operator><name pos:start="1355:19" pos:end="1355:35">string_class_init</name></name> <operator pos:start="1355:37" pos:end="1355:37">=</operator> <name pos:start="1355:39" pos:end="1355:53">stringclassinit</name></expr>;</expr_stmt>

    <comment type="line" pos:start="1357:5" pos:end="1357:30">// initializing ScoketImpl</comment>

    <decl_stmt pos:start="1359:5" pos:end="1359:67"><decl pos:start="1359:5" pos:end="1359:66"><type pos:start="1359:5" pos:end="1359:10"><name pos:start="1359:5" pos:end="1359:10">jclass</name></type> <name pos:start="1359:12" pos:end="1359:26">socketimplclass</name> <init pos:start="1359:28" pos:end="1359:66">= <expr pos:start="1359:30" pos:end="1359:66"><call pos:start="1359:30" pos:end="1359:66"><name pos:start="1359:30" pos:end="1359:43"><name pos:start="1359:30" pos:end="1359:32">env</name><operator pos:start="1359:33" pos:end="1359:34">-&gt;</operator><name pos:start="1359:35" pos:end="1359:43">FindClass</name></name><argument_list pos:start="1359:44" pos:end="1359:66">(<argument pos:start="1359:45" pos:end="1359:65"><expr pos:start="1359:45" pos:end="1359:65"><literal type="string" pos:start="1359:45" pos:end="1359:65">"java/net/SocketImpl"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1361:5" pos:end="1365:5"><if pos:start="1361:5" pos:end="1365:5">if <condition pos:start="1361:8" pos:end="1361:32">(<expr pos:start="1361:9" pos:end="1361:31"><name pos:start="1361:9" pos:end="1361:23">socketimplclass</name> <operator pos:start="1361:25" pos:end="1361:26">==</operator> <name pos:start="1361:28" pos:end="1361:31">NULL</name></expr>)</condition> <block pos:start="1361:34" pos:end="1365:5">{<block_content pos:start="1362:9" pos:end="1364:15">
        <expr_stmt pos:start="1362:9" pos:end="1363:39"><expr pos:start="1362:9" pos:end="1363:38"><call pos:start="1362:9" pos:end="1363:38"><name pos:start="1362:9" pos:end="1362:25">jniThrowException</name><argument_list pos:start="1362:26" pos:end="1363:38">(<argument pos:start="1362:27" pos:end="1362:29"><expr pos:start="1362:27" pos:end="1362:29"><name pos:start="1362:27" pos:end="1362:29">env</name></expr></argument>, <argument pos:start="1362:32" pos:end="1362:65"><expr pos:start="1362:32" pos:end="1362:65"><literal type="string" pos:start="1362:32" pos:end="1362:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1363:17" pos:end="1363:37"><expr pos:start="1363:17" pos:end="1363:37"><literal type="string" pos:start="1363:17" pos:end="1363:37">"java.net.SocketImpl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1364:9" pos:end="1364:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1367:5" pos:end="1367:76"><decl pos:start="1367:5" pos:end="1367:75"><type pos:start="1367:5" pos:end="1367:12"><name pos:start="1367:5" pos:end="1367:12">jfieldID</name></type> <name pos:start="1367:14" pos:end="1367:27">socketimplport</name> <init pos:start="1367:29" pos:end="1367:75">= <expr pos:start="1367:31" pos:end="1367:75"><call pos:start="1367:31" pos:end="1367:75"><name pos:start="1367:31" pos:end="1367:45"><name pos:start="1367:31" pos:end="1367:33">env</name><operator pos:start="1367:34" pos:end="1367:35">-&gt;</operator><name pos:start="1367:36" pos:end="1367:45">GetFieldID</name></name><argument_list pos:start="1367:46" pos:end="1367:75">(<argument pos:start="1367:47" pos:end="1367:61"><expr pos:start="1367:47" pos:end="1367:61"><name pos:start="1367:47" pos:end="1367:61">socketimplclass</name></expr></argument>, <argument pos:start="1367:64" pos:end="1367:69"><expr pos:start="1367:64" pos:end="1367:69"><literal type="string" pos:start="1367:64" pos:end="1367:69">"port"</literal></expr></argument>, <argument pos:start="1367:72" pos:end="1367:74"><expr pos:start="1367:72" pos:end="1367:74"><literal type="string" pos:start="1367:72" pos:end="1367:74">"I"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1369:5" pos:end="1372:5"><if pos:start="1369:5" pos:end="1372:5">if <condition pos:start="1369:8" pos:end="1369:31">(<expr pos:start="1369:9" pos:end="1369:30"><name pos:start="1369:9" pos:end="1369:22">socketimplport</name> <operator pos:start="1369:24" pos:end="1369:25">==</operator> <name pos:start="1369:27" pos:end="1369:30">NULL</name></expr>)</condition> <block pos:start="1369:33" pos:end="1372:5">{<block_content pos:start="1370:9" pos:end="1371:15">
        <expr_stmt pos:start="1370:9" pos:end="1370:80"><expr pos:start="1370:9" pos:end="1370:79"><call pos:start="1370:9" pos:end="1370:79"><name pos:start="1370:9" pos:end="1370:25">jniThrowException</name><argument_list pos:start="1370:26" pos:end="1370:79">(<argument pos:start="1370:27" pos:end="1370:29"><expr pos:start="1370:27" pos:end="1370:29"><name pos:start="1370:27" pos:end="1370:29">env</name></expr></argument>, <argument pos:start="1370:32" pos:end="1370:59"><expr pos:start="1370:32" pos:end="1370:59"><literal type="string" pos:start="1370:32" pos:end="1370:59">"java/lang/NoSuchFieldError"</literal></expr></argument>, <argument pos:start="1370:62" pos:end="1370:78"><expr pos:start="1370:62" pos:end="1370:78"><literal type="string" pos:start="1370:62" pos:end="1370:78">"SocketImpl.port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1371:9" pos:end="1371:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1374:5" pos:end="1375:38"><decl pos:start="1374:5" pos:end="1375:37"><type pos:start="1374:5" pos:end="1374:12"><name pos:start="1374:5" pos:end="1374:12">jfieldID</name></type> <name pos:start="1374:14" pos:end="1374:30">socketimpladdress</name> <init pos:start="1374:32" pos:end="1375:37">= <expr pos:start="1374:34" pos:end="1375:37"><call pos:start="1374:34" pos:end="1375:37"><name pos:start="1374:34" pos:end="1374:48"><name pos:start="1374:34" pos:end="1374:36">env</name><operator pos:start="1374:37" pos:end="1374:38">-&gt;</operator><name pos:start="1374:39" pos:end="1374:48">GetFieldID</name></name><argument_list pos:start="1374:49" pos:end="1375:37">(<argument pos:start="1374:50" pos:end="1374:64"><expr pos:start="1374:50" pos:end="1374:64"><name pos:start="1374:50" pos:end="1374:64">socketimplclass</name></expr></argument>, <argument pos:start="1374:67" pos:end="1374:75"><expr pos:start="1374:67" pos:end="1374:75"><literal type="string" pos:start="1374:67" pos:end="1374:75">"address"</literal></expr></argument>,
            <argument pos:start="1375:13" pos:end="1375:36"><expr pos:start="1375:13" pos:end="1375:36"><literal type="string" pos:start="1375:13" pos:end="1375:36">"Ljava/net/InetAddress;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1377:5" pos:end="1381:5"><if pos:start="1377:5" pos:end="1381:5">if <condition pos:start="1377:8" pos:end="1377:34">(<expr pos:start="1377:9" pos:end="1377:33"><name pos:start="1377:9" pos:end="1377:25">socketimpladdress</name> <operator pos:start="1377:27" pos:end="1377:28">==</operator> <name pos:start="1377:30" pos:end="1377:33">NULL</name></expr>)</condition> <block pos:start="1377:36" pos:end="1381:5">{<block_content pos:start="1378:9" pos:end="1380:15">
        <expr_stmt pos:start="1378:9" pos:end="1379:38"><expr pos:start="1378:9" pos:end="1379:37"><call pos:start="1378:9" pos:end="1379:37"><name pos:start="1378:9" pos:end="1378:25">jniThrowException</name><argument_list pos:start="1378:26" pos:end="1379:37">(<argument pos:start="1378:27" pos:end="1378:29"><expr pos:start="1378:27" pos:end="1378:29"><name pos:start="1378:27" pos:end="1378:29">env</name></expr></argument>, <argument pos:start="1378:32" pos:end="1378:59"><expr pos:start="1378:32" pos:end="1378:59"><literal type="string" pos:start="1378:32" pos:end="1378:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1379:17" pos:end="1379:36"><expr pos:start="1379:17" pos:end="1379:36"><literal type="string" pos:start="1379:17" pos:end="1379:36">"SocketImpl.address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1380:9" pos:end="1380:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1383:5" pos:end="1383:57"><expr pos:start="1383:5" pos:end="1383:56"><name pos:start="1383:5" pos:end="1383:36"><name pos:start="1383:5" pos:end="1383:17">gCachedFields</name><operator pos:start="1383:18" pos:end="1383:18">.</operator><name pos:start="1383:19" pos:end="1383:36">socketimpl_address</name></name> <operator pos:start="1383:38" pos:end="1383:38">=</operator> <name pos:start="1383:40" pos:end="1383:56">socketimpladdress</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1384:5" pos:end="1384:51"><expr pos:start="1384:5" pos:end="1384:50"><name pos:start="1384:5" pos:end="1384:33"><name pos:start="1384:5" pos:end="1384:17">gCachedFields</name><operator pos:start="1384:18" pos:end="1384:18">.</operator><name pos:start="1384:19" pos:end="1384:33">socketimpl_port</name></name> <operator pos:start="1384:35" pos:end="1384:35">=</operator> <name pos:start="1384:37" pos:end="1384:50">socketimplport</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1386:5" pos:end="1386:74"><expr pos:start="1386:5" pos:end="1386:73"><name pos:start="1386:5" pos:end="1386:29"><name pos:start="1386:5" pos:end="1386:17">gCachedFields</name><operator pos:start="1386:18" pos:end="1386:18">.</operator><name pos:start="1386:19" pos:end="1386:29">dpack_class</name></name> <operator pos:start="1386:31" pos:end="1386:31">=</operator> <call pos:start="1386:33" pos:end="1386:73"><name pos:start="1386:33" pos:end="1386:46"><name pos:start="1386:33" pos:end="1386:35">env</name><operator pos:start="1386:36" pos:end="1386:37">-&gt;</operator><name pos:start="1386:38" pos:end="1386:46">FindClass</name></name><argument_list pos:start="1386:47" pos:end="1386:73">(<argument pos:start="1386:48" pos:end="1386:72"><expr pos:start="1386:48" pos:end="1386:72"><literal type="string" pos:start="1386:48" pos:end="1386:72">"java/net/DatagramPacket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1387:5" pos:end="1391:5"><if pos:start="1387:5" pos:end="1391:5">if <condition pos:start="1387:8" pos:end="1387:42">(<expr pos:start="1387:9" pos:end="1387:41"><name pos:start="1387:9" pos:end="1387:33"><name pos:start="1387:9" pos:end="1387:21">gCachedFields</name><operator pos:start="1387:22" pos:end="1387:22">.</operator><name pos:start="1387:23" pos:end="1387:33">dpack_class</name></name> <operator pos:start="1387:35" pos:end="1387:36">==</operator> <name pos:start="1387:38" pos:end="1387:41">NULL</name></expr>)</condition> <block pos:start="1387:44" pos:end="1391:5">{<block_content pos:start="1388:9" pos:end="1390:15">
        <expr_stmt pos:start="1388:9" pos:end="1389:43"><expr pos:start="1388:9" pos:end="1389:42"><call pos:start="1388:9" pos:end="1389:42"><name pos:start="1388:9" pos:end="1388:25">jniThrowException</name><argument_list pos:start="1388:26" pos:end="1389:42">(<argument pos:start="1388:27" pos:end="1388:29"><expr pos:start="1388:27" pos:end="1388:29"><name pos:start="1388:27" pos:end="1388:29">env</name></expr></argument>, <argument pos:start="1388:32" pos:end="1388:65"><expr pos:start="1388:32" pos:end="1388:65"><literal type="string" pos:start="1388:32" pos:end="1388:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1389:17" pos:end="1389:41"><expr pos:start="1389:17" pos:end="1389:41"><literal type="string" pos:start="1389:17" pos:end="1389:41">"java.net.DatagramPacket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1390:9" pos:end="1390:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1393:5" pos:end="1394:49"><expr pos:start="1393:5" pos:end="1394:48"><name pos:start="1393:5" pos:end="1393:31"><name pos:start="1393:5" pos:end="1393:17">gCachedFields</name><operator pos:start="1393:18" pos:end="1393:18">.</operator><name pos:start="1393:19" pos:end="1393:31">dpack_address</name></name> <operator pos:start="1393:33" pos:end="1393:33">=</operator> <call pos:start="1393:35" pos:end="1394:48"><name pos:start="1393:35" pos:end="1393:49"><name pos:start="1393:35" pos:end="1393:37">env</name><operator pos:start="1393:38" pos:end="1393:39">-&gt;</operator><name pos:start="1393:40" pos:end="1393:49">GetFieldID</name></name><argument_list pos:start="1393:50" pos:end="1394:48">(<argument pos:start="1393:51" pos:end="1393:75"><expr pos:start="1393:51" pos:end="1393:75"><name pos:start="1393:51" pos:end="1393:75"><name pos:start="1393:51" pos:end="1393:63">gCachedFields</name><operator pos:start="1393:64" pos:end="1393:64">.</operator><name pos:start="1393:65" pos:end="1393:75">dpack_class</name></name></expr></argument>,
            <argument pos:start="1394:13" pos:end="1394:21"><expr pos:start="1394:13" pos:end="1394:21"><literal type="string" pos:start="1394:13" pos:end="1394:21">"address"</literal></expr></argument>, <argument pos:start="1394:24" pos:end="1394:47"><expr pos:start="1394:24" pos:end="1394:47"><literal type="string" pos:start="1394:24" pos:end="1394:47">"Ljava/net/InetAddress;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1395:5" pos:end="1399:5"><if pos:start="1395:5" pos:end="1399:5">if <condition pos:start="1395:8" pos:end="1395:44">(<expr pos:start="1395:9" pos:end="1395:43"><name pos:start="1395:9" pos:end="1395:35"><name pos:start="1395:9" pos:end="1395:21">gCachedFields</name><operator pos:start="1395:22" pos:end="1395:22">.</operator><name pos:start="1395:23" pos:end="1395:35">dpack_address</name></name> <operator pos:start="1395:37" pos:end="1395:38">==</operator> <name pos:start="1395:40" pos:end="1395:43">NULL</name></expr>)</condition> <block pos:start="1395:46" pos:end="1399:5">{<block_content pos:start="1396:9" pos:end="1398:15">
        <expr_stmt pos:start="1396:9" pos:end="1397:42"><expr pos:start="1396:9" pos:end="1397:41"><call pos:start="1396:9" pos:end="1397:41"><name pos:start="1396:9" pos:end="1396:25">jniThrowException</name><argument_list pos:start="1396:26" pos:end="1397:41">(<argument pos:start="1396:27" pos:end="1396:29"><expr pos:start="1396:27" pos:end="1396:29"><name pos:start="1396:27" pos:end="1396:29">env</name></expr></argument>, <argument pos:start="1396:32" pos:end="1396:59"><expr pos:start="1396:32" pos:end="1396:59"><literal type="string" pos:start="1396:32" pos:end="1396:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1397:17" pos:end="1397:40"><expr pos:start="1397:17" pos:end="1397:40"><literal type="string" pos:start="1397:17" pos:end="1397:40">"DatagramPacket.address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1398:9" pos:end="1398:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1401:5" pos:end="1402:25"><expr pos:start="1401:5" pos:end="1402:24"><name pos:start="1401:5" pos:end="1401:28"><name pos:start="1401:5" pos:end="1401:17">gCachedFields</name><operator pos:start="1401:18" pos:end="1401:18">.</operator><name pos:start="1401:19" pos:end="1401:28">dpack_port</name></name> <operator pos:start="1401:30" pos:end="1401:30">=</operator> <call pos:start="1401:32" pos:end="1402:24"><name pos:start="1401:32" pos:end="1401:46"><name pos:start="1401:32" pos:end="1401:34">env</name><operator pos:start="1401:35" pos:end="1401:36">-&gt;</operator><name pos:start="1401:37" pos:end="1401:46">GetFieldID</name></name><argument_list pos:start="1401:47" pos:end="1402:24">(<argument pos:start="1401:48" pos:end="1401:72"><expr pos:start="1401:48" pos:end="1401:72"><name pos:start="1401:48" pos:end="1401:72"><name pos:start="1401:48" pos:end="1401:60">gCachedFields</name><operator pos:start="1401:61" pos:end="1401:61">.</operator><name pos:start="1401:62" pos:end="1401:72">dpack_class</name></name></expr></argument>,
            <argument pos:start="1402:13" pos:end="1402:18"><expr pos:start="1402:13" pos:end="1402:18"><literal type="string" pos:start="1402:13" pos:end="1402:18">"port"</literal></expr></argument>, <argument pos:start="1402:21" pos:end="1402:23"><expr pos:start="1402:21" pos:end="1402:23"><literal type="string" pos:start="1402:21" pos:end="1402:23">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1403:5" pos:end="1407:5"><if pos:start="1403:5" pos:end="1407:5">if <condition pos:start="1403:8" pos:end="1403:41">(<expr pos:start="1403:9" pos:end="1403:40"><name pos:start="1403:9" pos:end="1403:32"><name pos:start="1403:9" pos:end="1403:21">gCachedFields</name><operator pos:start="1403:22" pos:end="1403:22">.</operator><name pos:start="1403:23" pos:end="1403:32">dpack_port</name></name> <operator pos:start="1403:34" pos:end="1403:35">==</operator> <name pos:start="1403:37" pos:end="1403:40">NULL</name></expr>)</condition> <block pos:start="1403:43" pos:end="1407:5">{<block_content pos:start="1404:9" pos:end="1406:15">
        <expr_stmt pos:start="1404:9" pos:end="1405:39"><expr pos:start="1404:9" pos:end="1405:38"><call pos:start="1404:9" pos:end="1405:38"><name pos:start="1404:9" pos:end="1404:25">jniThrowException</name><argument_list pos:start="1404:26" pos:end="1405:38">(<argument pos:start="1404:27" pos:end="1404:29"><expr pos:start="1404:27" pos:end="1404:29"><name pos:start="1404:27" pos:end="1404:29">env</name></expr></argument>, <argument pos:start="1404:32" pos:end="1404:59"><expr pos:start="1404:32" pos:end="1404:59"><literal type="string" pos:start="1404:32" pos:end="1404:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1405:17" pos:end="1405:37"><expr pos:start="1405:17" pos:end="1405:37"><literal type="string" pos:start="1405:17" pos:end="1405:37">"DatagramPacket.port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1406:9" pos:end="1406:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1409:5" pos:end="1410:27"><expr pos:start="1409:5" pos:end="1410:26"><name pos:start="1409:5" pos:end="1409:30"><name pos:start="1409:5" pos:end="1409:17">gCachedFields</name><operator pos:start="1409:18" pos:end="1409:18">.</operator><name pos:start="1409:19" pos:end="1409:30">dpack_length</name></name> <operator pos:start="1409:32" pos:end="1409:32">=</operator> <call pos:start="1409:34" pos:end="1410:26"><name pos:start="1409:34" pos:end="1409:48"><name pos:start="1409:34" pos:end="1409:36">env</name><operator pos:start="1409:37" pos:end="1409:38">-&gt;</operator><name pos:start="1409:39" pos:end="1409:48">GetFieldID</name></name><argument_list pos:start="1409:49" pos:end="1410:26">(<argument pos:start="1409:50" pos:end="1409:74"><expr pos:start="1409:50" pos:end="1409:74"><name pos:start="1409:50" pos:end="1409:74"><name pos:start="1409:50" pos:end="1409:62">gCachedFields</name><operator pos:start="1409:63" pos:end="1409:63">.</operator><name pos:start="1409:64" pos:end="1409:74">dpack_class</name></name></expr></argument>,
            <argument pos:start="1410:13" pos:end="1410:20"><expr pos:start="1410:13" pos:end="1410:20"><literal type="string" pos:start="1410:13" pos:end="1410:20">"length"</literal></expr></argument>, <argument pos:start="1410:23" pos:end="1410:25"><expr pos:start="1410:23" pos:end="1410:25"><literal type="string" pos:start="1410:23" pos:end="1410:25">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1411:5" pos:end="1415:5"><if pos:start="1411:5" pos:end="1415:5">if <condition pos:start="1411:8" pos:end="1411:43">(<expr pos:start="1411:9" pos:end="1411:42"><name pos:start="1411:9" pos:end="1411:34"><name pos:start="1411:9" pos:end="1411:21">gCachedFields</name><operator pos:start="1411:22" pos:end="1411:22">.</operator><name pos:start="1411:23" pos:end="1411:34">dpack_length</name></name> <operator pos:start="1411:36" pos:end="1411:37">==</operator> <name pos:start="1411:39" pos:end="1411:42">NULL</name></expr>)</condition> <block pos:start="1411:45" pos:end="1415:5">{<block_content pos:start="1412:9" pos:end="1414:15">
        <expr_stmt pos:start="1412:9" pos:end="1413:41"><expr pos:start="1412:9" pos:end="1413:40"><call pos:start="1412:9" pos:end="1413:40"><name pos:start="1412:9" pos:end="1412:25">jniThrowException</name><argument_list pos:start="1412:26" pos:end="1413:40">(<argument pos:start="1412:27" pos:end="1412:29"><expr pos:start="1412:27" pos:end="1412:29"><name pos:start="1412:27" pos:end="1412:29">env</name></expr></argument>, <argument pos:start="1412:32" pos:end="1412:59"><expr pos:start="1412:32" pos:end="1412:59"><literal type="string" pos:start="1412:32" pos:end="1412:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1413:17" pos:end="1413:39"><expr pos:start="1413:17" pos:end="1413:39"><literal type="string" pos:start="1413:17" pos:end="1413:39">"DatagramPacket.length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1414:9" pos:end="1414:15">return;</return>
    </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1417:9" pos:end="1417:74"><expr pos:start="1417:9" pos:end="1417:73"><name pos:start="1417:9" pos:end="1417:30"><name pos:start="1417:9" pos:end="1417:21">gCachedFields</name><operator pos:start="1417:22" pos:end="1417:22">.</operator><name pos:start="1417:23" pos:end="1417:30">fd_class</name></name> <operator pos:start="1417:32" pos:end="1417:32">=</operator> <call pos:start="1417:34" pos:end="1417:73"><name pos:start="1417:34" pos:end="1417:47"><name pos:start="1417:34" pos:end="1417:36">env</name><operator pos:start="1417:37" pos:end="1417:38">-&gt;</operator><name pos:start="1417:39" pos:end="1417:47">FindClass</name></name><argument_list pos:start="1417:48" pos:end="1417:73">(<argument pos:start="1417:49" pos:end="1417:72"><expr pos:start="1417:49" pos:end="1417:72"><literal type="string" pos:start="1417:49" pos:end="1417:72">"java/io/FileDescriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1418:5" pos:end="1422:5"><if pos:start="1418:5" pos:end="1422:5">if <condition pos:start="1418:8" pos:end="1418:39">(<expr pos:start="1418:9" pos:end="1418:38"><name pos:start="1418:9" pos:end="1418:30"><name pos:start="1418:9" pos:end="1418:21">gCachedFields</name><operator pos:start="1418:22" pos:end="1418:22">.</operator><name pos:start="1418:23" pos:end="1418:30">fd_class</name></name> <operator pos:start="1418:32" pos:end="1418:33">==</operator> <name pos:start="1418:35" pos:end="1418:38">NULL</name></expr>)</condition> <block pos:start="1418:41" pos:end="1422:5">{<block_content pos:start="1419:9" pos:end="1421:15">
        <expr_stmt pos:start="1419:9" pos:end="1420:42"><expr pos:start="1419:9" pos:end="1420:41"><call pos:start="1419:9" pos:end="1420:41"><name pos:start="1419:9" pos:end="1419:25">jniThrowException</name><argument_list pos:start="1419:26" pos:end="1420:41">(<argument pos:start="1419:27" pos:end="1419:29"><expr pos:start="1419:27" pos:end="1419:29"><name pos:start="1419:27" pos:end="1419:29">env</name></expr></argument>, <argument pos:start="1419:32" pos:end="1419:65"><expr pos:start="1419:32" pos:end="1419:65"><literal type="string" pos:start="1419:32" pos:end="1419:65">"java/lang/ClassNotFoundException"</literal></expr></argument>,
                <argument pos:start="1420:17" pos:end="1420:40"><expr pos:start="1420:17" pos:end="1420:40"><literal type="string" pos:start="1420:17" pos:end="1420:40">"java.io.FileDescriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1421:9" pos:end="1421:15">return;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1423:9" pos:end="1423:94"><expr pos:start="1423:9" pos:end="1423:93"><name pos:start="1423:9" pos:end="1423:32"><name pos:start="1423:9" pos:end="1423:21">gCachedFields</name><operator pos:start="1423:22" pos:end="1423:22">.</operator><name pos:start="1423:23" pos:end="1423:32">descriptor</name></name> <operator pos:start="1423:34" pos:end="1423:34">=</operator> <call pos:start="1423:36" pos:end="1423:93"><name pos:start="1423:36" pos:end="1423:50"><name pos:start="1423:36" pos:end="1423:38">env</name><operator pos:start="1423:39" pos:end="1423:40">-&gt;</operator><name pos:start="1423:41" pos:end="1423:50">GetFieldID</name></name><argument_list pos:start="1423:51" pos:end="1423:93">(<argument pos:start="1423:52" pos:end="1423:73"><expr pos:start="1423:52" pos:end="1423:73"><name pos:start="1423:52" pos:end="1423:73"><name pos:start="1423:52" pos:end="1423:64">gCachedFields</name><operator pos:start="1423:65" pos:end="1423:65">.</operator><name pos:start="1423:66" pos:end="1423:73">fd_class</name></name></expr></argument>, <argument pos:start="1423:76" pos:end="1423:87"><expr pos:start="1423:76" pos:end="1423:87"><literal type="string" pos:start="1423:76" pos:end="1423:87">"descriptor"</literal></expr></argument>, <argument pos:start="1423:90" pos:end="1423:92"><expr pos:start="1423:90" pos:end="1423:92"><literal type="string" pos:start="1423:90" pos:end="1423:92">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1424:5" pos:end="1428:5"><if pos:start="1424:5" pos:end="1428:5">if <condition pos:start="1424:8" pos:end="1424:41">(<expr pos:start="1424:9" pos:end="1424:40"><name pos:start="1424:9" pos:end="1424:32"><name pos:start="1424:9" pos:end="1424:21">gCachedFields</name><operator pos:start="1424:22" pos:end="1424:22">.</operator><name pos:start="1424:23" pos:end="1424:32">descriptor</name></name> <operator pos:start="1424:34" pos:end="1424:35">==</operator> <name pos:start="1424:37" pos:end="1424:40">NULL</name></expr>)</condition> <block pos:start="1424:43" pos:end="1428:5">{<block_content pos:start="1425:9" pos:end="1427:15">
        <expr_stmt pos:start="1425:9" pos:end="1426:45"><expr pos:start="1425:9" pos:end="1426:44"><call pos:start="1425:9" pos:end="1426:44"><name pos:start="1425:9" pos:end="1425:25">jniThrowException</name><argument_list pos:start="1425:26" pos:end="1426:44">(<argument pos:start="1425:27" pos:end="1425:29"><expr pos:start="1425:27" pos:end="1425:29"><name pos:start="1425:27" pos:end="1425:29">env</name></expr></argument>, <argument pos:start="1425:32" pos:end="1425:59"><expr pos:start="1425:32" pos:end="1425:59"><literal type="string" pos:start="1425:32" pos:end="1425:59">"java/lang/NoSuchFieldError"</literal></expr></argument>,
                <argument pos:start="1426:17" pos:end="1426:43"><expr pos:start="1426:17" pos:end="1426:43"><literal type="string" pos:start="1426:17" pos:end="1426:43">"FileDescriptor.descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1427:9" pos:end="1427:15">return;</return>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></extern>

<extern pos:start="1432:1" pos:end="1447:1">extern <literal type="string" pos:start="1432:8" pos:end="1432:10">"C"</literal> <function pos:start="1432:12" pos:end="1447:1"><type pos:start="1432:12" pos:end="1432:15"><name pos:start="1432:12" pos:end="1432:15">void</name></type> <name pos:start="1432:17" pos:end="1432:75">Java_org_sipdroid_net_impl_OSNetworkSystem_createSocketImpl</name><parameter_list pos:start="1432:76" pos:end="1433:57">(<parameter pos:start="1432:77" pos:end="1432:87"><decl pos:start="1432:77" pos:end="1432:87"><type pos:start="1432:77" pos:end="1432:87"><name pos:start="1432:77" pos:end="1432:82">JNIEnv</name><modifier pos:start="1432:83" pos:end="1432:83">*</modifier></type> <name pos:start="1432:85" pos:end="1432:87">env</name></decl></parameter>, <parameter pos:start="1432:90" pos:end="1432:101"><decl pos:start="1432:90" pos:end="1432:101"><type pos:start="1432:90" pos:end="1432:101"><name pos:start="1432:90" pos:end="1432:95">jclass</name></type> <name pos:start="1432:97" pos:end="1432:101">clazz</name></decl></parameter>,
        <parameter pos:start="1433:9" pos:end="1433:30"><decl pos:start="1433:9" pos:end="1433:30"><type pos:start="1433:9" pos:end="1433:30"><name pos:start="1433:9" pos:end="1433:15">jobject</name></type> <name pos:start="1433:17" pos:end="1433:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1433:33" pos:end="1433:56"><decl pos:start="1433:33" pos:end="1433:56"><type pos:start="1433:33" pos:end="1433:56"><name pos:start="1433:33" pos:end="1433:40">jboolean</name></type> <name pos:start="1433:42" pos:end="1433:56">preferIPv4Stack</name></decl></parameter>)</parameter_list> <block pos:start="1433:59" pos:end="1447:1">{<block_content pos:start="1436:5" pos:end="1446:11">
    <comment type="line" pos:start="1434:5" pos:end="1434:38">// LOGD("ENTER createSocketImpl");</comment>

    <decl_stmt pos:start="1436:5" pos:end="1436:46"><decl pos:start="1436:5" pos:end="1436:45"><type pos:start="1436:5" pos:end="1436:7"><name pos:start="1436:5" pos:end="1436:7">int</name></type> <name pos:start="1436:9" pos:end="1436:11">ret</name> <init pos:start="1436:13" pos:end="1436:45">= <expr pos:start="1436:15" pos:end="1436:45"><call pos:start="1436:15" pos:end="1436:45"><name pos:start="1436:15" pos:end="1436:20">socket</name><argument_list pos:start="1436:21" pos:end="1436:45">(<argument pos:start="1436:22" pos:end="1436:28"><expr pos:start="1436:22" pos:end="1436:28"><name pos:start="1436:22" pos:end="1436:28">PF_INET</name></expr></argument>, <argument pos:start="1436:31" pos:end="1436:41"><expr pos:start="1436:31" pos:end="1436:41"><name pos:start="1436:31" pos:end="1436:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="1436:44" pos:end="1436:44"><expr pos:start="1436:44" pos:end="1436:44"><literal type="number" pos:start="1436:44" pos:end="1436:44">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1438:5" pos:end="1442:5"><if pos:start="1438:5" pos:end="1442:5">if <condition pos:start="1438:8" pos:end="1438:16">(<expr pos:start="1438:9" pos:end="1438:15"><name pos:start="1438:9" pos:end="1438:11">ret</name> <operator pos:start="1438:13" pos:end="1438:13">&lt;</operator> <literal type="number" pos:start="1438:15" pos:end="1438:15">0</literal></expr>)</condition> <block pos:start="1438:18" pos:end="1442:5">{<block_content pos:start="1439:9" pos:end="1441:15">
        <decl_stmt pos:start="1439:9" pos:end="1439:38"><decl pos:start="1439:9" pos:end="1439:37"><type pos:start="1439:9" pos:end="1439:11"><name pos:start="1439:9" pos:end="1439:11">int</name></type> <name pos:start="1439:13" pos:end="1439:15">err</name> <init pos:start="1439:17" pos:end="1439:37">= <expr pos:start="1439:19" pos:end="1439:37"><call pos:start="1439:19" pos:end="1439:37"><name pos:start="1439:19" pos:end="1439:30">convertError</name><argument_list pos:start="1439:31" pos:end="1439:37">(<argument pos:start="1439:32" pos:end="1439:36"><expr pos:start="1439:32" pos:end="1439:36"><name pos:start="1439:32" pos:end="1439:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1440:9" pos:end="1440:39"><expr pos:start="1440:9" pos:end="1440:38"><call pos:start="1440:9" pos:end="1440:38"><name pos:start="1440:9" pos:end="1440:28">throwSocketException</name><argument_list pos:start="1440:29" pos:end="1440:38">(<argument pos:start="1440:30" pos:end="1440:32"><expr pos:start="1440:30" pos:end="1440:32"><name pos:start="1440:30" pos:end="1440:32">env</name></expr></argument>, <argument pos:start="1440:35" pos:end="1440:37"><expr pos:start="1440:35" pos:end="1440:37"><name pos:start="1440:35" pos:end="1440:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1441:9" pos:end="1441:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1444:5" pos:end="1444:55"><expr pos:start="1444:5" pos:end="1444:54"><call pos:start="1444:5" pos:end="1444:54"><name pos:start="1444:5" pos:end="1444:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="1444:29" pos:end="1444:54">(<argument pos:start="1444:30" pos:end="1444:32"><expr pos:start="1444:30" pos:end="1444:32"><name pos:start="1444:30" pos:end="1444:32">env</name></expr></argument>, <argument pos:start="1444:35" pos:end="1444:48"><expr pos:start="1444:35" pos:end="1444:48"><name pos:start="1444:35" pos:end="1444:48">fileDescriptor</name></expr></argument>, <argument pos:start="1444:51" pos:end="1444:53"><expr pos:start="1444:51" pos:end="1444:53"><name pos:start="1444:51" pos:end="1444:53">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1446:5" pos:end="1446:11">return;</return>
</block_content>}</block></function></extern>

<extern pos:start="1449:1" pos:end="1464:1">extern <literal type="string" pos:start="1449:8" pos:end="1449:10">"C"</literal> <function pos:start="1449:12" pos:end="1464:1"><type pos:start="1449:12" pos:end="1449:15"><name pos:start="1449:12" pos:end="1449:15">void</name></type> <name pos:start="1449:17" pos:end="1449:83">Java_org_sipdroid_net_impl_OSNetworkSystem_createDatagramSocketImpl</name><parameter_list pos:start="1449:84" pos:end="1450:57">(<parameter pos:start="1449:85" pos:end="1449:95"><decl pos:start="1449:85" pos:end="1449:95"><type pos:start="1449:85" pos:end="1449:95"><name pos:start="1449:85" pos:end="1449:90">JNIEnv</name><modifier pos:start="1449:91" pos:end="1449:91">*</modifier></type> <name pos:start="1449:93" pos:end="1449:95">env</name></decl></parameter>, <parameter pos:start="1449:98" pos:end="1449:109"><decl pos:start="1449:98" pos:end="1449:109"><type pos:start="1449:98" pos:end="1449:109"><name pos:start="1449:98" pos:end="1449:103">jclass</name></type> <name pos:start="1449:105" pos:end="1449:109">clazz</name></decl></parameter>,
        <parameter pos:start="1450:9" pos:end="1450:30"><decl pos:start="1450:9" pos:end="1450:30"><type pos:start="1450:9" pos:end="1450:30"><name pos:start="1450:9" pos:end="1450:15">jobject</name></type> <name pos:start="1450:17" pos:end="1450:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1450:33" pos:end="1450:56"><decl pos:start="1450:33" pos:end="1450:56"><type pos:start="1450:33" pos:end="1450:56"><name pos:start="1450:33" pos:end="1450:40">jboolean</name></type> <name pos:start="1450:42" pos:end="1450:56">preferIPv4Stack</name></decl></parameter>)</parameter_list> <block pos:start="1450:59" pos:end="1464:1">{<block_content pos:start="1453:5" pos:end="1463:11">
    <comment type="line" pos:start="1451:5" pos:end="1451:46">// LOGD("ENTER createDatagramSocketImpl");</comment>

    <decl_stmt pos:start="1453:5" pos:end="1453:45"><decl pos:start="1453:5" pos:end="1453:44"><type pos:start="1453:5" pos:end="1453:7"><name pos:start="1453:5" pos:end="1453:7">int</name></type> <name pos:start="1453:9" pos:end="1453:11">ret</name> <init pos:start="1453:13" pos:end="1453:44">= <expr pos:start="1453:15" pos:end="1453:44"><call pos:start="1453:15" pos:end="1453:44"><name pos:start="1453:15" pos:end="1453:20">socket</name><argument_list pos:start="1453:21" pos:end="1453:44">(<argument pos:start="1453:22" pos:end="1453:28"><expr pos:start="1453:22" pos:end="1453:28"><name pos:start="1453:22" pos:end="1453:28">PF_INET</name></expr></argument>, <argument pos:start="1453:31" pos:end="1453:40"><expr pos:start="1453:31" pos:end="1453:40"><name pos:start="1453:31" pos:end="1453:40">SOCK_DGRAM</name></expr></argument>, <argument pos:start="1453:43" pos:end="1453:43"><expr pos:start="1453:43" pos:end="1453:43"><literal type="number" pos:start="1453:43" pos:end="1453:43">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1455:5" pos:end="1459:5"><if pos:start="1455:5" pos:end="1459:5">if <condition pos:start="1455:8" pos:end="1455:16">(<expr pos:start="1455:9" pos:end="1455:15"><name pos:start="1455:9" pos:end="1455:11">ret</name> <operator pos:start="1455:13" pos:end="1455:13">&lt;</operator> <literal type="number" pos:start="1455:15" pos:end="1455:15">0</literal></expr>)</condition> <block pos:start="1455:18" pos:end="1459:5">{<block_content pos:start="1456:9" pos:end="1458:15">
        <decl_stmt pos:start="1456:9" pos:end="1456:38"><decl pos:start="1456:9" pos:end="1456:37"><type pos:start="1456:9" pos:end="1456:11"><name pos:start="1456:9" pos:end="1456:11">int</name></type> <name pos:start="1456:13" pos:end="1456:15">err</name> <init pos:start="1456:17" pos:end="1456:37">= <expr pos:start="1456:19" pos:end="1456:37"><call pos:start="1456:19" pos:end="1456:37"><name pos:start="1456:19" pos:end="1456:30">convertError</name><argument_list pos:start="1456:31" pos:end="1456:37">(<argument pos:start="1456:32" pos:end="1456:36"><expr pos:start="1456:32" pos:end="1456:36"><name pos:start="1456:32" pos:end="1456:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1457:9" pos:end="1457:39"><expr pos:start="1457:9" pos:end="1457:38"><call pos:start="1457:9" pos:end="1457:38"><name pos:start="1457:9" pos:end="1457:28">throwSocketException</name><argument_list pos:start="1457:29" pos:end="1457:38">(<argument pos:start="1457:30" pos:end="1457:32"><expr pos:start="1457:30" pos:end="1457:32"><name pos:start="1457:30" pos:end="1457:32">env</name></expr></argument>, <argument pos:start="1457:35" pos:end="1457:37"><expr pos:start="1457:35" pos:end="1457:37"><name pos:start="1457:35" pos:end="1457:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1458:9" pos:end="1458:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1461:5" pos:end="1461:55"><expr pos:start="1461:5" pos:end="1461:54"><call pos:start="1461:5" pos:end="1461:54"><name pos:start="1461:5" pos:end="1461:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="1461:29" pos:end="1461:54">(<argument pos:start="1461:30" pos:end="1461:32"><expr pos:start="1461:30" pos:end="1461:32"><name pos:start="1461:30" pos:end="1461:32">env</name></expr></argument>, <argument pos:start="1461:35" pos:end="1461:48"><expr pos:start="1461:35" pos:end="1461:48"><name pos:start="1461:35" pos:end="1461:48">fileDescriptor</name></expr></argument>, <argument pos:start="1461:51" pos:end="1461:53"><expr pos:start="1461:51" pos:end="1461:53"><name pos:start="1461:51" pos:end="1461:53">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1463:5" pos:end="1463:11">return;</return>
</block_content>}</block></function></extern>

<extern pos:start="1466:1" pos:end="1504:1">extern <literal type="string" pos:start="1466:8" pos:end="1466:10">"C"</literal> <function pos:start="1466:12" pos:end="1504:1"><type pos:start="1466:12" pos:end="1466:15"><name pos:start="1466:12" pos:end="1466:15">jint</name></type> <name pos:start="1466:17" pos:end="1466:79">Java_org_sipdroid_net_impl_OSNetworkSystem_readSocketDirectImpl</name><parameter_list pos:start="1466:80" pos:end="1468:21">(<parameter pos:start="1466:81" pos:end="1466:91"><decl pos:start="1466:81" pos:end="1466:91"><type pos:start="1466:81" pos:end="1466:91"><name pos:start="1466:81" pos:end="1466:86">JNIEnv</name><modifier pos:start="1466:87" pos:end="1466:87">*</modifier></type> <name pos:start="1466:89" pos:end="1466:91">env</name></decl></parameter>, <parameter pos:start="1466:94" pos:end="1466:105"><decl pos:start="1466:94" pos:end="1466:105"><type pos:start="1466:94" pos:end="1466:105"><name pos:start="1466:94" pos:end="1466:99">jclass</name></type> <name pos:start="1466:101" pos:end="1466:105">clazz</name></decl></parameter>,
        <parameter pos:start="1467:9" pos:end="1467:30"><decl pos:start="1467:9" pos:end="1467:30"><type pos:start="1467:9" pos:end="1467:30"><name pos:start="1467:9" pos:end="1467:15">jobject</name></type> <name pos:start="1467:17" pos:end="1467:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1467:33" pos:end="1467:44"><decl pos:start="1467:33" pos:end="1467:44"><type pos:start="1467:33" pos:end="1467:44"><name pos:start="1467:33" pos:end="1467:36">jint</name></type> <name pos:start="1467:38" pos:end="1467:44">address</name></decl></parameter>, <parameter pos:start="1467:47" pos:end="1467:57"><decl pos:start="1467:47" pos:end="1467:57"><type pos:start="1467:47" pos:end="1467:57"><name pos:start="1467:47" pos:end="1467:50">jint</name></type> <name pos:start="1467:52" pos:end="1467:57">offset</name></decl></parameter>, <parameter pos:start="1467:60" pos:end="1467:69"><decl pos:start="1467:60" pos:end="1467:69"><type pos:start="1467:60" pos:end="1467:69"><name pos:start="1467:60" pos:end="1467:63">jint</name></type> <name pos:start="1467:65" pos:end="1467:69">count</name></decl></parameter>,
        <parameter pos:start="1468:9" pos:end="1468:20"><decl pos:start="1468:9" pos:end="1468:20"><type pos:start="1468:9" pos:end="1468:20"><name pos:start="1468:9" pos:end="1468:12">jint</name></type> <name pos:start="1468:14" pos:end="1468:20">timeout</name></decl></parameter>)</parameter_list> <block pos:start="1468:23" pos:end="1504:1">{<block_content pos:start="1471:5" pos:end="1503:15">
    <comment type="line" pos:start="1469:5" pos:end="1469:42">// LOGD("ENTER readSocketDirectImpl");</comment>

    <decl_stmt pos:start="1471:5" pos:end="1471:15"><decl pos:start="1471:5" pos:end="1471:14"><type pos:start="1471:5" pos:end="1471:7"><name pos:start="1471:5" pos:end="1471:7">int</name></type> <name pos:start="1471:9" pos:end="1471:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1472:5" pos:end="1472:38"><decl pos:start="1472:5" pos:end="1472:37"><type pos:start="1472:5" pos:end="1472:11"><name pos:start="1472:5" pos:end="1472:9">jbyte</name> <modifier pos:start="1472:11" pos:end="1472:11">*</modifier></type><name pos:start="1472:12" pos:end="1472:18">message</name> <init pos:start="1472:20" pos:end="1472:37">= <expr pos:start="1472:22" pos:end="1472:37"><operator pos:start="1472:22" pos:end="1472:22">(</operator><name pos:start="1472:23" pos:end="1472:27">jbyte</name> <operator pos:start="1472:29" pos:end="1472:29">*</operator><operator pos:start="1472:30" pos:end="1472:30">)</operator><name pos:start="1472:31" pos:end="1472:37">address</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1473:5" pos:end="1473:32"><decl pos:start="1473:5" pos:end="1473:14"><type pos:start="1473:5" pos:end="1473:7"><name pos:start="1473:5" pos:end="1473:7">int</name></type> <name pos:start="1473:9" pos:end="1473:14">result</name></decl>, <decl pos:start="1473:17" pos:end="1473:19"><type ref="prev" pos:start="1473:5" pos:end="1473:7"/><name pos:start="1473:17" pos:end="1473:19">ret</name></decl>, <decl pos:start="1473:22" pos:end="1473:31"><type ref="prev" pos:start="1473:5" pos:end="1473:7"/><name pos:start="1473:22" pos:end="1473:31">localCount</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1475:5" pos:end="1475:61"><expr pos:start="1475:5" pos:end="1475:60"><name pos:start="1475:5" pos:end="1475:10">handle</name> <operator pos:start="1475:12" pos:end="1475:12">=</operator> <call pos:start="1475:14" pos:end="1475:60"><name pos:start="1475:14" pos:end="1475:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1475:40" pos:end="1475:60">(<argument pos:start="1475:41" pos:end="1475:43"><expr pos:start="1475:41" pos:end="1475:43"><name pos:start="1475:41" pos:end="1475:43">env</name></expr></argument>, <argument pos:start="1475:46" pos:end="1475:59"><expr pos:start="1475:46" pos:end="1475:59"><name pos:start="1475:46" pos:end="1475:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1477:5" pos:end="1480:5"><if pos:start="1477:5" pos:end="1480:5">if <condition pos:start="1477:8" pos:end="1477:36">(<expr pos:start="1477:9" pos:end="1477:35"><name pos:start="1477:9" pos:end="1477:14">handle</name> <operator pos:start="1477:16" pos:end="1477:17">==</operator> <literal type="number" pos:start="1477:19" pos:end="1477:19">0</literal> <operator pos:start="1477:21" pos:end="1477:22">||</operator> <name pos:start="1477:24" pos:end="1477:29">handle</name> <operator pos:start="1477:31" pos:end="1477:32">==</operator> <operator pos:start="1477:34" pos:end="1477:34">-</operator><literal type="number" pos:start="1477:35" pos:end="1477:35">1</literal></expr>)</condition> <block pos:start="1477:38" pos:end="1480:5">{<block_content pos:start="1478:9" pos:end="1479:17">
        <expr_stmt pos:start="1478:9" pos:end="1478:53"><expr pos:start="1478:9" pos:end="1478:52"><call pos:start="1478:9" pos:end="1478:52"><name pos:start="1478:9" pos:end="1478:28">throwSocketException</name><argument_list pos:start="1478:29" pos:end="1478:52">(<argument pos:start="1478:30" pos:end="1478:32"><expr pos:start="1478:30" pos:end="1478:32"><name pos:start="1478:30" pos:end="1478:32">env</name></expr></argument>, <argument pos:start="1478:35" pos:end="1478:51"><expr pos:start="1478:35" pos:end="1478:51"><name pos:start="1478:35" pos:end="1478:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1479:9" pos:end="1479:17">return <expr pos:start="1479:16" pos:end="1479:16"><literal type="number" pos:start="1479:16" pos:end="1479:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1482:5" pos:end="1482:59"><expr pos:start="1482:5" pos:end="1482:58"><name pos:start="1482:5" pos:end="1482:10">result</name> <operator pos:start="1482:12" pos:end="1482:12">=</operator> <call pos:start="1482:14" pos:end="1482:58"><name pos:start="1482:14" pos:end="1482:23">selectWait</name><argument_list pos:start="1482:24" pos:end="1482:58">(<argument pos:start="1482:25" pos:end="1482:30"><expr pos:start="1482:25" pos:end="1482:30"><name pos:start="1482:25" pos:end="1482:30">handle</name></expr></argument>, <argument pos:start="1482:33" pos:end="1482:39"><expr pos:start="1482:33" pos:end="1482:39"><name pos:start="1482:33" pos:end="1482:39">timeout</name></expr></argument>, <argument pos:start="1482:42" pos:end="1482:57"><expr pos:start="1482:42" pos:end="1482:57"><name pos:start="1482:42" pos:end="1482:57">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1484:5" pos:end="1486:5"><if pos:start="1484:5" pos:end="1486:5">if <condition pos:start="1484:8" pos:end="1484:19">(<expr pos:start="1484:9" pos:end="1484:18"><literal type="number" pos:start="1484:9" pos:end="1484:9">0</literal> <operator pos:start="1484:11" pos:end="1484:11">&gt;</operator> <name pos:start="1484:13" pos:end="1484:18">result</name></expr>)</condition> <block pos:start="1484:21" pos:end="1486:5">{<block_content pos:start="1485:9" pos:end="1485:17">
        <return pos:start="1485:9" pos:end="1485:17">return <expr pos:start="1485:16" pos:end="1485:16"><literal type="number" pos:start="1485:16" pos:end="1485:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1488:5" pos:end="1488:49"><expr pos:start="1488:5" pos:end="1488:48"><name pos:start="1488:5" pos:end="1488:14">localCount</name> <operator pos:start="1488:16" pos:end="1488:16">=</operator> <ternary pos:start="1488:18" pos:end="1488:48"><condition pos:start="1488:18" pos:end="1488:34"><expr pos:start="1488:18" pos:end="1488:32"><operator pos:start="1488:18" pos:end="1488:18">(</operator><name pos:start="1488:19" pos:end="1488:23">count</name> <operator pos:start="1488:25" pos:end="1488:25">&lt;</operator> <literal type="number" pos:start="1488:27" pos:end="1488:31">65536</literal><operator pos:start="1488:32" pos:end="1488:32">)</operator></expr> ?</condition><then pos:start="1488:36" pos:end="1488:40"> <expr pos:start="1488:36" pos:end="1488:40"><name pos:start="1488:36" pos:end="1488:40">count</name></expr> </then><else pos:start="1488:42" pos:end="1488:48">: <expr pos:start="1488:44" pos:end="1488:48"><literal type="number" pos:start="1488:44" pos:end="1488:48">65536</literal></expr></else></ternary></expr>;</expr_stmt>

    <do pos:start="1490:5" pos:end="1492:40">do <block pos:start="1490:8" pos:end="1492:5">{<block_content pos:start="1491:9" pos:end="1491:74">
        <expr_stmt pos:start="1491:9" pos:end="1491:74"><expr pos:start="1491:9" pos:end="1491:73"><name pos:start="1491:9" pos:end="1491:11">ret</name> <operator pos:start="1491:13" pos:end="1491:13">=</operator> <call pos:start="1491:15" pos:end="1491:73"><name pos:start="1491:15" pos:end="1491:18">recv</name><argument_list pos:start="1491:19" pos:end="1491:73">(<argument pos:start="1491:20" pos:end="1491:25"><expr pos:start="1491:20" pos:end="1491:25"><name pos:start="1491:20" pos:end="1491:25">handle</name></expr></argument>, <argument pos:start="1491:28" pos:end="1491:44"><expr pos:start="1491:28" pos:end="1491:44"><operator pos:start="1491:28" pos:end="1491:28">(</operator><name pos:start="1491:29" pos:end="1491:33">jbyte</name> <operator pos:start="1491:35" pos:end="1491:35">*</operator><operator pos:start="1491:36" pos:end="1491:36">)</operator> <name pos:start="1491:38" pos:end="1491:44">message</name></expr></argument>, <argument pos:start="1491:47" pos:end="1491:56"><expr pos:start="1491:47" pos:end="1491:56"><name pos:start="1491:47" pos:end="1491:56">localCount</name></expr></argument>, <argument pos:start="1491:59" pos:end="1491:72"><expr pos:start="1491:59" pos:end="1491:72"><name pos:start="1491:59" pos:end="1491:72">SOCKET_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="1492:13" pos:end="1492:39">(<expr pos:start="1492:14" pos:end="1492:38"><name pos:start="1492:14" pos:end="1492:16">ret</name> <operator pos:start="1492:18" pos:end="1492:18">&lt;</operator> <literal type="number" pos:start="1492:20" pos:end="1492:20">0</literal> <operator pos:start="1492:22" pos:end="1492:23">&amp;&amp;</operator> <name pos:start="1492:25" pos:end="1492:29">errno</name> <operator pos:start="1492:31" pos:end="1492:32">==</operator> <name pos:start="1492:34" pos:end="1492:38">EINTR</name></expr>)</condition>;</do>

    <if_stmt pos:start="1494:5" pos:end="1501:5"><if pos:start="1494:5" pos:end="1496:5">if <condition pos:start="1494:8" pos:end="1494:17">(<expr pos:start="1494:9" pos:end="1494:16"><literal type="number" pos:start="1494:9" pos:end="1494:9">0</literal> <operator pos:start="1494:11" pos:end="1494:12">==</operator> <name pos:start="1494:14" pos:end="1494:16">ret</name></expr>)</condition> <block pos:start="1494:19" pos:end="1496:5">{<block_content pos:start="1495:9" pos:end="1495:18">
        <return pos:start="1495:9" pos:end="1495:18">return <expr pos:start="1495:16" pos:end="1495:17"><operator pos:start="1495:16" pos:end="1495:16">-</operator><literal type="number" pos:start="1495:17" pos:end="1495:17">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="1496:7" pos:end="1501:5">else if <condition pos:start="1496:15" pos:end="1496:25">(<expr pos:start="1496:16" pos:end="1496:24"><name pos:start="1496:16" pos:end="1496:18">ret</name> <operator pos:start="1496:20" pos:end="1496:21">==</operator> <operator pos:start="1496:23" pos:end="1496:23">-</operator><literal type="number" pos:start="1496:24" pos:end="1496:24">1</literal></expr>)</condition> <block pos:start="1496:27" pos:end="1501:5">{<block_content pos:start="1497:9" pos:end="1500:17">
        <decl_stmt pos:start="1497:9" pos:end="1497:38"><decl pos:start="1497:9" pos:end="1497:37"><type pos:start="1497:9" pos:end="1497:11"><name pos:start="1497:9" pos:end="1497:11">int</name></type> <name pos:start="1497:13" pos:end="1497:15">err</name> <init pos:start="1497:17" pos:end="1497:37">= <expr pos:start="1497:19" pos:end="1497:37"><call pos:start="1497:19" pos:end="1497:37"><name pos:start="1497:19" pos:end="1497:30">convertError</name><argument_list pos:start="1497:31" pos:end="1497:37">(<argument pos:start="1497:32" pos:end="1497:36"><expr pos:start="1497:32" pos:end="1497:36"><name pos:start="1497:32" pos:end="1497:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1498:9" pos:end="1498:38"><expr pos:start="1498:9" pos:end="1498:37"><call pos:start="1498:9" pos:end="1498:37"><name pos:start="1498:9" pos:end="1498:24">log_socket_close</name><argument_list pos:start="1498:25" pos:end="1498:37">(<argument pos:start="1498:26" pos:end="1498:31"><expr pos:start="1498:26" pos:end="1498:31"><name pos:start="1498:26" pos:end="1498:31">handle</name></expr></argument>, <argument pos:start="1498:34" pos:end="1498:36"><expr pos:start="1498:34" pos:end="1498:36"><name pos:start="1498:34" pos:end="1498:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1499:9" pos:end="1499:39"><expr pos:start="1499:9" pos:end="1499:38"><call pos:start="1499:9" pos:end="1499:38"><name pos:start="1499:9" pos:end="1499:28">throwSocketException</name><argument_list pos:start="1499:29" pos:end="1499:38">(<argument pos:start="1499:30" pos:end="1499:32"><expr pos:start="1499:30" pos:end="1499:32"><name pos:start="1499:30" pos:end="1499:32">env</name></expr></argument>, <argument pos:start="1499:35" pos:end="1499:37"><expr pos:start="1499:35" pos:end="1499:37"><name pos:start="1499:35" pos:end="1499:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1500:9" pos:end="1500:17">return <expr pos:start="1500:16" pos:end="1500:16"><literal type="number" pos:start="1500:16" pos:end="1500:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1502:5" pos:end="1502:32"><expr pos:start="1502:5" pos:end="1502:31"><call pos:start="1502:5" pos:end="1502:31"><name pos:start="1502:5" pos:end="1502:18">add_recv_stats</name><argument_list pos:start="1502:19" pos:end="1502:31">(<argument pos:start="1502:20" pos:end="1502:25"><expr pos:start="1502:20" pos:end="1502:25"><name pos:start="1502:20" pos:end="1502:25">handle</name></expr></argument>, <argument pos:start="1502:28" pos:end="1502:30"><expr pos:start="1502:28" pos:end="1502:30"><name pos:start="1502:28" pos:end="1502:30">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1503:5" pos:end="1503:15">return <expr pos:start="1503:12" pos:end="1503:14"><name pos:start="1503:12" pos:end="1503:14">ret</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1506:1" pos:end="1541:1">extern <literal type="string" pos:start="1506:8" pos:end="1506:10">"C"</literal> <function pos:start="1506:12" pos:end="1541:1"><type pos:start="1506:12" pos:end="1506:15"><name pos:start="1506:12" pos:end="1506:15">jint</name></type> <name pos:start="1506:17" pos:end="1506:73">Java_org_sipdroid_net_impl_OSNetworkSystem_readSocketImpl</name><parameter_list pos:start="1506:74" pos:end="1508:21">(<parameter pos:start="1506:75" pos:end="1506:85"><decl pos:start="1506:75" pos:end="1506:85"><type pos:start="1506:75" pos:end="1506:85"><name pos:start="1506:75" pos:end="1506:80">JNIEnv</name><modifier pos:start="1506:81" pos:end="1506:81">*</modifier></type> <name pos:start="1506:83" pos:end="1506:85">env</name></decl></parameter>, <parameter pos:start="1506:88" pos:end="1506:99"><decl pos:start="1506:88" pos:end="1506:99"><type pos:start="1506:88" pos:end="1506:99"><name pos:start="1506:88" pos:end="1506:93">jclass</name></type> <name pos:start="1506:95" pos:end="1506:99">clazz</name></decl></parameter>,
        <parameter pos:start="1507:9" pos:end="1507:30"><decl pos:start="1507:9" pos:end="1507:30"><type pos:start="1507:9" pos:end="1507:30"><name pos:start="1507:9" pos:end="1507:15">jobject</name></type> <name pos:start="1507:17" pos:end="1507:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1507:33" pos:end="1507:47"><decl pos:start="1507:33" pos:end="1507:47"><type pos:start="1507:33" pos:end="1507:47"><name pos:start="1507:33" pos:end="1507:42">jbyteArray</name></type> <name pos:start="1507:44" pos:end="1507:47">data</name></decl></parameter>, <parameter pos:start="1507:50" pos:end="1507:60"><decl pos:start="1507:50" pos:end="1507:60"><type pos:start="1507:50" pos:end="1507:60"><name pos:start="1507:50" pos:end="1507:53">jint</name></type> <name pos:start="1507:55" pos:end="1507:60">offset</name></decl></parameter>, <parameter pos:start="1507:63" pos:end="1507:72"><decl pos:start="1507:63" pos:end="1507:72"><type pos:start="1507:63" pos:end="1507:72"><name pos:start="1507:63" pos:end="1507:66">jint</name></type> <name pos:start="1507:68" pos:end="1507:72">count</name></decl></parameter>,
        <parameter pos:start="1508:9" pos:end="1508:20"><decl pos:start="1508:9" pos:end="1508:20"><type pos:start="1508:9" pos:end="1508:20"><name pos:start="1508:9" pos:end="1508:12">jint</name></type> <name pos:start="1508:14" pos:end="1508:20">timeout</name></decl></parameter>)</parameter_list> <block pos:start="1508:23" pos:end="1541:1">{<block_content pos:start="1511:5" pos:end="1540:18">
    <comment type="line" pos:start="1509:5" pos:end="1509:36">// LOGD("ENTER readSocketImpl");</comment>

    <decl_stmt pos:start="1511:5" pos:end="1511:19"><decl pos:start="1511:5" pos:end="1511:18"><type pos:start="1511:5" pos:end="1511:11"><name pos:start="1511:5" pos:end="1511:9">jbyte</name> <modifier pos:start="1511:11" pos:end="1511:11">*</modifier></type><name pos:start="1511:12" pos:end="1511:18">message</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1512:5" pos:end="1512:27"><decl pos:start="1512:5" pos:end="1512:14"><type pos:start="1512:5" pos:end="1512:7"><name pos:start="1512:5" pos:end="1512:7">int</name></type> <name pos:start="1512:9" pos:end="1512:14">result</name></decl>, <decl pos:start="1512:17" pos:end="1512:26"><type ref="prev" pos:start="1512:5" pos:end="1512:7"/><name pos:start="1512:17" pos:end="1512:26">localCount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="1514:5" pos:end="1514:37"><decl pos:start="1514:5" pos:end="1514:36"><type pos:start="1514:5" pos:end="1514:9"><name pos:start="1514:5" pos:end="1514:9">jbyte</name></type> <name pos:start="1514:11" pos:end="1514:36"><name pos:start="1514:11" pos:end="1514:24">internalBuffer</name><index pos:start="1514:25" pos:end="1514:36">[<expr pos:start="1514:26" pos:end="1514:35"><name pos:start="1514:26" pos:end="1514:35">BUFFERSIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="1516:5" pos:end="1516:49"><expr pos:start="1516:5" pos:end="1516:48"><name pos:start="1516:5" pos:end="1516:14">localCount</name> <operator pos:start="1516:16" pos:end="1516:16">=</operator> <ternary pos:start="1516:18" pos:end="1516:48"><condition pos:start="1516:18" pos:end="1516:34"><expr pos:start="1516:18" pos:end="1516:32"><operator pos:start="1516:18" pos:end="1516:18">(</operator><name pos:start="1516:19" pos:end="1516:23">count</name> <operator pos:start="1516:25" pos:end="1516:25">&lt;</operator> <literal type="number" pos:start="1516:27" pos:end="1516:31">65536</literal><operator pos:start="1516:32" pos:end="1516:32">)</operator></expr> ?</condition><then pos:start="1516:36" pos:end="1516:40"> <expr pos:start="1516:36" pos:end="1516:40"><name pos:start="1516:36" pos:end="1516:40">count</name></expr> </then><else pos:start="1516:42" pos:end="1516:48">: <expr pos:start="1516:44" pos:end="1516:48"><literal type="number" pos:start="1516:44" pos:end="1516:48">65536</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="1518:5" pos:end="1527:5"><if pos:start="1518:5" pos:end="1525:5">if <condition pos:start="1518:8" pos:end="1518:32">(<expr pos:start="1518:9" pos:end="1518:31"><name pos:start="1518:9" pos:end="1518:18">localCount</name> <operator pos:start="1518:20" pos:end="1518:20">&gt;</operator> <name pos:start="1518:22" pos:end="1518:31">BUFFERSIZE</name></expr>)</condition> <block pos:start="1518:34" pos:end="1525:5">{<block_content pos:start="1519:9" pos:end="1524:9">
        <expr_stmt pos:start="1519:9" pos:end="1519:61"><expr pos:start="1519:9" pos:end="1519:60"><name pos:start="1519:9" pos:end="1519:15">message</name> <operator pos:start="1519:17" pos:end="1519:17">=</operator> <operator pos:start="1519:19" pos:end="1519:19">(</operator><name pos:start="1519:20" pos:end="1519:24">jbyte</name><operator pos:start="1519:25" pos:end="1519:25">*</operator><operator pos:start="1519:26" pos:end="1519:26">)</operator><call pos:start="1519:27" pos:end="1519:60"><name pos:start="1519:27" pos:end="1519:32">malloc</name><argument_list pos:start="1519:33" pos:end="1519:60">(<argument pos:start="1519:34" pos:end="1519:59"><expr pos:start="1519:34" pos:end="1519:59"><name pos:start="1519:34" pos:end="1519:43">localCount</name> <operator pos:start="1519:45" pos:end="1519:45">*</operator> <sizeof pos:start="1519:47" pos:end="1519:59">sizeof<argument_list pos:start="1519:53" pos:end="1519:59">(<argument pos:start="1519:54" pos:end="1519:58"><expr pos:start="1519:54" pos:end="1519:58"><name pos:start="1519:54" pos:end="1519:58">jbyte</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1520:9" pos:end="1524:9"><if pos:start="1520:9" pos:end="1524:9">if <condition pos:start="1520:12" pos:end="1520:28">(<expr pos:start="1520:13" pos:end="1520:27"><name pos:start="1520:13" pos:end="1520:19">message</name> <operator pos:start="1520:21" pos:end="1520:22">==</operator> <name pos:start="1520:24" pos:end="1520:27">NULL</name></expr>)</condition> <block pos:start="1520:30" pos:end="1524:9">{<block_content pos:start="1521:13" pos:end="1523:21">
            <expr_stmt pos:start="1521:13" pos:end="1522:70"><expr pos:start="1521:13" pos:end="1522:69"><call pos:start="1521:13" pos:end="1522:69"><name pos:start="1521:13" pos:end="1521:29">jniThrowException</name><argument_list pos:start="1521:30" pos:end="1522:69">(<argument pos:start="1521:31" pos:end="1521:33"><expr pos:start="1521:31" pos:end="1521:33"><name pos:start="1521:31" pos:end="1521:33">env</name></expr></argument>, <argument pos:start="1521:36" pos:end="1521:63"><expr pos:start="1521:36" pos:end="1521:63"><literal type="string" pos:start="1521:36" pos:end="1521:63">"java/lang/OutOfMemoryError"</literal></expr></argument>,
                    <argument pos:start="1522:21" pos:end="1522:68"><expr pos:start="1522:21" pos:end="1522:68"><literal type="string" pos:start="1522:21" pos:end="1522:68">"couldn't allocate enough memory for readSocket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1523:13" pos:end="1523:21">return <expr pos:start="1523:20" pos:end="1523:20"><literal type="number" pos:start="1523:20" pos:end="1523:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="1525:7" pos:end="1527:5">else <block pos:start="1525:12" pos:end="1527:5">{<block_content pos:start="1526:9" pos:end="1526:42">
        <expr_stmt pos:start="1526:9" pos:end="1526:42"><expr pos:start="1526:9" pos:end="1526:41"><name pos:start="1526:9" pos:end="1526:15">message</name> <operator pos:start="1526:17" pos:end="1526:17">=</operator> <operator pos:start="1526:19" pos:end="1526:19">(</operator><name pos:start="1526:20" pos:end="1526:24">jbyte</name> <operator pos:start="1526:26" pos:end="1526:26">*</operator><operator pos:start="1526:27" pos:end="1526:27">)</operator><name pos:start="1526:28" pos:end="1526:41">internalBuffer</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="1529:5" pos:end="1530:52"><expr pos:start="1529:5" pos:end="1530:51"><name pos:start="1529:5" pos:end="1529:10">result</name> <operator pos:start="1529:12" pos:end="1529:12">=</operator> <call pos:start="1529:14" pos:end="1530:51"><name pos:start="1529:14" pos:end="1529:76">Java_org_sipdroid_net_impl_OSNetworkSystem_readSocketDirectImpl</name><argument_list pos:start="1529:77" pos:end="1530:51">(<argument pos:start="1529:78" pos:end="1529:80"><expr pos:start="1529:78" pos:end="1529:80"><name pos:start="1529:78" pos:end="1529:80">env</name></expr></argument>, <argument pos:start="1529:83" pos:end="1529:87"><expr pos:start="1529:83" pos:end="1529:87"><name pos:start="1529:83" pos:end="1529:87">clazz</name></expr></argument>, <argument pos:start="1529:90" pos:end="1529:103"><expr pos:start="1529:90" pos:end="1529:103"><name pos:start="1529:90" pos:end="1529:103">fileDescriptor</name></expr></argument>,
            <argument pos:start="1530:13" pos:end="1530:26"><expr pos:start="1530:13" pos:end="1530:26"><operator pos:start="1530:13" pos:end="1530:13">(</operator><name pos:start="1530:14" pos:end="1530:17">jint</name><operator pos:start="1530:18" pos:end="1530:18">)</operator> <name pos:start="1530:20" pos:end="1530:26">message</name></expr></argument>, <argument pos:start="1530:29" pos:end="1530:34"><expr pos:start="1530:29" pos:end="1530:34"><name pos:start="1530:29" pos:end="1530:34">offset</name></expr></argument>, <argument pos:start="1530:37" pos:end="1530:41"><expr pos:start="1530:37" pos:end="1530:41"><name pos:start="1530:37" pos:end="1530:41">count</name></expr></argument>, <argument pos:start="1530:44" pos:end="1530:50"><expr pos:start="1530:44" pos:end="1530:50"><name pos:start="1530:44" pos:end="1530:50">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1532:5" pos:end="1534:5"><if pos:start="1532:5" pos:end="1534:5">if <condition pos:start="1532:8" pos:end="1532:19">(<expr pos:start="1532:9" pos:end="1532:18"><name pos:start="1532:9" pos:end="1532:14">result</name> <operator pos:start="1532:16" pos:end="1532:16">&gt;</operator> <literal type="number" pos:start="1532:18" pos:end="1532:18">0</literal></expr>)</condition> <block pos:start="1532:21" pos:end="1534:5">{<block_content pos:start="1533:9" pos:end="1533:72">
        <expr_stmt pos:start="1533:9" pos:end="1533:72"><expr pos:start="1533:9" pos:end="1533:71"><call pos:start="1533:9" pos:end="1533:71"><name pos:start="1533:9" pos:end="1533:31"><name pos:start="1533:9" pos:end="1533:11">env</name><operator pos:start="1533:12" pos:end="1533:13">-&gt;</operator><name pos:start="1533:14" pos:end="1533:31">SetByteArrayRegion</name></name><argument_list pos:start="1533:32" pos:end="1533:71">(<argument pos:start="1533:33" pos:end="1533:36"><expr pos:start="1533:33" pos:end="1533:36"><name pos:start="1533:33" pos:end="1533:36">data</name></expr></argument>, <argument pos:start="1533:39" pos:end="1533:44"><expr pos:start="1533:39" pos:end="1533:44"><name pos:start="1533:39" pos:end="1533:44">offset</name></expr></argument>, <argument pos:start="1533:47" pos:end="1533:52"><expr pos:start="1533:47" pos:end="1533:52"><name pos:start="1533:47" pos:end="1533:52">result</name></expr></argument>, <argument pos:start="1533:55" pos:end="1533:70"><expr pos:start="1533:55" pos:end="1533:70"><operator pos:start="1533:55" pos:end="1533:55">(</operator><name pos:start="1533:56" pos:end="1533:60">jbyte</name> <operator pos:start="1533:62" pos:end="1533:62">*</operator><operator pos:start="1533:63" pos:end="1533:63">)</operator><name pos:start="1533:64" pos:end="1533:70">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1536:5" pos:end="1538:5"><if pos:start="1536:5" pos:end="1538:5">if <condition pos:start="1536:8" pos:end="1536:45">(<expr pos:start="1536:9" pos:end="1536:44"><operator pos:start="1536:9" pos:end="1536:9">(</operator><operator pos:start="1536:10" pos:end="1536:10">(</operator><name pos:start="1536:11" pos:end="1536:15">jbyte</name> <operator pos:start="1536:17" pos:end="1536:17">*</operator><operator pos:start="1536:18" pos:end="1536:18">)</operator><name pos:start="1536:19" pos:end="1536:25">message</name><operator pos:start="1536:26" pos:end="1536:26">)</operator> <operator pos:start="1536:28" pos:end="1536:29">!=</operator> <name pos:start="1536:31" pos:end="1536:44">internalBuffer</name></expr>)</condition> <block pos:start="1536:47" pos:end="1538:5">{<block_content pos:start="1537:9" pos:end="1537:32">
        <expr_stmt pos:start="1537:9" pos:end="1537:32"><expr pos:start="1537:9" pos:end="1537:31"><call pos:start="1537:9" pos:end="1537:31"><name pos:start="1537:9" pos:end="1537:12">free</name><argument_list pos:start="1537:13" pos:end="1537:31">(<argument pos:start="1537:14" pos:end="1537:30"><expr pos:start="1537:14" pos:end="1537:30"><operator pos:start="1537:14" pos:end="1537:14">(</operator> <name pos:start="1537:16" pos:end="1537:20">jbyte</name> <operator pos:start="1537:22" pos:end="1537:22">*</operator><operator pos:start="1537:23" pos:end="1537:23">)</operator><name pos:start="1537:24" pos:end="1537:30">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1540:5" pos:end="1540:18">return <expr pos:start="1540:12" pos:end="1540:17"><name pos:start="1540:12" pos:end="1540:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1543:1" pos:end="1604:1">extern <literal type="string" pos:start="1543:8" pos:end="1543:10">"C"</literal> <function pos:start="1543:12" pos:end="1604:1"><type pos:start="1543:12" pos:end="1543:15"><name pos:start="1543:12" pos:end="1543:15">jint</name></type> <name pos:start="1543:17" pos:end="1543:80">Java_org_sipdroid_net_impl_OSNetworkSystem_writeSocketDirectImpl</name><parameter_list pos:start="1543:81" pos:end="1544:70">(<parameter pos:start="1543:82" pos:end="1543:92"><decl pos:start="1543:82" pos:end="1543:92"><type pos:start="1543:82" pos:end="1543:92"><name pos:start="1543:82" pos:end="1543:87">JNIEnv</name><modifier pos:start="1543:88" pos:end="1543:88">*</modifier></type> <name pos:start="1543:90" pos:end="1543:92">env</name></decl></parameter>, <parameter pos:start="1543:95" pos:end="1543:106"><decl pos:start="1543:95" pos:end="1543:106"><type pos:start="1543:95" pos:end="1543:106"><name pos:start="1543:95" pos:end="1543:100">jclass</name></type> <name pos:start="1543:102" pos:end="1543:106">clazz</name></decl></parameter>,
        <parameter pos:start="1544:9" pos:end="1544:30"><decl pos:start="1544:9" pos:end="1544:30"><type pos:start="1544:9" pos:end="1544:30"><name pos:start="1544:9" pos:end="1544:15">jobject</name></type> <name pos:start="1544:17" pos:end="1544:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1544:33" pos:end="1544:44"><decl pos:start="1544:33" pos:end="1544:44"><type pos:start="1544:33" pos:end="1544:44"><name pos:start="1544:33" pos:end="1544:36">jint</name></type> <name pos:start="1544:38" pos:end="1544:44">address</name></decl></parameter>, <parameter pos:start="1544:47" pos:end="1544:57"><decl pos:start="1544:47" pos:end="1544:57"><type pos:start="1544:47" pos:end="1544:57"><name pos:start="1544:47" pos:end="1544:50">jint</name></type> <name pos:start="1544:52" pos:end="1544:57">offset</name></decl></parameter>, <parameter pos:start="1544:60" pos:end="1544:69"><decl pos:start="1544:60" pos:end="1544:69"><type pos:start="1544:60" pos:end="1544:69"><name pos:start="1544:60" pos:end="1544:63">jint</name></type> <name pos:start="1544:65" pos:end="1544:69">count</name></decl></parameter>)</parameter_list> <block pos:start="1544:72" pos:end="1604:1">{<block_content pos:start="1547:5" pos:end="1603:18">
    <comment type="line" pos:start="1545:5" pos:end="1545:43">// LOGD("ENTER writeSocketDirectImpl");</comment>

    <decl_stmt pos:start="1547:5" pos:end="1547:15"><decl pos:start="1547:5" pos:end="1547:14"><type pos:start="1547:5" pos:end="1547:7"><name pos:start="1547:5" pos:end="1547:7">int</name></type> <name pos:start="1547:9" pos:end="1547:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1548:5" pos:end="1548:38"><decl pos:start="1548:5" pos:end="1548:37"><type pos:start="1548:5" pos:end="1548:11"><name pos:start="1548:5" pos:end="1548:9">jbyte</name> <modifier pos:start="1548:11" pos:end="1548:11">*</modifier></type><name pos:start="1548:12" pos:end="1548:18">message</name> <init pos:start="1548:20" pos:end="1548:37">= <expr pos:start="1548:22" pos:end="1548:37"><operator pos:start="1548:22" pos:end="1548:22">(</operator><name pos:start="1548:23" pos:end="1548:27">jbyte</name> <operator pos:start="1548:29" pos:end="1548:29">*</operator><operator pos:start="1548:30" pos:end="1548:30">)</operator><name pos:start="1548:31" pos:end="1548:37">address</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1549:5" pos:end="1549:29"><decl pos:start="1549:5" pos:end="1549:18"><type pos:start="1549:5" pos:end="1549:7"><name pos:start="1549:5" pos:end="1549:7">int</name></type> <name pos:start="1549:9" pos:end="1549:14">result</name> <init pos:start="1549:16" pos:end="1549:18">= <expr pos:start="1549:18" pos:end="1549:18"><literal type="number" pos:start="1549:18" pos:end="1549:18">0</literal></expr></init></decl>, <decl pos:start="1549:21" pos:end="1549:28"><type ref="prev" pos:start="1549:5" pos:end="1549:7"/><name pos:start="1549:21" pos:end="1549:24">sent</name> <init pos:start="1549:26" pos:end="1549:28">= <expr pos:start="1549:28" pos:end="1549:28"><literal type="number" pos:start="1549:28" pos:end="1549:28">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1551:5" pos:end="1553:5"><if pos:start="1551:5" pos:end="1553:5">if <condition pos:start="1551:8" pos:end="1551:19">(<expr pos:start="1551:9" pos:end="1551:18"><name pos:start="1551:9" pos:end="1551:13">count</name> <operator pos:start="1551:15" pos:end="1551:16">&lt;=</operator> <literal type="number" pos:start="1551:18" pos:end="1551:18">0</literal></expr>)</condition> <block pos:start="1551:21" pos:end="1553:5">{<block_content pos:start="1552:9" pos:end="1552:17">
        <return pos:start="1552:9" pos:end="1552:17">return <expr pos:start="1552:16" pos:end="1552:16"><literal type="number" pos:start="1552:16" pos:end="1552:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1555:5" pos:end="1555:61"><expr pos:start="1555:5" pos:end="1555:60"><name pos:start="1555:5" pos:end="1555:10">handle</name> <operator pos:start="1555:12" pos:end="1555:12">=</operator> <call pos:start="1555:14" pos:end="1555:60"><name pos:start="1555:14" pos:end="1555:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1555:40" pos:end="1555:60">(<argument pos:start="1555:41" pos:end="1555:43"><expr pos:start="1555:41" pos:end="1555:43"><name pos:start="1555:41" pos:end="1555:43">env</name></expr></argument>, <argument pos:start="1555:46" pos:end="1555:59"><expr pos:start="1555:46" pos:end="1555:59"><name pos:start="1555:46" pos:end="1555:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1557:5" pos:end="1560:5"><if pos:start="1557:5" pos:end="1560:5">if <condition pos:start="1557:8" pos:end="1557:36">(<expr pos:start="1557:9" pos:end="1557:35"><name pos:start="1557:9" pos:end="1557:14">handle</name> <operator pos:start="1557:16" pos:end="1557:17">==</operator> <literal type="number" pos:start="1557:19" pos:end="1557:19">0</literal> <operator pos:start="1557:21" pos:end="1557:22">||</operator> <name pos:start="1557:24" pos:end="1557:29">handle</name> <operator pos:start="1557:31" pos:end="1557:32">==</operator> <operator pos:start="1557:34" pos:end="1557:34">-</operator><literal type="number" pos:start="1557:35" pos:end="1557:35">1</literal></expr>)</condition> <block pos:start="1557:38" pos:end="1560:5">{<block_content pos:start="1558:9" pos:end="1559:17">
        <expr_stmt pos:start="1558:9" pos:end="1558:53"><expr pos:start="1558:9" pos:end="1558:52"><call pos:start="1558:9" pos:end="1558:52"><name pos:start="1558:9" pos:end="1558:28">throwSocketException</name><argument_list pos:start="1558:29" pos:end="1558:52">(<argument pos:start="1558:30" pos:end="1558:32"><expr pos:start="1558:30" pos:end="1558:32"><name pos:start="1558:30" pos:end="1558:32">env</name></expr></argument>, <argument pos:start="1558:35" pos:end="1558:51"><expr pos:start="1558:35" pos:end="1558:51"><name pos:start="1558:35" pos:end="1558:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1559:9" pos:end="1559:17">return <expr pos:start="1559:16" pos:end="1559:16"><literal type="number" pos:start="1559:16" pos:end="1559:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1562:5" pos:end="1562:74"><expr pos:start="1562:5" pos:end="1562:73"><name pos:start="1562:5" pos:end="1562:10">result</name> <operator pos:start="1562:12" pos:end="1562:12">=</operator> <call pos:start="1562:14" pos:end="1562:73"><name pos:start="1562:14" pos:end="1562:17">send</name><argument_list pos:start="1562:18" pos:end="1562:73">(<argument pos:start="1562:19" pos:end="1562:24"><expr pos:start="1562:19" pos:end="1562:24"><name pos:start="1562:19" pos:end="1562:24">handle</name></expr></argument>, <argument pos:start="1562:27" pos:end="1562:43"><expr pos:start="1562:27" pos:end="1562:43"><operator pos:start="1562:27" pos:end="1562:27">(</operator><name pos:start="1562:28" pos:end="1562:32">jbyte</name> <operator pos:start="1562:34" pos:end="1562:34">*</operator><operator pos:start="1562:35" pos:end="1562:35">)</operator> <name pos:start="1562:37" pos:end="1562:43">message</name></expr></argument>, <argument pos:start="1562:46" pos:end="1562:56"><expr pos:start="1562:46" pos:end="1562:56"><operator pos:start="1562:46" pos:end="1562:46">(</operator><name pos:start="1562:47" pos:end="1562:49">int</name><operator pos:start="1562:50" pos:end="1562:50">)</operator> <name pos:start="1562:52" pos:end="1562:56">count</name></expr></argument>, <argument pos:start="1562:59" pos:end="1562:72"><expr pos:start="1562:59" pos:end="1562:72"><name pos:start="1562:59" pos:end="1562:72">SOCKET_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1563:5" pos:end="1600:5"><if pos:start="1563:5" pos:end="1600:5">if <condition pos:start="1563:8" pos:end="1563:19">(<expr pos:start="1563:9" pos:end="1563:18"><name pos:start="1563:9" pos:end="1563:14">result</name> <operator pos:start="1563:16" pos:end="1563:16">&lt;</operator> <literal type="number" pos:start="1563:18" pos:end="1563:18">0</literal></expr>)</condition> <block pos:start="1563:21" pos:end="1600:5">{<block_content pos:start="1564:9" pos:end="1599:17">
        <decl_stmt pos:start="1564:9" pos:end="1564:38"><decl pos:start="1564:9" pos:end="1564:37"><type pos:start="1564:9" pos:end="1564:11"><name pos:start="1564:9" pos:end="1564:11">int</name></type> <name pos:start="1564:13" pos:end="1564:15">err</name> <init pos:start="1564:17" pos:end="1564:37">= <expr pos:start="1564:19" pos:end="1564:37"><call pos:start="1564:19" pos:end="1564:37"><name pos:start="1564:19" pos:end="1564:30">convertError</name><argument_list pos:start="1564:31" pos:end="1564:37">(<argument pos:start="1564:32" pos:end="1564:36"><expr pos:start="1564:32" pos:end="1564:36"><name pos:start="1564:32" pos:end="1564:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1565:9" pos:end="1565:38"><expr pos:start="1565:9" pos:end="1565:37"><call pos:start="1565:9" pos:end="1565:37"><name pos:start="1565:9" pos:end="1565:24">log_socket_close</name><argument_list pos:start="1565:25" pos:end="1565:37">(<argument pos:start="1565:26" pos:end="1565:31"><expr pos:start="1565:26" pos:end="1565:31"><name pos:start="1565:26" pos:end="1565:31">handle</name></expr></argument>, <argument pos:start="1565:34" pos:end="1565:36"><expr pos:start="1565:34" pos:end="1565:36"><name pos:start="1565:34" pos:end="1565:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1567:9" pos:end="1597:9"><if pos:start="1567:9" pos:end="1597:9">if <condition pos:start="1567:12" pos:end="1567:38">(<expr pos:start="1567:13" pos:end="1567:37"><name pos:start="1567:13" pos:end="1567:30">SOCKERR_WOULDBLOCK</name> <operator pos:start="1567:32" pos:end="1567:33">==</operator> <name pos:start="1567:35" pos:end="1567:37">err</name></expr>)</condition><block pos:start="1567:39" pos:end="1597:9">{<block_content pos:start="1568:13" pos:end="1596:21">
            <decl_stmt pos:start="1568:13" pos:end="1568:50"><decl pos:start="1568:13" pos:end="1568:32"><type pos:start="1568:13" pos:end="1568:18"><name pos:start="1568:13" pos:end="1568:18">jclass</name></type> <name pos:start="1568:20" pos:end="1568:32">socketExClass</name></decl>,<decl pos:start="1568:34" pos:end="1568:49"><type ref="prev" pos:start="1568:13" pos:end="1568:18"/><name pos:start="1568:34" pos:end="1568:49">errorCodeExClass</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1569:13" pos:end="1569:86"><decl pos:start="1569:13" pos:end="1569:44"><type pos:start="1569:13" pos:end="1569:21"><name pos:start="1569:13" pos:end="1569:21">jmethodID</name></type> <name pos:start="1569:23" pos:end="1569:44">errorCodeExConstructor</name></decl>, <decl pos:start="1569:47" pos:end="1569:65"><type ref="prev" pos:start="1569:13" pos:end="1569:21"/><name pos:start="1569:47" pos:end="1569:65">socketExConstructor</name></decl>,<decl pos:start="1569:67" pos:end="1569:85"><type ref="prev" pos:start="1569:13" pos:end="1569:21"/><name pos:start="1569:67" pos:end="1569:85">socketExCauseMethod</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1570:13" pos:end="1570:42"><decl pos:start="1570:13" pos:end="1570:31"><type pos:start="1570:13" pos:end="1570:19"><name pos:start="1570:13" pos:end="1570:19">jobject</name></type> <name pos:start="1570:21" pos:end="1570:31">errorCodeEx</name></decl>, <decl pos:start="1570:34" pos:end="1570:41"><type ref="prev" pos:start="1570:13" pos:end="1570:19"/><name pos:start="1570:34" pos:end="1570:41">socketEx</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1571:13" pos:end="1571:65"><decl pos:start="1571:13" pos:end="1571:64"><type pos:start="1571:13" pos:end="1571:23"><specifier pos:start="1571:13" pos:end="1571:17">const</specifier> <name pos:start="1571:19" pos:end="1571:22">char</name><modifier pos:start="1571:23" pos:end="1571:23">*</modifier></type> <name pos:start="1571:25" pos:end="1571:36">errorMessage</name> <init pos:start="1571:38" pos:end="1571:64">= <expr pos:start="1571:40" pos:end="1571:64"><call pos:start="1571:40" pos:end="1571:64"><name pos:start="1571:40" pos:end="1571:59">netLookupErrorString</name><argument_list pos:start="1571:60" pos:end="1571:64">(<argument pos:start="1571:61" pos:end="1571:63"><expr pos:start="1571:61" pos:end="1571:63"><name pos:start="1571:61" pos:end="1571:63">err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1572:13" pos:end="1572:73"><decl pos:start="1572:13" pos:end="1572:72"><type pos:start="1572:13" pos:end="1572:19"><name pos:start="1572:13" pos:end="1572:19">jstring</name></type> <name pos:start="1572:21" pos:end="1572:38">errorMessageString</name> <init pos:start="1572:40" pos:end="1572:72">= <expr pos:start="1572:42" pos:end="1572:72"><call pos:start="1572:42" pos:end="1572:72"><name pos:start="1572:42" pos:end="1572:58"><name pos:start="1572:42" pos:end="1572:44">env</name><operator pos:start="1572:45" pos:end="1572:46">-&gt;</operator><name pos:start="1572:47" pos:end="1572:58">NewStringUTF</name></name><argument_list pos:start="1572:59" pos:end="1572:72">(<argument pos:start="1572:60" pos:end="1572:71"><expr pos:start="1572:60" pos:end="1572:71"><name pos:start="1572:60" pos:end="1572:71">errorMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1574:13" pos:end="1574:97"><expr pos:start="1574:13" pos:end="1574:96"><name pos:start="1574:13" pos:end="1574:28">errorCodeExClass</name> <operator pos:start="1574:30" pos:end="1574:30">=</operator> <call pos:start="1574:32" pos:end="1574:96"><name pos:start="1574:32" pos:end="1574:45"><name pos:start="1574:32" pos:end="1574:34">env</name><operator pos:start="1574:35" pos:end="1574:36">-&gt;</operator><name pos:start="1574:37" pos:end="1574:45">FindClass</name></name><argument_list pos:start="1574:46" pos:end="1574:96">(<argument pos:start="1574:47" pos:end="1574:95"><expr pos:start="1574:47" pos:end="1574:95"><literal type="string" pos:start="1574:47" pos:end="1574:95">"org/apache/harmony/luni/util/ErrorCodeException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1575:13" pos:end="1577:13"><if pos:start="1575:13" pos:end="1577:13">if <condition pos:start="1575:16" pos:end="1575:34">(<expr pos:start="1575:17" pos:end="1575:33"><operator pos:start="1575:17" pos:end="1575:17">!</operator><name pos:start="1575:18" pos:end="1575:33">errorCodeExClass</name></expr>)</condition><block pos:start="1575:35" pos:end="1577:13">{<block_content pos:start="1576:17" pos:end="1576:25">
                <return pos:start="1576:17" pos:end="1576:25">return <expr pos:start="1576:24" pos:end="1576:24"><literal type="number" pos:start="1576:24" pos:end="1576:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1578:13" pos:end="1578:88"><expr pos:start="1578:13" pos:end="1578:87"><name pos:start="1578:13" pos:end="1578:34">errorCodeExConstructor</name> <operator pos:start="1578:36" pos:end="1578:36">=</operator> <call pos:start="1578:38" pos:end="1578:87"><name pos:start="1578:38" pos:end="1578:53"><name pos:start="1578:38" pos:end="1578:40">env</name><operator pos:start="1578:41" pos:end="1578:42">-&gt;</operator><name pos:start="1578:43" pos:end="1578:53">GetMethodID</name></name><argument_list pos:start="1578:54" pos:end="1578:87">(<argument pos:start="1578:55" pos:end="1578:70"><expr pos:start="1578:55" pos:end="1578:70"><name pos:start="1578:55" pos:end="1578:70">errorCodeExClass</name></expr></argument>,<argument pos:start="1578:72" pos:end="1578:79"><expr pos:start="1578:72" pos:end="1578:79"><literal type="string" pos:start="1578:72" pos:end="1578:79">"&lt;init&gt;"</literal></expr></argument>,<argument pos:start="1578:81" pos:end="1578:86"><expr pos:start="1578:81" pos:end="1578:86"><literal type="string" pos:start="1578:81" pos:end="1578:86">"(I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1579:13" pos:end="1581:13"><if pos:start="1579:13" pos:end="1581:13">if <condition pos:start="1579:16" pos:end="1579:40">(<expr pos:start="1579:17" pos:end="1579:39"><operator pos:start="1579:17" pos:end="1579:17">!</operator><name pos:start="1579:18" pos:end="1579:39">errorCodeExConstructor</name></expr>)</condition><block pos:start="1579:41" pos:end="1581:13">{<block_content pos:start="1580:17" pos:end="1580:25">
                <return pos:start="1580:17" pos:end="1580:25">return <expr pos:start="1580:24" pos:end="1580:24"><literal type="number" pos:start="1580:24" pos:end="1580:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1582:13" pos:end="1582:86"><expr pos:start="1582:13" pos:end="1582:85"><name pos:start="1582:13" pos:end="1582:23">errorCodeEx</name> <operator pos:start="1582:25" pos:end="1582:25">=</operator> <call pos:start="1582:27" pos:end="1582:85"><name pos:start="1582:27" pos:end="1582:40"><name pos:start="1582:27" pos:end="1582:29">env</name><operator pos:start="1582:30" pos:end="1582:31">-&gt;</operator><name pos:start="1582:32" pos:end="1582:40">NewObject</name></name><argument_list pos:start="1582:41" pos:end="1582:85">(<argument pos:start="1582:42" pos:end="1582:57"><expr pos:start="1582:42" pos:end="1582:57"><name pos:start="1582:42" pos:end="1582:57">errorCodeExClass</name></expr></argument>,<argument pos:start="1582:59" pos:end="1582:80"><expr pos:start="1582:59" pos:end="1582:80"><name pos:start="1582:59" pos:end="1582:80">errorCodeExConstructor</name></expr></argument>,<argument pos:start="1582:82" pos:end="1582:84"><expr pos:start="1582:82" pos:end="1582:84"><name pos:start="1582:82" pos:end="1582:84">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1584:13" pos:end="1584:71"><expr pos:start="1584:13" pos:end="1584:70"><name pos:start="1584:13" pos:end="1584:25">socketExClass</name> <operator pos:start="1584:27" pos:end="1584:27">=</operator> <call pos:start="1584:29" pos:end="1584:70"><name pos:start="1584:29" pos:end="1584:42"><name pos:start="1584:29" pos:end="1584:31">env</name><operator pos:start="1584:32" pos:end="1584:33">-&gt;</operator><name pos:start="1584:34" pos:end="1584:42">FindClass</name></name><argument_list pos:start="1584:43" pos:end="1584:70">(<argument pos:start="1584:44" pos:end="1584:69"><expr pos:start="1584:44" pos:end="1584:69"><literal type="string" pos:start="1584:44" pos:end="1584:69">"java/net/SocketException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1585:13" pos:end="1587:13"><if pos:start="1585:13" pos:end="1587:13">if <condition pos:start="1585:16" pos:end="1585:31">(<expr pos:start="1585:17" pos:end="1585:30"><operator pos:start="1585:17" pos:end="1585:17">!</operator><name pos:start="1585:18" pos:end="1585:30">socketExClass</name></expr>)</condition> <block pos:start="1585:33" pos:end="1587:13">{<block_content pos:start="1586:17" pos:end="1586:25">
                <return pos:start="1586:17" pos:end="1586:25">return <expr pos:start="1586:24" pos:end="1586:24"><literal type="number" pos:start="1586:24" pos:end="1586:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1588:13" pos:end="1588:99"><expr pos:start="1588:13" pos:end="1588:98"><name pos:start="1588:13" pos:end="1588:31">socketExConstructor</name> <operator pos:start="1588:33" pos:end="1588:33">=</operator> <call pos:start="1588:35" pos:end="1588:98"><name pos:start="1588:35" pos:end="1588:50"><name pos:start="1588:35" pos:end="1588:37">env</name><operator pos:start="1588:38" pos:end="1588:39">-&gt;</operator><name pos:start="1588:40" pos:end="1588:50">GetMethodID</name></name><argument_list pos:start="1588:51" pos:end="1588:98">(<argument pos:start="1588:52" pos:end="1588:64"><expr pos:start="1588:52" pos:end="1588:64"><name pos:start="1588:52" pos:end="1588:64">socketExClass</name></expr></argument>,<argument pos:start="1588:66" pos:end="1588:73"><expr pos:start="1588:66" pos:end="1588:73"><literal type="string" pos:start="1588:66" pos:end="1588:73">"&lt;init&gt;"</literal></expr></argument>,<argument pos:start="1588:75" pos:end="1588:97"><expr pos:start="1588:75" pos:end="1588:97"><literal type="string" pos:start="1588:75" pos:end="1588:97">"(Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1589:13" pos:end="1591:13"><if pos:start="1589:13" pos:end="1591:13">if <condition pos:start="1589:16" pos:end="1589:37">(<expr pos:start="1589:17" pos:end="1589:36"><operator pos:start="1589:17" pos:end="1589:17">!</operator><name pos:start="1589:18" pos:end="1589:36">socketExConstructor</name></expr>)</condition> <block pos:start="1589:39" pos:end="1591:13">{<block_content pos:start="1590:17" pos:end="1590:25">
                <return pos:start="1590:17" pos:end="1590:25">return <expr pos:start="1590:24" pos:end="1590:24"><literal type="number" pos:start="1590:24" pos:end="1590:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1592:13" pos:end="1592:94"><expr pos:start="1592:13" pos:end="1592:93"><name pos:start="1592:13" pos:end="1592:20">socketEx</name> <operator pos:start="1592:22" pos:end="1592:22">=</operator> <call pos:start="1592:24" pos:end="1592:93"><name pos:start="1592:24" pos:end="1592:37"><name pos:start="1592:24" pos:end="1592:26">env</name><operator pos:start="1592:27" pos:end="1592:28">-&gt;</operator><name pos:start="1592:29" pos:end="1592:37">NewObject</name></name><argument_list pos:start="1592:38" pos:end="1592:93">(<argument pos:start="1592:39" pos:end="1592:51"><expr pos:start="1592:39" pos:end="1592:51"><name pos:start="1592:39" pos:end="1592:51">socketExClass</name></expr></argument>, <argument pos:start="1592:54" pos:end="1592:72"><expr pos:start="1592:54" pos:end="1592:72"><name pos:start="1592:54" pos:end="1592:72">socketExConstructor</name></expr></argument>, <argument pos:start="1592:75" pos:end="1592:92"><expr pos:start="1592:75" pos:end="1592:92"><name pos:start="1592:75" pos:end="1592:92">errorMessageString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt pos:start="1593:13" pos:end="1593:125"><expr pos:start="1593:13" pos:end="1593:124"><name pos:start="1593:13" pos:end="1593:31">socketExCauseMethod</name> <operator pos:start="1593:33" pos:end="1593:33">=</operator> <call pos:start="1593:35" pos:end="1593:124"><name pos:start="1593:35" pos:end="1593:50"><name pos:start="1593:35" pos:end="1593:37">env</name><operator pos:start="1593:38" pos:end="1593:39">-&gt;</operator><name pos:start="1593:40" pos:end="1593:50">GetMethodID</name></name><argument_list pos:start="1593:51" pos:end="1593:124">(<argument pos:start="1593:52" pos:end="1593:64"><expr pos:start="1593:52" pos:end="1593:64"><name pos:start="1593:52" pos:end="1593:64">socketExClass</name></expr></argument>,<argument pos:start="1593:66" pos:end="1593:76"><expr pos:start="1593:66" pos:end="1593:76"><literal type="string" pos:start="1593:66" pos:end="1593:76">"initCause"</literal></expr></argument>,<argument pos:start="1593:78" pos:end="1593:123"><expr pos:start="1593:78" pos:end="1593:123"><literal type="string" pos:start="1593:78" pos:end="1593:123">"(Ljava/lang/Throwable;)Ljava/lang/Throwable;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1594:13" pos:end="1594:76"><expr pos:start="1594:13" pos:end="1594:75"><call pos:start="1594:13" pos:end="1594:75"><name pos:start="1594:13" pos:end="1594:33"><name pos:start="1594:13" pos:end="1594:15">env</name><operator pos:start="1594:16" pos:end="1594:17">-&gt;</operator><name pos:start="1594:18" pos:end="1594:33">CallObjectMethod</name></name><argument_list pos:start="1594:34" pos:end="1594:75">(<argument pos:start="1594:35" pos:end="1594:42"><expr pos:start="1594:35" pos:end="1594:42"><name pos:start="1594:35" pos:end="1594:42">socketEx</name></expr></argument>,<argument pos:start="1594:44" pos:end="1594:62"><expr pos:start="1594:44" pos:end="1594:62"><name pos:start="1594:44" pos:end="1594:62">socketExCauseMethod</name></expr></argument>,<argument pos:start="1594:64" pos:end="1594:74"><expr pos:start="1594:64" pos:end="1594:74"><name pos:start="1594:64" pos:end="1594:74">errorCodeEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1595:13" pos:end="1595:45"><expr pos:start="1595:13" pos:end="1595:44"><call pos:start="1595:13" pos:end="1595:44"><name pos:start="1595:13" pos:end="1595:22"><name pos:start="1595:13" pos:end="1595:15">env</name><operator pos:start="1595:16" pos:end="1595:17">-&gt;</operator><name pos:start="1595:18" pos:end="1595:22">Throw</name></name><argument_list pos:start="1595:23" pos:end="1595:44">(<argument pos:start="1595:24" pos:end="1595:43"><expr pos:start="1595:24" pos:end="1595:43"><operator pos:start="1595:24" pos:end="1595:24">(</operator><name pos:start="1595:25" pos:end="1595:34">jthrowable</name><operator pos:start="1595:35" pos:end="1595:35">)</operator><name pos:start="1595:36" pos:end="1595:43">socketEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1596:13" pos:end="1596:21">return <expr pos:start="1596:20" pos:end="1596:20"><literal type="number" pos:start="1596:20" pos:end="1596:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1598:9" pos:end="1598:39"><expr pos:start="1598:9" pos:end="1598:38"><call pos:start="1598:9" pos:end="1598:38"><name pos:start="1598:9" pos:end="1598:28">throwSocketException</name><argument_list pos:start="1598:29" pos:end="1598:38">(<argument pos:start="1598:30" pos:end="1598:32"><expr pos:start="1598:30" pos:end="1598:32"><name pos:start="1598:30" pos:end="1598:32">env</name></expr></argument>, <argument pos:start="1598:35" pos:end="1598:37"><expr pos:start="1598:35" pos:end="1598:37"><name pos:start="1598:35" pos:end="1598:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1599:9" pos:end="1599:17">return <expr pos:start="1599:16" pos:end="1599:16"><literal type="number" pos:start="1599:16" pos:end="1599:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1602:5" pos:end="1602:35"><expr pos:start="1602:5" pos:end="1602:34"><call pos:start="1602:5" pos:end="1602:34"><name pos:start="1602:5" pos:end="1602:18">add_send_stats</name><argument_list pos:start="1602:19" pos:end="1602:34">(<argument pos:start="1602:20" pos:end="1602:25"><expr pos:start="1602:20" pos:end="1602:25"><name pos:start="1602:20" pos:end="1602:25">handle</name></expr></argument>, <argument pos:start="1602:28" pos:end="1602:33"><expr pos:start="1602:28" pos:end="1602:33"><name pos:start="1602:28" pos:end="1602:33">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1603:5" pos:end="1603:18">return <expr pos:start="1603:12" pos:end="1603:17"><name pos:start="1603:12" pos:end="1603:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1606:1" pos:end="1639:1">extern <literal type="string" pos:start="1606:8" pos:end="1606:10">"C"</literal> <function pos:start="1606:12" pos:end="1639:1"><type pos:start="1606:12" pos:end="1606:15"><name pos:start="1606:12" pos:end="1606:15">jint</name></type> <name pos:start="1606:17" pos:end="1606:74">Java_org_sipdroid_net_impl_OSNetworkSystem_writeSocketImpl</name><parameter_list pos:start="1606:75" pos:end="1607:73">(<parameter pos:start="1606:76" pos:end="1606:86"><decl pos:start="1606:76" pos:end="1606:86"><type pos:start="1606:76" pos:end="1606:86"><name pos:start="1606:76" pos:end="1606:81">JNIEnv</name><modifier pos:start="1606:82" pos:end="1606:82">*</modifier></type> <name pos:start="1606:84" pos:end="1606:86">env</name></decl></parameter>, <parameter pos:start="1606:89" pos:end="1606:100"><decl pos:start="1606:89" pos:end="1606:100"><type pos:start="1606:89" pos:end="1606:100"><name pos:start="1606:89" pos:end="1606:94">jclass</name></type> <name pos:start="1606:96" pos:end="1606:100">clazz</name></decl></parameter>,
        <parameter pos:start="1607:9" pos:end="1607:30"><decl pos:start="1607:9" pos:end="1607:30"><type pos:start="1607:9" pos:end="1607:30"><name pos:start="1607:9" pos:end="1607:15">jobject</name></type> <name pos:start="1607:17" pos:end="1607:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1607:33" pos:end="1607:47"><decl pos:start="1607:33" pos:end="1607:47"><type pos:start="1607:33" pos:end="1607:47"><name pos:start="1607:33" pos:end="1607:42">jbyteArray</name></type> <name pos:start="1607:44" pos:end="1607:47">data</name></decl></parameter>, <parameter pos:start="1607:50" pos:end="1607:60"><decl pos:start="1607:50" pos:end="1607:60"><type pos:start="1607:50" pos:end="1607:60"><name pos:start="1607:50" pos:end="1607:53">jint</name></type> <name pos:start="1607:55" pos:end="1607:60">offset</name></decl></parameter>, <parameter pos:start="1607:63" pos:end="1607:72"><decl pos:start="1607:63" pos:end="1607:72"><type pos:start="1607:63" pos:end="1607:72"><name pos:start="1607:63" pos:end="1607:66">jint</name></type> <name pos:start="1607:68" pos:end="1607:72">count</name></decl></parameter>)</parameter_list> <block pos:start="1607:75" pos:end="1639:1">{<block_content pos:start="1610:5" pos:end="1638:17">
    <comment type="line" pos:start="1608:5" pos:end="1608:37">// LOGD("ENTER writeSocketImpl");</comment>

    <decl_stmt pos:start="1610:5" pos:end="1610:19"><decl pos:start="1610:5" pos:end="1610:18"><type pos:start="1610:5" pos:end="1610:11"><name pos:start="1610:5" pos:end="1610:9">jbyte</name> <modifier pos:start="1610:11" pos:end="1610:11">*</modifier></type><name pos:start="1610:12" pos:end="1610:18">message</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1611:5" pos:end="1611:17"><decl pos:start="1611:5" pos:end="1611:16"><type pos:start="1611:5" pos:end="1611:7"><name pos:start="1611:5" pos:end="1611:7">int</name></type> <name pos:start="1611:9" pos:end="1611:12">sent</name> <init pos:start="1611:14" pos:end="1611:16">= <expr pos:start="1611:16" pos:end="1611:16"><literal type="number" pos:start="1611:16" pos:end="1611:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1612:5" pos:end="1616:0"><decl pos:start="1612:5" pos:end="1612:19"><type pos:start="1612:5" pos:end="1612:8"><name pos:start="1612:5" pos:end="1612:8">jint</name></type> <name pos:start="1612:10" pos:end="1612:15">result</name> <init pos:start="1612:17" pos:end="1612:19">= <expr pos:start="1612:19" pos:end="1612:19"><literal type="number" pos:start="1612:19" pos:end="1612:19">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" pos:start="1614:1" pos:end="1614:25">/* TODO: ARRAY PINNING */</comment>
<cpp:define pos:start="1615:1" pos:end="1615:36">#<cpp:directive pos:start="1615:2" pos:end="1615:7">define</cpp:directive> <cpp:macro pos:start="1615:9" pos:end="1615:32"><name pos:start="1615:9" pos:end="1615:32">INTERNAL_SEND_BUFFER_MAX</name></cpp:macro> <cpp:value pos:start="1615:34" pos:end="1615:36">512</cpp:value></cpp:define>
    <decl_stmt pos:start="1616:5" pos:end="1616:51"><decl pos:start="1616:5" pos:end="1616:50"><type pos:start="1616:5" pos:end="1616:9"><name pos:start="1616:5" pos:end="1616:9">jbyte</name></type> <name pos:start="1616:11" pos:end="1616:50"><name pos:start="1616:11" pos:end="1616:24">internalBuffer</name><index pos:start="1616:25" pos:end="1616:50">[<expr pos:start="1616:26" pos:end="1616:49"><name pos:start="1616:26" pos:end="1616:49">INTERNAL_SEND_BUFFER_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt pos:start="1618:5" pos:end="1627:5"><if pos:start="1618:5" pos:end="1625:5">if <condition pos:start="1618:8" pos:end="1618:41">(<expr pos:start="1618:9" pos:end="1618:40"><name pos:start="1618:9" pos:end="1618:13">count</name> <operator pos:start="1618:15" pos:end="1618:15">&gt;</operator> <name pos:start="1618:17" pos:end="1618:40">INTERNAL_SEND_BUFFER_MAX</name></expr>)</condition> <block pos:start="1618:43" pos:end="1625:5">{<block_content pos:start="1619:9" pos:end="1624:9">
        <expr_stmt pos:start="1619:9" pos:end="1619:57"><expr pos:start="1619:9" pos:end="1619:56"><name pos:start="1619:9" pos:end="1619:15">message</name> <operator pos:start="1619:17" pos:end="1619:17">=</operator> <operator pos:start="1619:19" pos:end="1619:19">(</operator><name pos:start="1619:20" pos:end="1619:24">jbyte</name><operator pos:start="1619:25" pos:end="1619:25">*</operator><operator pos:start="1619:26" pos:end="1619:26">)</operator><call pos:start="1619:27" pos:end="1619:56"><name pos:start="1619:27" pos:end="1619:32">malloc</name><argument_list pos:start="1619:33" pos:end="1619:56">(<argument pos:start="1619:34" pos:end="1619:55"><expr pos:start="1619:34" pos:end="1619:55"><name pos:start="1619:34" pos:end="1619:38">count</name> <operator pos:start="1619:40" pos:end="1619:40">*</operator> <sizeof pos:start="1619:42" pos:end="1619:55">sizeof<argument_list pos:start="1619:48" pos:end="1619:55">( <argument pos:start="1619:50" pos:end="1619:54"><expr pos:start="1619:50" pos:end="1619:54"><name pos:start="1619:50" pos:end="1619:54">jbyte</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1620:9" pos:end="1624:9"><if pos:start="1620:9" pos:end="1624:9">if <condition pos:start="1620:12" pos:end="1620:28">(<expr pos:start="1620:13" pos:end="1620:27"><name pos:start="1620:13" pos:end="1620:19">message</name> <operator pos:start="1620:21" pos:end="1620:22">==</operator> <name pos:start="1620:24" pos:end="1620:27">NULL</name></expr>)</condition> <block pos:start="1620:30" pos:end="1624:9">{<block_content pos:start="1621:13" pos:end="1623:21">
            <expr_stmt pos:start="1621:13" pos:end="1622:71"><expr pos:start="1621:13" pos:end="1622:70"><call pos:start="1621:13" pos:end="1622:70"><name pos:start="1621:13" pos:end="1621:29">jniThrowException</name><argument_list pos:start="1621:30" pos:end="1622:70">(<argument pos:start="1621:31" pos:end="1621:33"><expr pos:start="1621:31" pos:end="1621:33"><name pos:start="1621:31" pos:end="1621:33">env</name></expr></argument>, <argument pos:start="1621:36" pos:end="1621:63"><expr pos:start="1621:36" pos:end="1621:63"><literal type="string" pos:start="1621:36" pos:end="1621:63">"java/lang/OutOfMemoryError"</literal></expr></argument>,
                    <argument pos:start="1622:21" pos:end="1622:69"><expr pos:start="1622:21" pos:end="1622:69"><literal type="string" pos:start="1622:21" pos:end="1622:69">"couldn't allocate enough memory for writeSocket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1623:13" pos:end="1623:21">return <expr pos:start="1623:20" pos:end="1623:20"><literal type="number" pos:start="1623:20" pos:end="1623:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="1625:7" pos:end="1627:5">else <block pos:start="1625:12" pos:end="1627:5">{<block_content pos:start="1626:9" pos:end="1626:42">
        <expr_stmt pos:start="1626:9" pos:end="1626:42"><expr pos:start="1626:9" pos:end="1626:41"><name pos:start="1626:9" pos:end="1626:15">message</name> <operator pos:start="1626:17" pos:end="1626:17">=</operator> <operator pos:start="1626:19" pos:end="1626:19">(</operator><name pos:start="1626:20" pos:end="1626:24">jbyte</name> <operator pos:start="1626:26" pos:end="1626:26">*</operator><operator pos:start="1626:27" pos:end="1626:27">)</operator><name pos:start="1626:28" pos:end="1626:41">internalBuffer</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="1629:5" pos:end="1629:58"><expr pos:start="1629:5" pos:end="1629:57"><call pos:start="1629:5" pos:end="1629:57"><name pos:start="1629:5" pos:end="1629:27"><name pos:start="1629:5" pos:end="1629:7">env</name><operator pos:start="1629:8" pos:end="1629:9">-&gt;</operator><name pos:start="1629:10" pos:end="1629:27">GetByteArrayRegion</name></name><argument_list pos:start="1629:28" pos:end="1629:57">(<argument pos:start="1629:29" pos:end="1629:32"><expr pos:start="1629:29" pos:end="1629:32"><name pos:start="1629:29" pos:end="1629:32">data</name></expr></argument>, <argument pos:start="1629:35" pos:end="1629:40"><expr pos:start="1629:35" pos:end="1629:40"><name pos:start="1629:35" pos:end="1629:40">offset</name></expr></argument>, <argument pos:start="1629:43" pos:end="1629:47"><expr pos:start="1629:43" pos:end="1629:47"><name pos:start="1629:43" pos:end="1629:47">count</name></expr></argument>, <argument pos:start="1629:50" pos:end="1629:56"><expr pos:start="1629:50" pos:end="1629:56"><name pos:start="1629:50" pos:end="1629:56">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1631:5" pos:end="1632:43"><expr pos:start="1631:5" pos:end="1632:42"><name pos:start="1631:5" pos:end="1631:10">result</name> <operator pos:start="1631:12" pos:end="1631:12">=</operator> <call pos:start="1631:14" pos:end="1632:42"><name pos:start="1631:14" pos:end="1631:77">Java_org_sipdroid_net_impl_OSNetworkSystem_writeSocketDirectImpl</name><argument_list pos:start="1631:78" pos:end="1632:42">(<argument pos:start="1631:79" pos:end="1631:81"><expr pos:start="1631:79" pos:end="1631:81"><name pos:start="1631:79" pos:end="1631:81">env</name></expr></argument>, <argument pos:start="1631:84" pos:end="1631:88"><expr pos:start="1631:84" pos:end="1631:88"><name pos:start="1631:84" pos:end="1631:88">clazz</name></expr></argument>, <argument pos:start="1631:91" pos:end="1631:104"><expr pos:start="1631:91" pos:end="1631:104"><name pos:start="1631:91" pos:end="1631:104">fileDescriptor</name></expr></argument>,
            <argument pos:start="1632:13" pos:end="1632:26"><expr pos:start="1632:13" pos:end="1632:26"><operator pos:start="1632:13" pos:end="1632:13">(</operator><name pos:start="1632:14" pos:end="1632:17">jint</name><operator pos:start="1632:18" pos:end="1632:18">)</operator> <name pos:start="1632:20" pos:end="1632:26">message</name></expr></argument>, <argument pos:start="1632:29" pos:end="1632:34"><expr pos:start="1632:29" pos:end="1632:34"><name pos:start="1632:29" pos:end="1632:34">offset</name></expr></argument>, <argument pos:start="1632:37" pos:end="1632:41"><expr pos:start="1632:37" pos:end="1632:41"><name pos:start="1632:37" pos:end="1632:41">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1634:5" pos:end="1638:0"><if pos:start="1634:5" pos:end="1638:0">if <condition pos:start="1634:8" pos:end="1634:44">(<expr pos:start="1634:9" pos:end="1634:43"><operator pos:start="1634:9" pos:end="1634:9">(</operator> <name pos:start="1634:11" pos:end="1634:15">jbyte</name> <operator pos:start="1634:17" pos:end="1634:17">*</operator><operator pos:start="1634:18" pos:end="1634:18">)</operator><name pos:start="1634:19" pos:end="1634:25">message</name> <operator pos:start="1634:27" pos:end="1634:28">!=</operator> <name pos:start="1634:30" pos:end="1634:43">internalBuffer</name></expr>)</condition> <block pos:start="1634:46" pos:end="1638:0">{<block_content pos:start="1635:7" pos:end="1635:30">
      <expr_stmt pos:start="1635:7" pos:end="1635:30"><expr pos:start="1635:7" pos:end="1635:29"><call pos:start="1635:7" pos:end="1635:29"><name pos:start="1635:7" pos:end="1635:10">free</name><argument_list pos:start="1635:11" pos:end="1635:29">(<argument pos:start="1635:12" pos:end="1635:28"><expr pos:start="1635:12" pos:end="1635:28"><operator pos:start="1635:12" pos:end="1635:12">(</operator> <name pos:start="1635:14" pos:end="1635:18">jbyte</name> <operator pos:start="1635:20" pos:end="1635:20">*</operator><operator pos:start="1635:21" pos:end="1635:21">)</operator><name pos:start="1635:22" pos:end="1635:28">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:undef pos:start="1637:1" pos:end="1637:31">#<cpp:directive pos:start="1637:2" pos:end="1637:6">undef</cpp:directive> <name pos:start="1637:8" pos:end="1637:31">INTERNAL_SEND_BUFFER_MAX</name></cpp:undef>
   <return pos:start="1638:4" pos:end="1638:17">return <expr pos:start="1638:11" pos:end="1638:16"><name pos:start="1638:11" pos:end="1638:16">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1641:1" pos:end="1662:1">extern <literal type="string" pos:start="1641:8" pos:end="1641:10">"C"</literal> <function pos:start="1641:12" pos:end="1662:1"><type pos:start="1641:12" pos:end="1641:15"><name pos:start="1641:12" pos:end="1641:15">void</name></type> <name pos:start="1641:17" pos:end="1641:77">Java_org_sipdroid_net_impl_OSNetworkSystem_setNonBlockingImpl</name><parameter_list pos:start="1641:78" pos:end="1642:53">(<parameter pos:start="1641:79" pos:end="1641:89"><decl pos:start="1641:79" pos:end="1641:89"><type pos:start="1641:79" pos:end="1641:89"><name pos:start="1641:79" pos:end="1641:84">JNIEnv</name><modifier pos:start="1641:85" pos:end="1641:85">*</modifier></type> <name pos:start="1641:87" pos:end="1641:89">env</name></decl></parameter>, <parameter pos:start="1641:92" pos:end="1641:103"><decl pos:start="1641:92" pos:end="1641:103"><type pos:start="1641:92" pos:end="1641:103"><name pos:start="1641:92" pos:end="1641:97">jclass</name></type> <name pos:start="1641:99" pos:end="1641:103">clazz</name></decl></parameter>,
        <parameter pos:start="1642:9" pos:end="1642:30"><decl pos:start="1642:9" pos:end="1642:30"><type pos:start="1642:9" pos:end="1642:30"><name pos:start="1642:9" pos:end="1642:15">jobject</name></type> <name pos:start="1642:17" pos:end="1642:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1642:33" pos:end="1642:52"><decl pos:start="1642:33" pos:end="1642:52"><type pos:start="1642:33" pos:end="1642:52"><name pos:start="1642:33" pos:end="1642:40">jboolean</name></type> <name pos:start="1642:42" pos:end="1642:52">nonblocking</name></decl></parameter>)</parameter_list> <block pos:start="1642:55" pos:end="1662:1">{<block_content pos:start="1645:5" pos:end="1661:5">
    <comment type="line" pos:start="1643:5" pos:end="1643:40">// LOGD("ENTER setNonBlockingImpl");</comment>

    <decl_stmt pos:start="1645:5" pos:end="1645:15"><decl pos:start="1645:5" pos:end="1645:14"><type pos:start="1645:5" pos:end="1645:7"><name pos:start="1645:5" pos:end="1645:7">int</name></type> <name pos:start="1645:9" pos:end="1645:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1646:5" pos:end="1646:15"><decl pos:start="1646:5" pos:end="1646:14"><type pos:start="1646:5" pos:end="1646:7"><name pos:start="1646:5" pos:end="1646:7">int</name></type> <name pos:start="1646:9" pos:end="1646:14">result</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1648:5" pos:end="1648:61"><expr pos:start="1648:5" pos:end="1648:60"><name pos:start="1648:5" pos:end="1648:10">handle</name> <operator pos:start="1648:12" pos:end="1648:12">=</operator> <call pos:start="1648:14" pos:end="1648:60"><name pos:start="1648:14" pos:end="1648:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1648:40" pos:end="1648:60">(<argument pos:start="1648:41" pos:end="1648:43"><expr pos:start="1648:41" pos:end="1648:43"><name pos:start="1648:41" pos:end="1648:43">env</name></expr></argument>, <argument pos:start="1648:46" pos:end="1648:59"><expr pos:start="1648:46" pos:end="1648:59"><name pos:start="1648:46" pos:end="1648:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1650:5" pos:end="1653:5"><if pos:start="1650:5" pos:end="1653:5">if <condition pos:start="1650:8" pos:end="1650:36">(<expr pos:start="1650:9" pos:end="1650:35"><name pos:start="1650:9" pos:end="1650:14">handle</name> <operator pos:start="1650:16" pos:end="1650:17">==</operator> <literal type="number" pos:start="1650:19" pos:end="1650:19">0</literal> <operator pos:start="1650:21" pos:end="1650:22">||</operator> <name pos:start="1650:24" pos:end="1650:29">handle</name> <operator pos:start="1650:31" pos:end="1650:32">==</operator> <operator pos:start="1650:34" pos:end="1650:34">-</operator><literal type="number" pos:start="1650:35" pos:end="1650:35">1</literal></expr>)</condition> <block pos:start="1650:38" pos:end="1653:5">{<block_content pos:start="1651:9" pos:end="1652:15">
        <expr_stmt pos:start="1651:9" pos:end="1651:53"><expr pos:start="1651:9" pos:end="1651:52"><call pos:start="1651:9" pos:end="1651:52"><name pos:start="1651:9" pos:end="1651:28">throwSocketException</name><argument_list pos:start="1651:29" pos:end="1651:52">(<argument pos:start="1651:30" pos:end="1651:32"><expr pos:start="1651:30" pos:end="1651:32"><name pos:start="1651:30" pos:end="1651:32">env</name></expr></argument>, <argument pos:start="1651:35" pos:end="1651:51"><expr pos:start="1651:35" pos:end="1651:51"><name pos:start="1651:35" pos:end="1651:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1652:9" pos:end="1652:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1655:5" pos:end="1655:28"><decl pos:start="1655:5" pos:end="1655:27"><type pos:start="1655:5" pos:end="1655:7"><name pos:start="1655:5" pos:end="1655:7">int</name></type> <name pos:start="1655:9" pos:end="1655:13">block</name> <init pos:start="1655:15" pos:end="1655:27">= <expr pos:start="1655:17" pos:end="1655:27"><name pos:start="1655:17" pos:end="1655:27">nonblocking</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1657:5" pos:end="1657:44"><expr pos:start="1657:5" pos:end="1657:43"><name pos:start="1657:5" pos:end="1657:10">result</name> <operator pos:start="1657:12" pos:end="1657:12">=</operator> <call pos:start="1657:14" pos:end="1657:43"><name pos:start="1657:14" pos:end="1657:18">ioctl</name><argument_list pos:start="1657:19" pos:end="1657:43">(<argument pos:start="1657:20" pos:end="1657:25"><expr pos:start="1657:20" pos:end="1657:25"><name pos:start="1657:20" pos:end="1657:25">handle</name></expr></argument>, <argument pos:start="1657:28" pos:end="1657:34"><expr pos:start="1657:28" pos:end="1657:34"><name pos:start="1657:28" pos:end="1657:34">FIONBIO</name></expr></argument>, <argument pos:start="1657:37" pos:end="1657:42"><expr pos:start="1657:37" pos:end="1657:42"><operator pos:start="1657:37" pos:end="1657:37">&amp;</operator><name pos:start="1657:38" pos:end="1657:42">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1659:5" pos:end="1661:5"><if pos:start="1659:5" pos:end="1661:5">if <condition pos:start="1659:8" pos:end="1659:21">(<expr pos:start="1659:9" pos:end="1659:20"><name pos:start="1659:9" pos:end="1659:14">result</name> <operator pos:start="1659:16" pos:end="1659:17">==</operator> <operator pos:start="1659:19" pos:end="1659:19">-</operator><literal type="number" pos:start="1659:20" pos:end="1659:20">1</literal></expr>)</condition> <block pos:start="1659:23" pos:end="1661:5">{<block_content pos:start="1660:9" pos:end="1660:55">
        <expr_stmt pos:start="1660:9" pos:end="1660:55"><expr pos:start="1660:9" pos:end="1660:54"><call pos:start="1660:9" pos:end="1660:54"><name pos:start="1660:9" pos:end="1660:28">throwSocketException</name><argument_list pos:start="1660:29" pos:end="1660:54">(<argument pos:start="1660:30" pos:end="1660:32"><expr pos:start="1660:30" pos:end="1660:32"><name pos:start="1660:30" pos:end="1660:32">env</name></expr></argument>, <argument pos:start="1660:35" pos:end="1660:53"><expr pos:start="1660:35" pos:end="1660:53"><call pos:start="1660:35" pos:end="1660:53"><name pos:start="1660:35" pos:end="1660:46">convertError</name><argument_list pos:start="1660:47" pos:end="1660:53">(<argument pos:start="1660:48" pos:end="1660:52"><expr pos:start="1660:48" pos:end="1660:52"><name pos:start="1660:48" pos:end="1660:52">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="1664:1" pos:end="1665:80">extern <literal type="string" pos:start="1664:8" pos:end="1664:10">"C"</literal> <function_decl pos:start="1664:12" pos:end="1665:80"><type pos:start="1664:12" pos:end="1664:15"><name pos:start="1664:12" pos:end="1664:15">jint</name></type> <name pos:start="1664:17" pos:end="1664:76">Java_org_sipdroid_net_impl_OSNetworkSystem_connectSocketImpl</name><parameter_list pos:start="1664:77" pos:end="1665:79">(<parameter pos:start="1664:78" pos:end="1664:88"><decl pos:start="1664:78" pos:end="1664:88"><type pos:start="1664:78" pos:end="1664:88"><name pos:start="1664:78" pos:end="1664:83">JNIEnv</name><modifier pos:start="1664:84" pos:end="1664:84">*</modifier></type> <name pos:start="1664:86" pos:end="1664:88">env</name></decl></parameter>, <parameter pos:start="1664:91" pos:end="1664:102"><decl pos:start="1664:91" pos:end="1664:102"><type pos:start="1664:91" pos:end="1664:102"><name pos:start="1664:91" pos:end="1664:96">jclass</name></type> <name pos:start="1664:98" pos:end="1664:102">clazz</name></decl></parameter>,
        <parameter pos:start="1665:9" pos:end="1665:30"><decl pos:start="1665:9" pos:end="1665:30"><type pos:start="1665:9" pos:end="1665:30"><name pos:start="1665:9" pos:end="1665:15">jobject</name></type> <name pos:start="1665:17" pos:end="1665:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1665:33" pos:end="1665:49"><decl pos:start="1665:33" pos:end="1665:49"><type pos:start="1665:33" pos:end="1665:49"><name pos:start="1665:33" pos:end="1665:36">jint</name></type> <name pos:start="1665:38" pos:end="1665:49">trafficClass</name></decl></parameter>, <parameter pos:start="1665:52" pos:end="1665:67"><decl pos:start="1665:52" pos:end="1665:67"><type pos:start="1665:52" pos:end="1665:67"><name pos:start="1665:52" pos:end="1665:58">jobject</name></type> <name pos:start="1665:60" pos:end="1665:67">inetAddr</name></decl></parameter>, <parameter pos:start="1665:70" pos:end="1665:78"><decl pos:start="1665:70" pos:end="1665:78"><type pos:start="1665:70" pos:end="1665:78"><name pos:start="1665:70" pos:end="1665:73">jint</name></type> <name pos:start="1665:75" pos:end="1665:78">port</name></decl></parameter>)</parameter_list>;</function_decl></extern>

<extern pos:start="1667:1" pos:end="1735:1">extern <literal type="string" pos:start="1667:8" pos:end="1667:10">"C"</literal> <function pos:start="1667:12" pos:end="1735:1"><type pos:start="1667:12" pos:end="1667:15"><name pos:start="1667:12" pos:end="1667:15">jint</name></type> <name pos:start="1667:17" pos:end="1667:87">Java_org_sipdroid_net_impl_OSNetworkSystem_connectWithTimeoutSocketImpl</name><parameter_list pos:start="1667:88" pos:end="1669:71">(<parameter pos:start="1667:89" pos:end="1667:99"><decl pos:start="1667:89" pos:end="1667:99"><type pos:start="1667:89" pos:end="1667:99"><name pos:start="1667:89" pos:end="1667:94">JNIEnv</name><modifier pos:start="1667:95" pos:end="1667:95">*</modifier></type> <name pos:start="1667:97" pos:end="1667:99">env</name></decl></parameter>,
        <parameter pos:start="1668:9" pos:end="1668:20"><decl pos:start="1668:9" pos:end="1668:20"><type pos:start="1668:9" pos:end="1668:20"><name pos:start="1668:9" pos:end="1668:14">jclass</name></type> <name pos:start="1668:16" pos:end="1668:20">clazz</name></decl></parameter>, <parameter pos:start="1668:23" pos:end="1668:44"><decl pos:start="1668:23" pos:end="1668:44"><type pos:start="1668:23" pos:end="1668:44"><name pos:start="1668:23" pos:end="1668:29">jobject</name></type> <name pos:start="1668:31" pos:end="1668:44">fileDescriptor</name></decl></parameter>, <parameter pos:start="1668:47" pos:end="1668:58"><decl pos:start="1668:47" pos:end="1668:58"><type pos:start="1668:47" pos:end="1668:58"><name pos:start="1668:47" pos:end="1668:50">jint</name></type> <name pos:start="1668:52" pos:end="1668:58">timeout</name></decl></parameter>, <parameter pos:start="1668:61" pos:end="1668:77"><decl pos:start="1668:61" pos:end="1668:77"><type pos:start="1668:61" pos:end="1668:77"><name pos:start="1668:61" pos:end="1668:64">jint</name></type> <name pos:start="1668:66" pos:end="1668:77">trafficClass</name></decl></parameter>,
        <parameter pos:start="1669:9" pos:end="1669:24"><decl pos:start="1669:9" pos:end="1669:24"><type pos:start="1669:9" pos:end="1669:24"><name pos:start="1669:9" pos:end="1669:15">jobject</name></type> <name pos:start="1669:17" pos:end="1669:24">inetAddr</name></decl></parameter>, <parameter pos:start="1669:27" pos:end="1669:35"><decl pos:start="1669:27" pos:end="1669:35"><type pos:start="1669:27" pos:end="1669:35"><name pos:start="1669:27" pos:end="1669:30">jint</name></type> <name pos:start="1669:32" pos:end="1669:35">port</name></decl></parameter>, <parameter pos:start="1669:38" pos:end="1669:46"><decl pos:start="1669:38" pos:end="1669:46"><type pos:start="1669:38" pos:end="1669:46"><name pos:start="1669:38" pos:end="1669:41">jint</name></type> <name pos:start="1669:43" pos:end="1669:46">step</name></decl></parameter>, <parameter pos:start="1669:49" pos:end="1669:70"><decl pos:start="1669:49" pos:end="1669:70"><type pos:start="1669:49" pos:end="1669:70"><name pos:start="1669:49" pos:end="1669:58">jbyteArray</name></type> <name pos:start="1669:60" pos:end="1669:70">passContext</name></decl></parameter>)</parameter_list> <block pos:start="1669:73" pos:end="1735:1">{<block_content pos:start="1672:5" pos:end="1734:18">
    <comment type="line" pos:start="1670:5" pos:end="1670:50">// LOGD("ENTER connectWithTimeoutSocketImpl");</comment>

    <decl_stmt pos:start="1672:5" pos:end="1672:15"><decl pos:start="1672:5" pos:end="1672:14"><type pos:start="1672:5" pos:end="1672:7"><name pos:start="1672:5" pos:end="1672:7">int</name></type> <name pos:start="1672:9" pos:end="1672:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1673:5" pos:end="1673:19"><decl pos:start="1673:5" pos:end="1673:18"><type pos:start="1673:5" pos:end="1673:7"><name pos:start="1673:5" pos:end="1673:7">int</name></type> <name pos:start="1673:9" pos:end="1673:14">result</name> <init pos:start="1673:16" pos:end="1673:18">= <expr pos:start="1673:18" pos:end="1673:18"><literal type="number" pos:start="1673:18" pos:end="1673:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1674:5" pos:end="1674:31"><decl pos:start="1674:5" pos:end="1674:30"><type pos:start="1674:5" pos:end="1674:22"><name pos:start="1674:5" pos:end="1674:22"><name pos:start="1674:5" pos:end="1674:10">struct</name> <name pos:start="1674:12" pos:end="1674:22">sockaddr_in</name></name></type> <name pos:start="1674:24" pos:end="1674:30">address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1675:5" pos:end="1675:26"><decl pos:start="1675:5" pos:end="1675:25"><type pos:start="1675:5" pos:end="1675:11"><name pos:start="1675:5" pos:end="1675:9">jbyte</name> <modifier pos:start="1675:11" pos:end="1675:11">*</modifier></type><name pos:start="1675:12" pos:end="1675:18">context</name> <init pos:start="1675:20" pos:end="1675:25">= <expr pos:start="1675:22" pos:end="1675:25"><name pos:start="1675:22" pos:end="1675:25">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1677:5" pos:end="1677:41"><expr pos:start="1677:5" pos:end="1677:40"><call pos:start="1677:5" pos:end="1677:40"><name pos:start="1677:5" pos:end="1677:10">memset</name><argument_list pos:start="1677:11" pos:end="1677:40">(<argument pos:start="1677:12" pos:end="1677:19"><expr pos:start="1677:12" pos:end="1677:19"><operator pos:start="1677:12" pos:end="1677:12">&amp;</operator><name pos:start="1677:13" pos:end="1677:19">address</name></expr></argument>, <argument pos:start="1677:22" pos:end="1677:22"><expr pos:start="1677:22" pos:end="1677:22"><literal type="number" pos:start="1677:22" pos:end="1677:22">0</literal></expr></argument>, <argument pos:start="1677:25" pos:end="1677:39"><expr pos:start="1677:25" pos:end="1677:39"><sizeof pos:start="1677:25" pos:end="1677:39">sizeof<argument_list pos:start="1677:31" pos:end="1677:39">(<argument pos:start="1677:32" pos:end="1677:38"><expr pos:start="1677:32" pos:end="1677:38"><name pos:start="1677:32" pos:end="1677:38">address</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1679:5" pos:end="1679:33"><expr pos:start="1679:5" pos:end="1679:32"><name pos:start="1679:5" pos:end="1679:22"><name pos:start="1679:5" pos:end="1679:11">address</name><operator pos:start="1679:12" pos:end="1679:12">.</operator><name pos:start="1679:13" pos:end="1679:22">sin_family</name></name> <operator pos:start="1679:24" pos:end="1679:24">=</operator> <name pos:start="1679:26" pos:end="1679:32">AF_INET</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1681:5" pos:end="1682:45"><expr pos:start="1681:5" pos:end="1682:44"><name pos:start="1681:5" pos:end="1681:10">result</name> <operator pos:start="1681:12" pos:end="1681:12">=</operator> <call pos:start="1681:14" pos:end="1682:44"><name pos:start="1681:14" pos:end="1681:39">inetAddressToSocketAddress</name><argument_list pos:start="1681:40" pos:end="1682:44">(<argument pos:start="1681:41" pos:end="1681:43"><expr pos:start="1681:41" pos:end="1681:43"><name pos:start="1681:41" pos:end="1681:43">env</name></expr></argument>, <argument pos:start="1681:46" pos:end="1681:53"><expr pos:start="1681:46" pos:end="1681:53"><name pos:start="1681:46" pos:end="1681:53">inetAddr</name></expr></argument>, <argument pos:start="1681:56" pos:end="1681:59"><expr pos:start="1681:56" pos:end="1681:59"><name pos:start="1681:56" pos:end="1681:59">port</name></expr></argument>,
            <argument pos:start="1682:13" pos:end="1682:43"><expr pos:start="1682:13" pos:end="1682:43"><operator pos:start="1682:13" pos:end="1682:13">(</operator>struct <name pos:start="1682:21" pos:end="1682:31">sockaddr_in</name> <operator pos:start="1682:33" pos:end="1682:33">*</operator><operator pos:start="1682:34" pos:end="1682:34">)</operator> <operator pos:start="1682:36" pos:end="1682:36">&amp;</operator><name pos:start="1682:37" pos:end="1682:43">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1684:5" pos:end="1687:5"><if pos:start="1684:5" pos:end="1687:5">if <condition pos:start="1684:8" pos:end="1684:19">(<expr pos:start="1684:9" pos:end="1684:18"><name pos:start="1684:9" pos:end="1684:14">result</name> <operator pos:start="1684:16" pos:end="1684:16">&lt;</operator> <literal type="number" pos:start="1684:18" pos:end="1684:18">0</literal></expr>)</condition> <block pos:start="1684:21" pos:end="1687:5">{<block_content pos:start="1685:9" pos:end="1686:22">
        <expr_stmt pos:start="1685:9" pos:end="1685:53"><expr pos:start="1685:9" pos:end="1685:52"><call pos:start="1685:9" pos:end="1685:52"><name pos:start="1685:9" pos:end="1685:28">throwSocketException</name><argument_list pos:start="1685:29" pos:end="1685:52">(<argument pos:start="1685:30" pos:end="1685:32"><expr pos:start="1685:30" pos:end="1685:32"><name pos:start="1685:30" pos:end="1685:32">env</name></expr></argument>, <argument pos:start="1685:35" pos:end="1685:51"><expr pos:start="1685:35" pos:end="1685:51"><name pos:start="1685:35" pos:end="1685:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1686:9" pos:end="1686:22">return <expr pos:start="1686:16" pos:end="1686:21"><name pos:start="1686:16" pos:end="1686:21">result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="1689:5" pos:end="1689:75">// Check if we're using adb networking and redirect in case it is used.</comment>
    <if_stmt pos:start="1690:5" pos:end="1693:5"><if pos:start="1690:5" pos:end="1693:5">if <condition pos:start="1690:8" pos:end="1690:51">(<expr pos:start="1690:9" pos:end="1690:50"><name pos:start="1690:9" pos:end="1690:24">useAdbNetworking</name> <operator pos:start="1690:26" pos:end="1690:27">&amp;&amp;</operator> <operator pos:start="1690:29" pos:end="1690:29">!</operator><call pos:start="1690:30" pos:end="1690:50"><name pos:start="1690:30" pos:end="1690:40">isLocalhost</name><argument_list pos:start="1690:41" pos:end="1690:50">(<argument pos:start="1690:42" pos:end="1690:49"><expr pos:start="1690:42" pos:end="1690:49"><operator pos:start="1690:42" pos:end="1690:42">&amp;</operator><name pos:start="1690:43" pos:end="1690:49">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1690:53" pos:end="1693:5">{<block_content pos:start="1691:9" pos:end="1692:46">
        <return pos:start="1691:9" pos:end="1692:46">return <expr pos:start="1691:16" pos:end="1692:45"><call pos:start="1691:16" pos:end="1692:45"><name pos:start="1691:16" pos:end="1691:75">Java_org_sipdroid_net_impl_OSNetworkSystem_connectSocketImpl</name><argument_list pos:start="1691:76" pos:end="1692:45">(<argument pos:start="1691:77" pos:end="1691:79"><expr pos:start="1691:77" pos:end="1691:79"><name pos:start="1691:77" pos:end="1691:79">env</name></expr></argument>, <argument pos:start="1691:82" pos:end="1691:86"><expr pos:start="1691:82" pos:end="1691:86"><name pos:start="1691:82" pos:end="1691:86">clazz</name></expr></argument>, <argument pos:start="1691:89" pos:end="1691:102"><expr pos:start="1691:89" pos:end="1691:102"><name pos:start="1691:89" pos:end="1691:102">fileDescriptor</name></expr></argument>,
                <argument pos:start="1692:17" pos:end="1692:28"><expr pos:start="1692:17" pos:end="1692:28"><name pos:start="1692:17" pos:end="1692:28">trafficClass</name></expr></argument>, <argument pos:start="1692:31" pos:end="1692:38"><expr pos:start="1692:31" pos:end="1692:38"><name pos:start="1692:31" pos:end="1692:38">inetAddr</name></expr></argument>, <argument pos:start="1692:41" pos:end="1692:44"><expr pos:start="1692:41" pos:end="1692:44"><name pos:start="1692:41" pos:end="1692:44">port</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1695:5" pos:end="1695:61"><expr pos:start="1695:5" pos:end="1695:60"><name pos:start="1695:5" pos:end="1695:10">handle</name> <operator pos:start="1695:12" pos:end="1695:12">=</operator> <call pos:start="1695:14" pos:end="1695:60"><name pos:start="1695:14" pos:end="1695:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1695:40" pos:end="1695:60">(<argument pos:start="1695:41" pos:end="1695:43"><expr pos:start="1695:41" pos:end="1695:43"><name pos:start="1695:41" pos:end="1695:43">env</name></expr></argument>, <argument pos:start="1695:46" pos:end="1695:59"><expr pos:start="1695:46" pos:end="1695:59"><name pos:start="1695:46" pos:end="1695:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1697:5" pos:end="1700:5"><if pos:start="1697:5" pos:end="1700:5">if <condition pos:start="1697:8" pos:end="1697:36">(<expr pos:start="1697:9" pos:end="1697:35"><name pos:start="1697:9" pos:end="1697:14">handle</name> <operator pos:start="1697:16" pos:end="1697:17">==</operator> <literal type="number" pos:start="1697:19" pos:end="1697:19">0</literal> <operator pos:start="1697:21" pos:end="1697:22">||</operator> <name pos:start="1697:24" pos:end="1697:29">handle</name> <operator pos:start="1697:31" pos:end="1697:32">==</operator> <operator pos:start="1697:34" pos:end="1697:34">-</operator><literal type="number" pos:start="1697:35" pos:end="1697:35">1</literal></expr>)</condition> <block pos:start="1697:38" pos:end="1700:5">{<block_content pos:start="1698:9" pos:end="1699:18">
        <expr_stmt pos:start="1698:9" pos:end="1698:53"><expr pos:start="1698:9" pos:end="1698:52"><call pos:start="1698:9" pos:end="1698:52"><name pos:start="1698:9" pos:end="1698:28">throwSocketException</name><argument_list pos:start="1698:29" pos:end="1698:52">(<argument pos:start="1698:30" pos:end="1698:32"><expr pos:start="1698:30" pos:end="1698:32"><name pos:start="1698:30" pos:end="1698:32">env</name></expr></argument>, <argument pos:start="1698:35" pos:end="1698:51"><expr pos:start="1698:35" pos:end="1698:51"><name pos:start="1698:35" pos:end="1698:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1699:9" pos:end="1699:18">return <expr pos:start="1699:16" pos:end="1699:17"><operator pos:start="1699:16" pos:end="1699:16">-</operator><literal type="number" pos:start="1699:17" pos:end="1699:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1702:5" pos:end="1702:35"><expr pos:start="1702:5" pos:end="1702:34"><name pos:start="1702:5" pos:end="1702:20"><name pos:start="1702:5" pos:end="1702:11">address</name><operator pos:start="1702:12" pos:end="1702:12">.</operator><name pos:start="1702:13" pos:end="1702:20">sin_port</name></name> <operator pos:start="1702:22" pos:end="1702:22">=</operator> <call pos:start="1702:24" pos:end="1702:34"><name pos:start="1702:24" pos:end="1702:28">htons</name><argument_list pos:start="1702:29" pos:end="1702:34">(<argument pos:start="1702:30" pos:end="1702:33"><expr pos:start="1702:30" pos:end="1702:33"><name pos:start="1702:30" pos:end="1702:33">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1704:5" pos:end="1704:73"><expr pos:start="1704:5" pos:end="1704:72"><name pos:start="1704:5" pos:end="1704:11">context</name> <operator pos:start="1704:13" pos:end="1704:13">=</operator> <operator pos:start="1704:15" pos:end="1704:15">(</operator><name pos:start="1704:16" pos:end="1704:20">jbyte</name> <operator pos:start="1704:22" pos:end="1704:22">*</operator><operator pos:start="1704:23" pos:end="1704:23">)</operator><call pos:start="1704:24" pos:end="1704:72"><name pos:start="1704:24" pos:end="1704:53"><name pos:start="1704:24" pos:end="1704:26">env</name><operator pos:start="1704:27" pos:end="1704:28">-&gt;</operator><name pos:start="1704:29" pos:end="1704:53">GetPrimitiveArrayCritical</name></name><argument_list pos:start="1704:54" pos:end="1704:72">(<argument pos:start="1704:55" pos:end="1704:65"><expr pos:start="1704:55" pos:end="1704:65"><name pos:start="1704:55" pos:end="1704:65">passContext</name></expr></argument>, <argument pos:start="1704:68" pos:end="1704:71"><expr pos:start="1704:68" pos:end="1704:71"><name pos:start="1704:68" pos:end="1704:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="1706:5" pos:end="1715:5">switch <condition pos:start="1706:12" pos:end="1706:17">(<expr pos:start="1706:13" pos:end="1706:16"><name pos:start="1706:13" pos:end="1706:16">step</name></expr>)</condition> <block pos:start="1706:19" pos:end="1715:5">{<block_content pos:start="1707:9" pos:end="1714:18">
        <case pos:start="1707:9" pos:end="1707:39">case <expr pos:start="1707:14" pos:end="1707:38"><name pos:start="1707:14" pos:end="1707:38">SOCKET_CONNECT_STEP_START</name></expr>:</case>
            <expr_stmt pos:start="1708:13" pos:end="1709:48"><expr pos:start="1708:13" pos:end="1709:47"><name pos:start="1708:13" pos:end="1708:18">result</name> <operator pos:start="1708:20" pos:end="1708:20">=</operator> <call pos:start="1708:22" pos:end="1709:47"><name pos:start="1708:22" pos:end="1708:43">sockConnectWithTimeout</name><argument_list pos:start="1708:44" pos:end="1709:47">(<argument pos:start="1708:45" pos:end="1708:50"><expr pos:start="1708:45" pos:end="1708:50"><name pos:start="1708:45" pos:end="1708:50">handle</name></expr></argument>, <argument pos:start="1708:53" pos:end="1708:59"><expr pos:start="1708:53" pos:end="1708:59"><name pos:start="1708:53" pos:end="1708:59">address</name></expr></argument>, <argument pos:start="1708:62" pos:end="1708:62"><expr pos:start="1708:62" pos:end="1708:62"><literal type="number" pos:start="1708:62" pos:end="1708:62">0</literal></expr></argument>,
                    <argument pos:start="1709:21" pos:end="1709:37"><expr pos:start="1709:21" pos:end="1709:37"><name pos:start="1709:21" pos:end="1709:37">SOCKET_STEP_START</name></expr></argument>, <argument pos:start="1709:40" pos:end="1709:46"><expr pos:start="1709:40" pos:end="1709:46"><name pos:start="1709:40" pos:end="1709:46">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1710:13" pos:end="1710:18">break;</break>
        <case pos:start="1711:9" pos:end="1711:39">case <expr pos:start="1711:14" pos:end="1711:38"><name pos:start="1711:14" pos:end="1711:38">SOCKET_CONNECT_STEP_CHECK</name></expr>:</case>
            <expr_stmt pos:start="1712:13" pos:end="1713:48"><expr pos:start="1712:13" pos:end="1713:47"><name pos:start="1712:13" pos:end="1712:18">result</name> <operator pos:start="1712:20" pos:end="1712:20">=</operator> <call pos:start="1712:22" pos:end="1713:47"><name pos:start="1712:22" pos:end="1712:43">sockConnectWithTimeout</name><argument_list pos:start="1712:44" pos:end="1713:47">(<argument pos:start="1712:45" pos:end="1712:50"><expr pos:start="1712:45" pos:end="1712:50"><name pos:start="1712:45" pos:end="1712:50">handle</name></expr></argument>, <argument pos:start="1712:53" pos:end="1712:59"><expr pos:start="1712:53" pos:end="1712:59"><name pos:start="1712:53" pos:end="1712:59">address</name></expr></argument>, <argument pos:start="1712:62" pos:end="1712:68"><expr pos:start="1712:62" pos:end="1712:68"><name pos:start="1712:62" pos:end="1712:68">timeout</name></expr></argument>,
                    <argument pos:start="1713:21" pos:end="1713:37"><expr pos:start="1713:21" pos:end="1713:37"><name pos:start="1713:21" pos:end="1713:37">SOCKET_STEP_CHECK</name></expr></argument>, <argument pos:start="1713:40" pos:end="1713:46"><expr pos:start="1713:40" pos:end="1713:46"><name pos:start="1713:40" pos:end="1713:46">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1714:13" pos:end="1714:18">break;</break>
    </block_content>}</block></switch>

    <expr_stmt pos:start="1717:5" pos:end="1717:72"><expr pos:start="1717:5" pos:end="1717:71"><call pos:start="1717:5" pos:end="1717:71"><name pos:start="1717:5" pos:end="1717:38"><name pos:start="1717:5" pos:end="1717:7">env</name><operator pos:start="1717:8" pos:end="1717:9">-&gt;</operator><name pos:start="1717:10" pos:end="1717:38">ReleasePrimitiveArrayCritical</name></name><argument_list pos:start="1717:39" pos:end="1717:71">(<argument pos:start="1717:40" pos:end="1717:50"><expr pos:start="1717:40" pos:end="1717:50"><name pos:start="1717:40" pos:end="1717:50">passContext</name></expr></argument>, <argument pos:start="1717:53" pos:end="1717:59"><expr pos:start="1717:53" pos:end="1717:59"><name pos:start="1717:53" pos:end="1717:59">context</name></expr></argument>, <argument pos:start="1717:62" pos:end="1717:70"><expr pos:start="1717:62" pos:end="1717:70"><name pos:start="1717:62" pos:end="1717:70">JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1719:5" pos:end="1732:5"><if pos:start="1719:5" pos:end="1722:5">if <condition pos:start="1719:8" pos:end="1719:20">(<expr pos:start="1719:9" pos:end="1719:19"><literal type="number" pos:start="1719:9" pos:end="1719:9">0</literal> <operator pos:start="1719:11" pos:end="1719:12">==</operator> <name pos:start="1719:14" pos:end="1719:19">result</name></expr>)</condition> <block pos:start="1719:22" pos:end="1722:5">{<block_content pos:start="1721:9" pos:end="1721:75">
        <comment type="block" pos:start="1720:9" pos:end="1720:38">/* connected , so stop here */</comment>
        <expr_stmt pos:start="1721:9" pos:end="1721:75"><expr pos:start="1721:9" pos:end="1721:74"><call pos:start="1721:9" pos:end="1721:74"><name pos:start="1721:9" pos:end="1721:30">sockConnectWithTimeout</name><argument_list pos:start="1721:31" pos:end="1721:74">(<argument pos:start="1721:32" pos:end="1721:37"><expr pos:start="1721:32" pos:end="1721:37"><name pos:start="1721:32" pos:end="1721:37">handle</name></expr></argument>, <argument pos:start="1721:40" pos:end="1721:46"><expr pos:start="1721:40" pos:end="1721:46"><name pos:start="1721:40" pos:end="1721:46">address</name></expr></argument>, <argument pos:start="1721:49" pos:end="1721:49"><expr pos:start="1721:49" pos:end="1721:49"><literal type="number" pos:start="1721:49" pos:end="1721:49">0</literal></expr></argument>, <argument pos:start="1721:52" pos:end="1721:67"><expr pos:start="1721:52" pos:end="1721:67"><name pos:start="1721:52" pos:end="1721:67">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1721:70" pos:end="1721:73"><expr pos:start="1721:70" pos:end="1721:73"><name pos:start="1721:70" pos:end="1721:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1722:7" pos:end="1732:5">else if <condition pos:start="1722:15" pos:end="1722:46">(<expr pos:start="1722:16" pos:end="1722:45"><name pos:start="1722:16" pos:end="1722:21">result</name> <operator pos:start="1722:23" pos:end="1722:24">!=</operator> <name pos:start="1722:26" pos:end="1722:45">SOCKERR_NOTCONNECTED</name></expr>)</condition> <block pos:start="1722:48" pos:end="1732:5">{<block_content pos:start="1724:9" pos:end="1731:9">
        <comment type="block" pos:start="1723:9" pos:end="1723:32">/* can not connect... */</comment>
        <expr_stmt pos:start="1724:9" pos:end="1724:75"><expr pos:start="1724:9" pos:end="1724:74"><call pos:start="1724:9" pos:end="1724:74"><name pos:start="1724:9" pos:end="1724:30">sockConnectWithTimeout</name><argument_list pos:start="1724:31" pos:end="1724:74">(<argument pos:start="1724:32" pos:end="1724:37"><expr pos:start="1724:32" pos:end="1724:37"><name pos:start="1724:32" pos:end="1724:37">handle</name></expr></argument>, <argument pos:start="1724:40" pos:end="1724:46"><expr pos:start="1724:40" pos:end="1724:46"><name pos:start="1724:40" pos:end="1724:46">address</name></expr></argument>, <argument pos:start="1724:49" pos:end="1724:49"><expr pos:start="1724:49" pos:end="1724:49"><literal type="number" pos:start="1724:49" pos:end="1724:49">0</literal></expr></argument>, <argument pos:start="1724:52" pos:end="1724:67"><expr pos:start="1724:52" pos:end="1724:67"><name pos:start="1724:52" pos:end="1724:67">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1724:70" pos:end="1724:73"><expr pos:start="1724:70" pos:end="1724:73"><name pos:start="1724:70" pos:end="1724:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1725:9" pos:end="1731:9"><if pos:start="1725:9" pos:end="1728:9">if <condition pos:start="1725:12" pos:end="1725:37">(<expr pos:start="1725:13" pos:end="1725:36"><name pos:start="1725:13" pos:end="1725:18">result</name> <operator pos:start="1725:20" pos:end="1725:21">==</operator> <name pos:start="1725:23" pos:end="1725:36">SOCKERR_EACCES</name></expr>)</condition> <block pos:start="1725:39" pos:end="1728:9">{<block_content pos:start="1726:13" pos:end="1727:60">
            <expr_stmt pos:start="1726:13" pos:end="1727:60"><expr pos:start="1726:13" pos:end="1727:59"><call pos:start="1726:13" pos:end="1727:59"><name pos:start="1726:13" pos:end="1726:29">jniThrowException</name><argument_list pos:start="1726:30" pos:end="1727:59">(<argument pos:start="1726:31" pos:end="1726:33"><expr pos:start="1726:31" pos:end="1726:33"><name pos:start="1726:31" pos:end="1726:33">env</name></expr></argument>, <argument pos:start="1726:36" pos:end="1726:64"><expr pos:start="1726:36" pos:end="1726:64"><literal type="string" pos:start="1726:36" pos:end="1726:64">"java/lang/SecurityException"</literal></expr></argument>,
                              <argument pos:start="1727:31" pos:end="1727:58"><expr pos:start="1727:31" pos:end="1727:58"><call pos:start="1727:31" pos:end="1727:58"><name pos:start="1727:31" pos:end="1727:50">netLookupErrorString</name><argument_list pos:start="1727:51" pos:end="1727:58">(<argument pos:start="1727:52" pos:end="1727:57"><expr pos:start="1727:52" pos:end="1727:57"><name pos:start="1727:52" pos:end="1727:57">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1728:11" pos:end="1731:9">else <block pos:start="1728:16" pos:end="1731:9">{<block_content pos:start="1729:13" pos:end="1730:60">
            <expr_stmt pos:start="1729:13" pos:end="1730:60"><expr pos:start="1729:13" pos:end="1730:59"><call pos:start="1729:13" pos:end="1730:59"><name pos:start="1729:13" pos:end="1729:29">jniThrowException</name><argument_list pos:start="1729:30" pos:end="1730:59">(<argument pos:start="1729:31" pos:end="1729:33"><expr pos:start="1729:31" pos:end="1729:33"><name pos:start="1729:31" pos:end="1729:33">env</name></expr></argument>, <argument pos:start="1729:36" pos:end="1729:62"><expr pos:start="1729:36" pos:end="1729:62"><literal type="string" pos:start="1729:36" pos:end="1729:62">"java/net/ConnectException"</literal></expr></argument>,
                              <argument pos:start="1730:31" pos:end="1730:58"><expr pos:start="1730:31" pos:end="1730:58"><call pos:start="1730:31" pos:end="1730:58"><name pos:start="1730:31" pos:end="1730:50">netLookupErrorString</name><argument_list pos:start="1730:51" pos:end="1730:58">(<argument pos:start="1730:52" pos:end="1730:57"><expr pos:start="1730:52" pos:end="1730:57"><name pos:start="1730:52" pos:end="1730:57">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1734:5" pos:end="1734:18">return <expr pos:start="1734:12" pos:end="1734:17"><name pos:start="1734:12" pos:end="1734:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1737:1" pos:end="1894:1">extern <literal type="string" pos:start="1737:8" pos:end="1737:10">"C"</literal> <function pos:start="1737:12" pos:end="1894:1"><type pos:start="1737:12" pos:end="1737:15"><name pos:start="1737:12" pos:end="1737:15">void</name></type> <name pos:start="1737:17" pos:end="1737:93">Java_org_sipdroid_net_impl_OSNetworkSystem_connectStreamWithTimeoutSocketImpl</name><parameter_list pos:start="1737:94" pos:end="1739:44">(<parameter pos:start="1737:95" pos:end="1737:105"><decl pos:start="1737:95" pos:end="1737:105"><type pos:start="1737:95" pos:end="1737:105"><name pos:start="1737:95" pos:end="1737:100">JNIEnv</name><modifier pos:start="1737:101" pos:end="1737:101">*</modifier></type> <name pos:start="1737:103" pos:end="1737:105">env</name></decl></parameter>,
        <parameter pos:start="1738:9" pos:end="1738:20"><decl pos:start="1738:9" pos:end="1738:20"><type pos:start="1738:9" pos:end="1738:20"><name pos:start="1738:9" pos:end="1738:14">jclass</name></type> <name pos:start="1738:16" pos:end="1738:20">clazz</name></decl></parameter>, <parameter pos:start="1738:23" pos:end="1738:44"><decl pos:start="1738:23" pos:end="1738:44"><type pos:start="1738:23" pos:end="1738:44"><name pos:start="1738:23" pos:end="1738:29">jobject</name></type> <name pos:start="1738:31" pos:end="1738:44">fileDescriptor</name></decl></parameter>, <parameter pos:start="1738:47" pos:end="1738:61"><decl pos:start="1738:47" pos:end="1738:61"><type pos:start="1738:47" pos:end="1738:61"><name pos:start="1738:47" pos:end="1738:50">jint</name></type> <name pos:start="1738:52" pos:end="1738:61">remotePort</name></decl></parameter>, <parameter pos:start="1738:64" pos:end="1738:75"><decl pos:start="1738:64" pos:end="1738:75"><type pos:start="1738:64" pos:end="1738:75"><name pos:start="1738:64" pos:end="1738:67">jint</name></type> <name pos:start="1738:69" pos:end="1738:75">timeout</name></decl></parameter>,
        <parameter pos:start="1739:9" pos:end="1739:25"><decl pos:start="1739:9" pos:end="1739:25"><type pos:start="1739:9" pos:end="1739:25"><name pos:start="1739:9" pos:end="1739:12">jint</name></type> <name pos:start="1739:14" pos:end="1739:25">trafficClass</name></decl></parameter>, <parameter pos:start="1739:28" pos:end="1739:43"><decl pos:start="1739:28" pos:end="1739:43"><type pos:start="1739:28" pos:end="1739:43"><name pos:start="1739:28" pos:end="1739:34">jobject</name></type> <name pos:start="1739:36" pos:end="1739:43">inetAddr</name></decl></parameter>)</parameter_list> <block pos:start="1739:46" pos:end="1894:1">{<block_content pos:start="1742:5" pos:end="1893:5">
    <comment type="line" pos:start="1740:5" pos:end="1740:56">// LOGD("ENTER connectStreamWithTimeoutSocketImpl");</comment>

    <decl_stmt pos:start="1742:5" pos:end="1742:19"><decl pos:start="1742:5" pos:end="1742:18"><type pos:start="1742:5" pos:end="1742:7"><name pos:start="1742:5" pos:end="1742:7">int</name></type> <name pos:start="1742:9" pos:end="1742:14">result</name> <init pos:start="1742:16" pos:end="1742:18">= <expr pos:start="1742:18" pos:end="1742:18"><literal type="number" pos:start="1742:18" pos:end="1742:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1743:5" pos:end="1743:15"><decl pos:start="1743:5" pos:end="1743:14"><type pos:start="1743:5" pos:end="1743:7"><name pos:start="1743:5" pos:end="1743:7">int</name></type> <name pos:start="1743:9" pos:end="1743:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1744:5" pos:end="1744:31"><decl pos:start="1744:5" pos:end="1744:30"><type pos:start="1744:5" pos:end="1744:22"><name pos:start="1744:5" pos:end="1744:22"><name pos:start="1744:5" pos:end="1744:10">struct</name> <name pos:start="1744:12" pos:end="1744:22">sockaddr_in</name></name></type> <name pos:start="1744:24" pos:end="1744:30">address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1745:5" pos:end="1745:26"><decl pos:start="1745:5" pos:end="1745:25"><type pos:start="1745:5" pos:end="1745:11"><name pos:start="1745:5" pos:end="1745:9">jbyte</name> <modifier pos:start="1745:11" pos:end="1745:11">*</modifier></type><name pos:start="1745:12" pos:end="1745:18">context</name> <init pos:start="1745:20" pos:end="1745:25">= <expr pos:start="1745:22" pos:end="1745:25"><name pos:start="1745:22" pos:end="1745:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1746:5" pos:end="1746:35"><decl pos:start="1746:5" pos:end="1746:34"><type pos:start="1746:5" pos:end="1746:7"><name pos:start="1746:5" pos:end="1746:7">int</name></type> <name pos:start="1746:9" pos:end="1746:24">remainingTimeout</name> <init pos:start="1746:26" pos:end="1746:34">= <expr pos:start="1746:28" pos:end="1746:34"><name pos:start="1746:28" pos:end="1746:34">timeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1747:5" pos:end="1747:26"><decl pos:start="1747:5" pos:end="1747:25"><type pos:start="1747:5" pos:end="1747:7"><name pos:start="1747:5" pos:end="1747:7">int</name></type> <name pos:start="1747:9" pos:end="1747:21">passedTimeout</name> <init pos:start="1747:23" pos:end="1747:25">= <expr pos:start="1747:25" pos:end="1747:25"><literal type="number" pos:start="1747:25" pos:end="1747:25">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1748:5" pos:end="1748:23"><decl pos:start="1748:5" pos:end="1748:22"><type pos:start="1748:5" pos:end="1748:7"><name pos:start="1748:5" pos:end="1748:7">int</name></type> <name pos:start="1748:9" pos:end="1748:18">finishTime</name> <init pos:start="1748:20" pos:end="1748:22">= <expr pos:start="1748:22" pos:end="1748:22"><literal type="number" pos:start="1748:22" pos:end="1748:22">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1749:5" pos:end="1749:21"><decl pos:start="1749:5" pos:end="1749:20"><type pos:start="1749:5" pos:end="1749:7"><name pos:start="1749:5" pos:end="1749:7">int</name></type> <name pos:start="1749:9" pos:end="1749:16">blocking</name> <init pos:start="1749:18" pos:end="1749:20">= <expr pos:start="1749:20" pos:end="1749:20"><literal type="number" pos:start="1749:20" pos:end="1749:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1750:5" pos:end="1750:34"><decl pos:start="1750:5" pos:end="1750:33"><type pos:start="1750:5" pos:end="1750:8"><name pos:start="1750:5" pos:end="1750:8">char</name></type> <name pos:start="1750:10" pos:end="1750:19">hasTimeout</name> <init pos:start="1750:21" pos:end="1750:33">= <expr pos:start="1750:23" pos:end="1750:33"><name pos:start="1750:23" pos:end="1750:29">timeout</name> <operator pos:start="1750:31" pos:end="1750:31">&gt;</operator> <literal type="number" pos:start="1750:33" pos:end="1750:33">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1752:5" pos:end="1752:68">/* if a timeout was specified calculate the finish time value */</comment>
    <if_stmt pos:start="1753:5" pos:end="1755:5"><if pos:start="1753:5" pos:end="1755:5">if <condition pos:start="1753:8" pos:end="1753:19">(<expr pos:start="1753:9" pos:end="1753:18"><name pos:start="1753:9" pos:end="1753:18">hasTimeout</name></expr>)</condition>  <block pos:start="1753:22" pos:end="1755:5">{<block_content pos:start="1754:9" pos:end="1754:55">
        <expr_stmt pos:start="1754:9" pos:end="1754:55"><expr pos:start="1754:9" pos:end="1754:54"><name pos:start="1754:9" pos:end="1754:18">finishTime</name> <operator pos:start="1754:20" pos:end="1754:20">=</operator> <call pos:start="1754:22" pos:end="1754:38"><name pos:start="1754:22" pos:end="1754:36">time_msec_clock</name><argument_list pos:start="1754:37" pos:end="1754:38">()</argument_list></call> <operator pos:start="1754:40" pos:end="1754:40">+</operator> <operator pos:start="1754:42" pos:end="1754:42">(</operator><name pos:start="1754:43" pos:end="1754:45">int</name><operator pos:start="1754:46" pos:end="1754:46">)</operator> <name pos:start="1754:48" pos:end="1754:54">timeout</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt pos:start="1758:5" pos:end="1758:61"><expr pos:start="1758:5" pos:end="1758:60"><name pos:start="1758:5" pos:end="1758:10">handle</name> <operator pos:start="1758:12" pos:end="1758:12">=</operator> <call pos:start="1758:14" pos:end="1758:60"><name pos:start="1758:14" pos:end="1758:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1758:40" pos:end="1758:60">(<argument pos:start="1758:41" pos:end="1758:43"><expr pos:start="1758:41" pos:end="1758:43"><name pos:start="1758:41" pos:end="1758:43">env</name></expr></argument>, <argument pos:start="1758:46" pos:end="1758:59"><expr pos:start="1758:46" pos:end="1758:59"><name pos:start="1758:46" pos:end="1758:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1760:5" pos:end="1886:5"><if pos:start="1760:5" pos:end="1763:5">if <condition pos:start="1760:8" pos:end="1760:36">(<expr pos:start="1760:9" pos:end="1760:35"><name pos:start="1760:9" pos:end="1760:14">handle</name> <operator pos:start="1760:16" pos:end="1760:17">==</operator> <literal type="number" pos:start="1760:19" pos:end="1760:19">0</literal> <operator pos:start="1760:21" pos:end="1760:22">||</operator> <name pos:start="1760:24" pos:end="1760:29">handle</name> <operator pos:start="1760:31" pos:end="1760:32">==</operator> <operator pos:start="1760:34" pos:end="1760:34">-</operator><literal type="number" pos:start="1760:35" pos:end="1760:35">1</literal></expr>)</condition> <block pos:start="1760:38" pos:end="1763:5">{<block_content pos:start="1761:9" pos:end="1762:15">
        <expr_stmt pos:start="1761:9" pos:end="1761:53"><expr pos:start="1761:9" pos:end="1761:52"><call pos:start="1761:9" pos:end="1761:52"><name pos:start="1761:9" pos:end="1761:28">throwSocketException</name><argument_list pos:start="1761:29" pos:end="1761:52">(<argument pos:start="1761:30" pos:end="1761:32"><expr pos:start="1761:30" pos:end="1761:32"><name pos:start="1761:30" pos:end="1761:32">env</name></expr></argument>, <argument pos:start="1761:35" pos:end="1761:51"><expr pos:start="1761:35" pos:end="1761:51"><name pos:start="1761:35" pos:end="1761:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1762:9" pos:end="1762:15">return;</return>
    </block_content>}</block></if> <else pos:start="1763:7" pos:end="1886:5">else <block pos:start="1763:12" pos:end="1886:5">{<block_content pos:start="1764:9" pos:end="1885:9">
        <expr_stmt pos:start="1764:9" pos:end="1765:49"><expr pos:start="1764:9" pos:end="1765:48"><name pos:start="1764:9" pos:end="1764:14">result</name> <operator pos:start="1764:16" pos:end="1764:16">=</operator> <call pos:start="1764:18" pos:end="1765:48"><name pos:start="1764:18" pos:end="1764:43">inetAddressToSocketAddress</name><argument_list pos:start="1764:44" pos:end="1765:48">(<argument pos:start="1764:45" pos:end="1764:47"><expr pos:start="1764:45" pos:end="1764:47"><name pos:start="1764:45" pos:end="1764:47">env</name></expr></argument>, <argument pos:start="1764:50" pos:end="1764:57"><expr pos:start="1764:50" pos:end="1764:57"><name pos:start="1764:50" pos:end="1764:57">inetAddr</name></expr></argument>, <argument pos:start="1764:60" pos:end="1764:69"><expr pos:start="1764:60" pos:end="1764:69"><name pos:start="1764:60" pos:end="1764:69">remotePort</name></expr></argument>,
                <argument pos:start="1765:17" pos:end="1765:47"><expr pos:start="1765:17" pos:end="1765:47"><operator pos:start="1765:17" pos:end="1765:17">(</operator>struct <name pos:start="1765:25" pos:end="1765:35">sockaddr_in</name> <operator pos:start="1765:37" pos:end="1765:37">*</operator><operator pos:start="1765:38" pos:end="1765:38">)</operator> <operator pos:start="1765:40" pos:end="1765:40">&amp;</operator><name pos:start="1765:41" pos:end="1765:47">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1767:9" pos:end="1770:9"><if pos:start="1767:9" pos:end="1770:9">if <condition pos:start="1767:12" pos:end="1767:23">(<expr pos:start="1767:13" pos:end="1767:22"><name pos:start="1767:13" pos:end="1767:18">result</name> <operator pos:start="1767:20" pos:end="1767:20">&lt;</operator> <literal type="number" pos:start="1767:22" pos:end="1767:22">0</literal></expr>)</condition> <block pos:start="1767:25" pos:end="1770:9">{<block_content pos:start="1768:13" pos:end="1769:19">
            <expr_stmt pos:start="1768:13" pos:end="1768:57"><expr pos:start="1768:13" pos:end="1768:56"><call pos:start="1768:13" pos:end="1768:56"><name pos:start="1768:13" pos:end="1768:32">throwSocketException</name><argument_list pos:start="1768:33" pos:end="1768:56">(<argument pos:start="1768:34" pos:end="1768:36"><expr pos:start="1768:34" pos:end="1768:36"><name pos:start="1768:34" pos:end="1768:36">env</name></expr></argument>, <argument pos:start="1768:39" pos:end="1768:55"><expr pos:start="1768:39" pos:end="1768:55"><name pos:start="1768:39" pos:end="1768:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1769:13" pos:end="1769:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="1772:9" pos:end="1772:79">// Check if we're using adb networking and redirect in case it is used.</comment>
        <if_stmt pos:start="1773:9" pos:end="1780:9"><if pos:start="1773:9" pos:end="1780:9">if <condition pos:start="1773:12" pos:end="1773:55">(<expr pos:start="1773:13" pos:end="1773:54"><name pos:start="1773:13" pos:end="1773:28">useAdbNetworking</name> <operator pos:start="1773:30" pos:end="1773:31">&amp;&amp;</operator> <operator pos:start="1773:33" pos:end="1773:33">!</operator><call pos:start="1773:34" pos:end="1773:54"><name pos:start="1773:34" pos:end="1773:44">isLocalhost</name><argument_list pos:start="1773:45" pos:end="1773:54">(<argument pos:start="1773:46" pos:end="1773:53"><expr pos:start="1773:46" pos:end="1773:53"><operator pos:start="1773:46" pos:end="1773:46">&amp;</operator><name pos:start="1773:47" pos:end="1773:53">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1773:57" pos:end="1780:9">{<block_content pos:start="1774:13" pos:end="1779:19">
            <decl_stmt pos:start="1774:13" pos:end="1775:72"><decl pos:start="1774:13" pos:end="1775:71"><type pos:start="1774:13" pos:end="1774:15"><name pos:start="1774:13" pos:end="1774:15">int</name></type> <name pos:start="1774:17" pos:end="1774:22">retVal</name> <init pos:start="1774:24" pos:end="1775:71">= <expr pos:start="1774:26" pos:end="1775:71"><call pos:start="1774:26" pos:end="1775:71"><name pos:start="1774:26" pos:end="1774:85">Java_org_sipdroid_net_impl_OSNetworkSystem_connectSocketImpl</name><argument_list pos:start="1774:86" pos:end="1775:71">(<argument pos:start="1774:87" pos:end="1774:89"><expr pos:start="1774:87" pos:end="1774:89"><name pos:start="1774:87" pos:end="1774:89">env</name></expr></argument>, <argument pos:start="1774:92" pos:end="1774:96"><expr pos:start="1774:92" pos:end="1774:96"><name pos:start="1774:92" pos:end="1774:96">clazz</name></expr></argument>,
                    <argument pos:start="1775:21" pos:end="1775:34"><expr pos:start="1775:21" pos:end="1775:34"><name pos:start="1775:21" pos:end="1775:34">fileDescriptor</name></expr></argument>, <argument pos:start="1775:37" pos:end="1775:48"><expr pos:start="1775:37" pos:end="1775:48"><name pos:start="1775:37" pos:end="1775:48">trafficClass</name></expr></argument>, <argument pos:start="1775:51" pos:end="1775:58"><expr pos:start="1775:51" pos:end="1775:58"><name pos:start="1775:51" pos:end="1775:58">inetAddr</name></expr></argument>, <argument pos:start="1775:61" pos:end="1775:70"><expr pos:start="1775:61" pos:end="1775:70"><name pos:start="1775:61" pos:end="1775:70">remotePort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1776:13" pos:end="1778:13"><if pos:start="1776:13" pos:end="1778:13">if <condition pos:start="1776:16" pos:end="1776:28">(<expr pos:start="1776:17" pos:end="1776:27"><name pos:start="1776:17" pos:end="1776:22">retVal</name> <operator pos:start="1776:24" pos:end="1776:25">!=</operator> <literal type="number" pos:start="1776:27" pos:end="1776:27">0</literal></expr>)</condition> <block pos:start="1776:30" pos:end="1778:13">{<block_content pos:start="1777:17" pos:end="1777:61">
                <expr_stmt pos:start="1777:17" pos:end="1777:61"><expr pos:start="1777:17" pos:end="1777:60"><call pos:start="1777:17" pos:end="1777:60"><name pos:start="1777:17" pos:end="1777:36">throwSocketException</name><argument_list pos:start="1777:37" pos:end="1777:60">(<argument pos:start="1777:38" pos:end="1777:40"><expr pos:start="1777:38" pos:end="1777:40"><name pos:start="1777:38" pos:end="1777:40">env</name></expr></argument>, <argument pos:start="1777:43" pos:end="1777:59"><expr pos:start="1777:43" pos:end="1777:59"><name pos:start="1777:43" pos:end="1777:59">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return pos:start="1779:13" pos:end="1779:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1782:9" pos:end="1785:11">/*
         * we will be looping checking for when we are connected so allocate
         * the descriptor sets that we will use
         */</comment>
        <expr_stmt pos:start="1786:9" pos:end="1786:62"><expr pos:start="1786:9" pos:end="1786:61"><name pos:start="1786:9" pos:end="1786:15">context</name> <operator pos:start="1786:17" pos:end="1786:17">=</operator><operator pos:start="1786:18" pos:end="1786:18">(</operator><name pos:start="1786:19" pos:end="1786:23">jbyte</name> <operator pos:start="1786:25" pos:end="1786:25">*</operator><operator pos:start="1786:26" pos:end="1786:26">)</operator> <call pos:start="1786:28" pos:end="1786:61"><name pos:start="1786:28" pos:end="1786:33">malloc</name><argument_list pos:start="1786:34" pos:end="1786:61">(<argument pos:start="1786:35" pos:end="1786:60"><expr pos:start="1786:35" pos:end="1786:60"><sizeof pos:start="1786:35" pos:end="1786:60">sizeof<argument_list pos:start="1786:41" pos:end="1786:60">(<argument pos:start="1786:42" pos:end="1786:59"><expr pos:start="1786:42" pos:end="1786:59">struct <name pos:start="1786:49" pos:end="1786:59">selectFDSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1788:9" pos:end="1791:9"><if pos:start="1788:9" pos:end="1791:9">if <condition pos:start="1788:12" pos:end="1788:28">(<expr pos:start="1788:13" pos:end="1788:27"><name pos:start="1788:13" pos:end="1788:16">NULL</name> <operator pos:start="1788:18" pos:end="1788:19">==</operator> <name pos:start="1788:21" pos:end="1788:27">context</name></expr>)</condition> <block pos:start="1788:30" pos:end="1791:9">{<block_content pos:start="1789:13" pos:end="1790:19">
            <expr_stmt pos:start="1789:13" pos:end="1789:57"><expr pos:start="1789:13" pos:end="1789:56"><call pos:start="1789:13" pos:end="1789:56"><name pos:start="1789:13" pos:end="1789:32">throwSocketException</name><argument_list pos:start="1789:33" pos:end="1789:56">(<argument pos:start="1789:34" pos:end="1789:36"><expr pos:start="1789:34" pos:end="1789:36"><name pos:start="1789:34" pos:end="1789:36">env</name></expr></argument>, <argument pos:start="1789:39" pos:end="1789:55"><expr pos:start="1789:39" pos:end="1789:55"><name pos:start="1789:39" pos:end="1789:55">SOCKERR_NOBUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1790:13" pos:end="1790:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1793:9" pos:end="1793:88"><expr pos:start="1793:9" pos:end="1793:87"><name pos:start="1793:9" pos:end="1793:14">result</name> <operator pos:start="1793:16" pos:end="1793:16">=</operator> <call pos:start="1793:18" pos:end="1793:87"><name pos:start="1793:18" pos:end="1793:39">sockConnectWithTimeout</name><argument_list pos:start="1793:40" pos:end="1793:87">(<argument pos:start="1793:41" pos:end="1793:46"><expr pos:start="1793:41" pos:end="1793:46"><name pos:start="1793:41" pos:end="1793:46">handle</name></expr></argument>, <argument pos:start="1793:49" pos:end="1793:55"><expr pos:start="1793:49" pos:end="1793:55"><name pos:start="1793:49" pos:end="1793:55">address</name></expr></argument>, <argument pos:start="1793:58" pos:end="1793:58"><expr pos:start="1793:58" pos:end="1793:58"><literal type="number" pos:start="1793:58" pos:end="1793:58">0</literal></expr></argument>, <argument pos:start="1793:61" pos:end="1793:77"><expr pos:start="1793:61" pos:end="1793:77"><name pos:start="1793:61" pos:end="1793:77">SOCKET_STEP_START</name></expr></argument>, <argument pos:start="1793:80" pos:end="1793:86"><expr pos:start="1793:80" pos:end="1793:86"><name pos:start="1793:80" pos:end="1793:86">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1794:9" pos:end="1810:9"><if pos:start="1794:9" pos:end="1798:9">if <condition pos:start="1794:12" pos:end="1794:24">(<expr pos:start="1794:13" pos:end="1794:23"><literal type="number" pos:start="1794:13" pos:end="1794:13">0</literal> <operator pos:start="1794:15" pos:end="1794:16">==</operator> <name pos:start="1794:18" pos:end="1794:23">result</name></expr>)</condition> <block pos:start="1794:26" pos:end="1798:9">{<block_content pos:start="1796:13" pos:end="1797:22">
            <comment type="block" pos:start="1795:13" pos:end="1795:59">/* ok we connected right away so we are done */</comment>
            <expr_stmt pos:start="1796:13" pos:end="1796:82"><expr pos:start="1796:13" pos:end="1796:81"><call pos:start="1796:13" pos:end="1796:81"><name pos:start="1796:13" pos:end="1796:34">sockConnectWithTimeout</name><argument_list pos:start="1796:35" pos:end="1796:81">(<argument pos:start="1796:36" pos:end="1796:41"><expr pos:start="1796:36" pos:end="1796:41"><name pos:start="1796:36" pos:end="1796:41">handle</name></expr></argument>, <argument pos:start="1796:44" pos:end="1796:50"><expr pos:start="1796:44" pos:end="1796:50"><name pos:start="1796:44" pos:end="1796:50">address</name></expr></argument>, <argument pos:start="1796:53" pos:end="1796:53"><expr pos:start="1796:53" pos:end="1796:53"><literal type="number" pos:start="1796:53" pos:end="1796:53">0</literal></expr></argument>, <argument pos:start="1796:56" pos:end="1796:71"><expr pos:start="1796:56" pos:end="1796:71"><name pos:start="1796:56" pos:end="1796:71">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1796:74" pos:end="1796:80"><expr pos:start="1796:74" pos:end="1796:80"><name pos:start="1796:74" pos:end="1796:80">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="1797:13" pos:end="1797:22">goto <name pos:start="1797:18" pos:end="1797:21">bail</name>;</goto>
        </block_content>}</block></if> <if type="elseif" pos:start="1798:11" pos:end="1810:9">else if <condition pos:start="1798:19" pos:end="1798:50">(<expr pos:start="1798:20" pos:end="1798:49"><name pos:start="1798:20" pos:end="1798:25">result</name> <operator pos:start="1798:27" pos:end="1798:28">!=</operator> <name pos:start="1798:30" pos:end="1798:49">SOCKERR_NOTCONNECTED</name></expr>)</condition> <block pos:start="1798:52" pos:end="1810:9">{<block_content pos:start="1799:13" pos:end="1809:22">
            <expr_stmt pos:start="1799:13" pos:end="1799:45"><expr pos:start="1799:13" pos:end="1799:44"><call pos:start="1799:13" pos:end="1799:44"><name pos:start="1799:13" pos:end="1799:28">log_socket_close</name><argument_list pos:start="1799:29" pos:end="1799:44">(<argument pos:start="1799:30" pos:end="1799:35"><expr pos:start="1799:30" pos:end="1799:35"><name pos:start="1799:30" pos:end="1799:35">handle</name></expr></argument>, <argument pos:start="1799:38" pos:end="1799:43"><expr pos:start="1799:38" pos:end="1799:43"><name pos:start="1799:38" pos:end="1799:43">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1800:13" pos:end="1801:44"><expr pos:start="1800:13" pos:end="1801:43"><call pos:start="1800:13" pos:end="1801:43"><name pos:start="1800:13" pos:end="1800:34">sockConnectWithTimeout</name><argument_list pos:start="1800:35" pos:end="1801:43">(<argument pos:start="1800:36" pos:end="1800:41"><expr pos:start="1800:36" pos:end="1800:41"><name pos:start="1800:36" pos:end="1800:41">handle</name></expr></argument>, <argument pos:start="1800:44" pos:end="1800:50"><expr pos:start="1800:44" pos:end="1800:50"><name pos:start="1800:44" pos:end="1800:50">address</name></expr></argument>, <argument pos:start="1800:53" pos:end="1800:53"><expr pos:start="1800:53" pos:end="1800:53"><literal type="number" pos:start="1800:53" pos:end="1800:53">0</literal></expr></argument>, <argument pos:start="1800:56" pos:end="1800:71"><expr pos:start="1800:56" pos:end="1800:71"><name pos:start="1800:56" pos:end="1800:71">SOCKET_STEP_DONE</name></expr></argument>,
                                   <argument pos:start="1801:36" pos:end="1801:42"><expr pos:start="1801:36" pos:end="1801:42"><name pos:start="1801:36" pos:end="1801:42">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1802:13" pos:end="1802:79">/* we got an error other than NOTCONNECTED so we cannot continue */</comment>
            <if_stmt pos:start="1803:13" pos:end="1808:13"><if pos:start="1803:13" pos:end="1806:13">if <condition pos:start="1803:16" pos:end="1803:41">(<expr pos:start="1803:17" pos:end="1803:40"><name pos:start="1803:17" pos:end="1803:30">SOCKERR_EACCES</name> <operator pos:start="1803:32" pos:end="1803:33">==</operator> <name pos:start="1803:35" pos:end="1803:40">result</name></expr>)</condition> <block pos:start="1803:43" pos:end="1806:13">{<block_content pos:start="1804:17" pos:end="1805:64">
                <expr_stmt pos:start="1804:17" pos:end="1805:64"><expr pos:start="1804:17" pos:end="1805:63"><call pos:start="1804:17" pos:end="1805:63"><name pos:start="1804:17" pos:end="1804:33">jniThrowException</name><argument_list pos:start="1804:34" pos:end="1805:63">(<argument pos:start="1804:35" pos:end="1804:37"><expr pos:start="1804:35" pos:end="1804:37"><name pos:start="1804:35" pos:end="1804:37">env</name></expr></argument>, <argument pos:start="1804:40" pos:end="1804:68"><expr pos:start="1804:40" pos:end="1804:68"><literal type="string" pos:start="1804:40" pos:end="1804:68">"java/lang/SecurityException"</literal></expr></argument>,
                                  <argument pos:start="1805:35" pos:end="1805:62"><expr pos:start="1805:35" pos:end="1805:62"><call pos:start="1805:35" pos:end="1805:62"><name pos:start="1805:35" pos:end="1805:54">netLookupErrorString</name><argument_list pos:start="1805:55" pos:end="1805:62">(<argument pos:start="1805:56" pos:end="1805:61"><expr pos:start="1805:56" pos:end="1805:61"><name pos:start="1805:56" pos:end="1805:61">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1806:15" pos:end="1808:13">else <block pos:start="1806:20" pos:end="1808:13">{<block_content pos:start="1807:17" pos:end="1807:50">
                <expr_stmt pos:start="1807:17" pos:end="1807:50"><expr pos:start="1807:17" pos:end="1807:49"><call pos:start="1807:17" pos:end="1807:49"><name pos:start="1807:17" pos:end="1807:36">throwSocketException</name><argument_list pos:start="1807:37" pos:end="1807:49">(<argument pos:start="1807:38" pos:end="1807:40"><expr pos:start="1807:38" pos:end="1807:40"><name pos:start="1807:38" pos:end="1807:40">env</name></expr></argument>, <argument pos:start="1807:43" pos:end="1807:48"><expr pos:start="1807:43" pos:end="1807:48"><name pos:start="1807:43" pos:end="1807:48">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <goto pos:start="1809:13" pos:end="1809:22">goto <name pos:start="1809:18" pos:end="1809:21">bail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <while pos:start="1812:9" pos:end="1885:9">while <condition pos:start="1812:15" pos:end="1812:46">(<expr pos:start="1812:16" pos:end="1812:45"><name pos:start="1812:16" pos:end="1812:35">SOCKERR_NOTCONNECTED</name> <operator pos:start="1812:37" pos:end="1812:38">==</operator> <name pos:start="1812:40" pos:end="1812:45">result</name></expr>)</condition> <block pos:start="1812:48" pos:end="1885:9">{<block_content pos:start="1813:13" pos:end="1884:13">
            <expr_stmt pos:start="1813:13" pos:end="1813:45"><expr pos:start="1813:13" pos:end="1813:44"><name pos:start="1813:13" pos:end="1813:25">passedTimeout</name> <operator pos:start="1813:27" pos:end="1813:27">=</operator> <name pos:start="1813:29" pos:end="1813:44">remainingTimeout</name></expr>;</expr_stmt>

            <comment type="block" pos:start="1815:13" pos:end="1818:15">/*
             * ok now try and connect. Depending on the platform this may sleep
             * for up to passedTimeout milliseconds
             */</comment>
            <expr_stmt pos:start="1819:13" pos:end="1820:48"><expr pos:start="1819:13" pos:end="1820:47"><name pos:start="1819:13" pos:end="1819:18">result</name> <operator pos:start="1819:20" pos:end="1819:20">=</operator> <call pos:start="1819:22" pos:end="1820:47"><name pos:start="1819:22" pos:end="1819:43">sockConnectWithTimeout</name><argument_list pos:start="1819:44" pos:end="1820:47">(<argument pos:start="1819:45" pos:end="1819:50"><expr pos:start="1819:45" pos:end="1819:50"><name pos:start="1819:45" pos:end="1819:50">handle</name></expr></argument>, <argument pos:start="1819:53" pos:end="1819:59"><expr pos:start="1819:53" pos:end="1819:59"><name pos:start="1819:53" pos:end="1819:59">address</name></expr></argument>, <argument pos:start="1819:62" pos:end="1819:74"><expr pos:start="1819:62" pos:end="1819:74"><name pos:start="1819:62" pos:end="1819:74">passedTimeout</name></expr></argument>,
                    <argument pos:start="1820:21" pos:end="1820:37"><expr pos:start="1820:21" pos:end="1820:37"><name pos:start="1820:21" pos:end="1820:37">SOCKET_STEP_CHECK</name></expr></argument>, <argument pos:start="1820:40" pos:end="1820:46"><expr pos:start="1820:40" pos:end="1820:46"><name pos:start="1820:40" pos:end="1820:46">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1822:13" pos:end="1826:15">/*
             * now check if the socket is still connected.
             * Do it here as some platforms seem to think they
             * are connected if the socket is closed on them.
             */</comment>
            <expr_stmt pos:start="1827:13" pos:end="1827:69"><expr pos:start="1827:13" pos:end="1827:68"><name pos:start="1827:13" pos:end="1827:18">handle</name> <operator pos:start="1827:20" pos:end="1827:20">=</operator> <call pos:start="1827:22" pos:end="1827:68"><name pos:start="1827:22" pos:end="1827:47">jniGetFDFromFileDescriptor</name><argument_list pos:start="1827:48" pos:end="1827:68">(<argument pos:start="1827:49" pos:end="1827:51"><expr pos:start="1827:49" pos:end="1827:51"><name pos:start="1827:49" pos:end="1827:51">env</name></expr></argument>, <argument pos:start="1827:54" pos:end="1827:67"><expr pos:start="1827:54" pos:end="1827:67"><name pos:start="1827:54" pos:end="1827:67">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1829:13" pos:end="1834:13"><if pos:start="1829:13" pos:end="1834:13">if <condition pos:start="1829:16" pos:end="1829:44">(<expr pos:start="1829:17" pos:end="1829:43"><name pos:start="1829:17" pos:end="1829:22">handle</name> <operator pos:start="1829:24" pos:end="1829:25">==</operator> <literal type="number" pos:start="1829:27" pos:end="1829:27">0</literal> <operator pos:start="1829:29" pos:end="1829:30">||</operator> <name pos:start="1829:32" pos:end="1829:37">handle</name> <operator pos:start="1829:39" pos:end="1829:40">==</operator> <operator pos:start="1829:42" pos:end="1829:42">-</operator><literal type="number" pos:start="1829:43" pos:end="1829:43">1</literal></expr>)</condition> <block pos:start="1829:46" pos:end="1834:13">{<block_content pos:start="1830:17" pos:end="1833:26">
                <expr_stmt pos:start="1830:17" pos:end="1831:51"><expr pos:start="1830:17" pos:end="1831:50"><call pos:start="1830:17" pos:end="1831:50"><name pos:start="1830:17" pos:end="1830:38">sockConnectWithTimeout</name><argument_list pos:start="1830:39" pos:end="1831:50">(<argument pos:start="1830:40" pos:end="1830:45"><expr pos:start="1830:40" pos:end="1830:45"><name pos:start="1830:40" pos:end="1830:45">handle</name></expr></argument>, <argument pos:start="1830:48" pos:end="1830:54"><expr pos:start="1830:48" pos:end="1830:54"><name pos:start="1830:48" pos:end="1830:54">address</name></expr></argument>, <argument pos:start="1830:57" pos:end="1830:57"><expr pos:start="1830:57" pos:end="1830:57"><literal type="number" pos:start="1830:57" pos:end="1830:57">0</literal></expr></argument>,
                        <argument pos:start="1831:25" pos:end="1831:40"><expr pos:start="1831:25" pos:end="1831:40"><name pos:start="1831:25" pos:end="1831:40">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1831:43" pos:end="1831:49"><expr pos:start="1831:43" pos:end="1831:49"><name pos:start="1831:43" pos:end="1831:49">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1832:17" pos:end="1832:61"><expr pos:start="1832:17" pos:end="1832:60"><call pos:start="1832:17" pos:end="1832:60"><name pos:start="1832:17" pos:end="1832:36">throwSocketException</name><argument_list pos:start="1832:37" pos:end="1832:60">(<argument pos:start="1832:38" pos:end="1832:40"><expr pos:start="1832:38" pos:end="1832:40"><name pos:start="1832:38" pos:end="1832:40">env</name></expr></argument>, <argument pos:start="1832:43" pos:end="1832:59"><expr pos:start="1832:43" pos:end="1832:59"><name pos:start="1832:43" pos:end="1832:59">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="1833:17" pos:end="1833:26">goto <name pos:start="1833:22" pos:end="1833:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1836:13" pos:end="1839:15">/*
             * check if we are now connected,
             * if so we can finish the process and return
             */</comment>
            <if_stmt pos:start="1840:13" pos:end="1844:13"><if pos:start="1840:13" pos:end="1844:13">if <condition pos:start="1840:16" pos:end="1840:28">(<expr pos:start="1840:17" pos:end="1840:27"><literal type="number" pos:start="1840:17" pos:end="1840:17">0</literal> <operator pos:start="1840:19" pos:end="1840:20">==</operator> <name pos:start="1840:22" pos:end="1840:27">result</name></expr>)</condition> <block pos:start="1840:30" pos:end="1844:13">{<block_content pos:start="1841:17" pos:end="1843:26">
                <expr_stmt pos:start="1841:17" pos:end="1842:51"><expr pos:start="1841:17" pos:end="1842:50"><call pos:start="1841:17" pos:end="1842:50"><name pos:start="1841:17" pos:end="1841:38">sockConnectWithTimeout</name><argument_list pos:start="1841:39" pos:end="1842:50">(<argument pos:start="1841:40" pos:end="1841:45"><expr pos:start="1841:40" pos:end="1841:45"><name pos:start="1841:40" pos:end="1841:45">handle</name></expr></argument>, <argument pos:start="1841:48" pos:end="1841:54"><expr pos:start="1841:48" pos:end="1841:54"><name pos:start="1841:48" pos:end="1841:54">address</name></expr></argument>, <argument pos:start="1841:57" pos:end="1841:57"><expr pos:start="1841:57" pos:end="1841:57"><literal type="number" pos:start="1841:57" pos:end="1841:57">0</literal></expr></argument>,
                        <argument pos:start="1842:25" pos:end="1842:40"><expr pos:start="1842:25" pos:end="1842:40"><name pos:start="1842:25" pos:end="1842:40">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1842:43" pos:end="1842:49"><expr pos:start="1842:43" pos:end="1842:49"><name pos:start="1842:43" pos:end="1842:49">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="1843:17" pos:end="1843:26">goto <name pos:start="1843:22" pos:end="1843:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1846:13" pos:end="1849:15">/*
             * if the error is SOCKERR_NOTCONNECTED then we have not yet
             * connected and we may not be done yet
             */</comment>
            <if_stmt pos:start="1850:13" pos:end="1884:13"><if pos:start="1850:13" pos:end="1866:13">if <condition pos:start="1850:16" pos:end="1850:47">(<expr pos:start="1850:17" pos:end="1850:46"><name pos:start="1850:17" pos:end="1850:36">SOCKERR_NOTCONNECTED</name> <operator pos:start="1850:38" pos:end="1850:39">==</operator> <name pos:start="1850:41" pos:end="1850:46">result</name></expr>)</condition> <block pos:start="1850:49" pos:end="1866:13">{<block_content pos:start="1852:17" pos:end="1865:17">
                <comment type="block" pos:start="1851:17" pos:end="1851:54">/* check if the timeout has expired */</comment>
                <if_stmt pos:start="1852:17" pos:end="1865:17"><if pos:start="1852:17" pos:end="1863:17">if <condition pos:start="1852:20" pos:end="1852:31">(<expr pos:start="1852:21" pos:end="1852:30"><name pos:start="1852:21" pos:end="1852:30">hasTimeout</name></expr>)</condition> <block pos:start="1852:33" pos:end="1863:17">{<block_content pos:start="1853:21" pos:end="1862:22">
                    <expr_stmt pos:start="1853:21" pos:end="1853:70"><expr pos:start="1853:21" pos:end="1853:69"><name pos:start="1853:21" pos:end="1853:36">remainingTimeout</name> <operator pos:start="1853:38" pos:end="1853:38">=</operator> <name pos:start="1853:40" pos:end="1853:49">finishTime</name> <operator pos:start="1853:51" pos:end="1853:51">-</operator> <call pos:start="1853:53" pos:end="1853:69"><name pos:start="1853:53" pos:end="1853:67">time_msec_clock</name><argument_list pos:start="1853:68" pos:end="1853:69">()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1854:21" pos:end="1862:22"><if pos:start="1854:21" pos:end="1862:22">if <condition pos:start="1854:24" pos:end="1854:46">(<expr pos:start="1854:25" pos:end="1854:45"><name pos:start="1854:25" pos:end="1854:40">remainingTimeout</name> <operator pos:start="1854:42" pos:end="1854:43">&lt;=</operator> <literal type="number" pos:start="1854:45" pos:end="1854:45">0</literal></expr>)</condition> <block pos:start="1854:48" pos:end="1862:22">{<block_content pos:start="1855:25" pos:end="1861:34">
                        <expr_stmt pos:start="1855:25" pos:end="1855:57"><expr pos:start="1855:25" pos:end="1855:56"><call pos:start="1855:25" pos:end="1855:56"><name pos:start="1855:25" pos:end="1855:40">log_socket_close</name><argument_list pos:start="1855:41" pos:end="1855:56">(<argument pos:start="1855:42" pos:end="1855:47"><expr pos:start="1855:42" pos:end="1855:47"><name pos:start="1855:42" pos:end="1855:47">handle</name></expr></argument>, <argument pos:start="1855:50" pos:end="1855:55"><expr pos:start="1855:50" pos:end="1855:55"><name pos:start="1855:50" pos:end="1855:55">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1856:25" pos:end="1857:59"><expr pos:start="1856:25" pos:end="1857:58"><call pos:start="1856:25" pos:end="1857:58"><name pos:start="1856:25" pos:end="1856:46">sockConnectWithTimeout</name><argument_list pos:start="1856:47" pos:end="1857:58">(<argument pos:start="1856:48" pos:end="1856:53"><expr pos:start="1856:48" pos:end="1856:53"><name pos:start="1856:48" pos:end="1856:53">handle</name></expr></argument>, <argument pos:start="1856:56" pos:end="1856:62"><expr pos:start="1856:56" pos:end="1856:62"><name pos:start="1856:56" pos:end="1856:62">address</name></expr></argument>, <argument pos:start="1856:65" pos:end="1856:65"><expr pos:start="1856:65" pos:end="1856:65"><literal type="number" pos:start="1856:65" pos:end="1856:65">0</literal></expr></argument>,
                                <argument pos:start="1857:33" pos:end="1857:48"><expr pos:start="1857:33" pos:end="1857:48"><name pos:start="1857:33" pos:end="1857:48">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1857:51" pos:end="1857:57"><expr pos:start="1857:51" pos:end="1857:57"><name pos:start="1857:51" pos:end="1857:57">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1858:25" pos:end="1860:62"><expr pos:start="1858:25" pos:end="1860:61"><call pos:start="1858:25" pos:end="1860:61"><name pos:start="1858:25" pos:end="1858:41">jniThrowException</name><argument_list pos:start="1858:42" pos:end="1860:61">(<argument pos:start="1858:43" pos:end="1858:45"><expr pos:start="1858:43" pos:end="1858:45"><name pos:start="1858:43" pos:end="1858:45">env</name></expr></argument>,
                                <argument pos:start="1859:33" pos:end="1859:65"><expr pos:start="1859:33" pos:end="1859:65"><literal type="string" pos:start="1859:33" pos:end="1859:65">"java/net/SocketTimeoutException"</literal></expr></argument>,
                                <argument pos:start="1860:33" pos:end="1860:60"><expr pos:start="1860:33" pos:end="1860:60"><call pos:start="1860:33" pos:end="1860:60"><name pos:start="1860:33" pos:end="1860:52">netLookupErrorString</name><argument_list pos:start="1860:53" pos:end="1860:60">(<argument pos:start="1860:54" pos:end="1860:59"><expr pos:start="1860:54" pos:end="1860:59"><name pos:start="1860:54" pos:end="1860:59">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto pos:start="1861:25" pos:end="1861:34">goto <name pos:start="1861:30" pos:end="1861:33">bail</name>;</goto>
                     </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else pos:start="1863:19" pos:end="1865:17">else <block pos:start="1863:24" pos:end="1865:17">{<block_content pos:start="1864:21" pos:end="1864:43">
                    <expr_stmt pos:start="1864:21" pos:end="1864:43"><expr pos:start="1864:21" pos:end="1864:42"><name pos:start="1864:21" pos:end="1864:36">remainingTimeout</name> <operator pos:start="1864:38" pos:end="1864:38">=</operator> <literal type="number" pos:start="1864:40" pos:end="1864:42">100</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="1866:15" pos:end="1884:13">else <block pos:start="1866:20" pos:end="1884:13">{<block_content pos:start="1867:17" pos:end="1883:26">
                <expr_stmt pos:start="1867:17" pos:end="1867:49"><expr pos:start="1867:17" pos:end="1867:48"><call pos:start="1867:17" pos:end="1867:48"><name pos:start="1867:17" pos:end="1867:32">log_socket_close</name><argument_list pos:start="1867:33" pos:end="1867:48">(<argument pos:start="1867:34" pos:end="1867:39"><expr pos:start="1867:34" pos:end="1867:39"><name pos:start="1867:34" pos:end="1867:39">handle</name></expr></argument>, <argument pos:start="1867:42" pos:end="1867:47"><expr pos:start="1867:42" pos:end="1867:47"><name pos:start="1867:42" pos:end="1867:47">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1868:17" pos:end="1869:66"><expr pos:start="1868:17" pos:end="1869:65"><call pos:start="1868:17" pos:end="1869:65"><name pos:start="1868:17" pos:end="1868:38">sockConnectWithTimeout</name><argument_list pos:start="1868:39" pos:end="1869:65">(<argument pos:start="1868:40" pos:end="1868:45"><expr pos:start="1868:40" pos:end="1868:45"><name pos:start="1868:40" pos:end="1868:45">handle</name></expr></argument>, <argument pos:start="1868:48" pos:end="1868:54"><expr pos:start="1868:48" pos:end="1868:54"><name pos:start="1868:48" pos:end="1868:54">address</name></expr></argument>, <argument pos:start="1868:57" pos:end="1868:72"><expr pos:start="1868:57" pos:end="1868:72"><name pos:start="1868:57" pos:end="1868:72">remainingTimeout</name></expr></argument>,
                                       <argument pos:start="1869:40" pos:end="1869:55"><expr pos:start="1869:40" pos:end="1869:55"><name pos:start="1869:40" pos:end="1869:55">SOCKET_STEP_DONE</name></expr></argument>, <argument pos:start="1869:58" pos:end="1869:64"><expr pos:start="1869:58" pos:end="1869:64"><name pos:start="1869:58" pos:end="1869:64">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1870:17" pos:end="1882:17"><if pos:start="1870:17" pos:end="1877:17">if <condition pos:start="1870:20" pos:end="1874:52">(<expr pos:start="1870:21" pos:end="1874:51"><operator pos:start="1870:21" pos:end="1870:21">(</operator><name pos:start="1870:22" pos:end="1870:38">SOCKERR_CONNRESET</name> <operator pos:start="1870:40" pos:end="1870:41">==</operator> <name pos:start="1870:43" pos:end="1870:48">result</name><operator pos:start="1870:49" pos:end="1870:49">)</operator> <operator pos:start="1870:51" pos:end="1870:52">||</operator>
                    <operator pos:start="1871:21" pos:end="1871:21">(</operator><name pos:start="1871:22" pos:end="1871:47">SOCKERR_CONNECTION_REFUSED</name> <operator pos:start="1871:49" pos:end="1871:50">==</operator> <name pos:start="1871:52" pos:end="1871:57">result</name><operator pos:start="1871:58" pos:end="1871:58">)</operator> <operator pos:start="1871:60" pos:end="1871:61">||</operator>
                    <operator pos:start="1872:21" pos:end="1872:21">(</operator><name pos:start="1872:22" pos:end="1872:41">SOCKERR_ADDRNOTAVAIL</name> <operator pos:start="1872:43" pos:end="1872:44">==</operator> <name pos:start="1872:46" pos:end="1872:51">result</name><operator pos:start="1872:52" pos:end="1872:52">)</operator> <operator pos:start="1872:54" pos:end="1872:55">||</operator>
                    <operator pos:start="1873:21" pos:end="1873:21">(</operator><name pos:start="1873:22" pos:end="1873:38">SOCKERR_ADDRINUSE</name> <operator pos:start="1873:40" pos:end="1873:41">==</operator> <name pos:start="1873:43" pos:end="1873:48">result</name><operator pos:start="1873:49" pos:end="1873:49">)</operator> <operator pos:start="1873:51" pos:end="1873:52">||</operator>
                    <operator pos:start="1874:21" pos:end="1874:21">(</operator><name pos:start="1874:22" pos:end="1874:40">SOCKERR_ENETUNREACH</name> <operator pos:start="1874:42" pos:end="1874:43">==</operator> <name pos:start="1874:45" pos:end="1874:50">result</name><operator pos:start="1874:51" pos:end="1874:51">)</operator></expr>)</condition> <block pos:start="1874:54" pos:end="1877:17">{<block_content pos:start="1875:21" pos:end="1876:68">
                    <expr_stmt pos:start="1875:21" pos:end="1876:68"><expr pos:start="1875:21" pos:end="1876:67"><call pos:start="1875:21" pos:end="1876:67"><name pos:start="1875:21" pos:end="1875:37">jniThrowException</name><argument_list pos:start="1875:38" pos:end="1876:67">(<argument pos:start="1875:39" pos:end="1875:41"><expr pos:start="1875:39" pos:end="1875:41"><name pos:start="1875:39" pos:end="1875:41">env</name></expr></argument>, <argument pos:start="1875:44" pos:end="1875:70"><expr pos:start="1875:44" pos:end="1875:70"><literal type="string" pos:start="1875:44" pos:end="1875:70">"java/net/ConnectException"</literal></expr></argument>,
                                      <argument pos:start="1876:39" pos:end="1876:66"><expr pos:start="1876:39" pos:end="1876:66"><call pos:start="1876:39" pos:end="1876:66"><name pos:start="1876:39" pos:end="1876:58">netLookupErrorString</name><argument_list pos:start="1876:59" pos:end="1876:66">(<argument pos:start="1876:60" pos:end="1876:65"><expr pos:start="1876:60" pos:end="1876:65"><name pos:start="1876:60" pos:end="1876:65">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="1877:19" pos:end="1880:17">else if <condition pos:start="1877:27" pos:end="1877:52">(<expr pos:start="1877:28" pos:end="1877:51"><name pos:start="1877:28" pos:end="1877:41">SOCKERR_EACCES</name> <operator pos:start="1877:43" pos:end="1877:44">==</operator> <name pos:start="1877:46" pos:end="1877:51">result</name></expr>)</condition> <block pos:start="1877:54" pos:end="1880:17">{<block_content pos:start="1878:21" pos:end="1879:68">
                    <expr_stmt pos:start="1878:21" pos:end="1879:68"><expr pos:start="1878:21" pos:end="1879:67"><call pos:start="1878:21" pos:end="1879:67"><name pos:start="1878:21" pos:end="1878:37">jniThrowException</name><argument_list pos:start="1878:38" pos:end="1879:67">(<argument pos:start="1878:39" pos:end="1878:41"><expr pos:start="1878:39" pos:end="1878:41"><name pos:start="1878:39" pos:end="1878:41">env</name></expr></argument>, <argument pos:start="1878:44" pos:end="1878:72"><expr pos:start="1878:44" pos:end="1878:72"><literal type="string" pos:start="1878:44" pos:end="1878:72">"java/lang/SecurityException"</literal></expr></argument>,
                                      <argument pos:start="1879:39" pos:end="1879:66"><expr pos:start="1879:39" pos:end="1879:66"><call pos:start="1879:39" pos:end="1879:66"><name pos:start="1879:39" pos:end="1879:58">netLookupErrorString</name><argument_list pos:start="1879:59" pos:end="1879:66">(<argument pos:start="1879:60" pos:end="1879:65"><expr pos:start="1879:60" pos:end="1879:65"><name pos:start="1879:60" pos:end="1879:65">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1880:19" pos:end="1882:17">else <block pos:start="1880:24" pos:end="1882:17">{<block_content pos:start="1881:21" pos:end="1881:54">
                    <expr_stmt pos:start="1881:21" pos:end="1881:54"><expr pos:start="1881:21" pos:end="1881:53"><call pos:start="1881:21" pos:end="1881:53"><name pos:start="1881:21" pos:end="1881:40">throwSocketException</name><argument_list pos:start="1881:41" pos:end="1881:53">(<argument pos:start="1881:42" pos:end="1881:44"><expr pos:start="1881:42" pos:end="1881:44"><name pos:start="1881:42" pos:end="1881:44">env</name></expr></argument>, <argument pos:start="1881:47" pos:end="1881:52"><expr pos:start="1881:47" pos:end="1881:52"><name pos:start="1881:47" pos:end="1881:52">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <goto pos:start="1883:17" pos:end="1883:26">goto <name pos:start="1883:22" pos:end="1883:25">bail</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

<label pos:start="1888:1" pos:end="1888:5"><name pos:start="1888:1" pos:end="1888:4">bail</name>:</label>

    <comment type="block" pos:start="1890:5" pos:end="1890:40">/* free the memory for the FD set */</comment>
    <if_stmt pos:start="1891:5" pos:end="1893:5"><if pos:start="1891:5" pos:end="1893:5">if <condition pos:start="1891:8" pos:end="1891:24">(<expr pos:start="1891:9" pos:end="1891:23"><name pos:start="1891:9" pos:end="1891:15">context</name> <operator pos:start="1891:17" pos:end="1891:18">!=</operator> <name pos:start="1891:20" pos:end="1891:23">NULL</name></expr>)</condition>  <block pos:start="1891:27" pos:end="1893:5">{<block_content pos:start="1892:9" pos:end="1892:22">
        <expr_stmt pos:start="1892:9" pos:end="1892:22"><expr pos:start="1892:9" pos:end="1892:21"><call pos:start="1892:9" pos:end="1892:21"><name pos:start="1892:9" pos:end="1892:12">free</name><argument_list pos:start="1892:13" pos:end="1892:21">(<argument pos:start="1892:14" pos:end="1892:20"><expr pos:start="1892:14" pos:end="1892:20"><name pos:start="1892:14" pos:end="1892:20">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="1896:1" pos:end="1953:1">extern <literal type="string" pos:start="1896:8" pos:end="1896:10">"C"</literal> <function pos:start="1896:12" pos:end="1953:1"><type pos:start="1896:12" pos:end="1896:15"><name pos:start="1896:12" pos:end="1896:15">jint</name></type> <name pos:start="1896:17" pos:end="1896:76">Java_org_sipdroid_net_impl_OSNetworkSystem_connectSocketImpl</name><parameter_list pos:start="1896:77" pos:end="1897:79">(<parameter pos:start="1896:78" pos:end="1896:88"><decl pos:start="1896:78" pos:end="1896:88"><type pos:start="1896:78" pos:end="1896:88"><name pos:start="1896:78" pos:end="1896:83">JNIEnv</name><modifier pos:start="1896:84" pos:end="1896:84">*</modifier></type> <name pos:start="1896:86" pos:end="1896:88">env</name></decl></parameter>, <parameter pos:start="1896:91" pos:end="1896:102"><decl pos:start="1896:91" pos:end="1896:102"><type pos:start="1896:91" pos:end="1896:102"><name pos:start="1896:91" pos:end="1896:96">jclass</name></type> <name pos:start="1896:98" pos:end="1896:102">clazz</name></decl></parameter>,
        <parameter pos:start="1897:9" pos:end="1897:30"><decl pos:start="1897:9" pos:end="1897:30"><type pos:start="1897:9" pos:end="1897:30"><name pos:start="1897:9" pos:end="1897:15">jobject</name></type> <name pos:start="1897:17" pos:end="1897:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1897:33" pos:end="1897:49"><decl pos:start="1897:33" pos:end="1897:49"><type pos:start="1897:33" pos:end="1897:49"><name pos:start="1897:33" pos:end="1897:36">jint</name></type> <name pos:start="1897:38" pos:end="1897:49">trafficClass</name></decl></parameter>, <parameter pos:start="1897:52" pos:end="1897:67"><decl pos:start="1897:52" pos:end="1897:67"><type pos:start="1897:52" pos:end="1897:67"><name pos:start="1897:52" pos:end="1897:58">jobject</name></type> <name pos:start="1897:60" pos:end="1897:67">inetAddr</name></decl></parameter>, <parameter pos:start="1897:70" pos:end="1897:78"><decl pos:start="1897:70" pos:end="1897:78"><type pos:start="1897:70" pos:end="1897:78"><name pos:start="1897:70" pos:end="1897:73">jint</name></type> <name pos:start="1897:75" pos:end="1897:78">port</name></decl></parameter>)</parameter_list> <block pos:start="1897:81" pos:end="1953:1">{<block_content pos:start="1900:5" pos:end="1952:15">
    <comment type="line" pos:start="1898:5" pos:end="1898:52">//LOGD("ENTER direct-call connectSocketImpl\n");</comment>

    <decl_stmt pos:start="1900:5" pos:end="1900:31"><decl pos:start="1900:5" pos:end="1900:30"><type pos:start="1900:5" pos:end="1900:22"><name pos:start="1900:5" pos:end="1900:22"><name pos:start="1900:5" pos:end="1900:10">struct</name> <name pos:start="1900:12" pos:end="1900:22">sockaddr_in</name></name></type> <name pos:start="1900:24" pos:end="1900:30">address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1901:5" pos:end="1901:12"><decl pos:start="1901:5" pos:end="1901:11"><type pos:start="1901:5" pos:end="1901:7"><name pos:start="1901:5" pos:end="1901:7">int</name></type> <name pos:start="1901:9" pos:end="1901:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1902:5" pos:end="1902:15"><decl pos:start="1902:5" pos:end="1902:14"><type pos:start="1902:5" pos:end="1902:7"><name pos:start="1902:5" pos:end="1902:7">int</name></type> <name pos:start="1902:9" pos:end="1902:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1903:5" pos:end="1903:28"><decl pos:start="1903:5" pos:end="1903:27"><type pos:start="1903:5" pos:end="1903:14"><name pos:start="1903:5" pos:end="1903:14">jbyteArray</name></type> <name pos:start="1903:16" pos:end="1903:27">java_in_addr</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1905:5" pos:end="1905:41"><expr pos:start="1905:5" pos:end="1905:40"><call pos:start="1905:5" pos:end="1905:40"><name pos:start="1905:5" pos:end="1905:10">memset</name><argument_list pos:start="1905:11" pos:end="1905:40">(<argument pos:start="1905:12" pos:end="1905:19"><expr pos:start="1905:12" pos:end="1905:19"><operator pos:start="1905:12" pos:end="1905:12">&amp;</operator><name pos:start="1905:13" pos:end="1905:19">address</name></expr></argument>, <argument pos:start="1905:22" pos:end="1905:22"><expr pos:start="1905:22" pos:end="1905:22"><literal type="number" pos:start="1905:22" pos:end="1905:22">0</literal></expr></argument>, <argument pos:start="1905:25" pos:end="1905:39"><expr pos:start="1905:25" pos:end="1905:39"><sizeof pos:start="1905:25" pos:end="1905:39">sizeof<argument_list pos:start="1905:31" pos:end="1905:39">(<argument pos:start="1905:32" pos:end="1905:38"><expr pos:start="1905:32" pos:end="1905:38"><name pos:start="1905:32" pos:end="1905:38">address</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1907:5" pos:end="1907:33"><expr pos:start="1907:5" pos:end="1907:32"><name pos:start="1907:5" pos:end="1907:22"><name pos:start="1907:5" pos:end="1907:11">address</name><operator pos:start="1907:12" pos:end="1907:12">.</operator><name pos:start="1907:13" pos:end="1907:22">sin_family</name></name> <operator pos:start="1907:24" pos:end="1907:24">=</operator> <name pos:start="1907:26" pos:end="1907:32">AF_INET</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1909:5" pos:end="1910:45"><expr pos:start="1909:5" pos:end="1910:44"><name pos:start="1909:5" pos:end="1909:7">ret</name> <operator pos:start="1909:9" pos:end="1909:9">=</operator> <call pos:start="1909:11" pos:end="1910:44"><name pos:start="1909:11" pos:end="1909:36">inetAddressToSocketAddress</name><argument_list pos:start="1909:37" pos:end="1910:44">(<argument pos:start="1909:38" pos:end="1909:40"><expr pos:start="1909:38" pos:end="1909:40"><name pos:start="1909:38" pos:end="1909:40">env</name></expr></argument>, <argument pos:start="1909:43" pos:end="1909:50"><expr pos:start="1909:43" pos:end="1909:50"><name pos:start="1909:43" pos:end="1909:50">inetAddr</name></expr></argument>, <argument pos:start="1909:53" pos:end="1909:56"><expr pos:start="1909:53" pos:end="1909:56"><name pos:start="1909:53" pos:end="1909:56">port</name></expr></argument>,
            <argument pos:start="1910:13" pos:end="1910:43"><expr pos:start="1910:13" pos:end="1910:43"><operator pos:start="1910:13" pos:end="1910:13">(</operator>struct <name pos:start="1910:21" pos:end="1910:31">sockaddr_in</name> <operator pos:start="1910:33" pos:end="1910:33">*</operator><operator pos:start="1910:34" pos:end="1910:34">)</operator> <operator pos:start="1910:36" pos:end="1910:36">&amp;</operator><name pos:start="1910:37" pos:end="1910:43">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1912:5" pos:end="1915:5"><if pos:start="1912:5" pos:end="1915:5">if <condition pos:start="1912:8" pos:end="1912:16">(<expr pos:start="1912:9" pos:end="1912:15"><name pos:start="1912:9" pos:end="1912:11">ret</name> <operator pos:start="1912:13" pos:end="1912:13">&lt;</operator> <literal type="number" pos:start="1912:15" pos:end="1912:15">0</literal></expr>)</condition> <block pos:start="1912:18" pos:end="1915:5">{<block_content pos:start="1913:9" pos:end="1914:19">
        <expr_stmt pos:start="1913:9" pos:end="1913:53"><expr pos:start="1913:9" pos:end="1913:52"><call pos:start="1913:9" pos:end="1913:52"><name pos:start="1913:9" pos:end="1913:28">throwSocketException</name><argument_list pos:start="1913:29" pos:end="1913:52">(<argument pos:start="1913:30" pos:end="1913:32"><expr pos:start="1913:30" pos:end="1913:32"><name pos:start="1913:30" pos:end="1913:32">env</name></expr></argument>, <argument pos:start="1913:35" pos:end="1913:51"><expr pos:start="1913:35" pos:end="1913:51"><name pos:start="1913:35" pos:end="1913:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1914:9" pos:end="1914:19">return <expr pos:start="1914:16" pos:end="1914:18"><name pos:start="1914:16" pos:end="1914:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1917:5" pos:end="1917:61"><expr pos:start="1917:5" pos:end="1917:60"><name pos:start="1917:5" pos:end="1917:10">handle</name> <operator pos:start="1917:12" pos:end="1917:12">=</operator> <call pos:start="1917:14" pos:end="1917:60"><name pos:start="1917:14" pos:end="1917:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1917:40" pos:end="1917:60">(<argument pos:start="1917:41" pos:end="1917:43"><expr pos:start="1917:41" pos:end="1917:43"><name pos:start="1917:41" pos:end="1917:43">env</name></expr></argument>, <argument pos:start="1917:46" pos:end="1917:59"><expr pos:start="1917:46" pos:end="1917:59"><name pos:start="1917:46" pos:end="1917:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1919:5" pos:end="1922:5"><if pos:start="1919:5" pos:end="1922:5">if <condition pos:start="1919:8" pos:end="1919:36">(<expr pos:start="1919:9" pos:end="1919:35"><name pos:start="1919:9" pos:end="1919:14">handle</name> <operator pos:start="1919:16" pos:end="1919:17">==</operator> <literal type="number" pos:start="1919:19" pos:end="1919:19">0</literal> <operator pos:start="1919:21" pos:end="1919:22">||</operator> <name pos:start="1919:24" pos:end="1919:29">handle</name> <operator pos:start="1919:31" pos:end="1919:32">==</operator> <operator pos:start="1919:34" pos:end="1919:34">-</operator><literal type="number" pos:start="1919:35" pos:end="1919:35">1</literal></expr>)</condition> <block pos:start="1919:38" pos:end="1922:5">{<block_content pos:start="1920:9" pos:end="1921:18">
        <expr_stmt pos:start="1920:9" pos:end="1920:53"><expr pos:start="1920:9" pos:end="1920:52"><call pos:start="1920:9" pos:end="1920:52"><name pos:start="1920:9" pos:end="1920:28">throwSocketException</name><argument_list pos:start="1920:29" pos:end="1920:52">(<argument pos:start="1920:30" pos:end="1920:32"><expr pos:start="1920:30" pos:end="1920:32"><name pos:start="1920:30" pos:end="1920:32">env</name></expr></argument>, <argument pos:start="1920:35" pos:end="1920:51"><expr pos:start="1920:35" pos:end="1920:51"><name pos:start="1920:35" pos:end="1920:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1921:9" pos:end="1921:18">return <expr pos:start="1921:16" pos:end="1921:17"><operator pos:start="1921:16" pos:end="1921:16">-</operator><literal type="number" pos:start="1921:17" pos:end="1921:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1924:5" pos:end="1924:35"><expr pos:start="1924:5" pos:end="1924:34"><name pos:start="1924:5" pos:end="1924:20"><name pos:start="1924:5" pos:end="1924:11">address</name><operator pos:start="1924:12" pos:end="1924:12">.</operator><name pos:start="1924:13" pos:end="1924:20">sin_port</name></name> <operator pos:start="1924:22" pos:end="1924:22">=</operator> <call pos:start="1924:24" pos:end="1924:34"><name pos:start="1924:24" pos:end="1924:28">htons</name><argument_list pos:start="1924:29" pos:end="1924:34">(<argument pos:start="1924:30" pos:end="1924:33"><expr pos:start="1924:30" pos:end="1924:33"><name pos:start="1924:30" pos:end="1924:33">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1926:5" pos:end="1944:5"><if pos:start="1926:5" pos:end="1933:5">if <condition pos:start="1926:8" pos:end="1926:51">(<expr pos:start="1926:9" pos:end="1926:50"><name pos:start="1926:9" pos:end="1926:24">useAdbNetworking</name> <operator pos:start="1926:26" pos:end="1926:27">&amp;&amp;</operator> <operator pos:start="1926:29" pos:end="1926:29">!</operator><call pos:start="1926:30" pos:end="1926:50"><name pos:start="1926:30" pos:end="1926:40">isLocalhost</name><argument_list pos:start="1926:41" pos:end="1926:50">(<argument pos:start="1926:42" pos:end="1926:49"><expr pos:start="1926:42" pos:end="1926:49"><operator pos:start="1926:42" pos:end="1926:42">&amp;</operator><name pos:start="1926:43" pos:end="1926:49">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1926:53" pos:end="1933:5">{<block_content pos:start="1930:9" pos:end="1930:58">

        <comment type="line" pos:start="1928:9" pos:end="1928:63">// LOGD("+connect to address 0x%08x port %d (via adb)",</comment>
        <comment type="line" pos:start="1929:9" pos:end="1929:56">//         address.sin_addr.s_addr, (int) port);</comment>
        <expr_stmt pos:start="1930:9" pos:end="1930:58"><expr pos:start="1930:9" pos:end="1930:57"><name pos:start="1930:9" pos:end="1930:11">ret</name> <operator pos:start="1930:13" pos:end="1930:13">=</operator> <call pos:start="1930:15" pos:end="1930:57"><name pos:start="1930:15" pos:end="1930:39">adb_networking_connect_fd</name><argument_list pos:start="1930:40" pos:end="1930:57">(<argument pos:start="1930:41" pos:end="1930:46"><expr pos:start="1930:41" pos:end="1930:46"><name pos:start="1930:41" pos:end="1930:46">handle</name></expr></argument>, <argument pos:start="1930:49" pos:end="1930:56"><expr pos:start="1930:49" pos:end="1930:56"><operator pos:start="1930:49" pos:end="1930:49">&amp;</operator><name pos:start="1930:50" pos:end="1930:56">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="1931:9" pos:end="1931:66">// LOGD("-connect ret %d errno %d (via adb)", ret, errno);</comment>

    </block_content>}</block></if> <else pos:start="1933:7" pos:end="1944:5">else <block pos:start="1933:12" pos:end="1944:5">{<block_content pos:start="1936:9" pos:end="1942:9">

        <comment type="line" pos:start="1935:9" pos:end="1935:50">// call this method with a timeout of zero</comment>
        <expr_stmt pos:start="1936:9" pos:end="1937:65"><expr pos:start="1936:9" pos:end="1937:64"><call pos:start="1936:9" pos:end="1937:64"><name pos:start="1936:9" pos:end="1936:85">Java_org_sipdroid_net_impl_OSNetworkSystem_connectStreamWithTimeoutSocketImpl</name><argument_list pos:start="1936:86" pos:end="1937:64">(<argument pos:start="1936:87" pos:end="1936:89"><expr pos:start="1936:87" pos:end="1936:89"><name pos:start="1936:87" pos:end="1936:89">env</name></expr></argument>, <argument pos:start="1936:92" pos:end="1936:96"><expr pos:start="1936:92" pos:end="1936:96"><name pos:start="1936:92" pos:end="1936:96">clazz</name></expr></argument>,
                <argument pos:start="1937:17" pos:end="1937:30"><expr pos:start="1937:17" pos:end="1937:30"><name pos:start="1937:17" pos:end="1937:30">fileDescriptor</name></expr></argument>, <argument pos:start="1937:33" pos:end="1937:36"><expr pos:start="1937:33" pos:end="1937:36"><name pos:start="1937:33" pos:end="1937:36">port</name></expr></argument>, <argument pos:start="1937:39" pos:end="1937:39"><expr pos:start="1937:39" pos:end="1937:39"><literal type="number" pos:start="1937:39" pos:end="1937:39">0</literal></expr></argument>, <argument pos:start="1937:42" pos:end="1937:53"><expr pos:start="1937:42" pos:end="1937:53"><name pos:start="1937:42" pos:end="1937:53">trafficClass</name></expr></argument>, <argument pos:start="1937:56" pos:end="1937:63"><expr pos:start="1937:56" pos:end="1937:63"><name pos:start="1937:56" pos:end="1937:63">inetAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1938:9" pos:end="1942:9"><if pos:start="1938:9" pos:end="1940:9">if <condition pos:start="1938:12" pos:end="1938:42">(<expr pos:start="1938:13" pos:end="1938:41"><call pos:start="1938:13" pos:end="1938:36"><name pos:start="1938:13" pos:end="1938:34"><name pos:start="1938:13" pos:end="1938:15">env</name><operator pos:start="1938:16" pos:end="1938:17">-&gt;</operator><name pos:start="1938:18" pos:end="1938:34">ExceptionOccurred</name></name><argument_list pos:start="1938:35" pos:end="1938:36">()</argument_list></call> <operator pos:start="1938:38" pos:end="1938:39">!=</operator> <literal type="number" pos:start="1938:41" pos:end="1938:41">0</literal></expr>)</condition> <block pos:start="1938:44" pos:end="1940:9">{<block_content pos:start="1939:13" pos:end="1939:22">
            <return pos:start="1939:13" pos:end="1939:22">return <expr pos:start="1939:20" pos:end="1939:21"><operator pos:start="1939:20" pos:end="1939:20">-</operator><literal type="number" pos:start="1939:21" pos:end="1939:21">1</literal></expr>;</return>
        </block_content>}</block></if> <else pos:start="1940:11" pos:end="1942:9">else <block pos:start="1940:16" pos:end="1942:9">{<block_content pos:start="1941:13" pos:end="1941:21">
            <return pos:start="1941:13" pos:end="1941:21">return <expr pos:start="1941:20" pos:end="1941:20"><literal type="number" pos:start="1941:20" pos:end="1941:20">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="1946:5" pos:end="1950:5"><if pos:start="1946:5" pos:end="1950:5">if <condition pos:start="1946:8" pos:end="1946:16">(<expr pos:start="1946:9" pos:end="1946:15"><name pos:start="1946:9" pos:end="1946:11">ret</name> <operator pos:start="1946:13" pos:end="1946:13">&lt;</operator> <literal type="number" pos:start="1946:15" pos:end="1946:15">0</literal></expr>)</condition> <block pos:start="1946:18" pos:end="1950:5">{<block_content pos:start="1947:9" pos:end="1949:19">
        <expr_stmt pos:start="1947:9" pos:end="1948:59"><expr pos:start="1947:9" pos:end="1948:58"><call pos:start="1947:9" pos:end="1948:58"><name pos:start="1947:9" pos:end="1947:25">jniThrowException</name><argument_list pos:start="1947:26" pos:end="1948:58">(<argument pos:start="1947:27" pos:end="1947:29"><expr pos:start="1947:27" pos:end="1947:29"><name pos:start="1947:27" pos:end="1947:29">env</name></expr></argument>, <argument pos:start="1947:32" pos:end="1947:58"><expr pos:start="1947:32" pos:end="1947:58"><literal type="string" pos:start="1947:32" pos:end="1947:58">"java/net/ConnectException"</literal></expr></argument>,
                <argument pos:start="1948:17" pos:end="1948:57"><expr pos:start="1948:17" pos:end="1948:57"><call pos:start="1948:17" pos:end="1948:57"><name pos:start="1948:17" pos:end="1948:36">netLookupErrorString</name><argument_list pos:start="1948:37" pos:end="1948:57">(<argument pos:start="1948:38" pos:end="1948:56"><expr pos:start="1948:38" pos:end="1948:56"><call pos:start="1948:38" pos:end="1948:56"><name pos:start="1948:38" pos:end="1948:49">convertError</name><argument_list pos:start="1948:50" pos:end="1948:56">(<argument pos:start="1948:51" pos:end="1948:55"><expr pos:start="1948:51" pos:end="1948:55"><name pos:start="1948:51" pos:end="1948:55">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1949:9" pos:end="1949:19">return <expr pos:start="1949:16" pos:end="1949:18"><name pos:start="1949:16" pos:end="1949:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1952:5" pos:end="1952:15">return <expr pos:start="1952:12" pos:end="1952:14"><name pos:start="1952:12" pos:end="1952:14">ret</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="1955:1" pos:end="1985:1">extern <literal type="string" pos:start="1955:8" pos:end="1955:10">"C"</literal> <function pos:start="1955:12" pos:end="1985:1"><type pos:start="1955:12" pos:end="1955:15"><name pos:start="1955:12" pos:end="1955:15">void</name></type> <name pos:start="1955:17" pos:end="1955:73">Java_org_sipdroid_net_impl_OSNetworkSystem_socketBindImpl</name><parameter_list pos:start="1955:74" pos:end="1956:63">(<parameter pos:start="1955:75" pos:end="1955:85"><decl pos:start="1955:75" pos:end="1955:85"><type pos:start="1955:75" pos:end="1955:85"><name pos:start="1955:75" pos:end="1955:80">JNIEnv</name><modifier pos:start="1955:81" pos:end="1955:81">*</modifier></type> <name pos:start="1955:83" pos:end="1955:85">env</name></decl></parameter>, <parameter pos:start="1955:88" pos:end="1955:99"><decl pos:start="1955:88" pos:end="1955:99"><type pos:start="1955:88" pos:end="1955:99"><name pos:start="1955:88" pos:end="1955:93">jclass</name></type> <name pos:start="1955:95" pos:end="1955:99">clazz</name></decl></parameter>,
        <parameter pos:start="1956:9" pos:end="1956:30"><decl pos:start="1956:9" pos:end="1956:30"><type pos:start="1956:9" pos:end="1956:30"><name pos:start="1956:9" pos:end="1956:15">jobject</name></type> <name pos:start="1956:17" pos:end="1956:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1956:33" pos:end="1956:41"><decl pos:start="1956:33" pos:end="1956:41"><type pos:start="1956:33" pos:end="1956:41"><name pos:start="1956:33" pos:end="1956:36">jint</name></type> <name pos:start="1956:38" pos:end="1956:41">port</name></decl></parameter>, <parameter pos:start="1956:44" pos:end="1956:62"><decl pos:start="1956:44" pos:end="1956:62"><type pos:start="1956:44" pos:end="1956:62"><name pos:start="1956:44" pos:end="1956:50">jobject</name></type> <name pos:start="1956:52" pos:end="1956:62">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="1956:65" pos:end="1985:1">{<block_content pos:start="1959:5" pos:end="1984:5">
    <comment type="line" pos:start="1957:5" pos:end="1957:36">// LOGD("ENTER socketBindImpl");</comment>

    <decl_stmt pos:start="1959:5" pos:end="1959:35"><decl pos:start="1959:5" pos:end="1959:34"><type pos:start="1959:5" pos:end="1959:22"><name pos:start="1959:5" pos:end="1959:22"><name pos:start="1959:5" pos:end="1959:10">struct</name> <name pos:start="1959:12" pos:end="1959:22">sockaddr_in</name></name></type> <name pos:start="1959:24" pos:end="1959:34">sockaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1960:5" pos:end="1960:12"><decl pos:start="1960:5" pos:end="1960:11"><type pos:start="1960:5" pos:end="1960:7"><name pos:start="1960:5" pos:end="1960:7">int</name></type> <name pos:start="1960:9" pos:end="1960:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1961:5" pos:end="1961:15"><decl pos:start="1961:5" pos:end="1961:14"><type pos:start="1961:5" pos:end="1961:7"><name pos:start="1961:5" pos:end="1961:7">int</name></type> <name pos:start="1961:9" pos:end="1961:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1963:5" pos:end="1964:49"><expr pos:start="1963:5" pos:end="1964:48"><name pos:start="1963:5" pos:end="1963:7">ret</name> <operator pos:start="1963:9" pos:end="1963:9">=</operator> <call pos:start="1963:11" pos:end="1964:48"><name pos:start="1963:11" pos:end="1963:36">inetAddressToSocketAddress</name><argument_list pos:start="1963:37" pos:end="1964:48">(<argument pos:start="1963:38" pos:end="1963:40"><expr pos:start="1963:38" pos:end="1963:40"><name pos:start="1963:38" pos:end="1963:40">env</name></expr></argument>, <argument pos:start="1963:43" pos:end="1963:53"><expr pos:start="1963:43" pos:end="1963:53"><name pos:start="1963:43" pos:end="1963:53">inetAddress</name></expr></argument>, <argument pos:start="1963:56" pos:end="1963:59"><expr pos:start="1963:56" pos:end="1963:59"><name pos:start="1963:56" pos:end="1963:59">port</name></expr></argument>,
            <argument pos:start="1964:13" pos:end="1964:47"><expr pos:start="1964:13" pos:end="1964:47"><operator pos:start="1964:13" pos:end="1964:13">(</operator>struct <name pos:start="1964:21" pos:end="1964:31">sockaddr_in</name> <operator pos:start="1964:33" pos:end="1964:33">*</operator><operator pos:start="1964:34" pos:end="1964:34">)</operator> <operator pos:start="1964:36" pos:end="1964:36">&amp;</operator><name pos:start="1964:37" pos:end="1964:47">sockaddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1966:5" pos:end="1969:5"><if pos:start="1966:5" pos:end="1969:5">if <condition pos:start="1966:8" pos:end="1966:16">(<expr pos:start="1966:9" pos:end="1966:15"><name pos:start="1966:9" pos:end="1966:11">ret</name> <operator pos:start="1966:13" pos:end="1966:13">&lt;</operator> <literal type="number" pos:start="1966:15" pos:end="1966:15">0</literal></expr>)</condition> <block pos:start="1966:18" pos:end="1969:5">{<block_content pos:start="1967:9" pos:end="1968:15">
        <expr_stmt pos:start="1967:9" pos:end="1967:53"><expr pos:start="1967:9" pos:end="1967:52"><call pos:start="1967:9" pos:end="1967:52"><name pos:start="1967:9" pos:end="1967:28">throwSocketException</name><argument_list pos:start="1967:29" pos:end="1967:52">(<argument pos:start="1967:30" pos:end="1967:32"><expr pos:start="1967:30" pos:end="1967:32"><name pos:start="1967:30" pos:end="1967:32">env</name></expr></argument>, <argument pos:start="1967:35" pos:end="1967:51"><expr pos:start="1967:35" pos:end="1967:51"><name pos:start="1967:35" pos:end="1967:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1968:9" pos:end="1968:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1971:5" pos:end="1971:61"><expr pos:start="1971:5" pos:end="1971:60"><name pos:start="1971:5" pos:end="1971:10">handle</name> <operator pos:start="1971:12" pos:end="1971:12">=</operator> <call pos:start="1971:14" pos:end="1971:60"><name pos:start="1971:14" pos:end="1971:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1971:40" pos:end="1971:60">(<argument pos:start="1971:41" pos:end="1971:43"><expr pos:start="1971:41" pos:end="1971:43"><name pos:start="1971:41" pos:end="1971:43">env</name></expr></argument>, <argument pos:start="1971:46" pos:end="1971:59"><expr pos:start="1971:46" pos:end="1971:59"><name pos:start="1971:46" pos:end="1971:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1973:5" pos:end="1976:5"><if pos:start="1973:5" pos:end="1976:5">if <condition pos:start="1973:8" pos:end="1973:36">(<expr pos:start="1973:9" pos:end="1973:35"><name pos:start="1973:9" pos:end="1973:14">handle</name> <operator pos:start="1973:16" pos:end="1973:17">==</operator> <literal type="number" pos:start="1973:19" pos:end="1973:19">0</literal> <operator pos:start="1973:21" pos:end="1973:22">||</operator> <name pos:start="1973:24" pos:end="1973:29">handle</name> <operator pos:start="1973:31" pos:end="1973:32">==</operator> <operator pos:start="1973:34" pos:end="1973:34">-</operator><literal type="number" pos:start="1973:35" pos:end="1973:35">1</literal></expr>)</condition> <block pos:start="1973:38" pos:end="1976:5">{<block_content pos:start="1974:9" pos:end="1975:15">
        <expr_stmt pos:start="1974:9" pos:end="1974:53"><expr pos:start="1974:9" pos:end="1974:52"><call pos:start="1974:9" pos:end="1974:52"><name pos:start="1974:9" pos:end="1974:28">throwSocketException</name><argument_list pos:start="1974:29" pos:end="1974:52">(<argument pos:start="1974:30" pos:end="1974:32"><expr pos:start="1974:30" pos:end="1974:32"><name pos:start="1974:30" pos:end="1974:32">env</name></expr></argument>, <argument pos:start="1974:35" pos:end="1974:51"><expr pos:start="1974:35" pos:end="1974:51"><name pos:start="1974:35" pos:end="1974:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1975:9" pos:end="1975:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1978:5" pos:end="1978:75"><expr pos:start="1978:5" pos:end="1978:74"><name pos:start="1978:5" pos:end="1978:7">ret</name> <operator pos:start="1978:9" pos:end="1978:9">=</operator> <call pos:start="1978:11" pos:end="1978:74"><name pos:start="1978:11" pos:end="1978:14">bind</name><argument_list pos:start="1978:15" pos:end="1978:74">(<argument pos:start="1978:16" pos:end="1978:21"><expr pos:start="1978:16" pos:end="1978:21"><name pos:start="1978:16" pos:end="1978:21">handle</name></expr></argument>, <argument pos:start="1978:24" pos:end="1978:52"><expr pos:start="1978:24" pos:end="1978:52"><operator pos:start="1978:24" pos:end="1978:24">(</operator><specifier pos:start="1978:25" pos:end="1978:29">const</specifier> <name pos:start="1978:31" pos:end="1978:38">sockaddr</name><operator pos:start="1978:39" pos:end="1978:39">*</operator><operator pos:start="1978:40" pos:end="1978:40">)</operator><operator pos:start="1978:41" pos:end="1978:41">&amp;</operator><name pos:start="1978:42" pos:end="1978:52">sockaddress</name></expr></argument>, <argument pos:start="1978:55" pos:end="1978:73"><expr pos:start="1978:55" pos:end="1978:73"><sizeof pos:start="1978:55" pos:end="1978:73">sizeof<argument_list pos:start="1978:61" pos:end="1978:73">(<argument pos:start="1978:62" pos:end="1978:72"><expr pos:start="1978:62" pos:end="1978:72"><name pos:start="1978:62" pos:end="1978:72">sockaddress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1980:5" pos:end="1984:5"><if pos:start="1980:5" pos:end="1984:5">if <condition pos:start="1980:8" pos:end="1980:16">(<expr pos:start="1980:9" pos:end="1980:15"><name pos:start="1980:9" pos:end="1980:11">ret</name> <operator pos:start="1980:13" pos:end="1980:13">&lt;</operator> <literal type="number" pos:start="1980:15" pos:end="1980:15">0</literal></expr>)</condition> <block pos:start="1980:18" pos:end="1984:5">{<block_content pos:start="1981:9" pos:end="1983:15">
        <expr_stmt pos:start="1981:9" pos:end="1982:59"><expr pos:start="1981:9" pos:end="1982:58"><call pos:start="1981:9" pos:end="1982:58"><name pos:start="1981:9" pos:end="1981:25">jniThrowException</name><argument_list pos:start="1981:26" pos:end="1982:58">(<argument pos:start="1981:27" pos:end="1981:29"><expr pos:start="1981:27" pos:end="1981:29"><name pos:start="1981:27" pos:end="1981:29">env</name></expr></argument>, <argument pos:start="1981:32" pos:end="1981:55"><expr pos:start="1981:32" pos:end="1981:55"><literal type="string" pos:start="1981:32" pos:end="1981:55">"java/net/BindException"</literal></expr></argument>,
                <argument pos:start="1982:17" pos:end="1982:57"><expr pos:start="1982:17" pos:end="1982:57"><call pos:start="1982:17" pos:end="1982:57"><name pos:start="1982:17" pos:end="1982:36">netLookupErrorString</name><argument_list pos:start="1982:37" pos:end="1982:57">(<argument pos:start="1982:38" pos:end="1982:56"><expr pos:start="1982:38" pos:end="1982:56"><call pos:start="1982:38" pos:end="1982:56"><name pos:start="1982:38" pos:end="1982:49">convertError</name><argument_list pos:start="1982:50" pos:end="1982:56">(<argument pos:start="1982:51" pos:end="1982:55"><expr pos:start="1982:51" pos:end="1982:55"><name pos:start="1982:51" pos:end="1982:55">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1983:9" pos:end="1983:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="1987:1" pos:end="2009:1">extern <literal type="string" pos:start="1987:8" pos:end="1987:10">"C"</literal> <function pos:start="1987:12" pos:end="2009:1"><type pos:start="1987:12" pos:end="1987:15"><name pos:start="1987:12" pos:end="1987:15">void</name></type> <name pos:start="1987:17" pos:end="1987:81">Java_org_sipdroid_net_impl_OSNetworkSystem_listenStreamSocketImpl</name><parameter_list pos:start="1987:82" pos:end="1988:45">(<parameter pos:start="1987:83" pos:end="1987:93"><decl pos:start="1987:83" pos:end="1987:93"><type pos:start="1987:83" pos:end="1987:93"><name pos:start="1987:83" pos:end="1987:88">JNIEnv</name><modifier pos:start="1987:89" pos:end="1987:89">*</modifier></type> <name pos:start="1987:91" pos:end="1987:93">env</name></decl></parameter>, <parameter pos:start="1987:96" pos:end="1987:107"><decl pos:start="1987:96" pos:end="1987:107"><type pos:start="1987:96" pos:end="1987:107"><name pos:start="1987:96" pos:end="1987:101">jclass</name></type> <name pos:start="1987:103" pos:end="1987:107">clazz</name></decl></parameter>,
        <parameter pos:start="1988:9" pos:end="1988:30"><decl pos:start="1988:9" pos:end="1988:30"><type pos:start="1988:9" pos:end="1988:30"><name pos:start="1988:9" pos:end="1988:15">jobject</name></type> <name pos:start="1988:17" pos:end="1988:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="1988:33" pos:end="1988:44"><decl pos:start="1988:33" pos:end="1988:44"><type pos:start="1988:33" pos:end="1988:44"><name pos:start="1988:33" pos:end="1988:36">jint</name></type> <name pos:start="1988:38" pos:end="1988:44">backlog</name></decl></parameter>)</parameter_list> <block pos:start="1988:47" pos:end="2009:1">{<block_content pos:start="1991:5" pos:end="2008:5">
    <comment type="line" pos:start="1989:5" pos:end="1989:44">// LOGD("ENTER listenStreamSocketImpl");</comment>

    <decl_stmt pos:start="1991:5" pos:end="1991:12"><decl pos:start="1991:5" pos:end="1991:11"><type pos:start="1991:5" pos:end="1991:7"><name pos:start="1991:5" pos:end="1991:7">int</name></type> <name pos:start="1991:9" pos:end="1991:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1992:5" pos:end="1992:15"><decl pos:start="1992:5" pos:end="1992:14"><type pos:start="1992:5" pos:end="1992:7"><name pos:start="1992:5" pos:end="1992:7">int</name></type> <name pos:start="1992:9" pos:end="1992:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1994:5" pos:end="1994:61"><expr pos:start="1994:5" pos:end="1994:60"><name pos:start="1994:5" pos:end="1994:10">handle</name> <operator pos:start="1994:12" pos:end="1994:12">=</operator> <call pos:start="1994:14" pos:end="1994:60"><name pos:start="1994:14" pos:end="1994:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="1994:40" pos:end="1994:60">(<argument pos:start="1994:41" pos:end="1994:43"><expr pos:start="1994:41" pos:end="1994:43"><name pos:start="1994:41" pos:end="1994:43">env</name></expr></argument>, <argument pos:start="1994:46" pos:end="1994:59"><expr pos:start="1994:46" pos:end="1994:59"><name pos:start="1994:46" pos:end="1994:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1996:5" pos:end="1999:5"><if pos:start="1996:5" pos:end="1999:5">if <condition pos:start="1996:8" pos:end="1996:36">(<expr pos:start="1996:9" pos:end="1996:35"><name pos:start="1996:9" pos:end="1996:14">handle</name> <operator pos:start="1996:16" pos:end="1996:17">==</operator> <literal type="number" pos:start="1996:19" pos:end="1996:19">0</literal> <operator pos:start="1996:21" pos:end="1996:22">||</operator> <name pos:start="1996:24" pos:end="1996:29">handle</name> <operator pos:start="1996:31" pos:end="1996:32">==</operator> <operator pos:start="1996:34" pos:end="1996:34">-</operator><literal type="number" pos:start="1996:35" pos:end="1996:35">1</literal></expr>)</condition> <block pos:start="1996:38" pos:end="1999:5">{<block_content pos:start="1997:9" pos:end="1998:15">
        <expr_stmt pos:start="1997:9" pos:end="1997:53"><expr pos:start="1997:9" pos:end="1997:52"><call pos:start="1997:9" pos:end="1997:52"><name pos:start="1997:9" pos:end="1997:28">throwSocketException</name><argument_list pos:start="1997:29" pos:end="1997:52">(<argument pos:start="1997:30" pos:end="1997:32"><expr pos:start="1997:30" pos:end="1997:32"><name pos:start="1997:30" pos:end="1997:32">env</name></expr></argument>, <argument pos:start="1997:35" pos:end="1997:51"><expr pos:start="1997:35" pos:end="1997:51"><name pos:start="1997:35" pos:end="1997:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1998:9" pos:end="1998:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2001:5" pos:end="2001:34"><expr pos:start="2001:5" pos:end="2001:33"><name pos:start="2001:5" pos:end="2001:7">ret</name> <operator pos:start="2001:9" pos:end="2001:9">=</operator> <call pos:start="2001:11" pos:end="2001:33"><name pos:start="2001:11" pos:end="2001:16">listen</name><argument_list pos:start="2001:17" pos:end="2001:33">(<argument pos:start="2001:18" pos:end="2001:23"><expr pos:start="2001:18" pos:end="2001:23"><name pos:start="2001:18" pos:end="2001:23">handle</name></expr></argument>, <argument pos:start="2001:26" pos:end="2001:32"><expr pos:start="2001:26" pos:end="2001:32"><name pos:start="2001:26" pos:end="2001:32">backlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2003:5" pos:end="2008:5"><if pos:start="2003:5" pos:end="2008:5">if <condition pos:start="2003:8" pos:end="2003:16">(<expr pos:start="2003:9" pos:end="2003:15"><name pos:start="2003:9" pos:end="2003:11">ret</name> <operator pos:start="2003:13" pos:end="2003:13">&lt;</operator> <literal type="number" pos:start="2003:15" pos:end="2003:15">0</literal></expr>)</condition> <block pos:start="2003:18" pos:end="2008:5">{<block_content pos:start="2004:9" pos:end="2007:15">
        <decl_stmt pos:start="2004:9" pos:end="2004:38"><decl pos:start="2004:9" pos:end="2004:37"><type pos:start="2004:9" pos:end="2004:11"><name pos:start="2004:9" pos:end="2004:11">int</name></type> <name pos:start="2004:13" pos:end="2004:15">err</name> <init pos:start="2004:17" pos:end="2004:37">= <expr pos:start="2004:19" pos:end="2004:37"><call pos:start="2004:19" pos:end="2004:37"><name pos:start="2004:19" pos:end="2004:30">convertError</name><argument_list pos:start="2004:31" pos:end="2004:37">(<argument pos:start="2004:32" pos:end="2004:36"><expr pos:start="2004:32" pos:end="2004:36"><name pos:start="2004:32" pos:end="2004:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2005:9" pos:end="2005:38"><expr pos:start="2005:9" pos:end="2005:37"><call pos:start="2005:9" pos:end="2005:37"><name pos:start="2005:9" pos:end="2005:24">log_socket_close</name><argument_list pos:start="2005:25" pos:end="2005:37">(<argument pos:start="2005:26" pos:end="2005:31"><expr pos:start="2005:26" pos:end="2005:31"><name pos:start="2005:26" pos:end="2005:31">handle</name></expr></argument>, <argument pos:start="2005:34" pos:end="2005:36"><expr pos:start="2005:34" pos:end="2005:36"><name pos:start="2005:34" pos:end="2005:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2006:9" pos:end="2006:39"><expr pos:start="2006:9" pos:end="2006:38"><call pos:start="2006:9" pos:end="2006:38"><name pos:start="2006:9" pos:end="2006:28">throwSocketException</name><argument_list pos:start="2006:29" pos:end="2006:38">(<argument pos:start="2006:30" pos:end="2006:32"><expr pos:start="2006:30" pos:end="2006:32"><name pos:start="2006:30" pos:end="2006:32">env</name></expr></argument>, <argument pos:start="2006:35" pos:end="2006:37"><expr pos:start="2006:35" pos:end="2006:37"><name pos:start="2006:35" pos:end="2006:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2007:9" pos:end="2007:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2011:1" pos:end="2052:1">extern <literal type="string" pos:start="2011:8" pos:end="2011:10">"C"</literal> <function pos:start="2011:12" pos:end="2052:1"><type pos:start="2011:12" pos:end="2011:15"><name pos:start="2011:12" pos:end="2011:15">jint</name></type> <name pos:start="2011:17" pos:end="2011:78">Java_org_sipdroid_net_impl_OSNetworkSystem_availableStreamImpl</name><parameter_list pos:start="2011:79" pos:end="2012:31">(<parameter pos:start="2011:80" pos:end="2011:90"><decl pos:start="2011:80" pos:end="2011:90"><type pos:start="2011:80" pos:end="2011:90"><name pos:start="2011:80" pos:end="2011:85">JNIEnv</name><modifier pos:start="2011:86" pos:end="2011:86">*</modifier></type> <name pos:start="2011:88" pos:end="2011:90">env</name></decl></parameter>, <parameter pos:start="2011:93" pos:end="2011:104"><decl pos:start="2011:93" pos:end="2011:104"><type pos:start="2011:93" pos:end="2011:104"><name pos:start="2011:93" pos:end="2011:98">jclass</name></type> <name pos:start="2011:100" pos:end="2011:104">clazz</name></decl></parameter>,
        <parameter pos:start="2012:9" pos:end="2012:30"><decl pos:start="2012:9" pos:end="2012:30"><type pos:start="2012:9" pos:end="2012:30"><name pos:start="2012:9" pos:end="2012:15">jobject</name></type> <name pos:start="2012:17" pos:end="2012:30">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="2012:33" pos:end="2052:1">{<block_content pos:start="2015:5" pos:end="2051:18">
    <comment type="line" pos:start="2013:5" pos:end="2013:41">// LOGD("ENTER availableStreamImpl");</comment>

    <decl_stmt pos:start="2015:5" pos:end="2015:15"><decl pos:start="2015:5" pos:end="2015:14"><type pos:start="2015:5" pos:end="2015:7"><name pos:start="2015:5" pos:end="2015:7">int</name></type> <name pos:start="2015:9" pos:end="2015:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2016:5" pos:end="2016:29"><decl pos:start="2016:5" pos:end="2016:28"><type pos:start="2016:5" pos:end="2016:8"><name pos:start="2016:5" pos:end="2016:8">char</name></type> <name pos:start="2016:10" pos:end="2016:28"><name pos:start="2016:10" pos:end="2016:16">message</name><index pos:start="2016:17" pos:end="2016:28">[<expr pos:start="2016:18" pos:end="2016:27"><name pos:start="2016:18" pos:end="2016:27">BUFFERSIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="2018:5" pos:end="2018:15"><decl pos:start="2018:5" pos:end="2018:14"><type pos:start="2018:5" pos:end="2018:7"><name pos:start="2018:5" pos:end="2018:7">int</name></type> <name pos:start="2018:9" pos:end="2018:14">result</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2020:5" pos:end="2020:61"><expr pos:start="2020:5" pos:end="2020:60"><name pos:start="2020:5" pos:end="2020:10">handle</name> <operator pos:start="2020:12" pos:end="2020:12">=</operator> <call pos:start="2020:14" pos:end="2020:60"><name pos:start="2020:14" pos:end="2020:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2020:40" pos:end="2020:60">(<argument pos:start="2020:41" pos:end="2020:43"><expr pos:start="2020:41" pos:end="2020:43"><name pos:start="2020:41" pos:end="2020:43">env</name></expr></argument>, <argument pos:start="2020:46" pos:end="2020:59"><expr pos:start="2020:46" pos:end="2020:59"><name pos:start="2020:46" pos:end="2020:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2022:5" pos:end="2025:5"><if pos:start="2022:5" pos:end="2025:5">if <condition pos:start="2022:8" pos:end="2022:36">(<expr pos:start="2022:9" pos:end="2022:35"><name pos:start="2022:9" pos:end="2022:14">handle</name> <operator pos:start="2022:16" pos:end="2022:17">==</operator> <literal type="number" pos:start="2022:19" pos:end="2022:19">0</literal> <operator pos:start="2022:21" pos:end="2022:22">||</operator> <name pos:start="2022:24" pos:end="2022:29">handle</name> <operator pos:start="2022:31" pos:end="2022:32">==</operator> <operator pos:start="2022:34" pos:end="2022:34">-</operator><literal type="number" pos:start="2022:35" pos:end="2022:35">1</literal></expr>)</condition> <block pos:start="2022:38" pos:end="2025:5">{<block_content pos:start="2023:9" pos:end="2024:17">
        <expr_stmt pos:start="2023:9" pos:end="2023:53"><expr pos:start="2023:9" pos:end="2023:52"><call pos:start="2023:9" pos:end="2023:52"><name pos:start="2023:9" pos:end="2023:28">throwSocketException</name><argument_list pos:start="2023:29" pos:end="2023:52">(<argument pos:start="2023:30" pos:end="2023:32"><expr pos:start="2023:30" pos:end="2023:32"><name pos:start="2023:30" pos:end="2023:32">env</name></expr></argument>, <argument pos:start="2023:35" pos:end="2023:51"><expr pos:start="2023:35" pos:end="2023:51"><name pos:start="2023:35" pos:end="2023:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2024:9" pos:end="2024:17">return <expr pos:start="2024:16" pos:end="2024:16"><literal type="number" pos:start="2024:16" pos:end="2024:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <do pos:start="2027:5" pos:end="2040:44">do <block pos:start="2027:8" pos:end="2040:5">{<block_content pos:start="2028:9" pos:end="2039:9">
        <expr_stmt pos:start="2028:9" pos:end="2028:57"><expr pos:start="2028:9" pos:end="2028:56"><name pos:start="2028:9" pos:end="2028:14">result</name> <operator pos:start="2028:16" pos:end="2028:16">=</operator> <call pos:start="2028:18" pos:end="2028:56"><name pos:start="2028:18" pos:end="2028:27">selectWait</name><argument_list pos:start="2028:28" pos:end="2028:56">(<argument pos:start="2028:29" pos:end="2028:34"><expr pos:start="2028:29" pos:end="2028:34"><name pos:start="2028:29" pos:end="2028:34">handle</name></expr></argument>, <argument pos:start="2028:37" pos:end="2028:37"><expr pos:start="2028:37" pos:end="2028:37"><literal type="number" pos:start="2028:37" pos:end="2028:37">1</literal></expr></argument>, <argument pos:start="2028:40" pos:end="2028:55"><expr pos:start="2028:40" pos:end="2028:55"><name pos:start="2028:40" pos:end="2028:55">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2030:9" pos:end="2039:9"><if pos:start="2030:9" pos:end="2033:9">if <condition pos:start="2030:12" pos:end="2030:38">(<expr pos:start="2030:13" pos:end="2030:37"><name pos:start="2030:13" pos:end="2030:27">SOCKERR_TIMEOUT</name> <operator pos:start="2030:29" pos:end="2030:30">==</operator> <name pos:start="2030:32" pos:end="2030:37">result</name></expr>)</condition> <block pos:start="2030:40" pos:end="2033:9">{<block_content pos:start="2032:13" pos:end="2032:21">
            <comment type="line" pos:start="2031:13" pos:end="2031:72">// The read operation timed out, so answer 0 bytes available</comment>
            <return pos:start="2032:13" pos:end="2032:21">return <expr pos:start="2032:20" pos:end="2032:20"><literal type="number" pos:start="2032:20" pos:end="2032:20">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="2033:11" pos:end="2035:9">else if <condition pos:start="2033:19" pos:end="2033:49">(<expr pos:start="2033:20" pos:end="2033:48"><name pos:start="2033:20" pos:end="2033:38">SOCKERR_INTERRUPTED</name> <operator pos:start="2033:40" pos:end="2033:41">==</operator> <name pos:start="2033:43" pos:end="2033:48">result</name></expr>)</condition> <block pos:start="2033:51" pos:end="2035:9">{<block_content pos:start="2034:13" pos:end="2034:21">
            <continue pos:start="2034:13" pos:end="2034:21">continue;</continue>
        </block_content>}</block></if> <if type="elseif" pos:start="2035:11" pos:end="2039:9">else if <condition pos:start="2035:19" pos:end="2035:30">(<expr pos:start="2035:20" pos:end="2035:29"><literal type="number" pos:start="2035:20" pos:end="2035:20">0</literal> <operator pos:start="2035:22" pos:end="2035:22">&gt;</operator> <name pos:start="2035:24" pos:end="2035:29">result</name></expr>)</condition> <block pos:start="2035:32" pos:end="2039:9">{<block_content pos:start="2036:13" pos:end="2038:21">
            <expr_stmt pos:start="2036:13" pos:end="2036:45"><expr pos:start="2036:13" pos:end="2036:44"><call pos:start="2036:13" pos:end="2036:44"><name pos:start="2036:13" pos:end="2036:28">log_socket_close</name><argument_list pos:start="2036:29" pos:end="2036:44">(<argument pos:start="2036:30" pos:end="2036:35"><expr pos:start="2036:30" pos:end="2036:35"><name pos:start="2036:30" pos:end="2036:35">handle</name></expr></argument>, <argument pos:start="2036:38" pos:end="2036:43"><expr pos:start="2036:38" pos:end="2036:43"><name pos:start="2036:38" pos:end="2036:43">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2037:13" pos:end="2037:46"><expr pos:start="2037:13" pos:end="2037:45"><call pos:start="2037:13" pos:end="2037:45"><name pos:start="2037:13" pos:end="2037:32">throwSocketException</name><argument_list pos:start="2037:33" pos:end="2037:45">(<argument pos:start="2037:34" pos:end="2037:36"><expr pos:start="2037:34" pos:end="2037:36"><name pos:start="2037:34" pos:end="2037:36">env</name></expr></argument>, <argument pos:start="2037:39" pos:end="2037:44"><expr pos:start="2037:39" pos:end="2037:44"><name pos:start="2037:39" pos:end="2037:44">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2038:13" pos:end="2038:21">return <expr pos:start="2038:20" pos:end="2038:20"><literal type="number" pos:start="2038:20" pos:end="2038:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="2040:13" pos:end="2040:43">(<expr pos:start="2040:14" pos:end="2040:42"><name pos:start="2040:14" pos:end="2040:32">SOCKERR_INTERRUPTED</name> <operator pos:start="2040:34" pos:end="2040:35">==</operator> <name pos:start="2040:37" pos:end="2040:42">result</name></expr>)</condition>;</do>

    <expr_stmt pos:start="2042:5" pos:end="2042:67"><expr pos:start="2042:5" pos:end="2042:66"><name pos:start="2042:5" pos:end="2042:10">result</name> <operator pos:start="2042:12" pos:end="2042:12">=</operator> <call pos:start="2042:14" pos:end="2042:66"><name pos:start="2042:14" pos:end="2042:17">recv</name><argument_list pos:start="2042:18" pos:end="2042:66">(<argument pos:start="2042:19" pos:end="2042:24"><expr pos:start="2042:19" pos:end="2042:24"><name pos:start="2042:19" pos:end="2042:24">handle</name></expr></argument>, <argument pos:start="2042:27" pos:end="2042:43"><expr pos:start="2042:27" pos:end="2042:43"><operator pos:start="2042:27" pos:end="2042:27">(</operator><name pos:start="2042:28" pos:end="2042:32">jbyte</name> <operator pos:start="2042:34" pos:end="2042:34">*</operator><operator pos:start="2042:35" pos:end="2042:35">)</operator> <name pos:start="2042:37" pos:end="2042:43">message</name></expr></argument>, <argument pos:start="2042:46" pos:end="2042:55"><expr pos:start="2042:46" pos:end="2042:55"><name pos:start="2042:46" pos:end="2042:55">BUFFERSIZE</name></expr></argument>, <argument pos:start="2042:58" pos:end="2042:65"><expr pos:start="2042:58" pos:end="2042:65"><name pos:start="2042:58" pos:end="2042:65">MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2044:5" pos:end="2049:5"><if pos:start="2044:5" pos:end="2049:5">if <condition pos:start="2044:8" pos:end="2044:19">(<expr pos:start="2044:9" pos:end="2044:18"><literal type="number" pos:start="2044:9" pos:end="2044:9">0</literal> <operator pos:start="2044:11" pos:end="2044:11">&gt;</operator> <name pos:start="2044:13" pos:end="2044:18">result</name></expr>)</condition> <block pos:start="2044:21" pos:end="2049:5">{<block_content pos:start="2045:9" pos:end="2048:17">
        <decl_stmt pos:start="2045:9" pos:end="2045:38"><decl pos:start="2045:9" pos:end="2045:37"><type pos:start="2045:9" pos:end="2045:11"><name pos:start="2045:9" pos:end="2045:11">int</name></type> <name pos:start="2045:13" pos:end="2045:15">err</name> <init pos:start="2045:17" pos:end="2045:37">= <expr pos:start="2045:19" pos:end="2045:37"><call pos:start="2045:19" pos:end="2045:37"><name pos:start="2045:19" pos:end="2045:30">convertError</name><argument_list pos:start="2045:31" pos:end="2045:37">(<argument pos:start="2045:32" pos:end="2045:36"><expr pos:start="2045:32" pos:end="2045:36"><name pos:start="2045:32" pos:end="2045:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2046:9" pos:end="2046:38"><expr pos:start="2046:9" pos:end="2046:37"><call pos:start="2046:9" pos:end="2046:37"><name pos:start="2046:9" pos:end="2046:24">log_socket_close</name><argument_list pos:start="2046:25" pos:end="2046:37">(<argument pos:start="2046:26" pos:end="2046:31"><expr pos:start="2046:26" pos:end="2046:31"><name pos:start="2046:26" pos:end="2046:31">handle</name></expr></argument>, <argument pos:start="2046:34" pos:end="2046:36"><expr pos:start="2046:34" pos:end="2046:36"><name pos:start="2046:34" pos:end="2046:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2047:9" pos:end="2047:39"><expr pos:start="2047:9" pos:end="2047:38"><call pos:start="2047:9" pos:end="2047:38"><name pos:start="2047:9" pos:end="2047:28">throwSocketException</name><argument_list pos:start="2047:29" pos:end="2047:38">(<argument pos:start="2047:30" pos:end="2047:32"><expr pos:start="2047:30" pos:end="2047:32"><name pos:start="2047:30" pos:end="2047:32">env</name></expr></argument>, <argument pos:start="2047:35" pos:end="2047:37"><expr pos:start="2047:35" pos:end="2047:37"><name pos:start="2047:35" pos:end="2047:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2048:9" pos:end="2048:17">return <expr pos:start="2048:16" pos:end="2048:16"><literal type="number" pos:start="2048:16" pos:end="2048:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2050:5" pos:end="2050:35"><expr pos:start="2050:5" pos:end="2050:34"><call pos:start="2050:5" pos:end="2050:34"><name pos:start="2050:5" pos:end="2050:18">add_recv_stats</name><argument_list pos:start="2050:19" pos:end="2050:34">(<argument pos:start="2050:20" pos:end="2050:25"><expr pos:start="2050:20" pos:end="2050:25"><name pos:start="2050:20" pos:end="2050:25">handle</name></expr></argument>, <argument pos:start="2050:28" pos:end="2050:33"><expr pos:start="2050:28" pos:end="2050:33"><name pos:start="2050:28" pos:end="2050:33">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2051:5" pos:end="2051:18">return <expr pos:start="2051:12" pos:end="2051:17"><name pos:start="2051:12" pos:end="2051:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2054:1" pos:end="2127:1">extern <literal type="string" pos:start="2054:8" pos:end="2054:10">"C"</literal> <function pos:start="2054:12" pos:end="2127:1"><type pos:start="2054:12" pos:end="2054:15"><name pos:start="2054:12" pos:end="2054:15">void</name></type> <name pos:start="2054:17" pos:end="2054:75">Java_org_sipdroid_net_impl_OSNetworkSystem_acceptSocketImpl</name><parameter_list pos:start="2054:76" pos:end="2055:79">(<parameter pos:start="2054:77" pos:end="2054:87"><decl pos:start="2054:77" pos:end="2054:87"><type pos:start="2054:77" pos:end="2054:87"><name pos:start="2054:77" pos:end="2054:82">JNIEnv</name><modifier pos:start="2054:83" pos:end="2054:83">*</modifier></type> <name pos:start="2054:85" pos:end="2054:87">env</name></decl></parameter>, <parameter pos:start="2054:90" pos:end="2054:101"><decl pos:start="2054:90" pos:end="2054:101"><type pos:start="2054:90" pos:end="2054:101"><name pos:start="2054:90" pos:end="2054:95">jclass</name></type> <name pos:start="2054:97" pos:end="2054:101">clazz</name></decl></parameter>,
        <parameter pos:start="2055:9" pos:end="2055:24"><decl pos:start="2055:9" pos:end="2055:24"><type pos:start="2055:9" pos:end="2055:24"><name pos:start="2055:9" pos:end="2055:15">jobject</name></type> <name pos:start="2055:17" pos:end="2055:24">fdServer</name></decl></parameter>, <parameter pos:start="2055:27" pos:end="2055:43"><decl pos:start="2055:27" pos:end="2055:43"><type pos:start="2055:27" pos:end="2055:43"><name pos:start="2055:27" pos:end="2055:33">jobject</name></type> <name pos:start="2055:35" pos:end="2055:43">newSocket</name></decl></parameter>, <parameter pos:start="2055:46" pos:end="2055:64"><decl pos:start="2055:46" pos:end="2055:64"><type pos:start="2055:46" pos:end="2055:64"><name pos:start="2055:46" pos:end="2055:52">jobject</name></type> <name pos:start="2055:54" pos:end="2055:64">fdnewSocket</name></decl></parameter>, <parameter pos:start="2055:67" pos:end="2055:78"><decl pos:start="2055:67" pos:end="2055:78"><type pos:start="2055:67" pos:end="2055:78"><name pos:start="2055:67" pos:end="2055:70">jint</name></type> <name pos:start="2055:72" pos:end="2055:78">timeout</name></decl></parameter>)</parameter_list> <block pos:start="2055:81" pos:end="2127:1">{<block_content pos:start="2058:5" pos:end="2126:54">
    <comment type="line" pos:start="2056:5" pos:end="2056:38">// LOGD("ENTER acceptSocketImpl");</comment>

    <union pos:start="2058:5" pos:end="2061:9">union <block pos:start="2058:11" pos:end="2061:5">{<public type="default" pos:start="2059:9" pos:end="2060:38">
        <decl_stmt pos:start="2059:9" pos:end="2059:32"><decl pos:start="2059:9" pos:end="2059:31"><type pos:start="2059:9" pos:end="2059:23"><name pos:start="2059:9" pos:end="2059:23"><name pos:start="2059:9" pos:end="2059:14">struct</name> <name pos:start="2059:16" pos:end="2059:23">sockaddr</name></name></type> <name pos:start="2059:25" pos:end="2059:31">address</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2060:9" pos:end="2060:38"><decl pos:start="2060:9" pos:end="2060:37"><type pos:start="2060:9" pos:end="2060:26"><name pos:start="2060:9" pos:end="2060:26"><name pos:start="2060:9" pos:end="2060:14">struct</name> <name pos:start="2060:16" pos:end="2060:26">sockaddr_in</name></name></type> <name pos:start="2060:28" pos:end="2060:37">in_address</name></decl>;</decl_stmt>
    </public>}</block> <decl pos:start="2061:7" pos:end="2061:8"><name pos:start="2061:7" pos:end="2061:8">sa</name></decl>;</union>

    <decl_stmt pos:start="2063:5" pos:end="2063:12"><decl pos:start="2063:5" pos:end="2063:11"><type pos:start="2063:5" pos:end="2063:7"><name pos:start="2063:5" pos:end="2063:7">int</name></type> <name pos:start="2063:9" pos:end="2063:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2064:5" pos:end="2064:14"><decl pos:start="2064:5" pos:end="2064:13"><type pos:start="2064:5" pos:end="2064:7"><name pos:start="2064:5" pos:end="2064:7">int</name></type> <name pos:start="2064:9" pos:end="2064:13">retFD</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2065:5" pos:end="2065:15"><decl pos:start="2065:5" pos:end="2065:14"><type pos:start="2065:5" pos:end="2065:7"><name pos:start="2065:5" pos:end="2065:7">int</name></type> <name pos:start="2065:9" pos:end="2065:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2066:5" pos:end="2066:15"><decl pos:start="2066:5" pos:end="2066:14"><type pos:start="2066:5" pos:end="2066:7"><name pos:start="2066:5" pos:end="2066:7">int</name></type> <name pos:start="2066:9" pos:end="2066:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2067:5" pos:end="2067:22"><decl pos:start="2067:5" pos:end="2067:21"><type pos:start="2067:5" pos:end="2067:13"><name pos:start="2067:5" pos:end="2067:13">socklen_t</name></type> <name pos:start="2067:15" pos:end="2067:21">addrlen</name></decl>;</decl_stmt>

    <if_stmt pos:start="2069:5" pos:end="2072:5"><if pos:start="2069:5" pos:end="2072:5">if <condition pos:start="2069:8" pos:end="2069:26">(<expr pos:start="2069:9" pos:end="2069:25"><name pos:start="2069:9" pos:end="2069:17">newSocket</name> <operator pos:start="2069:19" pos:end="2069:20">==</operator> <name pos:start="2069:22" pos:end="2069:25">NULL</name></expr>)</condition> <block pos:start="2069:28" pos:end="2072:5">{<block_content pos:start="2070:9" pos:end="2071:15">
        <expr_stmt pos:start="2070:9" pos:end="2070:39"><expr pos:start="2070:9" pos:end="2070:38"><call pos:start="2070:9" pos:end="2070:38"><name pos:start="2070:9" pos:end="2070:33">throwNullPointerException</name><argument_list pos:start="2070:34" pos:end="2070:38">(<argument pos:start="2070:35" pos:end="2070:37"><expr pos:start="2070:35" pos:end="2070:37"><name pos:start="2070:35" pos:end="2070:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2071:9" pos:end="2071:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2074:5" pos:end="2074:70"><expr pos:start="2074:5" pos:end="2074:69"><name pos:start="2074:5" pos:end="2074:10">result</name> <operator pos:start="2074:12" pos:end="2074:12">=</operator> <call pos:start="2074:14" pos:end="2074:69"><name pos:start="2074:14" pos:end="2074:27">pollSelectWait</name><argument_list pos:start="2074:28" pos:end="2074:69">(<argument pos:start="2074:29" pos:end="2074:31"><expr pos:start="2074:29" pos:end="2074:31"><name pos:start="2074:29" pos:end="2074:31">env</name></expr></argument>, <argument pos:start="2074:34" pos:end="2074:41"><expr pos:start="2074:34" pos:end="2074:41"><name pos:start="2074:34" pos:end="2074:41">fdServer</name></expr></argument>, <argument pos:start="2074:44" pos:end="2074:50"><expr pos:start="2074:44" pos:end="2074:50"><name pos:start="2074:44" pos:end="2074:50">timeout</name></expr></argument>, <argument pos:start="2074:53" pos:end="2074:68"><expr pos:start="2074:53" pos:end="2074:68"><name pos:start="2074:53" pos:end="2074:68">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2076:5" pos:end="2078:5"><if pos:start="2076:5" pos:end="2078:5">if <condition pos:start="2076:8" pos:end="2076:19">(<expr pos:start="2076:9" pos:end="2076:18"><literal type="number" pos:start="2076:9" pos:end="2076:9">0</literal> <operator pos:start="2076:11" pos:end="2076:11">&gt;</operator> <name pos:start="2076:13" pos:end="2076:18">result</name></expr>)</condition> <block pos:start="2076:21" pos:end="2078:5">{<block_content pos:start="2077:9" pos:end="2077:15">
        <return pos:start="2077:9" pos:end="2077:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2080:5" pos:end="2080:55"><expr pos:start="2080:5" pos:end="2080:54"><name pos:start="2080:5" pos:end="2080:10">handle</name> <operator pos:start="2080:12" pos:end="2080:12">=</operator> <call pos:start="2080:14" pos:end="2080:54"><name pos:start="2080:14" pos:end="2080:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2080:40" pos:end="2080:54">(<argument pos:start="2080:41" pos:end="2080:43"><expr pos:start="2080:41" pos:end="2080:43"><name pos:start="2080:41" pos:end="2080:43">env</name></expr></argument>, <argument pos:start="2080:46" pos:end="2080:53"><expr pos:start="2080:46" pos:end="2080:53"><name pos:start="2080:46" pos:end="2080:53">fdServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2082:5" pos:end="2085:5"><if pos:start="2082:5" pos:end="2085:5">if <condition pos:start="2082:8" pos:end="2082:36">(<expr pos:start="2082:9" pos:end="2082:35"><name pos:start="2082:9" pos:end="2082:14">handle</name> <operator pos:start="2082:16" pos:end="2082:17">==</operator> <literal type="number" pos:start="2082:19" pos:end="2082:19">0</literal> <operator pos:start="2082:21" pos:end="2082:22">||</operator> <name pos:start="2082:24" pos:end="2082:29">handle</name> <operator pos:start="2082:31" pos:end="2082:32">==</operator> <operator pos:start="2082:34" pos:end="2082:34">-</operator><literal type="number" pos:start="2082:35" pos:end="2082:35">1</literal></expr>)</condition> <block pos:start="2082:38" pos:end="2085:5">{<block_content pos:start="2083:9" pos:end="2084:15">
        <expr_stmt pos:start="2083:9" pos:end="2083:53"><expr pos:start="2083:9" pos:end="2083:52"><call pos:start="2083:9" pos:end="2083:52"><name pos:start="2083:9" pos:end="2083:28">throwSocketException</name><argument_list pos:start="2083:29" pos:end="2083:52">(<argument pos:start="2083:30" pos:end="2083:32"><expr pos:start="2083:30" pos:end="2083:32"><name pos:start="2083:30" pos:end="2083:32">env</name></expr></argument>, <argument pos:start="2083:35" pos:end="2083:51"><expr pos:start="2083:35" pos:end="2083:51"><name pos:start="2083:35" pos:end="2083:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2084:9" pos:end="2084:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <do pos:start="2087:5" pos:end="2090:40">do <block pos:start="2087:8" pos:end="2090:5">{<block_content pos:start="2088:9" pos:end="2089:54">
        <expr_stmt pos:start="2088:9" pos:end="2088:29"><expr pos:start="2088:9" pos:end="2088:28"><name pos:start="2088:9" pos:end="2088:15">addrlen</name> <operator pos:start="2088:17" pos:end="2088:17">=</operator> <sizeof pos:start="2088:19" pos:end="2088:28">sizeof<argument_list pos:start="2088:25" pos:end="2088:28">(<argument pos:start="2088:26" pos:end="2088:27"><expr pos:start="2088:26" pos:end="2088:27"><name pos:start="2088:26" pos:end="2088:27">sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="2089:9" pos:end="2089:54"><expr pos:start="2089:9" pos:end="2089:53"><name pos:start="2089:9" pos:end="2089:11">ret</name> <operator pos:start="2089:13" pos:end="2089:13">=</operator> <call pos:start="2089:15" pos:end="2089:53"><name pos:start="2089:15" pos:end="2089:20">accept</name><argument_list pos:start="2089:21" pos:end="2089:53">(<argument pos:start="2089:22" pos:end="2089:27"><expr pos:start="2089:22" pos:end="2089:27"><name pos:start="2089:22" pos:end="2089:27">handle</name></expr></argument>, <argument pos:start="2089:30" pos:end="2089:42"><expr pos:start="2089:30" pos:end="2089:42"><operator pos:start="2089:30" pos:end="2089:30">&amp;</operator><operator pos:start="2089:31" pos:end="2089:31">(</operator><name pos:start="2089:32" pos:end="2089:41"><name pos:start="2089:32" pos:end="2089:33">sa</name><operator pos:start="2089:34" pos:end="2089:34">.</operator><name pos:start="2089:35" pos:end="2089:41">address</name></name><operator pos:start="2089:42" pos:end="2089:42">)</operator></expr></argument>, <argument pos:start="2089:45" pos:end="2089:52"><expr pos:start="2089:45" pos:end="2089:52"><operator pos:start="2089:45" pos:end="2089:45">&amp;</operator><name pos:start="2089:46" pos:end="2089:52">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="2090:13" pos:end="2090:39">(<expr pos:start="2090:14" pos:end="2090:38"><name pos:start="2090:14" pos:end="2090:16">ret</name> <operator pos:start="2090:18" pos:end="2090:18">&lt;</operator> <literal type="number" pos:start="2090:20" pos:end="2090:20">0</literal> <operator pos:start="2090:22" pos:end="2090:23">&amp;&amp;</operator> <name pos:start="2090:25" pos:end="2090:29">errno</name> <operator pos:start="2090:31" pos:end="2090:32">==</operator> <name pos:start="2090:34" pos:end="2090:38">EINTR</name></expr>)</condition>;</do>

    <if_stmt pos:start="2092:5" pos:end="2097:5"><if pos:start="2092:5" pos:end="2097:5">if <condition pos:start="2092:8" pos:end="2092:16">(<expr pos:start="2092:9" pos:end="2092:15"><name pos:start="2092:9" pos:end="2092:11">ret</name> <operator pos:start="2092:13" pos:end="2092:13">&lt;</operator> <literal type="number" pos:start="2092:15" pos:end="2092:15">0</literal></expr>)</condition> <block pos:start="2092:18" pos:end="2097:5">{<block_content pos:start="2093:9" pos:end="2096:15">
        <decl_stmt pos:start="2093:9" pos:end="2093:38"><decl pos:start="2093:9" pos:end="2093:37"><type pos:start="2093:9" pos:end="2093:11"><name pos:start="2093:9" pos:end="2093:11">int</name></type> <name pos:start="2093:13" pos:end="2093:15">err</name> <init pos:start="2093:17" pos:end="2093:37">= <expr pos:start="2093:19" pos:end="2093:37"><call pos:start="2093:19" pos:end="2093:37"><name pos:start="2093:19" pos:end="2093:30">convertError</name><argument_list pos:start="2093:31" pos:end="2093:37">(<argument pos:start="2093:32" pos:end="2093:36"><expr pos:start="2093:32" pos:end="2093:36"><name pos:start="2093:32" pos:end="2093:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2094:9" pos:end="2094:38"><expr pos:start="2094:9" pos:end="2094:37"><call pos:start="2094:9" pos:end="2094:37"><name pos:start="2094:9" pos:end="2094:24">log_socket_close</name><argument_list pos:start="2094:25" pos:end="2094:37">(<argument pos:start="2094:26" pos:end="2094:31"><expr pos:start="2094:26" pos:end="2094:31"><name pos:start="2094:26" pos:end="2094:31">handle</name></expr></argument>, <argument pos:start="2094:34" pos:end="2094:36"><expr pos:start="2094:34" pos:end="2094:36"><name pos:start="2094:34" pos:end="2094:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2095:9" pos:end="2095:39"><expr pos:start="2095:9" pos:end="2095:38"><call pos:start="2095:9" pos:end="2095:38"><name pos:start="2095:9" pos:end="2095:28">throwSocketException</name><argument_list pos:start="2095:29" pos:end="2095:38">(<argument pos:start="2095:30" pos:end="2095:32"><expr pos:start="2095:30" pos:end="2095:32"><name pos:start="2095:30" pos:end="2095:32">env</name></expr></argument>, <argument pos:start="2095:35" pos:end="2095:37"><expr pos:start="2095:35" pos:end="2095:37"><name pos:start="2095:35" pos:end="2095:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2096:9" pos:end="2096:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2099:5" pos:end="2099:16"><expr pos:start="2099:5" pos:end="2099:15"><name pos:start="2099:5" pos:end="2099:9">retFD</name> <operator pos:start="2099:11" pos:end="2099:11">=</operator> <name pos:start="2099:13" pos:end="2099:15">ret</name></expr>;</expr_stmt>

    <comment type="block" pos:start="2101:5" pos:end="2105:7">/* For AF_INET / inetOrLocal == true only: put
     * peer address and port in instance variables
     * We don't bother for UNIX domain sockets, since most peers are
     * anonymous anyway
     */</comment>
    <if_stmt pos:start="2106:5" pos:end="2124:5"><if pos:start="2106:5" pos:end="2124:5">if <condition pos:start="2106:8" pos:end="2106:40">(<expr pos:start="2106:9" pos:end="2106:39"><name pos:start="2106:9" pos:end="2106:28"><name pos:start="2106:9" pos:end="2106:10">sa</name><operator pos:start="2106:11" pos:end="2106:11">.</operator><name pos:start="2106:12" pos:end="2106:18">address</name><operator pos:start="2106:19" pos:end="2106:19">.</operator><name pos:start="2106:20" pos:end="2106:28">sa_family</name></name> <operator pos:start="2106:30" pos:end="2106:31">==</operator> <name pos:start="2106:33" pos:end="2106:39">AF_INET</name></expr>)</condition> <block pos:start="2106:42" pos:end="2124:5">{<block_content pos:start="2109:9" pos:end="2123:47">
        <comment type="line" pos:start="2107:9" pos:end="2107:42">// inetOrLocal should also be true</comment>

        <decl_stmt pos:start="2109:9" pos:end="2109:28"><decl pos:start="2109:9" pos:end="2109:27"><type pos:start="2109:9" pos:end="2109:15"><name pos:start="2109:9" pos:end="2109:15">jobject</name></type> <name pos:start="2109:17" pos:end="2109:27">inetAddress</name></decl>;</decl_stmt>

        <expr_stmt pos:start="2111:9" pos:end="2111:76"><expr pos:start="2111:9" pos:end="2111:75"><name pos:start="2111:9" pos:end="2111:19">inetAddress</name> <operator pos:start="2111:21" pos:end="2111:21">=</operator> <call pos:start="2111:23" pos:end="2111:75"><name pos:start="2111:23" pos:end="2111:43">structInToInetAddress</name><argument_list pos:start="2111:44" pos:end="2111:75">(<argument pos:start="2111:45" pos:end="2111:47"><expr pos:start="2111:45" pos:end="2111:47"><name pos:start="2111:45" pos:end="2111:47">env</name></expr></argument>, <argument pos:start="2111:50" pos:end="2111:74"><expr pos:start="2111:50" pos:end="2111:74"><operator pos:start="2111:50" pos:end="2111:50">&amp;</operator><operator pos:start="2111:51" pos:end="2111:51">(</operator><name pos:start="2111:52" pos:end="2111:73"><name pos:start="2111:52" pos:end="2111:53">sa</name><operator pos:start="2111:54" pos:end="2111:54">.</operator><name pos:start="2111:55" pos:end="2111:64">in_address</name><operator pos:start="2111:65" pos:end="2111:65">.</operator><name pos:start="2111:66" pos:end="2111:73">sin_addr</name></name><operator pos:start="2111:74" pos:end="2111:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2113:9" pos:end="2117:9"><if pos:start="2113:9" pos:end="2117:9">if <condition pos:start="2113:12" pos:end="2113:32">(<expr pos:start="2113:13" pos:end="2113:31"><name pos:start="2113:13" pos:end="2113:23">inetAddress</name> <operator pos:start="2113:25" pos:end="2113:26">==</operator> <name pos:start="2113:28" pos:end="2113:31">NULL</name></expr>)</condition> <block pos:start="2113:34" pos:end="2117:9">{<block_content pos:start="2114:13" pos:end="2116:19">
            <expr_stmt pos:start="2114:13" pos:end="2114:25"><expr pos:start="2114:13" pos:end="2114:24"><call pos:start="2114:13" pos:end="2114:24"><name pos:start="2114:13" pos:end="2114:17">close</name><argument_list pos:start="2114:18" pos:end="2114:24">(<argument pos:start="2114:19" pos:end="2114:23"><expr pos:start="2114:19" pos:end="2114:23"><name pos:start="2114:19" pos:end="2114:23">retFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2115:13" pos:end="2115:29"><expr pos:start="2115:13" pos:end="2115:28"><name pos:start="2115:13" pos:end="2115:21">newSocket</name> <operator pos:start="2115:23" pos:end="2115:23">=</operator> <name pos:start="2115:25" pos:end="2115:28">NULL</name></expr>;</expr_stmt>
            <return pos:start="2116:13" pos:end="2116:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2119:9" pos:end="2120:63"><expr pos:start="2119:9" pos:end="2120:62"><call pos:start="2119:9" pos:end="2120:62"><name pos:start="2119:9" pos:end="2119:27"><name pos:start="2119:9" pos:end="2119:11">env</name><operator pos:start="2119:12" pos:end="2119:13">-&gt;</operator><name pos:start="2119:14" pos:end="2119:27">SetObjectField</name></name><argument_list pos:start="2119:28" pos:end="2120:62">(<argument pos:start="2119:29" pos:end="2119:37"><expr pos:start="2119:29" pos:end="2119:37"><name pos:start="2119:29" pos:end="2119:37">newSocket</name></expr></argument>,
                <argument pos:start="2120:17" pos:end="2120:48"><expr pos:start="2120:17" pos:end="2120:48"><name pos:start="2120:17" pos:end="2120:48"><name pos:start="2120:17" pos:end="2120:29">gCachedFields</name><operator pos:start="2120:30" pos:end="2120:30">.</operator><name pos:start="2120:31" pos:end="2120:48">socketimpl_address</name></name></expr></argument>, <argument pos:start="2120:51" pos:end="2120:61"><expr pos:start="2120:51" pos:end="2120:61"><name pos:start="2120:51" pos:end="2120:61">inetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2122:9" pos:end="2123:47"><expr pos:start="2122:9" pos:end="2123:46"><call pos:start="2122:9" pos:end="2123:46"><name pos:start="2122:9" pos:end="2122:24"><name pos:start="2122:9" pos:end="2122:11">env</name><operator pos:start="2122:12" pos:end="2122:13">-&gt;</operator><name pos:start="2122:14" pos:end="2122:24">SetIntField</name></name><argument_list pos:start="2122:25" pos:end="2123:46">(<argument pos:start="2122:26" pos:end="2122:34"><expr pos:start="2122:26" pos:end="2122:34"><name pos:start="2122:26" pos:end="2122:34">newSocket</name></expr></argument>, <argument pos:start="2122:37" pos:end="2122:65"><expr pos:start="2122:37" pos:end="2122:65"><name pos:start="2122:37" pos:end="2122:65"><name pos:start="2122:37" pos:end="2122:49">gCachedFields</name><operator pos:start="2122:50" pos:end="2122:50">.</operator><name pos:start="2122:51" pos:end="2122:65">socketimpl_port</name></name></expr></argument>,
                <argument pos:start="2123:17" pos:end="2123:45"><expr pos:start="2123:17" pos:end="2123:45"><call pos:start="2123:17" pos:end="2123:45"><name pos:start="2123:17" pos:end="2123:21">ntohs</name><argument_list pos:start="2123:22" pos:end="2123:45">(<argument pos:start="2123:23" pos:end="2123:44"><expr pos:start="2123:23" pos:end="2123:44"><name pos:start="2123:23" pos:end="2123:44"><name pos:start="2123:23" pos:end="2123:24">sa</name><operator pos:start="2123:25" pos:end="2123:25">.</operator><name pos:start="2123:26" pos:end="2123:35">in_address</name><operator pos:start="2123:36" pos:end="2123:36">.</operator><name pos:start="2123:37" pos:end="2123:44">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2126:5" pos:end="2126:54"><expr pos:start="2126:5" pos:end="2126:53"><call pos:start="2126:5" pos:end="2126:53"><name pos:start="2126:5" pos:end="2126:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="2126:29" pos:end="2126:53">(<argument pos:start="2126:30" pos:end="2126:32"><expr pos:start="2126:30" pos:end="2126:32"><name pos:start="2126:30" pos:end="2126:32">env</name></expr></argument>, <argument pos:start="2126:35" pos:end="2126:45"><expr pos:start="2126:35" pos:end="2126:45"><name pos:start="2126:35" pos:end="2126:45">fdnewSocket</name></expr></argument>, <argument pos:start="2126:48" pos:end="2126:52"><expr pos:start="2126:48" pos:end="2126:52"><name pos:start="2126:48" pos:end="2126:52">retFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2129:1" pos:end="2141:1">extern <literal type="string" pos:start="2129:8" pos:end="2129:10">"C"</literal> <function pos:start="2129:12" pos:end="2141:1"><type pos:start="2129:12" pos:end="2129:19"><name pos:start="2129:12" pos:end="2129:19">jboolean</name></type> <name pos:start="2129:21" pos:end="2129:85">Java_org_sipdroid_net_impl_OSNetworkSystem_supportsUrgentDataImpl</name><parameter_list pos:start="2129:86" pos:end="2130:45">(<parameter pos:start="2129:87" pos:end="2129:97"><decl pos:start="2129:87" pos:end="2129:97"><type pos:start="2129:87" pos:end="2129:97"><name pos:start="2129:87" pos:end="2129:92">JNIEnv</name><modifier pos:start="2129:93" pos:end="2129:93">*</modifier></type> <name pos:start="2129:95" pos:end="2129:97">env</name></decl></parameter>,
        <parameter pos:start="2130:9" pos:end="2130:20"><decl pos:start="2130:9" pos:end="2130:20"><type pos:start="2130:9" pos:end="2130:20"><name pos:start="2130:9" pos:end="2130:14">jclass</name></type> <name pos:start="2130:16" pos:end="2130:20">clazz</name></decl></parameter>, <parameter pos:start="2130:23" pos:end="2130:44"><decl pos:start="2130:23" pos:end="2130:44"><type pos:start="2130:23" pos:end="2130:44"><name pos:start="2130:23" pos:end="2130:29">jobject</name></type> <name pos:start="2130:31" pos:end="2130:44">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="2130:47" pos:end="2141:1">{<block_content pos:start="2133:5" pos:end="2140:20">
    <comment type="line" pos:start="2131:5" pos:end="2131:44">// LOGD("ENTER supportsUrgentDataImpl");</comment>

    <decl_stmt pos:start="2133:5" pos:end="2133:15"><decl pos:start="2133:5" pos:end="2133:14"><type pos:start="2133:5" pos:end="2133:7"><name pos:start="2133:5" pos:end="2133:7">int</name></type> <name pos:start="2133:9" pos:end="2133:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2135:5" pos:end="2135:61"><expr pos:start="2135:5" pos:end="2135:60"><name pos:start="2135:5" pos:end="2135:10">handle</name> <operator pos:start="2135:12" pos:end="2135:12">=</operator> <call pos:start="2135:14" pos:end="2135:60"><name pos:start="2135:14" pos:end="2135:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2135:40" pos:end="2135:60">(<argument pos:start="2135:41" pos:end="2135:43"><expr pos:start="2135:41" pos:end="2135:43"><name pos:start="2135:41" pos:end="2135:43">env</name></expr></argument>, <argument pos:start="2135:46" pos:end="2135:59"><expr pos:start="2135:46" pos:end="2135:59"><name pos:start="2135:46" pos:end="2135:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2136:5" pos:end="2138:5"><if pos:start="2136:5" pos:end="2138:5">if <condition pos:start="2136:8" pos:end="2136:36">(<expr pos:start="2136:9" pos:end="2136:35"><name pos:start="2136:9" pos:end="2136:14">handle</name> <operator pos:start="2136:16" pos:end="2136:17">==</operator> <literal type="number" pos:start="2136:19" pos:end="2136:19">0</literal> <operator pos:start="2136:21" pos:end="2136:22">||</operator> <name pos:start="2136:24" pos:end="2136:29">handle</name> <operator pos:start="2136:31" pos:end="2136:32">==</operator> <operator pos:start="2136:34" pos:end="2136:34">-</operator><literal type="number" pos:start="2136:35" pos:end="2136:35">1</literal></expr>)</condition> <block pos:start="2136:38" pos:end="2138:5">{<block_content pos:start="2137:9" pos:end="2137:25">
        <return pos:start="2137:9" pos:end="2137:25">return <expr pos:start="2137:16" pos:end="2137:24"><name pos:start="2137:16" pos:end="2137:24">JNI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="2140:5" pos:end="2140:20">return <expr pos:start="2140:12" pos:end="2140:19"><name pos:start="2140:12" pos:end="2140:19">JNI_TRUE</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2143:1" pos:end="2162:1">extern <literal type="string" pos:start="2143:8" pos:end="2143:10">"C"</literal> <function pos:start="2143:12" pos:end="2162:1"><type pos:start="2143:12" pos:end="2143:15"><name pos:start="2143:12" pos:end="2143:15">void</name></type> <name pos:start="2143:17" pos:end="2143:77">Java_org_sipdroid_net_impl_OSNetworkSystem_sendUrgentDataImpl</name><parameter_list pos:start="2143:78" pos:end="2144:44">(<parameter pos:start="2143:79" pos:end="2143:89"><decl pos:start="2143:79" pos:end="2143:89"><type pos:start="2143:79" pos:end="2143:89"><name pos:start="2143:79" pos:end="2143:84">JNIEnv</name><modifier pos:start="2143:85" pos:end="2143:85">*</modifier></type> <name pos:start="2143:87" pos:end="2143:89">env</name></decl></parameter>, <parameter pos:start="2143:92" pos:end="2143:103"><decl pos:start="2143:92" pos:end="2143:103"><type pos:start="2143:92" pos:end="2143:103"><name pos:start="2143:92" pos:end="2143:97">jclass</name></type> <name pos:start="2143:99" pos:end="2143:103">clazz</name></decl></parameter>,
        <parameter pos:start="2144:9" pos:end="2144:30"><decl pos:start="2144:9" pos:end="2144:30"><type pos:start="2144:9" pos:end="2144:30"><name pos:start="2144:9" pos:end="2144:15">jobject</name></type> <name pos:start="2144:17" pos:end="2144:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2144:33" pos:end="2144:43"><decl pos:start="2144:33" pos:end="2144:43"><type pos:start="2144:33" pos:end="2144:43"><name pos:start="2144:33" pos:end="2144:37">jbyte</name></type> <name pos:start="2144:39" pos:end="2144:43">value</name></decl></parameter>)</parameter_list> <block pos:start="2144:46" pos:end="2162:1">{<block_content pos:start="2147:5" pos:end="2161:5">
    <comment type="line" pos:start="2145:5" pos:end="2145:40">// LOGD("ENTER sendUrgentDataImpl");</comment>

    <decl_stmt pos:start="2147:5" pos:end="2147:15"><decl pos:start="2147:5" pos:end="2147:14"><type pos:start="2147:5" pos:end="2147:7"><name pos:start="2147:5" pos:end="2147:7">int</name></type> <name pos:start="2147:9" pos:end="2147:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2148:5" pos:end="2148:15"><decl pos:start="2148:5" pos:end="2148:14"><type pos:start="2148:5" pos:end="2148:7"><name pos:start="2148:5" pos:end="2148:7">int</name></type> <name pos:start="2148:9" pos:end="2148:14">result</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2150:5" pos:end="2150:61"><expr pos:start="2150:5" pos:end="2150:60"><name pos:start="2150:5" pos:end="2150:10">handle</name> <operator pos:start="2150:12" pos:end="2150:12">=</operator> <call pos:start="2150:14" pos:end="2150:60"><name pos:start="2150:14" pos:end="2150:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2150:40" pos:end="2150:60">(<argument pos:start="2150:41" pos:end="2150:43"><expr pos:start="2150:41" pos:end="2150:43"><name pos:start="2150:41" pos:end="2150:43">env</name></expr></argument>, <argument pos:start="2150:46" pos:end="2150:59"><expr pos:start="2150:46" pos:end="2150:59"><name pos:start="2150:46" pos:end="2150:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2151:5" pos:end="2154:5"><if pos:start="2151:5" pos:end="2154:5">if <condition pos:start="2151:8" pos:end="2151:36">(<expr pos:start="2151:9" pos:end="2151:35"><name pos:start="2151:9" pos:end="2151:14">handle</name> <operator pos:start="2151:16" pos:end="2151:17">==</operator> <literal type="number" pos:start="2151:19" pos:end="2151:19">0</literal> <operator pos:start="2151:21" pos:end="2151:22">||</operator> <name pos:start="2151:24" pos:end="2151:29">handle</name> <operator pos:start="2151:31" pos:end="2151:32">==</operator> <operator pos:start="2151:34" pos:end="2151:34">-</operator><literal type="number" pos:start="2151:35" pos:end="2151:35">1</literal></expr>)</condition> <block pos:start="2151:38" pos:end="2154:5">{<block_content pos:start="2152:9" pos:end="2153:15">
        <expr_stmt pos:start="2152:9" pos:end="2152:53"><expr pos:start="2152:9" pos:end="2152:52"><call pos:start="2152:9" pos:end="2152:52"><name pos:start="2152:9" pos:end="2152:28">throwSocketException</name><argument_list pos:start="2152:29" pos:end="2152:52">(<argument pos:start="2152:30" pos:end="2152:32"><expr pos:start="2152:30" pos:end="2152:32"><name pos:start="2152:30" pos:end="2152:32">env</name></expr></argument>, <argument pos:start="2152:35" pos:end="2152:51"><expr pos:start="2152:35" pos:end="2152:51"><name pos:start="2152:35" pos:end="2152:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2153:9" pos:end="2153:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2156:5" pos:end="2156:56"><expr pos:start="2156:5" pos:end="2156:55"><name pos:start="2156:5" pos:end="2156:10">result</name> <operator pos:start="2156:12" pos:end="2156:12">=</operator> <call pos:start="2156:14" pos:end="2156:55"><name pos:start="2156:14" pos:end="2156:17">send</name><argument_list pos:start="2156:18" pos:end="2156:55">(<argument pos:start="2156:19" pos:end="2156:24"><expr pos:start="2156:19" pos:end="2156:24"><name pos:start="2156:19" pos:end="2156:24">handle</name></expr></argument>, <argument pos:start="2156:27" pos:end="2156:42"><expr pos:start="2156:27" pos:end="2156:42"><operator pos:start="2156:27" pos:end="2156:27">(</operator><name pos:start="2156:28" pos:end="2156:32">jbyte</name> <operator pos:start="2156:34" pos:end="2156:34">*</operator><operator pos:start="2156:35" pos:end="2156:35">)</operator> <operator pos:start="2156:37" pos:end="2156:37">&amp;</operator><name pos:start="2156:38" pos:end="2156:42">value</name></expr></argument>, <argument pos:start="2156:45" pos:end="2156:45"><expr pos:start="2156:45" pos:end="2156:45"><literal type="number" pos:start="2156:45" pos:end="2156:45">1</literal></expr></argument>, <argument pos:start="2156:48" pos:end="2156:54"><expr pos:start="2156:48" pos:end="2156:54"><name pos:start="2156:48" pos:end="2156:54">MSG_OOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2157:5" pos:end="2161:5"><if pos:start="2157:5" pos:end="2161:5">if <condition pos:start="2157:8" pos:end="2157:19">(<expr pos:start="2157:9" pos:end="2157:18"><name pos:start="2157:9" pos:end="2157:14">result</name> <operator pos:start="2157:16" pos:end="2157:16">&lt;</operator> <literal type="number" pos:start="2157:18" pos:end="2157:18">0</literal></expr>)</condition> <block pos:start="2157:21" pos:end="2161:5">{<block_content pos:start="2158:9" pos:end="2160:39">
        <decl_stmt pos:start="2158:9" pos:end="2158:38"><decl pos:start="2158:9" pos:end="2158:37"><type pos:start="2158:9" pos:end="2158:11"><name pos:start="2158:9" pos:end="2158:11">int</name></type> <name pos:start="2158:13" pos:end="2158:15">err</name> <init pos:start="2158:17" pos:end="2158:37">= <expr pos:start="2158:19" pos:end="2158:37"><call pos:start="2158:19" pos:end="2158:37"><name pos:start="2158:19" pos:end="2158:30">convertError</name><argument_list pos:start="2158:31" pos:end="2158:37">(<argument pos:start="2158:32" pos:end="2158:36"><expr pos:start="2158:32" pos:end="2158:36"><name pos:start="2158:32" pos:end="2158:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2159:9" pos:end="2159:38"><expr pos:start="2159:9" pos:end="2159:37"><call pos:start="2159:9" pos:end="2159:37"><name pos:start="2159:9" pos:end="2159:24">log_socket_close</name><argument_list pos:start="2159:25" pos:end="2159:37">(<argument pos:start="2159:26" pos:end="2159:31"><expr pos:start="2159:26" pos:end="2159:31"><name pos:start="2159:26" pos:end="2159:31">handle</name></expr></argument>, <argument pos:start="2159:34" pos:end="2159:36"><expr pos:start="2159:34" pos:end="2159:36"><name pos:start="2159:34" pos:end="2159:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2160:9" pos:end="2160:39"><expr pos:start="2160:9" pos:end="2160:38"><call pos:start="2160:9" pos:end="2160:38"><name pos:start="2160:9" pos:end="2160:28">throwSocketException</name><argument_list pos:start="2160:29" pos:end="2160:38">(<argument pos:start="2160:30" pos:end="2160:32"><expr pos:start="2160:30" pos:end="2160:32"><name pos:start="2160:30" pos:end="2160:32">env</name></expr></argument>, <argument pos:start="2160:35" pos:end="2160:37"><expr pos:start="2160:35" pos:end="2160:37"><name pos:start="2160:35" pos:end="2160:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2164:1" pos:end="2186:1">extern <literal type="string" pos:start="2164:8" pos:end="2164:10">"C"</literal> <function pos:start="2164:12" pos:end="2186:1"><type pos:start="2164:12" pos:end="2164:15"><name pos:start="2164:12" pos:end="2164:15">void</name></type> <name pos:start="2164:17" pos:end="2164:79">Java_org_sipdroid_net_impl_OSNetworkSystem_connectDatagramImpl2</name><parameter_list pos:start="2164:80" pos:end="2165:70">(<parameter pos:start="2164:81" pos:end="2164:91"><decl pos:start="2164:81" pos:end="2164:91"><type pos:start="2164:81" pos:end="2164:91"><name pos:start="2164:81" pos:end="2164:86">JNIEnv</name><modifier pos:start="2164:87" pos:end="2164:87">*</modifier></type> <name pos:start="2164:89" pos:end="2164:91">env</name></decl></parameter>, <parameter pos:start="2164:94" pos:end="2164:105"><decl pos:start="2164:94" pos:end="2164:105"><type pos:start="2164:94" pos:end="2164:105"><name pos:start="2164:94" pos:end="2164:99">jclass</name></type> <name pos:start="2164:101" pos:end="2164:105">clazz</name></decl></parameter>,
        <parameter pos:start="2165:9" pos:end="2165:18"><decl pos:start="2165:9" pos:end="2165:18"><type pos:start="2165:9" pos:end="2165:18"><name pos:start="2165:9" pos:end="2165:15">jobject</name></type> <name pos:start="2165:17" pos:end="2165:18">fd</name></decl></parameter>, <parameter pos:start="2165:21" pos:end="2165:29"><decl pos:start="2165:21" pos:end="2165:29"><type pos:start="2165:21" pos:end="2165:29"><name pos:start="2165:21" pos:end="2165:24">jint</name></type> <name pos:start="2165:26" pos:end="2165:29">port</name></decl></parameter>, <parameter pos:start="2165:32" pos:end="2165:48"><decl pos:start="2165:32" pos:end="2165:48"><type pos:start="2165:32" pos:end="2165:48"><name pos:start="2165:32" pos:end="2165:35">jint</name></type> <name pos:start="2165:37" pos:end="2165:48">trafficClass</name></decl></parameter>, <parameter pos:start="2165:51" pos:end="2165:69"><decl pos:start="2165:51" pos:end="2165:69"><type pos:start="2165:51" pos:end="2165:69"><name pos:start="2165:51" pos:end="2165:57">jobject</name></type> <name pos:start="2165:59" pos:end="2165:69">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="2165:72" pos:end="2186:1">{<block_content pos:start="2168:5" pos:end="2185:5">
    <comment type="line" pos:start="2166:5" pos:end="2166:42">// LOGD("ENTER connectDatagramImpl2");</comment>

    <decl_stmt pos:start="2168:5" pos:end="2168:53"><decl pos:start="2168:5" pos:end="2168:52"><type pos:start="2168:5" pos:end="2168:7"><name pos:start="2168:5" pos:end="2168:7">int</name></type> <name pos:start="2168:9" pos:end="2168:14">handle</name> <init pos:start="2168:16" pos:end="2168:52">= <expr pos:start="2168:18" pos:end="2168:52"><call pos:start="2168:18" pos:end="2168:52"><name pos:start="2168:18" pos:end="2168:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2168:44" pos:end="2168:52">(<argument pos:start="2168:45" pos:end="2168:47"><expr pos:start="2168:45" pos:end="2168:47"><name pos:start="2168:45" pos:end="2168:47">env</name></expr></argument>, <argument pos:start="2168:50" pos:end="2168:51"><expr pos:start="2168:50" pos:end="2168:51"><name pos:start="2168:50" pos:end="2168:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2170:5" pos:end="2170:32"><decl pos:start="2170:5" pos:end="2170:31"><type pos:start="2170:5" pos:end="2170:22"><name pos:start="2170:5" pos:end="2170:22"><name pos:start="2170:5" pos:end="2170:10">struct</name> <name pos:start="2170:12" pos:end="2170:22">sockaddr_in</name></name></type> <name pos:start="2170:24" pos:end="2170:31">sockAddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2171:5" pos:end="2171:12"><decl pos:start="2171:5" pos:end="2171:11"><type pos:start="2171:5" pos:end="2171:7"><name pos:start="2171:5" pos:end="2171:7">int</name></type> <name pos:start="2171:9" pos:end="2171:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2173:5" pos:end="2173:72"><expr pos:start="2173:5" pos:end="2173:71"><name pos:start="2173:5" pos:end="2173:7">ret</name> <operator pos:start="2173:9" pos:end="2173:9">=</operator> <call pos:start="2173:11" pos:end="2173:71"><name pos:start="2173:11" pos:end="2173:36">inetAddressToSocketAddress</name><argument_list pos:start="2173:37" pos:end="2173:71">(<argument pos:start="2173:38" pos:end="2173:40"><expr pos:start="2173:38" pos:end="2173:40"><name pos:start="2173:38" pos:end="2173:40">env</name></expr></argument>, <argument pos:start="2173:43" pos:end="2173:53"><expr pos:start="2173:43" pos:end="2173:53"><name pos:start="2173:43" pos:end="2173:53">inetAddress</name></expr></argument>, <argument pos:start="2173:56" pos:end="2173:59"><expr pos:start="2173:56" pos:end="2173:59"><name pos:start="2173:56" pos:end="2173:59">port</name></expr></argument>, <argument pos:start="2173:62" pos:end="2173:70"><expr pos:start="2173:62" pos:end="2173:70"><operator pos:start="2173:62" pos:end="2173:62">&amp;</operator><name pos:start="2173:63" pos:end="2173:70">sockAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2175:5" pos:end="2178:5"><if pos:start="2175:5" pos:end="2178:5">if <condition pos:start="2175:8" pos:end="2175:16">(<expr pos:start="2175:9" pos:end="2175:15"><name pos:start="2175:9" pos:end="2175:11">ret</name> <operator pos:start="2175:13" pos:end="2175:13">&lt;</operator> <literal type="number" pos:start="2175:15" pos:end="2175:15">0</literal></expr>)</condition> <block pos:start="2175:18" pos:end="2178:5">{<block_content pos:start="2176:9" pos:end="2177:15">
        <expr_stmt pos:start="2176:9" pos:end="2176:53"><expr pos:start="2176:9" pos:end="2176:52"><call pos:start="2176:9" pos:end="2176:52"><name pos:start="2176:9" pos:end="2176:28">throwSocketException</name><argument_list pos:start="2176:29" pos:end="2176:52">(<argument pos:start="2176:30" pos:end="2176:32"><expr pos:start="2176:30" pos:end="2176:32"><name pos:start="2176:30" pos:end="2176:32">env</name></expr></argument>, <argument pos:start="2176:35" pos:end="2176:51"><expr pos:start="2176:35" pos:end="2176:51"><name pos:start="2176:35" pos:end="2176:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2177:9" pos:end="2177:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2179:5" pos:end="2179:70"><expr pos:start="2179:5" pos:end="2179:69"><call pos:start="2179:5" pos:end="2179:69"><name pos:start="2179:5" pos:end="2179:22">log_socket_connect</name><argument_list pos:start="2179:23" pos:end="2179:69">(<argument pos:start="2179:24" pos:end="2179:29"><expr pos:start="2179:24" pos:end="2179:29"><name pos:start="2179:24" pos:end="2179:29">handle</name></expr></argument>, <argument pos:start="2179:32" pos:end="2179:62"><expr pos:start="2179:32" pos:end="2179:62"><call pos:start="2179:32" pos:end="2179:62"><name pos:start="2179:32" pos:end="2179:36">ntohl</name><argument_list pos:start="2179:37" pos:end="2179:62">(<argument pos:start="2179:38" pos:end="2179:61"><expr pos:start="2179:38" pos:end="2179:61"><name pos:start="2179:38" pos:end="2179:61"><name pos:start="2179:38" pos:end="2179:45">sockAddr</name><operator pos:start="2179:46" pos:end="2179:46">.</operator><name pos:start="2179:47" pos:end="2179:54">sin_addr</name><operator pos:start="2179:55" pos:end="2179:55">.</operator><name pos:start="2179:56" pos:end="2179:61">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2179:65" pos:end="2179:68"><expr pos:start="2179:65" pos:end="2179:68"><name pos:start="2179:65" pos:end="2179:68">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="2180:5" pos:end="2180:81"><decl pos:start="2180:5" pos:end="2180:80"><type pos:start="2180:5" pos:end="2180:7"><name pos:start="2180:5" pos:end="2180:7">int</name></type> <name pos:start="2180:9" pos:end="2180:14">result</name> <init pos:start="2180:16" pos:end="2180:80">= <expr pos:start="2180:18" pos:end="2180:80"><call pos:start="2180:18" pos:end="2180:80"><name pos:start="2180:18" pos:end="2180:24">connect</name><argument_list pos:start="2180:25" pos:end="2180:80">(<argument pos:start="2180:26" pos:end="2180:31"><expr pos:start="2180:26" pos:end="2180:31"><name pos:start="2180:26" pos:end="2180:31">handle</name></expr></argument>, <argument pos:start="2180:34" pos:end="2180:61"><expr pos:start="2180:34" pos:end="2180:61"><operator pos:start="2180:34" pos:end="2180:34">(</operator>struct <name pos:start="2180:42" pos:end="2180:49">sockaddr</name> <operator pos:start="2180:51" pos:end="2180:51">*</operator><operator pos:start="2180:52" pos:end="2180:52">)</operator><operator pos:start="2180:53" pos:end="2180:53">&amp;</operator><name pos:start="2180:54" pos:end="2180:61">sockAddr</name></expr></argument>, <argument pos:start="2180:64" pos:end="2180:79"><expr pos:start="2180:64" pos:end="2180:79"><sizeof pos:start="2180:64" pos:end="2180:79">sizeof<argument_list pos:start="2180:70" pos:end="2180:79">(<argument pos:start="2180:71" pos:end="2180:78"><expr pos:start="2180:71" pos:end="2180:78"><name pos:start="2180:71" pos:end="2180:78">sockAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2181:5" pos:end="2185:5"><if pos:start="2181:5" pos:end="2185:5">if <condition pos:start="2181:8" pos:end="2181:19">(<expr pos:start="2181:9" pos:end="2181:18"><name pos:start="2181:9" pos:end="2181:14">result</name> <operator pos:start="2181:16" pos:end="2181:16">&lt;</operator> <literal type="number" pos:start="2181:18" pos:end="2181:18">0</literal></expr>)</condition> <block pos:start="2181:21" pos:end="2185:5">{<block_content pos:start="2182:9" pos:end="2184:39">
        <decl_stmt pos:start="2182:9" pos:end="2182:38"><decl pos:start="2182:9" pos:end="2182:37"><type pos:start="2182:9" pos:end="2182:11"><name pos:start="2182:9" pos:end="2182:11">int</name></type> <name pos:start="2182:13" pos:end="2182:15">err</name> <init pos:start="2182:17" pos:end="2182:37">= <expr pos:start="2182:19" pos:end="2182:37"><call pos:start="2182:19" pos:end="2182:37"><name pos:start="2182:19" pos:end="2182:30">convertError</name><argument_list pos:start="2182:31" pos:end="2182:37">(<argument pos:start="2182:32" pos:end="2182:36"><expr pos:start="2182:32" pos:end="2182:36"><name pos:start="2182:32" pos:end="2182:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2183:9" pos:end="2183:38"><expr pos:start="2183:9" pos:end="2183:37"><call pos:start="2183:9" pos:end="2183:37"><name pos:start="2183:9" pos:end="2183:24">log_socket_close</name><argument_list pos:start="2183:25" pos:end="2183:37">(<argument pos:start="2183:26" pos:end="2183:31"><expr pos:start="2183:26" pos:end="2183:31"><name pos:start="2183:26" pos:end="2183:31">handle</name></expr></argument>, <argument pos:start="2183:34" pos:end="2183:36"><expr pos:start="2183:34" pos:end="2183:36"><name pos:start="2183:34" pos:end="2183:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2184:9" pos:end="2184:39"><expr pos:start="2184:9" pos:end="2184:38"><call pos:start="2184:9" pos:end="2184:38"><name pos:start="2184:9" pos:end="2184:28">throwSocketException</name><argument_list pos:start="2184:29" pos:end="2184:38">(<argument pos:start="2184:30" pos:end="2184:32"><expr pos:start="2184:30" pos:end="2184:32"><name pos:start="2184:30" pos:end="2184:32">env</name></expr></argument>, <argument pos:start="2184:35" pos:end="2184:37"><expr pos:start="2184:35" pos:end="2184:37"><name pos:start="2184:35" pos:end="2184:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2188:1" pos:end="2208:1">extern <literal type="string" pos:start="2188:8" pos:end="2188:10">"C"</literal> <function pos:start="2188:12" pos:end="2208:1"><type pos:start="2188:12" pos:end="2188:15"><name pos:start="2188:12" pos:end="2188:15">void</name></type> <name pos:start="2188:17" pos:end="2188:81">Java_org_sipdroid_net_impl_OSNetworkSystem_disconnectDatagramImpl</name><parameter_list pos:start="2188:82" pos:end="2189:19">(<parameter pos:start="2188:83" pos:end="2188:93"><decl pos:start="2188:83" pos:end="2188:93"><type pos:start="2188:83" pos:end="2188:93"><name pos:start="2188:83" pos:end="2188:88">JNIEnv</name><modifier pos:start="2188:89" pos:end="2188:89">*</modifier></type> <name pos:start="2188:91" pos:end="2188:93">env</name></decl></parameter>, <parameter pos:start="2188:96" pos:end="2188:107"><decl pos:start="2188:96" pos:end="2188:107"><type pos:start="2188:96" pos:end="2188:107"><name pos:start="2188:96" pos:end="2188:101">jclass</name></type> <name pos:start="2188:103" pos:end="2188:107">clazz</name></decl></parameter>,
        <parameter pos:start="2189:9" pos:end="2189:18"><decl pos:start="2189:9" pos:end="2189:18"><type pos:start="2189:9" pos:end="2189:18"><name pos:start="2189:9" pos:end="2189:15">jobject</name></type> <name pos:start="2189:17" pos:end="2189:18">fd</name></decl></parameter>)</parameter_list> <block pos:start="2189:21" pos:end="2208:1">{<block_content pos:start="2192:5" pos:end="2207:5">
    <comment type="line" pos:start="2190:5" pos:end="2190:44">// LOGD("ENTER disconnectDatagramImpl");</comment>

    <decl_stmt pos:start="2192:5" pos:end="2192:53"><decl pos:start="2192:5" pos:end="2192:52"><type pos:start="2192:5" pos:end="2192:7"><name pos:start="2192:5" pos:end="2192:7">int</name></type> <name pos:start="2192:9" pos:end="2192:14">handle</name> <init pos:start="2192:16" pos:end="2192:52">= <expr pos:start="2192:18" pos:end="2192:52"><call pos:start="2192:18" pos:end="2192:52"><name pos:start="2192:18" pos:end="2192:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2192:44" pos:end="2192:52">(<argument pos:start="2192:45" pos:end="2192:47"><expr pos:start="2192:45" pos:end="2192:47"><name pos:start="2192:45" pos:end="2192:47">env</name></expr></argument>, <argument pos:start="2192:50" pos:end="2192:51"><expr pos:start="2192:50" pos:end="2192:51"><name pos:start="2192:50" pos:end="2192:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2194:5" pos:end="2194:33"><decl pos:start="2194:5" pos:end="2194:32"><type pos:start="2194:5" pos:end="2194:24"><name pos:start="2194:5" pos:end="2194:22"><name pos:start="2194:5" pos:end="2194:10">struct</name> <name pos:start="2194:12" pos:end="2194:22">sockaddr_in</name></name> <modifier pos:start="2194:24" pos:end="2194:24">*</modifier></type><name pos:start="2194:25" pos:end="2194:32">sockAddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2195:5" pos:end="2195:55"><decl pos:start="2195:5" pos:end="2195:54"><type pos:start="2195:5" pos:end="2195:13"><name pos:start="2195:5" pos:end="2195:13">socklen_t</name></type> <name pos:start="2195:15" pos:end="2195:25">sockAddrLen</name> <init pos:start="2195:27" pos:end="2195:54">= <expr pos:start="2195:29" pos:end="2195:54"><sizeof pos:start="2195:29" pos:end="2195:54">sizeof<argument_list pos:start="2195:35" pos:end="2195:54">(<argument pos:start="2195:36" pos:end="2195:53"><expr pos:start="2195:36" pos:end="2195:53">struct <name pos:start="2195:43" pos:end="2195:53">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2196:5" pos:end="2196:58"><expr pos:start="2196:5" pos:end="2196:57"><name pos:start="2196:5" pos:end="2196:12">sockAddr</name> <operator pos:start="2196:14" pos:end="2196:14">=</operator> <operator pos:start="2196:16" pos:end="2196:16">(</operator>struct <name pos:start="2196:24" pos:end="2196:34">sockaddr_in</name> <operator pos:start="2196:36" pos:end="2196:36">*</operator><operator pos:start="2196:37" pos:end="2196:37">)</operator> <call pos:start="2196:39" pos:end="2196:57"><name pos:start="2196:39" pos:end="2196:44">malloc</name><argument_list pos:start="2196:45" pos:end="2196:57">(<argument pos:start="2196:46" pos:end="2196:56"><expr pos:start="2196:46" pos:end="2196:56"><name pos:start="2196:46" pos:end="2196:56">sockAddrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2197:5" pos:end="2197:37"><expr pos:start="2197:5" pos:end="2197:36"><call pos:start="2197:5" pos:end="2197:36"><name pos:start="2197:5" pos:end="2197:10">memset</name><argument_list pos:start="2197:11" pos:end="2197:36">(<argument pos:start="2197:12" pos:end="2197:19"><expr pos:start="2197:12" pos:end="2197:19"><name pos:start="2197:12" pos:end="2197:19">sockAddr</name></expr></argument>, <argument pos:start="2197:22" pos:end="2197:22"><expr pos:start="2197:22" pos:end="2197:22"><literal type="number" pos:start="2197:22" pos:end="2197:22">0</literal></expr></argument>, <argument pos:start="2197:25" pos:end="2197:35"><expr pos:start="2197:25" pos:end="2197:35"><name pos:start="2197:25" pos:end="2197:35">sockAddrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2199:5" pos:end="2199:37"><expr pos:start="2199:5" pos:end="2199:36"><name pos:start="2199:5" pos:end="2199:24"><name pos:start="2199:5" pos:end="2199:12">sockAddr</name><operator pos:start="2199:13" pos:end="2199:14">-&gt;</operator><name pos:start="2199:15" pos:end="2199:24">sin_family</name></name> <operator pos:start="2199:26" pos:end="2199:26">=</operator> <name pos:start="2199:28" pos:end="2199:36">AF_UNSPEC</name></expr>;</expr_stmt>
    <decl_stmt pos:start="2200:5" pos:end="2200:75"><decl pos:start="2200:5" pos:end="2200:74"><type pos:start="2200:5" pos:end="2200:7"><name pos:start="2200:5" pos:end="2200:7">int</name></type> <name pos:start="2200:9" pos:end="2200:14">result</name> <init pos:start="2200:16" pos:end="2200:74">= <expr pos:start="2200:18" pos:end="2200:74"><call pos:start="2200:18" pos:end="2200:74"><name pos:start="2200:18" pos:end="2200:24">connect</name><argument_list pos:start="2200:25" pos:end="2200:74">(<argument pos:start="2200:26" pos:end="2200:31"><expr pos:start="2200:26" pos:end="2200:31"><name pos:start="2200:26" pos:end="2200:31">handle</name></expr></argument>, <argument pos:start="2200:34" pos:end="2200:60"><expr pos:start="2200:34" pos:end="2200:60"><operator pos:start="2200:34" pos:end="2200:34">(</operator>struct <name pos:start="2200:42" pos:end="2200:49">sockaddr</name> <operator pos:start="2200:51" pos:end="2200:51">*</operator><operator pos:start="2200:52" pos:end="2200:52">)</operator><name pos:start="2200:53" pos:end="2200:60">sockAddr</name></expr></argument>, <argument pos:start="2200:63" pos:end="2200:73"><expr pos:start="2200:63" pos:end="2200:73"><name pos:start="2200:63" pos:end="2200:73">sockAddrLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2201:5" pos:end="2201:19"><expr pos:start="2201:5" pos:end="2201:18"><call pos:start="2201:5" pos:end="2201:18"><name pos:start="2201:5" pos:end="2201:8">free</name><argument_list pos:start="2201:9" pos:end="2201:18">(<argument pos:start="2201:10" pos:end="2201:17"><expr pos:start="2201:10" pos:end="2201:17"><name pos:start="2201:10" pos:end="2201:17">sockAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2203:5" pos:end="2207:5"><if pos:start="2203:5" pos:end="2207:5">if <condition pos:start="2203:8" pos:end="2203:19">(<expr pos:start="2203:9" pos:end="2203:18"><name pos:start="2203:9" pos:end="2203:14">result</name> <operator pos:start="2203:16" pos:end="2203:16">&lt;</operator> <literal type="number" pos:start="2203:18" pos:end="2203:18">0</literal></expr>)</condition> <block pos:start="2203:21" pos:end="2207:5">{<block_content pos:start="2204:9" pos:end="2206:39">
        <decl_stmt pos:start="2204:9" pos:end="2204:38"><decl pos:start="2204:9" pos:end="2204:37"><type pos:start="2204:9" pos:end="2204:11"><name pos:start="2204:9" pos:end="2204:11">int</name></type> <name pos:start="2204:13" pos:end="2204:15">err</name> <init pos:start="2204:17" pos:end="2204:37">= <expr pos:start="2204:19" pos:end="2204:37"><call pos:start="2204:19" pos:end="2204:37"><name pos:start="2204:19" pos:end="2204:30">convertError</name><argument_list pos:start="2204:31" pos:end="2204:37">(<argument pos:start="2204:32" pos:end="2204:36"><expr pos:start="2204:32" pos:end="2204:36"><name pos:start="2204:32" pos:end="2204:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2205:9" pos:end="2205:38"><expr pos:start="2205:9" pos:end="2205:37"><call pos:start="2205:9" pos:end="2205:37"><name pos:start="2205:9" pos:end="2205:24">log_socket_close</name><argument_list pos:start="2205:25" pos:end="2205:37">(<argument pos:start="2205:26" pos:end="2205:31"><expr pos:start="2205:26" pos:end="2205:31"><name pos:start="2205:26" pos:end="2205:31">handle</name></expr></argument>, <argument pos:start="2205:34" pos:end="2205:36"><expr pos:start="2205:34" pos:end="2205:36"><name pos:start="2205:34" pos:end="2205:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2206:9" pos:end="2206:39"><expr pos:start="2206:9" pos:end="2206:38"><call pos:start="2206:9" pos:end="2206:38"><name pos:start="2206:9" pos:end="2206:28">throwSocketException</name><argument_list pos:start="2206:29" pos:end="2206:38">(<argument pos:start="2206:30" pos:end="2206:32"><expr pos:start="2206:30" pos:end="2206:32"><name pos:start="2206:30" pos:end="2206:32">env</name></expr></argument>, <argument pos:start="2206:35" pos:end="2206:37"><expr pos:start="2206:35" pos:end="2206:37"><name pos:start="2206:35" pos:end="2206:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2210:1" pos:end="2243:1">extern <literal type="string" pos:start="2210:8" pos:end="2210:10">"C"</literal> <function pos:start="2210:12" pos:end="2243:1"><type pos:start="2210:12" pos:end="2210:19"><name pos:start="2210:12" pos:end="2210:19">jboolean</name></type> <name pos:start="2210:21" pos:end="2210:78">Java_org_sipdroid_net_impl_OSNetworkSystem_socketBindImpl2</name><parameter_list pos:start="2210:79" pos:end="2212:28">(<parameter pos:start="2210:80" pos:end="2210:90"><decl pos:start="2210:80" pos:end="2210:90"><type pos:start="2210:80" pos:end="2210:90"><name pos:start="2210:80" pos:end="2210:85">JNIEnv</name><modifier pos:start="2210:86" pos:end="2210:86">*</modifier></type> <name pos:start="2210:88" pos:end="2210:90">env</name></decl></parameter>, <parameter pos:start="2210:93" pos:end="2210:104"><decl pos:start="2210:93" pos:end="2210:104"><type pos:start="2210:93" pos:end="2210:104"><name pos:start="2210:93" pos:end="2210:98">jclass</name></type> <name pos:start="2210:100" pos:end="2210:104">clazz</name></decl></parameter>,
        <parameter pos:start="2211:9" pos:end="2211:30"><decl pos:start="2211:9" pos:end="2211:30"><type pos:start="2211:9" pos:end="2211:30"><name pos:start="2211:9" pos:end="2211:15">jobject</name></type> <name pos:start="2211:17" pos:end="2211:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2211:33" pos:end="2211:41"><decl pos:start="2211:33" pos:end="2211:41"><type pos:start="2211:33" pos:end="2211:41"><name pos:start="2211:33" pos:end="2211:36">jint</name></type> <name pos:start="2211:38" pos:end="2211:41">port</name></decl></parameter>, <parameter pos:start="2211:44" pos:end="2211:64"><decl pos:start="2211:44" pos:end="2211:64"><type pos:start="2211:44" pos:end="2211:64"><name pos:start="2211:44" pos:end="2211:51">jboolean</name></type> <name pos:start="2211:53" pos:end="2211:64">bindToDevice</name></decl></parameter>,
        <parameter pos:start="2212:9" pos:end="2212:27"><decl pos:start="2212:9" pos:end="2212:27"><type pos:start="2212:9" pos:end="2212:27"><name pos:start="2212:9" pos:end="2212:15">jobject</name></type> <name pos:start="2212:17" pos:end="2212:27">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="2212:30" pos:end="2243:1">{<block_content pos:start="2215:5" pos:end="2242:13">
    <comment type="line" pos:start="2213:5" pos:end="2213:37">// LOGD("ENTER socketBindImpl2");</comment>

    <decl_stmt pos:start="2215:5" pos:end="2215:35"><decl pos:start="2215:5" pos:end="2215:34"><type pos:start="2215:5" pos:end="2215:22"><name pos:start="2215:5" pos:end="2215:22"><name pos:start="2215:5" pos:end="2215:10">struct</name> <name pos:start="2215:12" pos:end="2215:22">sockaddr_in</name></name></type> <name pos:start="2215:24" pos:end="2215:34">sockaddress</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2216:5" pos:end="2216:12"><decl pos:start="2216:5" pos:end="2216:11"><type pos:start="2216:5" pos:end="2216:7"><name pos:start="2216:5" pos:end="2216:7">int</name></type> <name pos:start="2216:9" pos:end="2216:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2217:5" pos:end="2217:15"><decl pos:start="2217:5" pos:end="2217:14"><type pos:start="2217:5" pos:end="2217:7"><name pos:start="2217:5" pos:end="2217:7">int</name></type> <name pos:start="2217:9" pos:end="2217:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2219:5" pos:end="2220:49"><expr pos:start="2219:5" pos:end="2220:48"><name pos:start="2219:5" pos:end="2219:7">ret</name> <operator pos:start="2219:9" pos:end="2219:9">=</operator> <call pos:start="2219:11" pos:end="2220:48"><name pos:start="2219:11" pos:end="2219:36">inetAddressToSocketAddress</name><argument_list pos:start="2219:37" pos:end="2220:48">(<argument pos:start="2219:38" pos:end="2219:40"><expr pos:start="2219:38" pos:end="2219:40"><name pos:start="2219:38" pos:end="2219:40">env</name></expr></argument>, <argument pos:start="2219:43" pos:end="2219:53"><expr pos:start="2219:43" pos:end="2219:53"><name pos:start="2219:43" pos:end="2219:53">inetAddress</name></expr></argument>, <argument pos:start="2219:56" pos:end="2219:59"><expr pos:start="2219:56" pos:end="2219:59"><name pos:start="2219:56" pos:end="2219:59">port</name></expr></argument>,
            <argument pos:start="2220:13" pos:end="2220:47"><expr pos:start="2220:13" pos:end="2220:47"><operator pos:start="2220:13" pos:end="2220:13">(</operator>struct <name pos:start="2220:21" pos:end="2220:31">sockaddr_in</name> <operator pos:start="2220:33" pos:end="2220:33">*</operator><operator pos:start="2220:34" pos:end="2220:34">)</operator> <operator pos:start="2220:36" pos:end="2220:36">&amp;</operator><name pos:start="2220:37" pos:end="2220:47">sockaddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2222:5" pos:end="2225:5"><if pos:start="2222:5" pos:end="2225:5">if <condition pos:start="2222:8" pos:end="2222:16">(<expr pos:start="2222:9" pos:end="2222:15"><name pos:start="2222:9" pos:end="2222:11">ret</name> <operator pos:start="2222:13" pos:end="2222:13">&lt;</operator> <literal type="number" pos:start="2222:15" pos:end="2222:15">0</literal></expr>)</condition> <block pos:start="2222:18" pos:end="2225:5">{<block_content pos:start="2223:9" pos:end="2224:17">
        <expr_stmt pos:start="2223:9" pos:end="2223:53"><expr pos:start="2223:9" pos:end="2223:52"><call pos:start="2223:9" pos:end="2223:52"><name pos:start="2223:9" pos:end="2223:28">throwSocketException</name><argument_list pos:start="2223:29" pos:end="2223:52">(<argument pos:start="2223:30" pos:end="2223:32"><expr pos:start="2223:30" pos:end="2223:32"><name pos:start="2223:30" pos:end="2223:32">env</name></expr></argument>, <argument pos:start="2223:35" pos:end="2223:51"><expr pos:start="2223:35" pos:end="2223:51"><name pos:start="2223:35" pos:end="2223:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2224:9" pos:end="2224:17">return <expr pos:start="2224:16" pos:end="2224:16"><literal type="number" pos:start="2224:16" pos:end="2224:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2227:5" pos:end="2227:61"><expr pos:start="2227:5" pos:end="2227:60"><name pos:start="2227:5" pos:end="2227:10">handle</name> <operator pos:start="2227:12" pos:end="2227:12">=</operator> <call pos:start="2227:14" pos:end="2227:60"><name pos:start="2227:14" pos:end="2227:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2227:40" pos:end="2227:60">(<argument pos:start="2227:41" pos:end="2227:43"><expr pos:start="2227:41" pos:end="2227:43"><name pos:start="2227:41" pos:end="2227:43">env</name></expr></argument>, <argument pos:start="2227:46" pos:end="2227:59"><expr pos:start="2227:46" pos:end="2227:59"><name pos:start="2227:46" pos:end="2227:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2228:5" pos:end="2231:5"><if pos:start="2228:5" pos:end="2231:5">if <condition pos:start="2228:8" pos:end="2228:36">(<expr pos:start="2228:9" pos:end="2228:35"><name pos:start="2228:9" pos:end="2228:14">handle</name> <operator pos:start="2228:16" pos:end="2228:17">==</operator> <literal type="number" pos:start="2228:19" pos:end="2228:19">0</literal> <operator pos:start="2228:21" pos:end="2228:22">||</operator> <name pos:start="2228:24" pos:end="2228:29">handle</name> <operator pos:start="2228:31" pos:end="2228:32">==</operator> <operator pos:start="2228:34" pos:end="2228:34">-</operator><literal type="number" pos:start="2228:35" pos:end="2228:35">1</literal></expr>)</condition> <block pos:start="2228:38" pos:end="2231:5">{<block_content pos:start="2229:9" pos:end="2230:17">
        <expr_stmt pos:start="2229:9" pos:end="2229:53"><expr pos:start="2229:9" pos:end="2229:52"><call pos:start="2229:9" pos:end="2229:52"><name pos:start="2229:9" pos:end="2229:28">throwSocketException</name><argument_list pos:start="2229:29" pos:end="2229:52">(<argument pos:start="2229:30" pos:end="2229:32"><expr pos:start="2229:30" pos:end="2229:32"><name pos:start="2229:30" pos:end="2229:32">env</name></expr></argument>, <argument pos:start="2229:35" pos:end="2229:51"><expr pos:start="2229:35" pos:end="2229:51"><name pos:start="2229:35" pos:end="2229:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2230:9" pos:end="2230:17">return <expr pos:start="2230:16" pos:end="2230:16"><literal type="number" pos:start="2230:16" pos:end="2230:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2233:5" pos:end="2233:75"><expr pos:start="2233:5" pos:end="2233:74"><name pos:start="2233:5" pos:end="2233:7">ret</name> <operator pos:start="2233:9" pos:end="2233:9">=</operator> <call pos:start="2233:11" pos:end="2233:74"><name pos:start="2233:11" pos:end="2233:14">bind</name><argument_list pos:start="2233:15" pos:end="2233:74">(<argument pos:start="2233:16" pos:end="2233:21"><expr pos:start="2233:16" pos:end="2233:21"><name pos:start="2233:16" pos:end="2233:21">handle</name></expr></argument>, <argument pos:start="2233:24" pos:end="2233:52"><expr pos:start="2233:24" pos:end="2233:52"><operator pos:start="2233:24" pos:end="2233:24">(</operator><specifier pos:start="2233:25" pos:end="2233:29">const</specifier> <name pos:start="2233:31" pos:end="2233:38">sockaddr</name><operator pos:start="2233:39" pos:end="2233:39">*</operator><operator pos:start="2233:40" pos:end="2233:40">)</operator><operator pos:start="2233:41" pos:end="2233:41">&amp;</operator><name pos:start="2233:42" pos:end="2233:52">sockaddress</name></expr></argument>, <argument pos:start="2233:55" pos:end="2233:73"><expr pos:start="2233:55" pos:end="2233:73"><sizeof pos:start="2233:55" pos:end="2233:73">sizeof<argument_list pos:start="2233:61" pos:end="2233:73">(<argument pos:start="2233:62" pos:end="2233:72"><expr pos:start="2233:62" pos:end="2233:72"><name pos:start="2233:62" pos:end="2233:72">sockaddress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2235:5" pos:end="2240:5"><if pos:start="2235:5" pos:end="2240:5">if <condition pos:start="2235:8" pos:end="2235:16">(<expr pos:start="2235:9" pos:end="2235:15"><name pos:start="2235:9" pos:end="2235:11">ret</name> <operator pos:start="2235:13" pos:end="2235:13">&lt;</operator> <literal type="number" pos:start="2235:15" pos:end="2235:15">0</literal></expr>)</condition> <block pos:start="2235:18" pos:end="2240:5">{<block_content pos:start="2236:9" pos:end="2239:17">
        <decl_stmt pos:start="2236:9" pos:end="2236:38"><decl pos:start="2236:9" pos:end="2236:37"><type pos:start="2236:9" pos:end="2236:11"><name pos:start="2236:9" pos:end="2236:11">int</name></type> <name pos:start="2236:13" pos:end="2236:15">err</name> <init pos:start="2236:17" pos:end="2236:37">= <expr pos:start="2236:19" pos:end="2236:37"><call pos:start="2236:19" pos:end="2236:37"><name pos:start="2236:19" pos:end="2236:30">convertError</name><argument_list pos:start="2236:31" pos:end="2236:37">(<argument pos:start="2236:32" pos:end="2236:36"><expr pos:start="2236:32" pos:end="2236:36"><name pos:start="2236:32" pos:end="2236:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2237:9" pos:end="2237:38"><expr pos:start="2237:9" pos:end="2237:37"><call pos:start="2237:9" pos:end="2237:37"><name pos:start="2237:9" pos:end="2237:24">log_socket_close</name><argument_list pos:start="2237:25" pos:end="2237:37">(<argument pos:start="2237:26" pos:end="2237:31"><expr pos:start="2237:26" pos:end="2237:31"><name pos:start="2237:26" pos:end="2237:31">handle</name></expr></argument>, <argument pos:start="2237:34" pos:end="2237:36"><expr pos:start="2237:34" pos:end="2237:36"><name pos:start="2237:34" pos:end="2237:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2238:9" pos:end="2238:84"><expr pos:start="2238:9" pos:end="2238:83"><call pos:start="2238:9" pos:end="2238:83"><name pos:start="2238:9" pos:end="2238:25">jniThrowException</name><argument_list pos:start="2238:26" pos:end="2238:83">(<argument pos:start="2238:27" pos:end="2238:29"><expr pos:start="2238:27" pos:end="2238:29"><name pos:start="2238:27" pos:end="2238:29">env</name></expr></argument>, <argument pos:start="2238:32" pos:end="2238:55"><expr pos:start="2238:32" pos:end="2238:55"><literal type="string" pos:start="2238:32" pos:end="2238:55">"java/net/BindException"</literal></expr></argument>, <argument pos:start="2238:58" pos:end="2238:82"><expr pos:start="2238:58" pos:end="2238:82"><call pos:start="2238:58" pos:end="2238:82"><name pos:start="2238:58" pos:end="2238:77">netLookupErrorString</name><argument_list pos:start="2238:78" pos:end="2238:82">(<argument pos:start="2238:79" pos:end="2238:81"><expr pos:start="2238:79" pos:end="2238:81"><name pos:start="2238:79" pos:end="2238:81">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2239:9" pos:end="2239:17">return <expr pos:start="2239:16" pos:end="2239:16"><literal type="number" pos:start="2239:16" pos:end="2239:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="2242:5" pos:end="2242:13">return <expr pos:start="2242:12" pos:end="2242:12"><literal type="number" pos:start="2242:12" pos:end="2242:12">0</literal></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2245:1" pos:end="2282:1">extern <literal type="string" pos:start="2245:8" pos:end="2245:10">"C"</literal> <function pos:start="2245:12" pos:end="2282:1"><type pos:start="2245:12" pos:end="2245:15"><name pos:start="2245:12" pos:end="2245:15">jint</name></type> <name pos:start="2245:17" pos:end="2245:75">Java_org_sipdroid_net_impl_OSNetworkSystem_peekDatagramImpl</name><parameter_list pos:start="2245:76" pos:end="2246:56">(<parameter pos:start="2245:77" pos:end="2245:87"><decl pos:start="2245:77" pos:end="2245:87"><type pos:start="2245:77" pos:end="2245:87"><name pos:start="2245:77" pos:end="2245:82">JNIEnv</name><modifier pos:start="2245:83" pos:end="2245:83">*</modifier></type> <name pos:start="2245:85" pos:end="2245:87">env</name></decl></parameter>, <parameter pos:start="2245:90" pos:end="2245:101"><decl pos:start="2245:90" pos:end="2245:101"><type pos:start="2245:90" pos:end="2245:101"><name pos:start="2245:90" pos:end="2245:95">jclass</name></type> <name pos:start="2245:97" pos:end="2245:101">clazz</name></decl></parameter>,
        <parameter pos:start="2246:9" pos:end="2246:18"><decl pos:start="2246:9" pos:end="2246:18"><type pos:start="2246:9" pos:end="2246:18"><name pos:start="2246:9" pos:end="2246:15">jobject</name></type> <name pos:start="2246:17" pos:end="2246:18">fd</name></decl></parameter>, <parameter pos:start="2246:21" pos:end="2246:34"><decl pos:start="2246:21" pos:end="2246:34"><type pos:start="2246:21" pos:end="2246:34"><name pos:start="2246:21" pos:end="2246:27">jobject</name></type> <name pos:start="2246:29" pos:end="2246:34">sender</name></decl></parameter>, <parameter pos:start="2246:37" pos:end="2246:55"><decl pos:start="2246:37" pos:end="2246:55"><type pos:start="2246:37" pos:end="2246:55"><name pos:start="2246:37" pos:end="2246:40">jint</name></type> <name pos:start="2246:42" pos:end="2246:55">receiveTimeout</name></decl></parameter>)</parameter_list> <block pos:start="2246:58" pos:end="2282:1">{<block_content pos:start="2249:5" pos:end="2281:16">
    <comment type="line" pos:start="2247:5" pos:end="2247:38">// LOGD("ENTER peekDatagramImpl");</comment>

    <decl_stmt pos:start="2249:5" pos:end="2249:18"><decl pos:start="2249:5" pos:end="2249:17"><type pos:start="2249:5" pos:end="2249:7"><name pos:start="2249:5" pos:end="2249:7">int</name></type> <name pos:start="2249:9" pos:end="2249:12">port</name> <init pos:start="2249:14" pos:end="2249:17">= <expr pos:start="2249:16" pos:end="2249:17"><operator pos:start="2249:16" pos:end="2249:16">-</operator><literal type="number" pos:start="2249:17" pos:end="2249:17">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2251:5" pos:end="2251:76"><decl pos:start="2251:5" pos:end="2251:75"><type pos:start="2251:5" pos:end="2251:7"><name pos:start="2251:5" pos:end="2251:7">int</name></type> <name pos:start="2251:9" pos:end="2251:14">result</name> <init pos:start="2251:16" pos:end="2251:75">= <expr pos:start="2251:18" pos:end="2251:75"><call pos:start="2251:18" pos:end="2251:75"><name pos:start="2251:18" pos:end="2251:31">pollSelectWait</name> <argument_list pos:start="2251:33" pos:end="2251:75">(<argument pos:start="2251:34" pos:end="2251:36"><expr pos:start="2251:34" pos:end="2251:36"><name pos:start="2251:34" pos:end="2251:36">env</name></expr></argument>, <argument pos:start="2251:39" pos:end="2251:40"><expr pos:start="2251:39" pos:end="2251:40"><name pos:start="2251:39" pos:end="2251:40">fd</name></expr></argument>, <argument pos:start="2251:43" pos:end="2251:56"><expr pos:start="2251:43" pos:end="2251:56"><name pos:start="2251:43" pos:end="2251:56">receiveTimeout</name></expr></argument>, <argument pos:start="2251:59" pos:end="2251:74"><expr pos:start="2251:59" pos:end="2251:74"><name pos:start="2251:59" pos:end="2251:74">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2252:5" pos:end="2254:5"><if pos:start="2252:5" pos:end="2254:5">if <condition pos:start="2252:8" pos:end="2252:18">(<expr pos:start="2252:9" pos:end="2252:17"><literal type="number" pos:start="2252:9" pos:end="2252:9">0</literal><operator pos:start="2252:10" pos:end="2252:10">&gt;</operator> <name pos:start="2252:12" pos:end="2252:17">result</name></expr>)</condition> <block pos:start="2252:20" pos:end="2254:5">{<block_content pos:start="2253:9" pos:end="2253:24">
        <return pos:start="2253:9" pos:end="2253:24">return <expr pos:start="2253:16" pos:end="2253:23"><operator pos:start="2253:16" pos:end="2253:16">(</operator><name pos:start="2253:17" pos:end="2253:20">jint</name><operator pos:start="2253:21" pos:end="2253:21">)</operator> <literal type="number" pos:start="2253:23" pos:end="2253:23">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2256:5" pos:end="2256:53"><decl pos:start="2256:5" pos:end="2256:52"><type pos:start="2256:5" pos:end="2256:7"><name pos:start="2256:5" pos:end="2256:7">int</name></type> <name pos:start="2256:9" pos:end="2256:14">handle</name> <init pos:start="2256:16" pos:end="2256:52">= <expr pos:start="2256:18" pos:end="2256:52"><call pos:start="2256:18" pos:end="2256:52"><name pos:start="2256:18" pos:end="2256:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2256:44" pos:end="2256:52">(<argument pos:start="2256:45" pos:end="2256:47"><expr pos:start="2256:45" pos:end="2256:47"><name pos:start="2256:45" pos:end="2256:47">env</name></expr></argument>, <argument pos:start="2256:50" pos:end="2256:51"><expr pos:start="2256:50" pos:end="2256:51"><name pos:start="2256:50" pos:end="2256:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2258:5" pos:end="2261:5"><if pos:start="2258:5" pos:end="2261:5">if <condition pos:start="2258:8" pos:end="2258:36">(<expr pos:start="2258:9" pos:end="2258:35"><name pos:start="2258:9" pos:end="2258:14">handle</name> <operator pos:start="2258:16" pos:end="2258:17">==</operator> <literal type="number" pos:start="2258:19" pos:end="2258:19">0</literal> <operator pos:start="2258:21" pos:end="2258:22">||</operator> <name pos:start="2258:24" pos:end="2258:29">handle</name> <operator pos:start="2258:31" pos:end="2258:32">==</operator> <operator pos:start="2258:34" pos:end="2258:34">-</operator><literal type="number" pos:start="2258:35" pos:end="2258:35">1</literal></expr>)</condition> <block pos:start="2258:38" pos:end="2261:5">{<block_content pos:start="2259:9" pos:end="2260:17">
        <expr_stmt pos:start="2259:9" pos:end="2259:53"><expr pos:start="2259:9" pos:end="2259:52"><call pos:start="2259:9" pos:end="2259:52"><name pos:start="2259:9" pos:end="2259:28">throwSocketException</name><argument_list pos:start="2259:29" pos:end="2259:52">(<argument pos:start="2259:30" pos:end="2259:32"><expr pos:start="2259:30" pos:end="2259:32"><name pos:start="2259:30" pos:end="2259:32">env</name></expr></argument>, <argument pos:start="2259:35" pos:end="2259:51"><expr pos:start="2259:35" pos:end="2259:51"><name pos:start="2259:35" pos:end="2259:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2260:9" pos:end="2260:17">return <expr pos:start="2260:16" pos:end="2260:16"><literal type="number" pos:start="2260:16" pos:end="2260:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2263:5" pos:end="2263:32"><decl pos:start="2263:5" pos:end="2263:31"><type pos:start="2263:5" pos:end="2263:22"><name pos:start="2263:5" pos:end="2263:22"><name pos:start="2263:5" pos:end="2263:10">struct</name> <name pos:start="2263:12" pos:end="2263:22">sockaddr_in</name></name></type> <name pos:start="2263:24" pos:end="2263:31">sockAddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2264:5" pos:end="2264:45"><decl pos:start="2264:5" pos:end="2264:44"><type pos:start="2264:5" pos:end="2264:13"><name pos:start="2264:5" pos:end="2264:13">socklen_t</name></type> <name pos:start="2264:15" pos:end="2264:25">sockAddrLen</name> <init pos:start="2264:27" pos:end="2264:44">= <expr pos:start="2264:29" pos:end="2264:44"><sizeof pos:start="2264:29" pos:end="2264:44">sizeof<argument_list pos:start="2264:35" pos:end="2264:44">(<argument pos:start="2264:36" pos:end="2264:43"><expr pos:start="2264:36" pos:end="2264:43"><name pos:start="2264:36" pos:end="2264:43">sockAddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2266:5" pos:end="2267:56"><decl pos:start="2266:5" pos:end="2267:55"><type pos:start="2266:5" pos:end="2266:7"><name pos:start="2266:5" pos:end="2266:7">int</name></type> <name pos:start="2266:9" pos:end="2266:14">length</name> <init pos:start="2266:16" pos:end="2267:55">= <expr pos:start="2266:18" pos:end="2267:55"><call pos:start="2266:18" pos:end="2267:55"><name pos:start="2266:18" pos:end="2266:25">recvfrom</name><argument_list pos:start="2266:26" pos:end="2267:55">(<argument pos:start="2266:27" pos:end="2266:32"><expr pos:start="2266:27" pos:end="2266:32"><name pos:start="2266:27" pos:end="2266:32">handle</name></expr></argument>, <argument pos:start="2266:35" pos:end="2266:38"><expr pos:start="2266:35" pos:end="2266:38"><name pos:start="2266:35" pos:end="2266:38">NULL</name></expr></argument>, <argument pos:start="2266:41" pos:end="2266:41"><expr pos:start="2266:41" pos:end="2266:41"><literal type="number" pos:start="2266:41" pos:end="2266:41">0</literal></expr></argument>, <argument pos:start="2266:44" pos:end="2266:51"><expr pos:start="2266:44" pos:end="2266:51"><name pos:start="2266:44" pos:end="2266:51">MSG_PEEK</name></expr></argument>,
            <argument pos:start="2267:13" pos:end="2267:40"><expr pos:start="2267:13" pos:end="2267:40"><operator pos:start="2267:13" pos:end="2267:13">(</operator>struct <name pos:start="2267:21" pos:end="2267:28">sockaddr</name> <operator pos:start="2267:30" pos:end="2267:30">*</operator><operator pos:start="2267:31" pos:end="2267:31">)</operator><operator pos:start="2267:32" pos:end="2267:32">&amp;</operator><name pos:start="2267:33" pos:end="2267:40">sockAddr</name></expr></argument>, <argument pos:start="2267:43" pos:end="2267:54"><expr pos:start="2267:43" pos:end="2267:54"><operator pos:start="2267:43" pos:end="2267:43">&amp;</operator><name pos:start="2267:44" pos:end="2267:54">sockAddrLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2269:5" pos:end="2274:5"><if pos:start="2269:5" pos:end="2274:5">if <condition pos:start="2269:8" pos:end="2269:19">(<expr pos:start="2269:9" pos:end="2269:18"><name pos:start="2269:9" pos:end="2269:14">length</name> <operator pos:start="2269:16" pos:end="2269:16">&lt;</operator> <literal type="number" pos:start="2269:18" pos:end="2269:18">0</literal></expr>)</condition> <block pos:start="2269:21" pos:end="2274:5">{<block_content pos:start="2270:9" pos:end="2273:17">
        <decl_stmt pos:start="2270:9" pos:end="2270:38"><decl pos:start="2270:9" pos:end="2270:37"><type pos:start="2270:9" pos:end="2270:11"><name pos:start="2270:9" pos:end="2270:11">int</name></type> <name pos:start="2270:13" pos:end="2270:15">err</name> <init pos:start="2270:17" pos:end="2270:37">= <expr pos:start="2270:19" pos:end="2270:37"><call pos:start="2270:19" pos:end="2270:37"><name pos:start="2270:19" pos:end="2270:30">convertError</name><argument_list pos:start="2270:31" pos:end="2270:37">(<argument pos:start="2270:32" pos:end="2270:36"><expr pos:start="2270:32" pos:end="2270:36"><name pos:start="2270:32" pos:end="2270:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2271:9" pos:end="2271:38"><expr pos:start="2271:9" pos:end="2271:37"><call pos:start="2271:9" pos:end="2271:37"><name pos:start="2271:9" pos:end="2271:24">log_socket_close</name><argument_list pos:start="2271:25" pos:end="2271:37">(<argument pos:start="2271:26" pos:end="2271:31"><expr pos:start="2271:26" pos:end="2271:31"><name pos:start="2271:26" pos:end="2271:31">handle</name></expr></argument>, <argument pos:start="2271:34" pos:end="2271:36"><expr pos:start="2271:34" pos:end="2271:36"><name pos:start="2271:34" pos:end="2271:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2272:9" pos:end="2272:39"><expr pos:start="2272:9" pos:end="2272:38"><call pos:start="2272:9" pos:end="2272:38"><name pos:start="2272:9" pos:end="2272:28">throwSocketException</name><argument_list pos:start="2272:29" pos:end="2272:38">(<argument pos:start="2272:30" pos:end="2272:32"><expr pos:start="2272:30" pos:end="2272:32"><name pos:start="2272:30" pos:end="2272:32">env</name></expr></argument>, <argument pos:start="2272:35" pos:end="2272:37"><expr pos:start="2272:35" pos:end="2272:37"><name pos:start="2272:35" pos:end="2272:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2273:9" pos:end="2273:17">return <expr pos:start="2273:16" pos:end="2273:16"><literal type="number" pos:start="2273:16" pos:end="2273:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2276:5" pos:end="2279:5"><if pos:start="2276:5" pos:end="2279:5">if <condition pos:start="2276:8" pos:end="2276:70">(<expr pos:start="2276:9" pos:end="2276:69"><call pos:start="2276:9" pos:end="2276:65"><name pos:start="2276:9" pos:end="2276:34">socketAddressToInetAddress</name><argument_list pos:start="2276:35" pos:end="2276:65">(<argument pos:start="2276:36" pos:end="2276:38"><expr pos:start="2276:36" pos:end="2276:38"><name pos:start="2276:36" pos:end="2276:38">env</name></expr></argument>, <argument pos:start="2276:41" pos:end="2276:49"><expr pos:start="2276:41" pos:end="2276:49"><operator pos:start="2276:41" pos:end="2276:41">&amp;</operator><name pos:start="2276:42" pos:end="2276:49">sockAddr</name></expr></argument>, <argument pos:start="2276:52" pos:end="2276:57"><expr pos:start="2276:52" pos:end="2276:57"><name pos:start="2276:52" pos:end="2276:57">sender</name></expr></argument>, <argument pos:start="2276:60" pos:end="2276:64"><expr pos:start="2276:60" pos:end="2276:64"><operator pos:start="2276:60" pos:end="2276:60">&amp;</operator><name pos:start="2276:61" pos:end="2276:64">port</name></expr></argument>)</argument_list></call> <operator pos:start="2276:67" pos:end="2276:67">&lt;</operator> <literal type="number" pos:start="2276:69" pos:end="2276:69">0</literal></expr>)</condition> <block pos:start="2276:72" pos:end="2279:5">{<block_content pos:start="2277:9" pos:end="2278:18">
        <expr_stmt pos:start="2277:9" pos:end="2277:62"><expr pos:start="2277:9" pos:end="2277:61"><call pos:start="2277:9" pos:end="2277:61"><name pos:start="2277:9" pos:end="2277:27">throwIOExceptionStr</name><argument_list pos:start="2277:28" pos:end="2277:61">(<argument pos:start="2277:29" pos:end="2277:31"><expr pos:start="2277:29" pos:end="2277:31"><name pos:start="2277:29" pos:end="2277:31">env</name></expr></argument>, <argument pos:start="2277:34" pos:end="2277:60"><expr pos:start="2277:34" pos:end="2277:60"><literal type="string" pos:start="2277:34" pos:end="2277:60">"Address conversion failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2278:9" pos:end="2278:18">return <expr pos:start="2278:16" pos:end="2278:17"><operator pos:start="2278:16" pos:end="2278:16">-</operator><literal type="number" pos:start="2278:17" pos:end="2278:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2280:5" pos:end="2280:35"><expr pos:start="2280:5" pos:end="2280:34"><call pos:start="2280:5" pos:end="2280:34"><name pos:start="2280:5" pos:end="2280:18">add_recv_stats</name><argument_list pos:start="2280:19" pos:end="2280:34">(<argument pos:start="2280:20" pos:end="2280:25"><expr pos:start="2280:20" pos:end="2280:25"><name pos:start="2280:20" pos:end="2280:25">handle</name></expr></argument>, <argument pos:start="2280:28" pos:end="2280:33"><expr pos:start="2280:28" pos:end="2280:33"><name pos:start="2280:28" pos:end="2280:33">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2281:5" pos:end="2281:16">return <expr pos:start="2281:12" pos:end="2281:15"><name pos:start="2281:12" pos:end="2281:15">port</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2284:1" pos:end="2335:1">extern <literal type="string" pos:start="2284:8" pos:end="2284:10">"C"</literal> <function pos:start="2284:12" pos:end="2335:1"><type pos:start="2284:12" pos:end="2284:15"><name pos:start="2284:12" pos:end="2284:15">jint</name></type> <name pos:start="2284:17" pos:end="2284:84">Java_org_sipdroid_net_impl_OSNetworkSystem_receiveDatagramDirectImpl</name><parameter_list pos:start="2284:85" pos:end="2286:43">(<parameter pos:start="2284:86" pos:end="2284:96"><decl pos:start="2284:86" pos:end="2284:96"><type pos:start="2284:86" pos:end="2284:96"><name pos:start="2284:86" pos:end="2284:91">JNIEnv</name><modifier pos:start="2284:92" pos:end="2284:92">*</modifier></type> <name pos:start="2284:94" pos:end="2284:96">env</name></decl></parameter>, <parameter pos:start="2284:99" pos:end="2284:110"><decl pos:start="2284:99" pos:end="2284:110"><type pos:start="2284:99" pos:end="2284:110"><name pos:start="2284:99" pos:end="2284:104">jclass</name></type> <name pos:start="2284:106" pos:end="2284:110">clazz</name></decl></parameter>,
        <parameter pos:start="2285:9" pos:end="2285:18"><decl pos:start="2285:9" pos:end="2285:18"><type pos:start="2285:9" pos:end="2285:18"><name pos:start="2285:9" pos:end="2285:15">jobject</name></type> <name pos:start="2285:17" pos:end="2285:18">fd</name></decl></parameter>, <parameter pos:start="2285:21" pos:end="2285:34"><decl pos:start="2285:21" pos:end="2285:34"><type pos:start="2285:21" pos:end="2285:34"><name pos:start="2285:21" pos:end="2285:27">jobject</name></type> <name pos:start="2285:29" pos:end="2285:34">packet</name></decl></parameter>, <parameter pos:start="2285:37" pos:end="2285:48"><decl pos:start="2285:37" pos:end="2285:48"><type pos:start="2285:37" pos:end="2285:48"><name pos:start="2285:37" pos:end="2285:40">jint</name></type> <name pos:start="2285:42" pos:end="2285:48">address</name></decl></parameter>, <parameter pos:start="2285:51" pos:end="2285:61"><decl pos:start="2285:51" pos:end="2285:61"><type pos:start="2285:51" pos:end="2285:61"><name pos:start="2285:51" pos:end="2285:54">jint</name></type> <name pos:start="2285:56" pos:end="2285:61">offset</name></decl></parameter>, <parameter pos:start="2285:64" pos:end="2285:74"><decl pos:start="2285:64" pos:end="2285:74"><type pos:start="2285:64" pos:end="2285:74"><name pos:start="2285:64" pos:end="2285:67">jint</name></type> <name pos:start="2285:69" pos:end="2285:74">length</name></decl></parameter>,
        <parameter pos:start="2286:9" pos:end="2286:27"><decl pos:start="2286:9" pos:end="2286:27"><type pos:start="2286:9" pos:end="2286:27"><name pos:start="2286:9" pos:end="2286:12">jint</name></type> <name pos:start="2286:14" pos:end="2286:27">receiveTimeout</name></decl></parameter>, <parameter pos:start="2286:30" pos:end="2286:42"><decl pos:start="2286:30" pos:end="2286:42"><type pos:start="2286:30" pos:end="2286:42"><name pos:start="2286:30" pos:end="2286:37">jboolean</name></type> <name pos:start="2286:39" pos:end="2286:42">peek</name></decl></parameter>)</parameter_list> <block pos:start="2286:45" pos:end="2335:1">{<block_content pos:start="2289:5" pos:end="2334:24">
    <comment type="line" pos:start="2287:5" pos:end="2287:47">// LOGD("ENTER receiveDatagramDirectImpl");</comment>

    <decl_stmt pos:start="2289:5" pos:end="2289:76"><decl pos:start="2289:5" pos:end="2289:75"><type pos:start="2289:5" pos:end="2289:7"><name pos:start="2289:5" pos:end="2289:7">int</name></type> <name pos:start="2289:9" pos:end="2289:14">result</name> <init pos:start="2289:16" pos:end="2289:75">= <expr pos:start="2289:18" pos:end="2289:75"><call pos:start="2289:18" pos:end="2289:75"><name pos:start="2289:18" pos:end="2289:31">pollSelectWait</name> <argument_list pos:start="2289:33" pos:end="2289:75">(<argument pos:start="2289:34" pos:end="2289:36"><expr pos:start="2289:34" pos:end="2289:36"><name pos:start="2289:34" pos:end="2289:36">env</name></expr></argument>, <argument pos:start="2289:39" pos:end="2289:40"><expr pos:start="2289:39" pos:end="2289:40"><name pos:start="2289:39" pos:end="2289:40">fd</name></expr></argument>, <argument pos:start="2289:43" pos:end="2289:56"><expr pos:start="2289:43" pos:end="2289:56"><name pos:start="2289:43" pos:end="2289:56">receiveTimeout</name></expr></argument>, <argument pos:start="2289:59" pos:end="2289:74"><expr pos:start="2289:59" pos:end="2289:74"><name pos:start="2289:59" pos:end="2289:74">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2290:5" pos:end="2292:5"><if pos:start="2290:5" pos:end="2292:5">if <condition pos:start="2290:8" pos:end="2290:19">(<expr pos:start="2290:9" pos:end="2290:18"><literal type="number" pos:start="2290:9" pos:end="2290:9">0</literal> <operator pos:start="2290:11" pos:end="2290:11">&gt;</operator> <name pos:start="2290:13" pos:end="2290:18">result</name></expr>)</condition> <block pos:start="2290:21" pos:end="2292:5">{<block_content pos:start="2291:9" pos:end="2291:24">
        <return pos:start="2291:9" pos:end="2291:24">return <expr pos:start="2291:16" pos:end="2291:23"><operator pos:start="2291:16" pos:end="2291:16">(</operator><name pos:start="2291:17" pos:end="2291:20">jint</name><operator pos:start="2291:21" pos:end="2291:21">)</operator> <literal type="number" pos:start="2291:23" pos:end="2291:23">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2294:5" pos:end="2294:53"><decl pos:start="2294:5" pos:end="2294:52"><type pos:start="2294:5" pos:end="2294:7"><name pos:start="2294:5" pos:end="2294:7">int</name></type> <name pos:start="2294:9" pos:end="2294:14">handle</name> <init pos:start="2294:16" pos:end="2294:52">= <expr pos:start="2294:18" pos:end="2294:52"><call pos:start="2294:18" pos:end="2294:52"><name pos:start="2294:18" pos:end="2294:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2294:44" pos:end="2294:52">(<argument pos:start="2294:45" pos:end="2294:47"><expr pos:start="2294:45" pos:end="2294:47"><name pos:start="2294:45" pos:end="2294:47">env</name></expr></argument>, <argument pos:start="2294:50" pos:end="2294:51"><expr pos:start="2294:50" pos:end="2294:51"><name pos:start="2294:50" pos:end="2294:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2296:5" pos:end="2299:5"><if pos:start="2296:5" pos:end="2299:5">if <condition pos:start="2296:8" pos:end="2296:36">(<expr pos:start="2296:9" pos:end="2296:35"><name pos:start="2296:9" pos:end="2296:14">handle</name> <operator pos:start="2296:16" pos:end="2296:17">==</operator> <literal type="number" pos:start="2296:19" pos:end="2296:19">0</literal> <operator pos:start="2296:21" pos:end="2296:22">||</operator> <name pos:start="2296:24" pos:end="2296:29">handle</name> <operator pos:start="2296:31" pos:end="2296:32">==</operator> <operator pos:start="2296:34" pos:end="2296:34">-</operator><literal type="number" pos:start="2296:35" pos:end="2296:35">1</literal></expr>)</condition> <block pos:start="2296:38" pos:end="2299:5">{<block_content pos:start="2297:9" pos:end="2298:17">
        <expr_stmt pos:start="2297:9" pos:end="2297:53"><expr pos:start="2297:9" pos:end="2297:52"><call pos:start="2297:9" pos:end="2297:52"><name pos:start="2297:9" pos:end="2297:28">throwSocketException</name><argument_list pos:start="2297:29" pos:end="2297:52">(<argument pos:start="2297:30" pos:end="2297:32"><expr pos:start="2297:30" pos:end="2297:32"><name pos:start="2297:30" pos:end="2297:32">env</name></expr></argument>, <argument pos:start="2297:35" pos:end="2297:51"><expr pos:start="2297:35" pos:end="2297:51"><name pos:start="2297:35" pos:end="2297:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2298:9" pos:end="2298:17">return <expr pos:start="2298:16" pos:end="2298:16"><literal type="number" pos:start="2298:16" pos:end="2298:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2301:5" pos:end="2301:32"><decl pos:start="2301:5" pos:end="2301:31"><type pos:start="2301:5" pos:end="2301:22"><name pos:start="2301:5" pos:end="2301:22"><name pos:start="2301:5" pos:end="2301:10">struct</name> <name pos:start="2301:12" pos:end="2301:22">sockaddr_in</name></name></type> <name pos:start="2301:24" pos:end="2301:31">sockAddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2302:5" pos:end="2302:45"><decl pos:start="2302:5" pos:end="2302:44"><type pos:start="2302:5" pos:end="2302:13"><name pos:start="2302:5" pos:end="2302:13">socklen_t</name></type> <name pos:start="2302:15" pos:end="2302:25">sockAddrLen</name> <init pos:start="2302:27" pos:end="2302:44">= <expr pos:start="2302:29" pos:end="2302:44"><sizeof pos:start="2302:29" pos:end="2302:44">sizeof<argument_list pos:start="2302:35" pos:end="2302:44">(<argument pos:start="2302:36" pos:end="2302:43"><expr pos:start="2302:36" pos:end="2302:43"><name pos:start="2302:36" pos:end="2302:43">sockAddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2304:5" pos:end="2304:35"><decl pos:start="2304:5" pos:end="2304:34"><type pos:start="2304:5" pos:end="2304:7"><name pos:start="2304:5" pos:end="2304:7">int</name></type> <name pos:start="2304:9" pos:end="2304:12">mode</name> <init pos:start="2304:14" pos:end="2304:34">= <expr pos:start="2304:16" pos:end="2304:34"><ternary pos:start="2304:16" pos:end="2304:34"><condition pos:start="2304:16" pos:end="2304:21"><expr pos:start="2304:16" pos:end="2304:19"><name pos:start="2304:16" pos:end="2304:19">peek</name></expr> ?</condition><then pos:start="2304:23" pos:end="2304:30"> <expr pos:start="2304:23" pos:end="2304:30"><name pos:start="2304:23" pos:end="2304:30">MSG_PEEK</name></expr> </then><else pos:start="2304:32" pos:end="2304:34">: <expr pos:start="2304:34" pos:end="2304:34"><literal type="number" pos:start="2304:34" pos:end="2304:34">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2306:5" pos:end="2307:56"><decl pos:start="2306:5" pos:end="2307:55"><type pos:start="2306:5" pos:end="2306:7"><name pos:start="2306:5" pos:end="2306:7">int</name></type> <name pos:start="2306:9" pos:end="2306:20">actualLength</name> <init pos:start="2306:22" pos:end="2307:55">= <expr pos:start="2306:24" pos:end="2307:55"><call pos:start="2306:24" pos:end="2307:55"><name pos:start="2306:24" pos:end="2306:31">recvfrom</name><argument_list pos:start="2306:32" pos:end="2307:55">(<argument pos:start="2306:33" pos:end="2306:38"><expr pos:start="2306:33" pos:end="2306:38"><name pos:start="2306:33" pos:end="2306:38">handle</name></expr></argument>, <argument pos:start="2306:41" pos:end="2306:65"><expr pos:start="2306:41" pos:end="2306:65"><operator pos:start="2306:41" pos:end="2306:41">(</operator><name pos:start="2306:42" pos:end="2306:45">char</name><operator pos:start="2306:46" pos:end="2306:46">*</operator><operator pos:start="2306:47" pos:end="2306:47">)</operator><operator pos:start="2306:48" pos:end="2306:48">(</operator><name pos:start="2306:49" pos:end="2306:55">address</name> <operator pos:start="2306:57" pos:end="2306:57">+</operator> <name pos:start="2306:59" pos:end="2306:64">offset</name><operator pos:start="2306:65" pos:end="2306:65">)</operator></expr></argument>, <argument pos:start="2306:68" pos:end="2306:73"><expr pos:start="2306:68" pos:end="2306:73"><name pos:start="2306:68" pos:end="2306:73">length</name></expr></argument>, <argument pos:start="2306:76" pos:end="2306:79"><expr pos:start="2306:76" pos:end="2306:79"><name pos:start="2306:76" pos:end="2306:79">mode</name></expr></argument>,
            <argument pos:start="2307:13" pos:end="2307:40"><expr pos:start="2307:13" pos:end="2307:40"><operator pos:start="2307:13" pos:end="2307:13">(</operator>struct <name pos:start="2307:21" pos:end="2307:28">sockaddr</name> <operator pos:start="2307:30" pos:end="2307:30">*</operator><operator pos:start="2307:31" pos:end="2307:31">)</operator><operator pos:start="2307:32" pos:end="2307:32">&amp;</operator><name pos:start="2307:33" pos:end="2307:40">sockAddr</name></expr></argument>, <argument pos:start="2307:43" pos:end="2307:54"><expr pos:start="2307:43" pos:end="2307:54"><operator pos:start="2307:43" pos:end="2307:43">&amp;</operator><name pos:start="2307:44" pos:end="2307:54">sockAddrLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2309:5" pos:end="2314:5"><if pos:start="2309:5" pos:end="2314:5">if <condition pos:start="2309:8" pos:end="2309:25">(<expr pos:start="2309:9" pos:end="2309:24"><name pos:start="2309:9" pos:end="2309:20">actualLength</name> <operator pos:start="2309:22" pos:end="2309:22">&lt;</operator> <literal type="number" pos:start="2309:24" pos:end="2309:24">0</literal></expr>)</condition> <block pos:start="2309:27" pos:end="2314:5">{<block_content pos:start="2310:9" pos:end="2313:17">
        <decl_stmt pos:start="2310:9" pos:end="2310:38"><decl pos:start="2310:9" pos:end="2310:37"><type pos:start="2310:9" pos:end="2310:11"><name pos:start="2310:9" pos:end="2310:11">int</name></type> <name pos:start="2310:13" pos:end="2310:15">err</name> <init pos:start="2310:17" pos:end="2310:37">= <expr pos:start="2310:19" pos:end="2310:37"><call pos:start="2310:19" pos:end="2310:37"><name pos:start="2310:19" pos:end="2310:30">convertError</name><argument_list pos:start="2310:31" pos:end="2310:37">(<argument pos:start="2310:32" pos:end="2310:36"><expr pos:start="2310:32" pos:end="2310:36"><name pos:start="2310:32" pos:end="2310:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2311:9" pos:end="2311:38"><expr pos:start="2311:9" pos:end="2311:37"><call pos:start="2311:9" pos:end="2311:37"><name pos:start="2311:9" pos:end="2311:24">log_socket_close</name><argument_list pos:start="2311:25" pos:end="2311:37">(<argument pos:start="2311:26" pos:end="2311:31"><expr pos:start="2311:26" pos:end="2311:31"><name pos:start="2311:26" pos:end="2311:31">handle</name></expr></argument>, <argument pos:start="2311:34" pos:end="2311:36"><expr pos:start="2311:34" pos:end="2311:36"><name pos:start="2311:34" pos:end="2311:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2312:9" pos:end="2312:39"><expr pos:start="2312:9" pos:end="2312:38"><call pos:start="2312:9" pos:end="2312:38"><name pos:start="2312:9" pos:end="2312:28">throwSocketException</name><argument_list pos:start="2312:29" pos:end="2312:38">(<argument pos:start="2312:30" pos:end="2312:32"><expr pos:start="2312:30" pos:end="2312:32"><name pos:start="2312:30" pos:end="2312:32">env</name></expr></argument>, <argument pos:start="2312:35" pos:end="2312:37"><expr pos:start="2312:35" pos:end="2312:37"><name pos:start="2312:35" pos:end="2312:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2313:9" pos:end="2313:17">return <expr pos:start="2313:16" pos:end="2313:16"><literal type="number" pos:start="2313:16" pos:end="2313:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2316:5" pos:end="2332:5"><if pos:start="2316:5" pos:end="2332:5">if <condition pos:start="2316:8" pos:end="2316:23">(<expr pos:start="2316:9" pos:end="2316:22"><name pos:start="2316:9" pos:end="2316:14">packet</name> <operator pos:start="2316:16" pos:end="2316:17">!=</operator> <name pos:start="2316:19" pos:end="2316:22">NULL</name></expr>)</condition> <block pos:start="2316:25" pos:end="2332:5">{<block_content pos:start="2331:9" pos:end="2331:75">
    <comment type="block" pos:start="2317:5" pos:end="2330:10">/*
        int port = ntohs(sockAddr.sin_port);
        jbyteArray addr = env-&gt;NewByteArray(sizeof(struct in_addr));
        if ((structInToJavaAddress(env, &amp;sockAddr.sin_addr, addr)) &lt; 0) {
            jniThrowException(env, "java/net/SocketException",
                    "Could not set address of packet.");
            return 0;
        }
        jobject sender = env-&gt;CallStaticObjectMethod(
                gCachedFields.iaddr_class, gCachedFields.iaddr_getbyaddress,
                addr);
        env-&gt;SetObjectField(packet, gCachedFields.dpack_address, sender);
        env-&gt;SetIntField(packet, gCachedFields.dpack_port, port);
        */</comment>
        <expr_stmt pos:start="2331:9" pos:end="2331:75"><expr pos:start="2331:9" pos:end="2331:74"><call pos:start="2331:9" pos:end="2331:74"><name pos:start="2331:9" pos:end="2331:24"><name pos:start="2331:9" pos:end="2331:11">env</name><operator pos:start="2331:12" pos:end="2331:13">-&gt;</operator><name pos:start="2331:14" pos:end="2331:24">SetIntField</name></name><argument_list pos:start="2331:25" pos:end="2331:74">(<argument pos:start="2331:26" pos:end="2331:31"><expr pos:start="2331:26" pos:end="2331:31"><name pos:start="2331:26" pos:end="2331:31">packet</name></expr></argument>, <argument pos:start="2331:34" pos:end="2331:59"><expr pos:start="2331:34" pos:end="2331:59"><name pos:start="2331:34" pos:end="2331:59"><name pos:start="2331:34" pos:end="2331:46">gCachedFields</name><operator pos:start="2331:47" pos:end="2331:47">.</operator><name pos:start="2331:48" pos:end="2331:59">dpack_length</name></name></expr></argument>, <argument pos:start="2331:62" pos:end="2331:73"><expr pos:start="2331:62" pos:end="2331:73"><name pos:start="2331:62" pos:end="2331:73">actualLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2333:5" pos:end="2333:41"><expr pos:start="2333:5" pos:end="2333:40"><call pos:start="2333:5" pos:end="2333:40"><name pos:start="2333:5" pos:end="2333:18">add_recv_stats</name><argument_list pos:start="2333:19" pos:end="2333:40">(<argument pos:start="2333:20" pos:end="2333:25"><expr pos:start="2333:20" pos:end="2333:25"><name pos:start="2333:20" pos:end="2333:25">handle</name></expr></argument>, <argument pos:start="2333:28" pos:end="2333:39"><expr pos:start="2333:28" pos:end="2333:39"><name pos:start="2333:28" pos:end="2333:39">actualLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2334:5" pos:end="2334:24">return <expr pos:start="2334:12" pos:end="2334:23"><name pos:start="2334:12" pos:end="2334:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2337:1" pos:end="2359:1">extern <literal type="string" pos:start="2337:8" pos:end="2337:10">"C"</literal> <function pos:start="2337:12" pos:end="2359:1"><type pos:start="2337:12" pos:end="2337:15"><name pos:start="2337:12" pos:end="2337:15">jint</name></type> <name pos:start="2337:17" pos:end="2337:78">Java_org_sipdroid_net_impl_OSNetworkSystem_receiveDatagramImpl</name><parameter_list pos:start="2337:79" pos:end="2339:43">(<parameter pos:start="2337:80" pos:end="2337:90"><decl pos:start="2337:80" pos:end="2337:90"><type pos:start="2337:80" pos:end="2337:90"><name pos:start="2337:80" pos:end="2337:85">JNIEnv</name><modifier pos:start="2337:86" pos:end="2337:86">*</modifier></type> <name pos:start="2337:88" pos:end="2337:90">env</name></decl></parameter>, <parameter pos:start="2337:93" pos:end="2337:104"><decl pos:start="2337:93" pos:end="2337:104"><type pos:start="2337:93" pos:end="2337:104"><name pos:start="2337:93" pos:end="2337:98">jclass</name></type> <name pos:start="2337:100" pos:end="2337:104">clazz</name></decl></parameter>,
        <parameter pos:start="2338:9" pos:end="2338:18"><decl pos:start="2338:9" pos:end="2338:18"><type pos:start="2338:9" pos:end="2338:18"><name pos:start="2338:9" pos:end="2338:15">jobject</name></type> <name pos:start="2338:17" pos:end="2338:18">fd</name></decl></parameter>, <parameter pos:start="2338:21" pos:end="2338:34"><decl pos:start="2338:21" pos:end="2338:34"><type pos:start="2338:21" pos:end="2338:34"><name pos:start="2338:21" pos:end="2338:27">jobject</name></type> <name pos:start="2338:29" pos:end="2338:34">packet</name></decl></parameter>, <parameter pos:start="2338:37" pos:end="2338:51"><decl pos:start="2338:37" pos:end="2338:51"><type pos:start="2338:37" pos:end="2338:51"><name pos:start="2338:37" pos:end="2338:46">jbyteArray</name></type> <name pos:start="2338:48" pos:end="2338:51">data</name></decl></parameter>, <parameter pos:start="2338:54" pos:end="2338:64"><decl pos:start="2338:54" pos:end="2338:64"><type pos:start="2338:54" pos:end="2338:64"><name pos:start="2338:54" pos:end="2338:57">jint</name></type> <name pos:start="2338:59" pos:end="2338:64">offset</name></decl></parameter>, <parameter pos:start="2338:67" pos:end="2338:77"><decl pos:start="2338:67" pos:end="2338:77"><type pos:start="2338:67" pos:end="2338:77"><name pos:start="2338:67" pos:end="2338:70">jint</name></type> <name pos:start="2338:72" pos:end="2338:77">length</name></decl></parameter>,
        <parameter pos:start="2339:9" pos:end="2339:27"><decl pos:start="2339:9" pos:end="2339:27"><type pos:start="2339:9" pos:end="2339:27"><name pos:start="2339:9" pos:end="2339:12">jint</name></type> <name pos:start="2339:14" pos:end="2339:27">receiveTimeout</name></decl></parameter>, <parameter pos:start="2339:30" pos:end="2339:42"><decl pos:start="2339:30" pos:end="2339:42"><type pos:start="2339:30" pos:end="2339:42"><name pos:start="2339:30" pos:end="2339:37">jboolean</name></type> <name pos:start="2339:39" pos:end="2339:42">peek</name></decl></parameter>)</parameter_list> <block pos:start="2339:45" pos:end="2359:1">{<block_content pos:start="2342:5" pos:end="2358:24">
    <comment type="line" pos:start="2340:5" pos:end="2340:41">// LOGD("ENTER receiveDatagramImpl");</comment>

    <decl_stmt pos:start="2342:5" pos:end="2342:56"><decl pos:start="2342:5" pos:end="2342:55"><type pos:start="2342:5" pos:end="2342:7"><name pos:start="2342:5" pos:end="2342:7">int</name></type> <name pos:start="2342:9" pos:end="2342:19">localLength</name> <init pos:start="2342:21" pos:end="2342:55">= <expr pos:start="2342:23" pos:end="2342:55"><ternary pos:start="2342:23" pos:end="2342:55"><condition pos:start="2342:23" pos:end="2342:40"><expr pos:start="2342:23" pos:end="2342:38"><operator pos:start="2342:23" pos:end="2342:23">(</operator><name pos:start="2342:24" pos:end="2342:29">length</name> <operator pos:start="2342:31" pos:end="2342:31">&lt;</operator> <literal type="number" pos:start="2342:33" pos:end="2342:37">65536</literal><operator pos:start="2342:38" pos:end="2342:38">)</operator></expr> ?</condition><then pos:start="2342:42" pos:end="2342:47"> <expr pos:start="2342:42" pos:end="2342:47"><name pos:start="2342:42" pos:end="2342:47">length</name></expr> </then><else pos:start="2342:49" pos:end="2342:55">: <expr pos:start="2342:51" pos:end="2342:55"><literal type="number" pos:start="2342:51" pos:end="2342:55">65536</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2343:5" pos:end="2343:48"><decl pos:start="2343:5" pos:end="2343:47"><type pos:start="2343:5" pos:end="2343:11"><name pos:start="2343:5" pos:end="2343:9">jbyte</name> <modifier pos:start="2343:11" pos:end="2343:11">*</modifier></type><name pos:start="2343:12" pos:end="2343:16">bytes</name> <init pos:start="2343:18" pos:end="2343:47">= <expr pos:start="2343:20" pos:end="2343:47"><operator pos:start="2343:20" pos:end="2343:20">(</operator><name pos:start="2343:21" pos:end="2343:25">jbyte</name><operator pos:start="2343:26" pos:end="2343:26">*</operator><operator pos:start="2343:27" pos:end="2343:27">)</operator> <call pos:start="2343:29" pos:end="2343:47"><name pos:start="2343:29" pos:end="2343:34">malloc</name><argument_list pos:start="2343:35" pos:end="2343:47">(<argument pos:start="2343:36" pos:end="2343:46"><expr pos:start="2343:36" pos:end="2343:46"><name pos:start="2343:36" pos:end="2343:46">localLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2344:5" pos:end="2348:5"><if pos:start="2344:5" pos:end="2348:5">if <condition pos:start="2344:8" pos:end="2344:22">(<expr pos:start="2344:9" pos:end="2344:21"><name pos:start="2344:9" pos:end="2344:13">bytes</name> <operator pos:start="2344:15" pos:end="2344:16">==</operator> <name pos:start="2344:18" pos:end="2344:21">NULL</name></expr>)</condition> <block pos:start="2344:24" pos:end="2348:5">{<block_content pos:start="2345:9" pos:end="2347:17">
        <expr_stmt pos:start="2345:9" pos:end="2346:71"><expr pos:start="2345:9" pos:end="2346:70"><call pos:start="2345:9" pos:end="2346:70"><name pos:start="2345:9" pos:end="2345:25">jniThrowException</name><argument_list pos:start="2345:26" pos:end="2346:70">(<argument pos:start="2345:27" pos:end="2345:29"><expr pos:start="2345:27" pos:end="2345:29"><name pos:start="2345:27" pos:end="2345:29">env</name></expr></argument>, <argument pos:start="2345:32" pos:end="2345:59"><expr pos:start="2345:32" pos:end="2345:59"><literal type="string" pos:start="2345:32" pos:end="2345:59">"java/lang/OutOfMemoryError"</literal></expr></argument>,
                <argument pos:start="2346:17" pos:end="2346:69"><expr pos:start="2346:17" pos:end="2346:69"><literal type="string" pos:start="2346:17" pos:end="2346:69">"couldn't allocate enough memory for receiveDatagram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2347:9" pos:end="2347:17">return <expr pos:start="2347:16" pos:end="2347:16"><literal type="number" pos:start="2347:16" pos:end="2347:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2350:5" pos:end="2351:76"><decl pos:start="2350:5" pos:end="2351:75"><type pos:start="2350:5" pos:end="2350:7"><name pos:start="2350:5" pos:end="2350:7">int</name></type> <name pos:start="2350:9" pos:end="2350:20">actualLength</name> <init pos:start="2350:22" pos:end="2351:75">= <expr pos:start="2350:24" pos:end="2351:75"><call pos:start="2350:24" pos:end="2351:75"><name pos:start="2350:24" pos:end="2350:91">Java_org_sipdroid_net_impl_OSNetworkSystem_receiveDatagramDirectImpl</name><argument_list pos:start="2350:92" pos:end="2351:75">(<argument pos:start="2350:93" pos:end="2350:95"><expr pos:start="2350:93" pos:end="2350:95"><name pos:start="2350:93" pos:end="2350:95">env</name></expr></argument>, <argument pos:start="2350:98" pos:end="2350:102"><expr pos:start="2350:98" pos:end="2350:102"><name pos:start="2350:98" pos:end="2350:102">clazz</name></expr></argument>, <argument pos:start="2350:105" pos:end="2350:106"><expr pos:start="2350:105" pos:end="2350:106"><name pos:start="2350:105" pos:end="2350:106">fd</name></expr></argument>,
            <argument pos:start="2351:13" pos:end="2351:18"><expr pos:start="2351:13" pos:end="2351:18"><name pos:start="2351:13" pos:end="2351:18">packet</name></expr></argument>, <argument pos:start="2351:21" pos:end="2351:31"><expr pos:start="2351:21" pos:end="2351:31"><operator pos:start="2351:21" pos:end="2351:21">(</operator><name pos:start="2351:22" pos:end="2351:25">jint</name><operator pos:start="2351:26" pos:end="2351:26">)</operator><name pos:start="2351:27" pos:end="2351:31">bytes</name></expr></argument>, <argument pos:start="2351:34" pos:end="2351:39"><expr pos:start="2351:34" pos:end="2351:39"><name pos:start="2351:34" pos:end="2351:39">offset</name></expr></argument>, <argument pos:start="2351:42" pos:end="2351:52"><expr pos:start="2351:42" pos:end="2351:52"><name pos:start="2351:42" pos:end="2351:52">localLength</name></expr></argument>, <argument pos:start="2351:55" pos:end="2351:68"><expr pos:start="2351:55" pos:end="2351:68"><name pos:start="2351:55" pos:end="2351:68">receiveTimeout</name></expr></argument>, <argument pos:start="2351:71" pos:end="2351:74"><expr pos:start="2351:71" pos:end="2351:74"><name pos:start="2351:71" pos:end="2351:74">peek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2353:5" pos:end="2355:5"><if pos:start="2353:5" pos:end="2355:5">if <condition pos:start="2353:8" pos:end="2353:25">(<expr pos:start="2353:9" pos:end="2353:24"><name pos:start="2353:9" pos:end="2353:20">actualLength</name> <operator pos:start="2353:22" pos:end="2353:22">&gt;</operator> <literal type="number" pos:start="2353:24" pos:end="2353:24">0</literal></expr>)</condition> <block pos:start="2353:27" pos:end="2355:5">{<block_content pos:start="2354:9" pos:end="2354:67">
        <expr_stmt pos:start="2354:9" pos:end="2354:67"><expr pos:start="2354:9" pos:end="2354:66"><call pos:start="2354:9" pos:end="2354:66"><name pos:start="2354:9" pos:end="2354:31"><name pos:start="2354:9" pos:end="2354:11">env</name><operator pos:start="2354:12" pos:end="2354:13">-&gt;</operator><name pos:start="2354:14" pos:end="2354:31">SetByteArrayRegion</name></name><argument_list pos:start="2354:32" pos:end="2354:66">(<argument pos:start="2354:33" pos:end="2354:36"><expr pos:start="2354:33" pos:end="2354:36"><name pos:start="2354:33" pos:end="2354:36">data</name></expr></argument>, <argument pos:start="2354:39" pos:end="2354:44"><expr pos:start="2354:39" pos:end="2354:44"><name pos:start="2354:39" pos:end="2354:44">offset</name></expr></argument>, <argument pos:start="2354:47" pos:end="2354:58"><expr pos:start="2354:47" pos:end="2354:58"><name pos:start="2354:47" pos:end="2354:58">actualLength</name></expr></argument>, <argument pos:start="2354:61" pos:end="2354:65"><expr pos:start="2354:61" pos:end="2354:65"><name pos:start="2354:61" pos:end="2354:65">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2356:5" pos:end="2356:16"><expr pos:start="2356:5" pos:end="2356:15"><call pos:start="2356:5" pos:end="2356:15"><name pos:start="2356:5" pos:end="2356:8">free</name><argument_list pos:start="2356:9" pos:end="2356:15">(<argument pos:start="2356:10" pos:end="2356:14"><expr pos:start="2356:10" pos:end="2356:14"><name pos:start="2356:10" pos:end="2356:14">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="2358:5" pos:end="2358:24">return <expr pos:start="2358:12" pos:end="2358:23"><name pos:start="2358:12" pos:end="2358:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2361:1" pos:end="2394:1">extern <literal type="string" pos:start="2361:8" pos:end="2361:10">"C"</literal> <function pos:start="2361:12" pos:end="2394:1"><type pos:start="2361:12" pos:end="2361:15"><name pos:start="2361:12" pos:end="2361:15">jint</name></type> <name pos:start="2361:17" pos:end="2361:90">Java_org_sipdroid_net_impl_OSNetworkSystem_recvConnectedDatagramDirectImpl</name><parameter_list pos:start="2361:91" pos:end="2363:56">(<parameter pos:start="2361:92" pos:end="2361:102"><decl pos:start="2361:92" pos:end="2361:102"><type pos:start="2361:92" pos:end="2361:102"><name pos:start="2361:92" pos:end="2361:97">JNIEnv</name><modifier pos:start="2361:98" pos:end="2361:98">*</modifier></type> <name pos:start="2361:100" pos:end="2361:102">env</name></decl></parameter>,
        <parameter pos:start="2362:9" pos:end="2362:20"><decl pos:start="2362:9" pos:end="2362:20"><type pos:start="2362:9" pos:end="2362:20"><name pos:start="2362:9" pos:end="2362:14">jclass</name></type> <name pos:start="2362:16" pos:end="2362:20">clazz</name></decl></parameter>, <parameter pos:start="2362:23" pos:end="2362:32"><decl pos:start="2362:23" pos:end="2362:32"><type pos:start="2362:23" pos:end="2362:32"><name pos:start="2362:23" pos:end="2362:29">jobject</name></type> <name pos:start="2362:31" pos:end="2362:32">fd</name></decl></parameter>, <parameter pos:start="2362:35" pos:end="2362:48"><decl pos:start="2362:35" pos:end="2362:48"><type pos:start="2362:35" pos:end="2362:48"><name pos:start="2362:35" pos:end="2362:41">jobject</name></type> <name pos:start="2362:43" pos:end="2362:48">packet</name></decl></parameter>, <parameter pos:start="2362:51" pos:end="2362:62"><decl pos:start="2362:51" pos:end="2362:62"><type pos:start="2362:51" pos:end="2362:62"><name pos:start="2362:51" pos:end="2362:54">jint</name></type> <name pos:start="2362:56" pos:end="2362:62">address</name></decl></parameter>, <parameter pos:start="2362:65" pos:end="2362:75"><decl pos:start="2362:65" pos:end="2362:75"><type pos:start="2362:65" pos:end="2362:75"><name pos:start="2362:65" pos:end="2362:68">jint</name></type> <name pos:start="2362:70" pos:end="2362:75">offset</name></decl></parameter>,
        <parameter pos:start="2363:9" pos:end="2363:19"><decl pos:start="2363:9" pos:end="2363:19"><type pos:start="2363:9" pos:end="2363:19"><name pos:start="2363:9" pos:end="2363:12">jint</name></type> <name pos:start="2363:14" pos:end="2363:19">length</name></decl></parameter>, <parameter pos:start="2363:22" pos:end="2363:40"><decl pos:start="2363:22" pos:end="2363:40"><type pos:start="2363:22" pos:end="2363:40"><name pos:start="2363:22" pos:end="2363:25">jint</name></type> <name pos:start="2363:27" pos:end="2363:40">receiveTimeout</name></decl></parameter>, <parameter pos:start="2363:43" pos:end="2363:55"><decl pos:start="2363:43" pos:end="2363:55"><type pos:start="2363:43" pos:end="2363:55"><name pos:start="2363:43" pos:end="2363:50">jboolean</name></type> <name pos:start="2363:52" pos:end="2363:55">peek</name></decl></parameter>)</parameter_list> <block pos:start="2363:58" pos:end="2394:1">{<block_content pos:start="2366:5" pos:end="2393:24">
    <comment type="line" pos:start="2364:5" pos:end="2364:56">// LOGD("ENTER receiveConnectedDatagramDirectImpl");</comment>

    <decl_stmt pos:start="2366:5" pos:end="2366:76"><decl pos:start="2366:5" pos:end="2366:75"><type pos:start="2366:5" pos:end="2366:7"><name pos:start="2366:5" pos:end="2366:7">int</name></type> <name pos:start="2366:9" pos:end="2366:14">result</name> <init pos:start="2366:16" pos:end="2366:75">= <expr pos:start="2366:18" pos:end="2366:75"><call pos:start="2366:18" pos:end="2366:75"><name pos:start="2366:18" pos:end="2366:31">pollSelectWait</name> <argument_list pos:start="2366:33" pos:end="2366:75">(<argument pos:start="2366:34" pos:end="2366:36"><expr pos:start="2366:34" pos:end="2366:36"><name pos:start="2366:34" pos:end="2366:36">env</name></expr></argument>, <argument pos:start="2366:39" pos:end="2366:40"><expr pos:start="2366:39" pos:end="2366:40"><name pos:start="2366:39" pos:end="2366:40">fd</name></expr></argument>, <argument pos:start="2366:43" pos:end="2366:56"><expr pos:start="2366:43" pos:end="2366:56"><name pos:start="2366:43" pos:end="2366:56">receiveTimeout</name></expr></argument>, <argument pos:start="2366:59" pos:end="2366:74"><expr pos:start="2366:59" pos:end="2366:74"><name pos:start="2366:59" pos:end="2366:74">SELECT_READ_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2368:5" pos:end="2370:5"><if pos:start="2368:5" pos:end="2370:5">if <condition pos:start="2368:8" pos:end="2368:19">(<expr pos:start="2368:9" pos:end="2368:18"><literal type="number" pos:start="2368:9" pos:end="2368:9">0</literal> <operator pos:start="2368:11" pos:end="2368:11">&gt;</operator> <name pos:start="2368:13" pos:end="2368:18">result</name></expr>)</condition> <block pos:start="2368:21" pos:end="2370:5">{<block_content pos:start="2369:9" pos:end="2369:17">
        <return pos:start="2369:9" pos:end="2369:17">return <expr pos:start="2369:16" pos:end="2369:16"><literal type="number" pos:start="2369:16" pos:end="2369:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2372:5" pos:end="2372:53"><decl pos:start="2372:5" pos:end="2372:52"><type pos:start="2372:5" pos:end="2372:7"><name pos:start="2372:5" pos:end="2372:7">int</name></type> <name pos:start="2372:9" pos:end="2372:14">handle</name> <init pos:start="2372:16" pos:end="2372:52">= <expr pos:start="2372:18" pos:end="2372:52"><call pos:start="2372:18" pos:end="2372:52"><name pos:start="2372:18" pos:end="2372:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2372:44" pos:end="2372:52">(<argument pos:start="2372:45" pos:end="2372:47"><expr pos:start="2372:45" pos:end="2372:47"><name pos:start="2372:45" pos:end="2372:47">env</name></expr></argument>, <argument pos:start="2372:50" pos:end="2372:51"><expr pos:start="2372:50" pos:end="2372:51"><name pos:start="2372:50" pos:end="2372:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2374:5" pos:end="2377:5"><if pos:start="2374:5" pos:end="2377:5">if <condition pos:start="2374:8" pos:end="2374:36">(<expr pos:start="2374:9" pos:end="2374:35"><name pos:start="2374:9" pos:end="2374:14">handle</name> <operator pos:start="2374:16" pos:end="2374:17">==</operator> <literal type="number" pos:start="2374:19" pos:end="2374:19">0</literal> <operator pos:start="2374:21" pos:end="2374:22">||</operator> <name pos:start="2374:24" pos:end="2374:29">handle</name> <operator pos:start="2374:31" pos:end="2374:32">==</operator> <operator pos:start="2374:34" pos:end="2374:34">-</operator><literal type="number" pos:start="2374:35" pos:end="2374:35">1</literal></expr>)</condition> <block pos:start="2374:38" pos:end="2377:5">{<block_content pos:start="2375:9" pos:end="2376:17">
        <expr_stmt pos:start="2375:9" pos:end="2375:53"><expr pos:start="2375:9" pos:end="2375:52"><call pos:start="2375:9" pos:end="2375:52"><name pos:start="2375:9" pos:end="2375:28">throwSocketException</name><argument_list pos:start="2375:29" pos:end="2375:52">(<argument pos:start="2375:30" pos:end="2375:32"><expr pos:start="2375:30" pos:end="2375:32"><name pos:start="2375:30" pos:end="2375:32">env</name></expr></argument>, <argument pos:start="2375:35" pos:end="2375:51"><expr pos:start="2375:35" pos:end="2375:51"><name pos:start="2375:35" pos:end="2375:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2376:9" pos:end="2376:17">return <expr pos:start="2376:16" pos:end="2376:16"><literal type="number" pos:start="2376:16" pos:end="2376:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2379:5" pos:end="2379:35"><decl pos:start="2379:5" pos:end="2379:34"><type pos:start="2379:5" pos:end="2379:7"><name pos:start="2379:5" pos:end="2379:7">int</name></type> <name pos:start="2379:9" pos:end="2379:12">mode</name> <init pos:start="2379:14" pos:end="2379:34">= <expr pos:start="2379:16" pos:end="2379:34"><ternary pos:start="2379:16" pos:end="2379:34"><condition pos:start="2379:16" pos:end="2379:21"><expr pos:start="2379:16" pos:end="2379:19"><name pos:start="2379:16" pos:end="2379:19">peek</name></expr> ?</condition><then pos:start="2379:23" pos:end="2379:30"> <expr pos:start="2379:23" pos:end="2379:30"><name pos:start="2379:23" pos:end="2379:30">MSG_PEEK</name></expr> </then><else pos:start="2379:32" pos:end="2379:34">: <expr pos:start="2379:34" pos:end="2379:34"><literal type="number" pos:start="2379:34" pos:end="2379:34">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2381:5" pos:end="2382:65"><decl pos:start="2381:5" pos:end="2382:64"><type pos:start="2381:5" pos:end="2381:7"><name pos:start="2381:5" pos:end="2381:7">int</name></type> <name pos:start="2381:9" pos:end="2381:20">actualLength</name> <init pos:start="2381:22" pos:end="2382:64">= <expr pos:start="2381:24" pos:end="2382:64"><call pos:start="2381:24" pos:end="2382:64"><name pos:start="2381:24" pos:end="2381:31">recvfrom</name><argument_list pos:start="2381:32" pos:end="2382:64">(<argument pos:start="2381:33" pos:end="2381:38"><expr pos:start="2381:33" pos:end="2381:38"><name pos:start="2381:33" pos:end="2381:38">handle</name></expr></argument>,
            <argument pos:start="2382:13" pos:end="2382:37"><expr pos:start="2382:13" pos:end="2382:37"><operator pos:start="2382:13" pos:end="2382:13">(</operator><name pos:start="2382:14" pos:end="2382:17">char</name><operator pos:start="2382:18" pos:end="2382:18">*</operator><operator pos:start="2382:19" pos:end="2382:19">)</operator><operator pos:start="2382:20" pos:end="2382:20">(</operator><name pos:start="2382:21" pos:end="2382:27">address</name> <operator pos:start="2382:29" pos:end="2382:29">+</operator> <name pos:start="2382:31" pos:end="2382:36">offset</name><operator pos:start="2382:37" pos:end="2382:37">)</operator></expr></argument>, <argument pos:start="2382:40" pos:end="2382:45"><expr pos:start="2382:40" pos:end="2382:45"><name pos:start="2382:40" pos:end="2382:45">length</name></expr></argument>, <argument pos:start="2382:48" pos:end="2382:51"><expr pos:start="2382:48" pos:end="2382:51"><name pos:start="2382:48" pos:end="2382:51">mode</name></expr></argument>, <argument pos:start="2382:54" pos:end="2382:57"><expr pos:start="2382:54" pos:end="2382:57"><name pos:start="2382:54" pos:end="2382:57">NULL</name></expr></argument>, <argument pos:start="2382:60" pos:end="2382:63"><expr pos:start="2382:60" pos:end="2382:63"><name pos:start="2382:60" pos:end="2382:63">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2384:5" pos:end="2387:5"><if pos:start="2384:5" pos:end="2387:5">if <condition pos:start="2384:8" pos:end="2384:25">(<expr pos:start="2384:9" pos:end="2384:24"><name pos:start="2384:9" pos:end="2384:20">actualLength</name> <operator pos:start="2384:22" pos:end="2384:22">&lt;</operator> <literal type="number" pos:start="2384:24" pos:end="2384:24">0</literal></expr>)</condition> <block pos:start="2384:27" pos:end="2387:5">{<block_content pos:start="2385:9" pos:end="2386:17">
        <expr_stmt pos:start="2385:9" pos:end="2385:72"><expr pos:start="2385:9" pos:end="2385:71"><call pos:start="2385:9" pos:end="2385:71"><name pos:start="2385:9" pos:end="2385:25">jniThrowException</name><argument_list pos:start="2385:26" pos:end="2385:71">(<argument pos:start="2385:27" pos:end="2385:29"><expr pos:start="2385:27" pos:end="2385:29"><name pos:start="2385:27" pos:end="2385:29">env</name></expr></argument>, <argument pos:start="2385:32" pos:end="2385:66"><expr pos:start="2385:32" pos:end="2385:66"><literal type="string" pos:start="2385:32" pos:end="2385:66">"java/net/PortUnreachableException"</literal></expr></argument>, <argument pos:start="2385:69" pos:end="2385:70"><expr pos:start="2385:69" pos:end="2385:70"><literal type="string" pos:start="2385:69" pos:end="2385:70">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2386:9" pos:end="2386:17">return <expr pos:start="2386:16" pos:end="2386:16"><literal type="number" pos:start="2386:16" pos:end="2386:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2389:5" pos:end="2391:5"><if pos:start="2389:5" pos:end="2391:5">if <condition pos:start="2389:8" pos:end="2389:24">( <expr pos:start="2389:10" pos:end="2389:23"><name pos:start="2389:10" pos:end="2389:15">packet</name> <operator pos:start="2389:17" pos:end="2389:18">!=</operator> <name pos:start="2389:20" pos:end="2389:23">NULL</name></expr>)</condition> <block pos:start="2389:26" pos:end="2391:5">{<block_content pos:start="2390:9" pos:end="2390:75">
        <expr_stmt pos:start="2390:9" pos:end="2390:75"><expr pos:start="2390:9" pos:end="2390:74"><call pos:start="2390:9" pos:end="2390:74"><name pos:start="2390:9" pos:end="2390:24"><name pos:start="2390:9" pos:end="2390:11">env</name><operator pos:start="2390:12" pos:end="2390:13">-&gt;</operator><name pos:start="2390:14" pos:end="2390:24">SetIntField</name></name><argument_list pos:start="2390:25" pos:end="2390:74">(<argument pos:start="2390:26" pos:end="2390:31"><expr pos:start="2390:26" pos:end="2390:31"><name pos:start="2390:26" pos:end="2390:31">packet</name></expr></argument>, <argument pos:start="2390:34" pos:end="2390:59"><expr pos:start="2390:34" pos:end="2390:59"><name pos:start="2390:34" pos:end="2390:59"><name pos:start="2390:34" pos:end="2390:46">gCachedFields</name><operator pos:start="2390:47" pos:end="2390:47">.</operator><name pos:start="2390:48" pos:end="2390:59">dpack_length</name></name></expr></argument>, <argument pos:start="2390:62" pos:end="2390:73"><expr pos:start="2390:62" pos:end="2390:73"><name pos:start="2390:62" pos:end="2390:73">actualLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2392:5" pos:end="2392:41"><expr pos:start="2392:5" pos:end="2392:40"><call pos:start="2392:5" pos:end="2392:40"><name pos:start="2392:5" pos:end="2392:18">add_recv_stats</name><argument_list pos:start="2392:19" pos:end="2392:40">(<argument pos:start="2392:20" pos:end="2392:25"><expr pos:start="2392:20" pos:end="2392:25"><name pos:start="2392:20" pos:end="2392:25">handle</name></expr></argument>, <argument pos:start="2392:28" pos:end="2392:39"><expr pos:start="2392:28" pos:end="2392:39"><name pos:start="2392:28" pos:end="2392:39">actualLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2393:5" pos:end="2393:24">return <expr pos:start="2393:12" pos:end="2393:23"><name pos:start="2393:12" pos:end="2393:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2396:1" pos:end="2419:1">extern <literal type="string" pos:start="2396:8" pos:end="2396:10">"C"</literal> <function pos:start="2396:12" pos:end="2419:1"><type pos:start="2396:12" pos:end="2396:15"><name pos:start="2396:12" pos:end="2396:15">jint</name></type> <name pos:start="2396:17" pos:end="2396:84">Java_org_sipdroid_net_impl_OSNetworkSystem_recvConnectedDatagramImpl</name><parameter_list pos:start="2396:85" pos:end="2398:43">(<parameter pos:start="2396:86" pos:end="2396:96"><decl pos:start="2396:86" pos:end="2396:96"><type pos:start="2396:86" pos:end="2396:96"><name pos:start="2396:86" pos:end="2396:91">JNIEnv</name><modifier pos:start="2396:92" pos:end="2396:92">*</modifier></type> <name pos:start="2396:94" pos:end="2396:96">env</name></decl></parameter>, <parameter pos:start="2396:99" pos:end="2396:110"><decl pos:start="2396:99" pos:end="2396:110"><type pos:start="2396:99" pos:end="2396:110"><name pos:start="2396:99" pos:end="2396:104">jclass</name></type> <name pos:start="2396:106" pos:end="2396:110">clazz</name></decl></parameter>,
        <parameter pos:start="2397:9" pos:end="2397:18"><decl pos:start="2397:9" pos:end="2397:18"><type pos:start="2397:9" pos:end="2397:18"><name pos:start="2397:9" pos:end="2397:15">jobject</name></type> <name pos:start="2397:17" pos:end="2397:18">fd</name></decl></parameter>, <parameter pos:start="2397:21" pos:end="2397:34"><decl pos:start="2397:21" pos:end="2397:34"><type pos:start="2397:21" pos:end="2397:34"><name pos:start="2397:21" pos:end="2397:27">jobject</name></type> <name pos:start="2397:29" pos:end="2397:34">packet</name></decl></parameter>, <parameter pos:start="2397:37" pos:end="2397:51"><decl pos:start="2397:37" pos:end="2397:51"><type pos:start="2397:37" pos:end="2397:51"><name pos:start="2397:37" pos:end="2397:46">jbyteArray</name></type> <name pos:start="2397:48" pos:end="2397:51">data</name></decl></parameter>, <parameter pos:start="2397:54" pos:end="2397:64"><decl pos:start="2397:54" pos:end="2397:64"><type pos:start="2397:54" pos:end="2397:64"><name pos:start="2397:54" pos:end="2397:57">jint</name></type> <name pos:start="2397:59" pos:end="2397:64">offset</name></decl></parameter>, <parameter pos:start="2397:67" pos:end="2397:77"><decl pos:start="2397:67" pos:end="2397:77"><type pos:start="2397:67" pos:end="2397:77"><name pos:start="2397:67" pos:end="2397:70">jint</name></type> <name pos:start="2397:72" pos:end="2397:77">length</name></decl></parameter>,
        <parameter pos:start="2398:9" pos:end="2398:27"><decl pos:start="2398:9" pos:end="2398:27"><type pos:start="2398:9" pos:end="2398:27"><name pos:start="2398:9" pos:end="2398:12">jint</name></type> <name pos:start="2398:14" pos:end="2398:27">receiveTimeout</name></decl></parameter>, <parameter pos:start="2398:30" pos:end="2398:42"><decl pos:start="2398:30" pos:end="2398:42"><type pos:start="2398:30" pos:end="2398:42"><name pos:start="2398:30" pos:end="2398:37">jboolean</name></type> <name pos:start="2398:39" pos:end="2398:42">peek</name></decl></parameter>)</parameter_list> <block pos:start="2398:45" pos:end="2419:1">{<block_content pos:start="2401:5" pos:end="2418:24">
    <comment type="line" pos:start="2399:5" pos:end="2399:50">// LOGD("ENTER receiveConnectedDatagramImpl");</comment>

    <decl_stmt pos:start="2401:5" pos:end="2401:56"><decl pos:start="2401:5" pos:end="2401:55"><type pos:start="2401:5" pos:end="2401:7"><name pos:start="2401:5" pos:end="2401:7">int</name></type> <name pos:start="2401:9" pos:end="2401:19">localLength</name> <init pos:start="2401:21" pos:end="2401:55">= <expr pos:start="2401:23" pos:end="2401:55"><ternary pos:start="2401:23" pos:end="2401:55"><condition pos:start="2401:23" pos:end="2401:40"><expr pos:start="2401:23" pos:end="2401:38"><operator pos:start="2401:23" pos:end="2401:23">(</operator><name pos:start="2401:24" pos:end="2401:29">length</name> <operator pos:start="2401:31" pos:end="2401:31">&lt;</operator> <literal type="number" pos:start="2401:33" pos:end="2401:37">65536</literal><operator pos:start="2401:38" pos:end="2401:38">)</operator></expr> ?</condition><then pos:start="2401:42" pos:end="2401:47"> <expr pos:start="2401:42" pos:end="2401:47"><name pos:start="2401:42" pos:end="2401:47">length</name></expr> </then><else pos:start="2401:49" pos:end="2401:55">: <expr pos:start="2401:51" pos:end="2401:55"><literal type="number" pos:start="2401:51" pos:end="2401:55">65536</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2402:5" pos:end="2402:48"><decl pos:start="2402:5" pos:end="2402:47"><type pos:start="2402:5" pos:end="2402:11"><name pos:start="2402:5" pos:end="2402:9">jbyte</name> <modifier pos:start="2402:11" pos:end="2402:11">*</modifier></type><name pos:start="2402:12" pos:end="2402:16">bytes</name> <init pos:start="2402:18" pos:end="2402:47">= <expr pos:start="2402:20" pos:end="2402:47"><operator pos:start="2402:20" pos:end="2402:20">(</operator><name pos:start="2402:21" pos:end="2402:25">jbyte</name><operator pos:start="2402:26" pos:end="2402:26">*</operator><operator pos:start="2402:27" pos:end="2402:27">)</operator> <call pos:start="2402:29" pos:end="2402:47"><name pos:start="2402:29" pos:end="2402:34">malloc</name><argument_list pos:start="2402:35" pos:end="2402:47">(<argument pos:start="2402:36" pos:end="2402:46"><expr pos:start="2402:36" pos:end="2402:46"><name pos:start="2402:36" pos:end="2402:46">localLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2403:5" pos:end="2407:5"><if pos:start="2403:5" pos:end="2407:5">if <condition pos:start="2403:8" pos:end="2403:22">(<expr pos:start="2403:9" pos:end="2403:21"><name pos:start="2403:9" pos:end="2403:13">bytes</name> <operator pos:start="2403:15" pos:end="2403:16">==</operator> <name pos:start="2403:18" pos:end="2403:21">NULL</name></expr>)</condition> <block pos:start="2403:24" pos:end="2407:5">{<block_content pos:start="2404:9" pos:end="2406:17">
        <expr_stmt pos:start="2404:9" pos:end="2405:77"><expr pos:start="2404:9" pos:end="2405:76"><call pos:start="2404:9" pos:end="2405:76"><name pos:start="2404:9" pos:end="2404:25">jniThrowException</name><argument_list pos:start="2404:26" pos:end="2405:76">(<argument pos:start="2404:27" pos:end="2404:29"><expr pos:start="2404:27" pos:end="2404:29"><name pos:start="2404:27" pos:end="2404:29">env</name></expr></argument>, <argument pos:start="2404:32" pos:end="2404:59"><expr pos:start="2404:32" pos:end="2404:59"><literal type="string" pos:start="2404:32" pos:end="2404:59">"java/lang/OutOfMemoryError"</literal></expr></argument>,
                <argument pos:start="2405:17" pos:end="2405:75"><expr pos:start="2405:17" pos:end="2405:75"><literal type="string" pos:start="2405:17" pos:end="2405:75">"couldn't allocate enough memory for recvConnectedDatagram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2406:9" pos:end="2406:17">return <expr pos:start="2406:16" pos:end="2406:16"><literal type="number" pos:start="2406:16" pos:end="2406:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2409:5" pos:end="2411:34"><decl pos:start="2409:5" pos:end="2411:33"><type pos:start="2409:5" pos:end="2409:7"><name pos:start="2409:5" pos:end="2409:7">int</name></type> <name pos:start="2409:9" pos:end="2409:20">actualLength</name> <init pos:start="2409:22" pos:end="2411:33">= <expr pos:start="2409:24" pos:end="2411:33"><call pos:start="2409:24" pos:end="2411:33"><name pos:start="2409:24" pos:end="2409:97">Java_org_sipdroid_net_impl_OSNetworkSystem_recvConnectedDatagramDirectImpl</name><argument_list pos:start="2409:98" pos:end="2411:33">(<argument pos:start="2409:99" pos:end="2409:101"><expr pos:start="2409:99" pos:end="2409:101"><name pos:start="2409:99" pos:end="2409:101">env</name></expr></argument>,
            <argument pos:start="2410:13" pos:end="2410:17"><expr pos:start="2410:13" pos:end="2410:17"><name pos:start="2410:13" pos:end="2410:17">clazz</name></expr></argument>, <argument pos:start="2410:20" pos:end="2410:21"><expr pos:start="2410:20" pos:end="2410:21"><name pos:start="2410:20" pos:end="2410:21">fd</name></expr></argument>, <argument pos:start="2410:24" pos:end="2410:29"><expr pos:start="2410:24" pos:end="2410:29"><name pos:start="2410:24" pos:end="2410:29">packet</name></expr></argument>, <argument pos:start="2410:32" pos:end="2410:42"><expr pos:start="2410:32" pos:end="2410:42"><operator pos:start="2410:32" pos:end="2410:32">(</operator><name pos:start="2410:33" pos:end="2410:36">jint</name><operator pos:start="2410:37" pos:end="2410:37">)</operator><name pos:start="2410:38" pos:end="2410:42">bytes</name></expr></argument>, <argument pos:start="2410:45" pos:end="2410:50"><expr pos:start="2410:45" pos:end="2410:50"><name pos:start="2410:45" pos:end="2410:50">offset</name></expr></argument>, <argument pos:start="2410:53" pos:end="2410:63"><expr pos:start="2410:53" pos:end="2410:63"><name pos:start="2410:53" pos:end="2410:63">localLength</name></expr></argument>,
            <argument pos:start="2411:13" pos:end="2411:26"><expr pos:start="2411:13" pos:end="2411:26"><name pos:start="2411:13" pos:end="2411:26">receiveTimeout</name></expr></argument>, <argument pos:start="2411:29" pos:end="2411:32"><expr pos:start="2411:29" pos:end="2411:32"><name pos:start="2411:29" pos:end="2411:32">peek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2413:5" pos:end="2415:5"><if pos:start="2413:5" pos:end="2415:5">if <condition pos:start="2413:8" pos:end="2413:25">(<expr pos:start="2413:9" pos:end="2413:24"><name pos:start="2413:9" pos:end="2413:20">actualLength</name> <operator pos:start="2413:22" pos:end="2413:22">&gt;</operator> <literal type="number" pos:start="2413:24" pos:end="2413:24">0</literal></expr>)</condition> <block pos:start="2413:27" pos:end="2415:5">{<block_content pos:start="2414:9" pos:end="2414:67">
        <expr_stmt pos:start="2414:9" pos:end="2414:67"><expr pos:start="2414:9" pos:end="2414:66"><call pos:start="2414:9" pos:end="2414:66"><name pos:start="2414:9" pos:end="2414:31"><name pos:start="2414:9" pos:end="2414:11">env</name><operator pos:start="2414:12" pos:end="2414:13">-&gt;</operator><name pos:start="2414:14" pos:end="2414:31">SetByteArrayRegion</name></name><argument_list pos:start="2414:32" pos:end="2414:66">(<argument pos:start="2414:33" pos:end="2414:36"><expr pos:start="2414:33" pos:end="2414:36"><name pos:start="2414:33" pos:end="2414:36">data</name></expr></argument>, <argument pos:start="2414:39" pos:end="2414:44"><expr pos:start="2414:39" pos:end="2414:44"><name pos:start="2414:39" pos:end="2414:44">offset</name></expr></argument>, <argument pos:start="2414:47" pos:end="2414:58"><expr pos:start="2414:47" pos:end="2414:58"><name pos:start="2414:47" pos:end="2414:58">actualLength</name></expr></argument>, <argument pos:start="2414:61" pos:end="2414:65"><expr pos:start="2414:61" pos:end="2414:65"><name pos:start="2414:61" pos:end="2414:65">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2416:5" pos:end="2416:16"><expr pos:start="2416:5" pos:end="2416:15"><call pos:start="2416:5" pos:end="2416:15"><name pos:start="2416:5" pos:end="2416:8">free</name><argument_list pos:start="2416:9" pos:end="2416:15">(<argument pos:start="2416:10" pos:end="2416:14"><expr pos:start="2416:10" pos:end="2416:14"><name pos:start="2416:10" pos:end="2416:14">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="2418:5" pos:end="2418:24">return <expr pos:start="2418:12" pos:end="2418:23"><name pos:start="2418:12" pos:end="2418:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2421:1" pos:end="2458:1">extern <literal type="string" pos:start="2421:8" pos:end="2421:10">"C"</literal> <function pos:start="2421:12" pos:end="2458:1"><type pos:start="2421:12" pos:end="2421:15"><name pos:start="2421:12" pos:end="2421:15">jint</name></type> <name pos:start="2421:17" pos:end="2421:81">Java_org_sipdroid_net_impl_OSNetworkSystem_sendDatagramDirectImpl</name><parameter_list pos:start="2421:82" pos:end="2423:70">(<parameter pos:start="2421:83" pos:end="2421:93"><decl pos:start="2421:83" pos:end="2421:93"><type pos:start="2421:83" pos:end="2421:93"><name pos:start="2421:83" pos:end="2421:88">JNIEnv</name><modifier pos:start="2421:89" pos:end="2421:89">*</modifier></type> <name pos:start="2421:91" pos:end="2421:93">env</name></decl></parameter>, <parameter pos:start="2421:96" pos:end="2421:107"><decl pos:start="2421:96" pos:end="2421:107"><type pos:start="2421:96" pos:end="2421:107"><name pos:start="2421:96" pos:end="2421:101">jclass</name></type> <name pos:start="2421:103" pos:end="2421:107">clazz</name></decl></parameter>,
        <parameter pos:start="2422:9" pos:end="2422:18"><decl pos:start="2422:9" pos:end="2422:18"><type pos:start="2422:9" pos:end="2422:18"><name pos:start="2422:9" pos:end="2422:15">jobject</name></type> <name pos:start="2422:17" pos:end="2422:18">fd</name></decl></parameter>, <parameter pos:start="2422:21" pos:end="2422:32"><decl pos:start="2422:21" pos:end="2422:32"><type pos:start="2422:21" pos:end="2422:32"><name pos:start="2422:21" pos:end="2422:24">jint</name></type> <name pos:start="2422:26" pos:end="2422:32">address</name></decl></parameter>, <parameter pos:start="2422:35" pos:end="2422:45"><decl pos:start="2422:35" pos:end="2422:45"><type pos:start="2422:35" pos:end="2422:45"><name pos:start="2422:35" pos:end="2422:38">jint</name></type> <name pos:start="2422:40" pos:end="2422:45">offset</name></decl></parameter>, <parameter pos:start="2422:48" pos:end="2422:58"><decl pos:start="2422:48" pos:end="2422:58"><type pos:start="2422:48" pos:end="2422:58"><name pos:start="2422:48" pos:end="2422:51">jint</name></type> <name pos:start="2422:53" pos:end="2422:58">length</name></decl></parameter>, <parameter pos:start="2422:61" pos:end="2422:69"><decl pos:start="2422:61" pos:end="2422:69"><type pos:start="2422:61" pos:end="2422:69"><name pos:start="2422:61" pos:end="2422:64">jint</name></type> <name pos:start="2422:66" pos:end="2422:69">port</name></decl></parameter>,
        <parameter pos:start="2423:9" pos:end="2423:29"><decl pos:start="2423:9" pos:end="2423:29"><type pos:start="2423:9" pos:end="2423:29"><name pos:start="2423:9" pos:end="2423:16">jboolean</name></type> <name pos:start="2423:18" pos:end="2423:29">bindToDevice</name></decl></parameter>, <parameter pos:start="2423:32" pos:end="2423:48"><decl pos:start="2423:32" pos:end="2423:48"><type pos:start="2423:32" pos:end="2423:48"><name pos:start="2423:32" pos:end="2423:35">jint</name></type> <name pos:start="2423:37" pos:end="2423:48">trafficClass</name></decl></parameter>, <parameter pos:start="2423:51" pos:end="2423:69"><decl pos:start="2423:51" pos:end="2423:69"><type pos:start="2423:51" pos:end="2423:69"><name pos:start="2423:51" pos:end="2423:57">jobject</name></type> <name pos:start="2423:59" pos:end="2423:69">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="2423:72" pos:end="2458:1">{<block_content pos:start="2426:5" pos:end="2457:18">
    <comment type="line" pos:start="2424:5" pos:end="2424:44">// LOGD("ENTER sendDatagramDirectImpl");</comment>

    <decl_stmt pos:start="2426:5" pos:end="2426:19"><decl pos:start="2426:5" pos:end="2426:18"><type pos:start="2426:5" pos:end="2426:7"><name pos:start="2426:5" pos:end="2426:7">int</name></type> <name pos:start="2426:9" pos:end="2426:14">result</name> <init pos:start="2426:16" pos:end="2426:18">= <expr pos:start="2426:18" pos:end="2426:18"><literal type="number" pos:start="2426:18" pos:end="2426:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2428:5" pos:end="2428:53"><decl pos:start="2428:5" pos:end="2428:52"><type pos:start="2428:5" pos:end="2428:7"><name pos:start="2428:5" pos:end="2428:7">int</name></type> <name pos:start="2428:9" pos:end="2428:14">handle</name> <init pos:start="2428:16" pos:end="2428:52">= <expr pos:start="2428:18" pos:end="2428:52"><call pos:start="2428:18" pos:end="2428:52"><name pos:start="2428:18" pos:end="2428:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2428:44" pos:end="2428:52">(<argument pos:start="2428:45" pos:end="2428:47"><expr pos:start="2428:45" pos:end="2428:47"><name pos:start="2428:45" pos:end="2428:47">env</name></expr></argument>, <argument pos:start="2428:50" pos:end="2428:51"><expr pos:start="2428:50" pos:end="2428:51"><name pos:start="2428:50" pos:end="2428:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2430:5" pos:end="2433:5"><if pos:start="2430:5" pos:end="2433:5">if <condition pos:start="2430:8" pos:end="2430:36">(<expr pos:start="2430:9" pos:end="2430:35"><name pos:start="2430:9" pos:end="2430:14">handle</name> <operator pos:start="2430:16" pos:end="2430:17">==</operator> <literal type="number" pos:start="2430:19" pos:end="2430:19">0</literal> <operator pos:start="2430:21" pos:end="2430:22">||</operator> <name pos:start="2430:24" pos:end="2430:29">handle</name> <operator pos:start="2430:31" pos:end="2430:32">==</operator> <operator pos:start="2430:34" pos:end="2430:34">-</operator><literal type="number" pos:start="2430:35" pos:end="2430:35">1</literal></expr>)</condition> <block pos:start="2430:38" pos:end="2433:5">{<block_content pos:start="2431:9" pos:end="2432:17">
        <expr_stmt pos:start="2431:9" pos:end="2431:53"><expr pos:start="2431:9" pos:end="2431:52"><call pos:start="2431:9" pos:end="2431:52"><name pos:start="2431:9" pos:end="2431:28">throwSocketException</name><argument_list pos:start="2431:29" pos:end="2431:52">(<argument pos:start="2431:30" pos:end="2431:32"><expr pos:start="2431:30" pos:end="2431:32"><name pos:start="2431:30" pos:end="2431:32">env</name></expr></argument>, <argument pos:start="2431:35" pos:end="2431:51"><expr pos:start="2431:35" pos:end="2431:51"><name pos:start="2431:35" pos:end="2431:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2432:9" pos:end="2432:17">return <expr pos:start="2432:16" pos:end="2432:16"><literal type="number" pos:start="2432:16" pos:end="2432:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2435:5" pos:end="2435:32"><decl pos:start="2435:5" pos:end="2435:31"><type pos:start="2435:5" pos:end="2435:22"><name pos:start="2435:5" pos:end="2435:22"><name pos:start="2435:5" pos:end="2435:10">struct</name> <name pos:start="2435:12" pos:end="2435:22">sockaddr_in</name></name></type> <name pos:start="2435:24" pos:end="2435:31">receiver</name></decl>;</decl_stmt>

    <if_stmt pos:start="2437:5" pos:end="2440:5"><if pos:start="2437:5" pos:end="2440:5">if <condition pos:start="2437:8" pos:end="2437:74">(<expr pos:start="2437:9" pos:end="2437:73"><call pos:start="2437:9" pos:end="2437:69"><name pos:start="2437:9" pos:end="2437:34">inetAddressToSocketAddress</name><argument_list pos:start="2437:35" pos:end="2437:69">(<argument pos:start="2437:36" pos:end="2437:38"><expr pos:start="2437:36" pos:end="2437:38"><name pos:start="2437:36" pos:end="2437:38">env</name></expr></argument>, <argument pos:start="2437:41" pos:end="2437:51"><expr pos:start="2437:41" pos:end="2437:51"><name pos:start="2437:41" pos:end="2437:51">inetAddress</name></expr></argument>, <argument pos:start="2437:54" pos:end="2437:57"><expr pos:start="2437:54" pos:end="2437:57"><name pos:start="2437:54" pos:end="2437:57">port</name></expr></argument>, <argument pos:start="2437:60" pos:end="2437:68"><expr pos:start="2437:60" pos:end="2437:68"><operator pos:start="2437:60" pos:end="2437:60">&amp;</operator><name pos:start="2437:61" pos:end="2437:68">receiver</name></expr></argument>)</argument_list></call> <operator pos:start="2437:71" pos:end="2437:71">&lt;</operator> <literal type="number" pos:start="2437:73" pos:end="2437:73">0</literal></expr>)</condition> <block pos:start="2437:76" pos:end="2440:5">{<block_content pos:start="2438:9" pos:end="2439:17">
        <expr_stmt pos:start="2438:9" pos:end="2438:53"><expr pos:start="2438:9" pos:end="2438:52"><call pos:start="2438:9" pos:end="2438:52"><name pos:start="2438:9" pos:end="2438:28">throwSocketException</name><argument_list pos:start="2438:29" pos:end="2438:52">(<argument pos:start="2438:30" pos:end="2438:32"><expr pos:start="2438:30" pos:end="2438:32"><name pos:start="2438:30" pos:end="2438:32">env</name></expr></argument>, <argument pos:start="2438:35" pos:end="2438:51"><expr pos:start="2438:35" pos:end="2438:51"><name pos:start="2438:35" pos:end="2438:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2439:9" pos:end="2439:17">return <expr pos:start="2439:16" pos:end="2439:16"><literal type="number" pos:start="2439:16" pos:end="2439:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2442:5" pos:end="2443:59"><expr pos:start="2442:5" pos:end="2443:58"><name pos:start="2442:5" pos:end="2442:10">result</name> <operator pos:start="2442:12" pos:end="2442:12">=</operator> <call pos:start="2442:14" pos:end="2443:58"><name pos:start="2442:14" pos:end="2442:19">sendto</name><argument_list pos:start="2442:20" pos:end="2443:58">(<argument pos:start="2442:21" pos:end="2442:26"><expr pos:start="2442:21" pos:end="2442:26"><name pos:start="2442:21" pos:end="2442:26">handle</name></expr></argument>, <argument pos:start="2442:29" pos:end="2442:53"><expr pos:start="2442:29" pos:end="2442:53"><operator pos:start="2442:29" pos:end="2442:29">(</operator><name pos:start="2442:30" pos:end="2442:33">char</name><operator pos:start="2442:34" pos:end="2442:34">*</operator><operator pos:start="2442:35" pos:end="2442:35">)</operator><operator pos:start="2442:36" pos:end="2442:36">(</operator><name pos:start="2442:37" pos:end="2442:43">address</name> <operator pos:start="2442:45" pos:end="2442:45">+</operator> <name pos:start="2442:47" pos:end="2442:52">offset</name><operator pos:start="2442:53" pos:end="2442:53">)</operator></expr></argument>, <argument pos:start="2442:56" pos:end="2442:61"><expr pos:start="2442:56" pos:end="2442:61"><name pos:start="2442:56" pos:end="2442:61">length</name></expr></argument>, <argument pos:start="2442:64" pos:end="2442:77"><expr pos:start="2442:64" pos:end="2442:77"><name pos:start="2442:64" pos:end="2442:77">SOCKET_NOFLAGS</name></expr></argument>,
            <argument pos:start="2443:13" pos:end="2443:39"><expr pos:start="2443:13" pos:end="2443:39"><operator pos:start="2443:13" pos:end="2443:13">(</operator>struct <name pos:start="2443:21" pos:end="2443:28">sockaddr</name><operator pos:start="2443:29" pos:end="2443:29">*</operator><operator pos:start="2443:30" pos:end="2443:30">)</operator><operator pos:start="2443:31" pos:end="2443:31">&amp;</operator><name pos:start="2443:32" pos:end="2443:39">receiver</name></expr></argument>, <argument pos:start="2443:42" pos:end="2443:57"><expr pos:start="2443:42" pos:end="2443:57"><sizeof pos:start="2443:42" pos:end="2443:57">sizeof<argument_list pos:start="2443:48" pos:end="2443:57">(<argument pos:start="2443:49" pos:end="2443:56"><expr pos:start="2443:49" pos:end="2443:56"><name pos:start="2443:49" pos:end="2443:56">receiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2445:5" pos:end="2455:5"><if pos:start="2445:5" pos:end="2455:5">if <condition pos:start="2445:8" pos:end="2445:19">(<expr pos:start="2445:9" pos:end="2445:18"><name pos:start="2445:9" pos:end="2445:14">result</name> <operator pos:start="2445:16" pos:end="2445:16">&lt;</operator> <literal type="number" pos:start="2445:18" pos:end="2445:18">0</literal></expr>)</condition> <block pos:start="2445:21" pos:end="2455:5">{<block_content pos:start="2446:9" pos:end="2454:9">
        <decl_stmt pos:start="2446:9" pos:end="2446:38"><decl pos:start="2446:9" pos:end="2446:37"><type pos:start="2446:9" pos:end="2446:11"><name pos:start="2446:9" pos:end="2446:11">int</name></type> <name pos:start="2446:13" pos:end="2446:15">err</name> <init pos:start="2446:17" pos:end="2446:37">= <expr pos:start="2446:19" pos:end="2446:37"><call pos:start="2446:19" pos:end="2446:37"><name pos:start="2446:19" pos:end="2446:30">convertError</name><argument_list pos:start="2446:31" pos:end="2446:37">(<argument pos:start="2446:32" pos:end="2446:36"><expr pos:start="2446:32" pos:end="2446:36"><name pos:start="2446:32" pos:end="2446:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2447:9" pos:end="2454:9"><if pos:start="2447:9" pos:end="2450:9">if <condition pos:start="2447:12" pos:end="2448:55">(<expr pos:start="2447:13" pos:end="2448:54"><operator pos:start="2447:13" pos:end="2447:13">(</operator><name pos:start="2447:14" pos:end="2447:30">SOCKERR_CONNRESET</name> <operator pos:start="2447:32" pos:end="2447:33">==</operator> <name pos:start="2447:35" pos:end="2447:37">err</name><operator pos:start="2447:38" pos:end="2447:38">)</operator>
                <operator pos:start="2448:17" pos:end="2448:18">||</operator> <operator pos:start="2448:20" pos:end="2448:20">(</operator><name pos:start="2448:21" pos:end="2448:46">SOCKERR_CONNECTION_REFUSED</name> <operator pos:start="2448:48" pos:end="2448:49">==</operator> <name pos:start="2448:51" pos:end="2448:53">err</name><operator pos:start="2448:54" pos:end="2448:54">)</operator></expr>)</condition> <block pos:start="2448:57" pos:end="2450:9">{<block_content pos:start="2449:13" pos:end="2449:21">
            <return pos:start="2449:13" pos:end="2449:21">return <expr pos:start="2449:20" pos:end="2449:20"><literal type="number" pos:start="2449:20" pos:end="2449:20">0</literal></expr>;</return>
        </block_content>}</block></if> <else pos:start="2450:11" pos:end="2454:9">else <block pos:start="2450:16" pos:end="2454:9">{<block_content pos:start="2451:13" pos:end="2453:21">
            <expr_stmt pos:start="2451:13" pos:end="2451:42"><expr pos:start="2451:13" pos:end="2451:41"><call pos:start="2451:13" pos:end="2451:41"><name pos:start="2451:13" pos:end="2451:28">log_socket_close</name><argument_list pos:start="2451:29" pos:end="2451:41">(<argument pos:start="2451:30" pos:end="2451:35"><expr pos:start="2451:30" pos:end="2451:35"><name pos:start="2451:30" pos:end="2451:35">handle</name></expr></argument>, <argument pos:start="2451:38" pos:end="2451:40"><expr pos:start="2451:38" pos:end="2451:40"><name pos:start="2451:38" pos:end="2451:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2452:13" pos:end="2452:43"><expr pos:start="2452:13" pos:end="2452:42"><call pos:start="2452:13" pos:end="2452:42"><name pos:start="2452:13" pos:end="2452:32">throwSocketException</name><argument_list pos:start="2452:33" pos:end="2452:42">(<argument pos:start="2452:34" pos:end="2452:36"><expr pos:start="2452:34" pos:end="2452:36"><name pos:start="2452:34" pos:end="2452:36">env</name></expr></argument>, <argument pos:start="2452:39" pos:end="2452:41"><expr pos:start="2452:39" pos:end="2452:41"><name pos:start="2452:39" pos:end="2452:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2453:13" pos:end="2453:21">return <expr pos:start="2453:20" pos:end="2453:20"><literal type="number" pos:start="2453:20" pos:end="2453:20">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2456:5" pos:end="2456:35"><expr pos:start="2456:5" pos:end="2456:34"><call pos:start="2456:5" pos:end="2456:34"><name pos:start="2456:5" pos:end="2456:18">add_send_stats</name><argument_list pos:start="2456:19" pos:end="2456:34">(<argument pos:start="2456:20" pos:end="2456:25"><expr pos:start="2456:20" pos:end="2456:25"><name pos:start="2456:20" pos:end="2456:25">handle</name></expr></argument>, <argument pos:start="2456:28" pos:end="2456:33"><expr pos:start="2456:28" pos:end="2456:33"><name pos:start="2456:28" pos:end="2456:33">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2457:5" pos:end="2457:18">return <expr pos:start="2457:12" pos:end="2457:17"><name pos:start="2457:12" pos:end="2457:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2460:1" pos:end="2472:1">extern <literal type="string" pos:start="2460:8" pos:end="2460:10">"C"</literal> <function pos:start="2460:12" pos:end="2472:1"><type pos:start="2460:12" pos:end="2460:15"><name pos:start="2460:12" pos:end="2460:15">jint</name></type> <name pos:start="2460:17" pos:end="2460:75">Java_org_sipdroid_net_impl_OSNetworkSystem_sendDatagramImpl</name><parameter_list pos:start="2460:76" pos:end="2462:70">(<parameter pos:start="2460:77" pos:end="2460:87"><decl pos:start="2460:77" pos:end="2460:87"><type pos:start="2460:77" pos:end="2460:87"><name pos:start="2460:77" pos:end="2460:82">JNIEnv</name><modifier pos:start="2460:83" pos:end="2460:83">*</modifier></type> <name pos:start="2460:85" pos:end="2460:87">env</name></decl></parameter>, <parameter pos:start="2460:90" pos:end="2460:101"><decl pos:start="2460:90" pos:end="2460:101"><type pos:start="2460:90" pos:end="2460:101"><name pos:start="2460:90" pos:end="2460:95">jclass</name></type> <name pos:start="2460:97" pos:end="2460:101">clazz</name></decl></parameter>,
        <parameter pos:start="2461:9" pos:end="2461:18"><decl pos:start="2461:9" pos:end="2461:18"><type pos:start="2461:9" pos:end="2461:18"><name pos:start="2461:9" pos:end="2461:15">jobject</name></type> <name pos:start="2461:17" pos:end="2461:18">fd</name></decl></parameter>, <parameter pos:start="2461:21" pos:end="2461:35"><decl pos:start="2461:21" pos:end="2461:35"><type pos:start="2461:21" pos:end="2461:35"><name pos:start="2461:21" pos:end="2461:30">jbyteArray</name></type> <name pos:start="2461:32" pos:end="2461:35">data</name></decl></parameter>, <parameter pos:start="2461:38" pos:end="2461:48"><decl pos:start="2461:38" pos:end="2461:48"><type pos:start="2461:38" pos:end="2461:48"><name pos:start="2461:38" pos:end="2461:41">jint</name></type> <name pos:start="2461:43" pos:end="2461:48">offset</name></decl></parameter>, <parameter pos:start="2461:51" pos:end="2461:61"><decl pos:start="2461:51" pos:end="2461:61"><type pos:start="2461:51" pos:end="2461:61"><name pos:start="2461:51" pos:end="2461:54">jint</name></type> <name pos:start="2461:56" pos:end="2461:61">length</name></decl></parameter>, <parameter pos:start="2461:64" pos:end="2461:72"><decl pos:start="2461:64" pos:end="2461:72"><type pos:start="2461:64" pos:end="2461:72"><name pos:start="2461:64" pos:end="2461:67">jint</name></type> <name pos:start="2461:69" pos:end="2461:72">port</name></decl></parameter>,
        <parameter pos:start="2462:9" pos:end="2462:29"><decl pos:start="2462:9" pos:end="2462:29"><type pos:start="2462:9" pos:end="2462:29"><name pos:start="2462:9" pos:end="2462:16">jboolean</name></type> <name pos:start="2462:18" pos:end="2462:29">bindToDevice</name></decl></parameter>, <parameter pos:start="2462:32" pos:end="2462:48"><decl pos:start="2462:32" pos:end="2462:48"><type pos:start="2462:32" pos:end="2462:48"><name pos:start="2462:32" pos:end="2462:35">jint</name></type> <name pos:start="2462:37" pos:end="2462:48">trafficClass</name></decl></parameter>, <parameter pos:start="2462:51" pos:end="2462:69"><decl pos:start="2462:51" pos:end="2462:69"><type pos:start="2462:51" pos:end="2462:69"><name pos:start="2462:51" pos:end="2462:57">jobject</name></type> <name pos:start="2462:59" pos:end="2462:69">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="2462:72" pos:end="2472:1">{<block_content pos:start="2465:5" pos:end="2471:24">
    <comment type="line" pos:start="2463:5" pos:end="2463:38">// LOGD("ENTER sendDatagramImpl");</comment>

    <decl_stmt pos:start="2465:5" pos:end="2465:57"><decl pos:start="2465:5" pos:end="2465:56"><type pos:start="2465:5" pos:end="2465:11"><name pos:start="2465:5" pos:end="2465:9">jbyte</name> <modifier pos:start="2465:11" pos:end="2465:11">*</modifier></type><name pos:start="2465:12" pos:end="2465:16">bytes</name> <init pos:start="2465:18" pos:end="2465:56">= <expr pos:start="2465:20" pos:end="2465:56"><call pos:start="2465:20" pos:end="2465:56"><name pos:start="2465:20" pos:end="2465:44"><name pos:start="2465:20" pos:end="2465:22">env</name><operator pos:start="2465:23" pos:end="2465:24">-&gt;</operator><name pos:start="2465:25" pos:end="2465:44">GetByteArrayElements</name></name><argument_list pos:start="2465:45" pos:end="2465:56">(<argument pos:start="2465:46" pos:end="2465:49"><expr pos:start="2465:46" pos:end="2465:49"><name pos:start="2465:46" pos:end="2465:49">data</name></expr></argument>, <argument pos:start="2465:52" pos:end="2465:55"><expr pos:start="2465:52" pos:end="2465:55"><name pos:start="2465:52" pos:end="2465:55">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2466:5" pos:end="2468:25"><decl pos:start="2466:5" pos:end="2468:24"><type pos:start="2466:5" pos:end="2466:7"><name pos:start="2466:5" pos:end="2466:7">int</name></type> <name pos:start="2466:9" pos:end="2466:20">actualLength</name> <init pos:start="2466:22" pos:end="2468:24">= <expr pos:start="2466:24" pos:end="2468:24"><call pos:start="2466:24" pos:end="2468:24"><name pos:start="2466:24" pos:end="2466:88">Java_org_sipdroid_net_impl_OSNetworkSystem_sendDatagramDirectImpl</name><argument_list pos:start="2466:89" pos:end="2468:24">(<argument pos:start="2466:90" pos:end="2466:92"><expr pos:start="2466:90" pos:end="2466:92"><name pos:start="2466:90" pos:end="2466:92">env</name></expr></argument>, <argument pos:start="2466:95" pos:end="2466:99"><expr pos:start="2466:95" pos:end="2466:99"><name pos:start="2466:95" pos:end="2466:99">clazz</name></expr></argument>, <argument pos:start="2466:102" pos:end="2466:103"><expr pos:start="2466:102" pos:end="2466:103"><name pos:start="2466:102" pos:end="2466:103">fd</name></expr></argument>,
            <argument pos:start="2467:13" pos:end="2467:23"><expr pos:start="2467:13" pos:end="2467:23"><operator pos:start="2467:13" pos:end="2467:13">(</operator><name pos:start="2467:14" pos:end="2467:17">jint</name><operator pos:start="2467:18" pos:end="2467:18">)</operator><name pos:start="2467:19" pos:end="2467:23">bytes</name></expr></argument>, <argument pos:start="2467:26" pos:end="2467:31"><expr pos:start="2467:26" pos:end="2467:31"><name pos:start="2467:26" pos:end="2467:31">offset</name></expr></argument>, <argument pos:start="2467:34" pos:end="2467:39"><expr pos:start="2467:34" pos:end="2467:39"><name pos:start="2467:34" pos:end="2467:39">length</name></expr></argument>, <argument pos:start="2467:42" pos:end="2467:45"><expr pos:start="2467:42" pos:end="2467:45"><name pos:start="2467:42" pos:end="2467:45">port</name></expr></argument>, <argument pos:start="2467:48" pos:end="2467:59"><expr pos:start="2467:48" pos:end="2467:59"><name pos:start="2467:48" pos:end="2467:59">bindToDevice</name></expr></argument>, <argument pos:start="2467:62" pos:end="2467:73"><expr pos:start="2467:62" pos:end="2467:73"><name pos:start="2467:62" pos:end="2467:73">trafficClass</name></expr></argument>,
            <argument pos:start="2468:13" pos:end="2468:23"><expr pos:start="2468:13" pos:end="2468:23"><name pos:start="2468:13" pos:end="2468:23">inetAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2469:5" pos:end="2469:58"><expr pos:start="2469:5" pos:end="2469:57"><call pos:start="2469:5" pos:end="2469:57"><name pos:start="2469:5" pos:end="2469:33"><name pos:start="2469:5" pos:end="2469:7">env</name><operator pos:start="2469:8" pos:end="2469:9">-&gt;</operator><name pos:start="2469:10" pos:end="2469:33">ReleaseByteArrayElements</name></name><argument_list pos:start="2469:34" pos:end="2469:57">(<argument pos:start="2469:35" pos:end="2469:38"><expr pos:start="2469:35" pos:end="2469:38"><name pos:start="2469:35" pos:end="2469:38">data</name></expr></argument>, <argument pos:start="2469:41" pos:end="2469:45"><expr pos:start="2469:41" pos:end="2469:45"><name pos:start="2469:41" pos:end="2469:45">bytes</name></expr></argument>, <argument pos:start="2469:48" pos:end="2469:56"><expr pos:start="2469:48" pos:end="2469:56"><name pos:start="2469:48" pos:end="2469:56">JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="2471:5" pos:end="2471:24">return <expr pos:start="2471:12" pos:end="2471:23"><name pos:start="2471:12" pos:end="2471:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2474:1" pos:end="2500:1">extern <literal type="string" pos:start="2474:8" pos:end="2474:10">"C"</literal> <function pos:start="2474:12" pos:end="2500:1"><type pos:start="2474:12" pos:end="2474:15"><name pos:start="2474:12" pos:end="2474:15">jint</name></type> <name pos:start="2474:17" pos:end="2474:90">Java_org_sipdroid_net_impl_OSNetworkSystem_sendConnectedDatagramDirectImpl</name><parameter_list pos:start="2474:91" pos:end="2476:30">(<parameter pos:start="2474:92" pos:end="2474:102"><decl pos:start="2474:92" pos:end="2474:102"><type pos:start="2474:92" pos:end="2474:102"><name pos:start="2474:92" pos:end="2474:97">JNIEnv</name><modifier pos:start="2474:98" pos:end="2474:98">*</modifier></type> <name pos:start="2474:100" pos:end="2474:102">env</name></decl></parameter>,
        <parameter pos:start="2475:9" pos:end="2475:20"><decl pos:start="2475:9" pos:end="2475:20"><type pos:start="2475:9" pos:end="2475:20"><name pos:start="2475:9" pos:end="2475:14">jclass</name></type> <name pos:start="2475:16" pos:end="2475:20">clazz</name></decl></parameter>, <parameter pos:start="2475:23" pos:end="2475:32"><decl pos:start="2475:23" pos:end="2475:32"><type pos:start="2475:23" pos:end="2475:32"><name pos:start="2475:23" pos:end="2475:29">jobject</name></type> <name pos:start="2475:31" pos:end="2475:32">fd</name></decl></parameter>, <parameter pos:start="2475:35" pos:end="2475:46"><decl pos:start="2475:35" pos:end="2475:46"><type pos:start="2475:35" pos:end="2475:46"><name pos:start="2475:35" pos:end="2475:38">jint</name></type> <name pos:start="2475:40" pos:end="2475:46">address</name></decl></parameter>, <parameter pos:start="2475:49" pos:end="2475:59"><decl pos:start="2475:49" pos:end="2475:59"><type pos:start="2475:49" pos:end="2475:59"><name pos:start="2475:49" pos:end="2475:52">jint</name></type> <name pos:start="2475:54" pos:end="2475:59">offset</name></decl></parameter>, <parameter pos:start="2475:62" pos:end="2475:72"><decl pos:start="2475:62" pos:end="2475:72"><type pos:start="2475:62" pos:end="2475:72"><name pos:start="2475:62" pos:end="2475:65">jint</name></type> <name pos:start="2475:67" pos:end="2475:72">length</name></decl></parameter>,
        <parameter pos:start="2476:9" pos:end="2476:29"><decl pos:start="2476:9" pos:end="2476:29"><type pos:start="2476:9" pos:end="2476:29"><name pos:start="2476:9" pos:end="2476:16">jboolean</name></type> <name pos:start="2476:18" pos:end="2476:29">bindToDevice</name></decl></parameter>)</parameter_list> <block pos:start="2476:32" pos:end="2500:1">{<block_content pos:start="2479:5" pos:end="2499:18">
    <comment type="line" pos:start="2477:5" pos:end="2477:53">// LOGD("ENTER sendConnectedDatagramDirectImpl");</comment>

    <decl_stmt pos:start="2479:5" pos:end="2479:53"><decl pos:start="2479:5" pos:end="2479:52"><type pos:start="2479:5" pos:end="2479:7"><name pos:start="2479:5" pos:end="2479:7">int</name></type> <name pos:start="2479:9" pos:end="2479:14">handle</name> <init pos:start="2479:16" pos:end="2479:52">= <expr pos:start="2479:18" pos:end="2479:52"><call pos:start="2479:18" pos:end="2479:52"><name pos:start="2479:18" pos:end="2479:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2479:44" pos:end="2479:52">(<argument pos:start="2479:45" pos:end="2479:47"><expr pos:start="2479:45" pos:end="2479:47"><name pos:start="2479:45" pos:end="2479:47">env</name></expr></argument>, <argument pos:start="2479:50" pos:end="2479:51"><expr pos:start="2479:50" pos:end="2479:51"><name pos:start="2479:50" pos:end="2479:51">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2481:5" pos:end="2484:5"><if pos:start="2481:5" pos:end="2484:5">if <condition pos:start="2481:8" pos:end="2481:36">(<expr pos:start="2481:9" pos:end="2481:35"><name pos:start="2481:9" pos:end="2481:14">handle</name> <operator pos:start="2481:16" pos:end="2481:17">==</operator> <literal type="number" pos:start="2481:19" pos:end="2481:19">0</literal> <operator pos:start="2481:21" pos:end="2481:22">||</operator> <name pos:start="2481:24" pos:end="2481:29">handle</name> <operator pos:start="2481:31" pos:end="2481:32">==</operator> <operator pos:start="2481:34" pos:end="2481:34">-</operator><literal type="number" pos:start="2481:35" pos:end="2481:35">1</literal></expr>)</condition> <block pos:start="2481:38" pos:end="2484:5">{<block_content pos:start="2482:9" pos:end="2483:17">
        <expr_stmt pos:start="2482:9" pos:end="2482:53"><expr pos:start="2482:9" pos:end="2482:52"><call pos:start="2482:9" pos:end="2482:52"><name pos:start="2482:9" pos:end="2482:28">throwSocketException</name><argument_list pos:start="2482:29" pos:end="2482:52">(<argument pos:start="2482:30" pos:end="2482:32"><expr pos:start="2482:30" pos:end="2482:32"><name pos:start="2482:30" pos:end="2482:32">env</name></expr></argument>, <argument pos:start="2482:35" pos:end="2482:51"><expr pos:start="2482:35" pos:end="2482:51"><name pos:start="2482:35" pos:end="2482:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2483:9" pos:end="2483:17">return <expr pos:start="2483:16" pos:end="2483:16"><literal type="number" pos:start="2483:16" pos:end="2483:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2486:5" pos:end="2486:68"><decl pos:start="2486:5" pos:end="2486:67"><type pos:start="2486:5" pos:end="2486:7"><name pos:start="2486:5" pos:end="2486:7">int</name></type> <name pos:start="2486:9" pos:end="2486:14">result</name> <init pos:start="2486:16" pos:end="2486:67">= <expr pos:start="2486:18" pos:end="2486:67"><call pos:start="2486:18" pos:end="2486:67"><name pos:start="2486:18" pos:end="2486:21">send</name><argument_list pos:start="2486:22" pos:end="2486:67">(<argument pos:start="2486:23" pos:end="2486:28"><expr pos:start="2486:23" pos:end="2486:28"><name pos:start="2486:23" pos:end="2486:28">handle</name></expr></argument>, <argument pos:start="2486:31" pos:end="2486:55"><expr pos:start="2486:31" pos:end="2486:55"><operator pos:start="2486:31" pos:end="2486:31">(</operator><name pos:start="2486:32" pos:end="2486:35">char</name><operator pos:start="2486:36" pos:end="2486:36">*</operator><operator pos:start="2486:37" pos:end="2486:37">)</operator><operator pos:start="2486:38" pos:end="2486:38">(</operator><name pos:start="2486:39" pos:end="2486:45">address</name> <operator pos:start="2486:47" pos:end="2486:47">+</operator> <name pos:start="2486:49" pos:end="2486:54">offset</name><operator pos:start="2486:55" pos:end="2486:55">)</operator></expr></argument>, <argument pos:start="2486:58" pos:end="2486:63"><expr pos:start="2486:58" pos:end="2486:63"><name pos:start="2486:58" pos:end="2486:63">length</name></expr></argument>, <argument pos:start="2486:66" pos:end="2486:66"><expr pos:start="2486:66" pos:end="2486:66"><literal type="number" pos:start="2486:66" pos:end="2486:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2488:5" pos:end="2497:5"><if pos:start="2488:5" pos:end="2497:5">if <condition pos:start="2488:8" pos:end="2488:19">(<expr pos:start="2488:9" pos:end="2488:18"><name pos:start="2488:9" pos:end="2488:14">result</name> <operator pos:start="2488:16" pos:end="2488:16">&lt;</operator> <literal type="number" pos:start="2488:18" pos:end="2488:18">0</literal></expr>)</condition> <block pos:start="2488:21" pos:end="2497:5">{<block_content pos:start="2489:9" pos:end="2496:9">
        <decl_stmt pos:start="2489:9" pos:end="2489:38"><decl pos:start="2489:9" pos:end="2489:37"><type pos:start="2489:9" pos:end="2489:11"><name pos:start="2489:9" pos:end="2489:11">int</name></type> <name pos:start="2489:13" pos:end="2489:15">err</name> <init pos:start="2489:17" pos:end="2489:37">= <expr pos:start="2489:19" pos:end="2489:37"><call pos:start="2489:19" pos:end="2489:37"><name pos:start="2489:19" pos:end="2489:30">convertError</name><argument_list pos:start="2489:31" pos:end="2489:37">(<argument pos:start="2489:32" pos:end="2489:36"><expr pos:start="2489:32" pos:end="2489:36"><name pos:start="2489:32" pos:end="2489:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2490:9" pos:end="2496:9"><if pos:start="2490:9" pos:end="2492:9">if <condition pos:start="2490:12" pos:end="2490:78">(<expr pos:start="2490:13" pos:end="2490:77"><operator pos:start="2490:13" pos:end="2490:13">(</operator><name pos:start="2490:14" pos:end="2490:30">SOCKERR_CONNRESET</name> <operator pos:start="2490:32" pos:end="2490:33">==</operator> <name pos:start="2490:35" pos:end="2490:37">err</name><operator pos:start="2490:38" pos:end="2490:38">)</operator> <operator pos:start="2490:40" pos:end="2490:41">||</operator> <operator pos:start="2490:43" pos:end="2490:43">(</operator><name pos:start="2490:44" pos:end="2490:69">SOCKERR_CONNECTION_REFUSED</name> <operator pos:start="2490:71" pos:end="2490:72">==</operator> <name pos:start="2490:74" pos:end="2490:76">err</name><operator pos:start="2490:77" pos:end="2490:77">)</operator></expr>)</condition> <block pos:start="2490:80" pos:end="2492:9">{<block_content pos:start="2491:13" pos:end="2491:21">
            <return pos:start="2491:13" pos:end="2491:21">return <expr pos:start="2491:20" pos:end="2491:20"><literal type="number" pos:start="2491:20" pos:end="2491:20">0</literal></expr>;</return>
        </block_content>}</block></if> <else pos:start="2492:11" pos:end="2496:9">else <block pos:start="2492:16" pos:end="2496:9">{<block_content pos:start="2493:13" pos:end="2495:21">
            <expr_stmt pos:start="2493:13" pos:end="2493:42"><expr pos:start="2493:13" pos:end="2493:41"><call pos:start="2493:13" pos:end="2493:41"><name pos:start="2493:13" pos:end="2493:28">log_socket_close</name><argument_list pos:start="2493:29" pos:end="2493:41">(<argument pos:start="2493:30" pos:end="2493:35"><expr pos:start="2493:30" pos:end="2493:35"><name pos:start="2493:30" pos:end="2493:35">handle</name></expr></argument>, <argument pos:start="2493:38" pos:end="2493:40"><expr pos:start="2493:38" pos:end="2493:40"><name pos:start="2493:38" pos:end="2493:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2494:13" pos:end="2494:43"><expr pos:start="2494:13" pos:end="2494:42"><call pos:start="2494:13" pos:end="2494:42"><name pos:start="2494:13" pos:end="2494:32">throwSocketException</name><argument_list pos:start="2494:33" pos:end="2494:42">(<argument pos:start="2494:34" pos:end="2494:36"><expr pos:start="2494:34" pos:end="2494:36"><name pos:start="2494:34" pos:end="2494:36">env</name></expr></argument>, <argument pos:start="2494:39" pos:end="2494:41"><expr pos:start="2494:39" pos:end="2494:41"><name pos:start="2494:39" pos:end="2494:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2495:13" pos:end="2495:21">return <expr pos:start="2495:20" pos:end="2495:20"><literal type="number" pos:start="2495:20" pos:end="2495:20">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2498:5" pos:end="2498:35"><expr pos:start="2498:5" pos:end="2498:34"><call pos:start="2498:5" pos:end="2498:34"><name pos:start="2498:5" pos:end="2498:18">add_send_stats</name><argument_list pos:start="2498:19" pos:end="2498:34">(<argument pos:start="2498:20" pos:end="2498:25"><expr pos:start="2498:20" pos:end="2498:25"><name pos:start="2498:20" pos:end="2498:25">handle</name></expr></argument>, <argument pos:start="2498:28" pos:end="2498:33"><expr pos:start="2498:28" pos:end="2498:33"><name pos:start="2498:28" pos:end="2498:33">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2499:5" pos:end="2499:18">return <expr pos:start="2499:12" pos:end="2499:17"><name pos:start="2499:12" pos:end="2499:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2502:1" pos:end="2513:1">extern <literal type="string" pos:start="2502:8" pos:end="2502:10">"C"</literal> <function pos:start="2502:12" pos:end="2513:1"><type pos:start="2502:12" pos:end="2502:15"><name pos:start="2502:12" pos:end="2502:15">jint</name></type> <name pos:start="2502:17" pos:end="2502:84">Java_org_sipdroid_net_impl_OSNetworkSystem_sendConnectedDatagramImpl</name><parameter_list pos:start="2502:85" pos:end="2504:30">(<parameter pos:start="2502:86" pos:end="2502:96"><decl pos:start="2502:86" pos:end="2502:96"><type pos:start="2502:86" pos:end="2502:96"><name pos:start="2502:86" pos:end="2502:91">JNIEnv</name><modifier pos:start="2502:92" pos:end="2502:92">*</modifier></type> <name pos:start="2502:94" pos:end="2502:96">env</name></decl></parameter>, <parameter pos:start="2502:99" pos:end="2502:110"><decl pos:start="2502:99" pos:end="2502:110"><type pos:start="2502:99" pos:end="2502:110"><name pos:start="2502:99" pos:end="2502:104">jclass</name></type> <name pos:start="2502:106" pos:end="2502:110">clazz</name></decl></parameter>,
        <parameter pos:start="2503:9" pos:end="2503:18"><decl pos:start="2503:9" pos:end="2503:18"><type pos:start="2503:9" pos:end="2503:18"><name pos:start="2503:9" pos:end="2503:15">jobject</name></type> <name pos:start="2503:17" pos:end="2503:18">fd</name></decl></parameter>, <parameter pos:start="2503:21" pos:end="2503:35"><decl pos:start="2503:21" pos:end="2503:35"><type pos:start="2503:21" pos:end="2503:35"><name pos:start="2503:21" pos:end="2503:30">jbyteArray</name></type> <name pos:start="2503:32" pos:end="2503:35">data</name></decl></parameter>, <parameter pos:start="2503:38" pos:end="2503:48"><decl pos:start="2503:38" pos:end="2503:48"><type pos:start="2503:38" pos:end="2503:48"><name pos:start="2503:38" pos:end="2503:41">jint</name></type> <name pos:start="2503:43" pos:end="2503:48">offset</name></decl></parameter>, <parameter pos:start="2503:51" pos:end="2503:61"><decl pos:start="2503:51" pos:end="2503:61"><type pos:start="2503:51" pos:end="2503:61"><name pos:start="2503:51" pos:end="2503:54">jint</name></type> <name pos:start="2503:56" pos:end="2503:61">length</name></decl></parameter>,
        <parameter pos:start="2504:9" pos:end="2504:29"><decl pos:start="2504:9" pos:end="2504:29"><type pos:start="2504:9" pos:end="2504:29"><name pos:start="2504:9" pos:end="2504:16">jboolean</name></type> <name pos:start="2504:18" pos:end="2504:29">bindToDevice</name></decl></parameter>)</parameter_list> <block pos:start="2504:32" pos:end="2513:1">{<block_content pos:start="2507:5" pos:end="2512:24">
    <comment type="line" pos:start="2505:5" pos:end="2505:47">// LOGD("ENTER sendConnectedDatagramImpl");</comment>

    <decl_stmt pos:start="2507:5" pos:end="2507:57"><decl pos:start="2507:5" pos:end="2507:56"><type pos:start="2507:5" pos:end="2507:11"><name pos:start="2507:5" pos:end="2507:9">jbyte</name> <modifier pos:start="2507:11" pos:end="2507:11">*</modifier></type><name pos:start="2507:12" pos:end="2507:16">bytes</name> <init pos:start="2507:18" pos:end="2507:56">= <expr pos:start="2507:20" pos:end="2507:56"><call pos:start="2507:20" pos:end="2507:56"><name pos:start="2507:20" pos:end="2507:44"><name pos:start="2507:20" pos:end="2507:22">env</name><operator pos:start="2507:23" pos:end="2507:24">-&gt;</operator><name pos:start="2507:25" pos:end="2507:44">GetByteArrayElements</name></name><argument_list pos:start="2507:45" pos:end="2507:56">(<argument pos:start="2507:46" pos:end="2507:49"><expr pos:start="2507:46" pos:end="2507:49"><name pos:start="2507:46" pos:end="2507:49">data</name></expr></argument>, <argument pos:start="2507:52" pos:end="2507:55"><expr pos:start="2507:52" pos:end="2507:55"><name pos:start="2507:52" pos:end="2507:55">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2508:5" pos:end="2509:66"><decl pos:start="2508:5" pos:end="2509:65"><type pos:start="2508:5" pos:end="2508:7"><name pos:start="2508:5" pos:end="2508:7">int</name></type> <name pos:start="2508:9" pos:end="2508:20">actualLength</name> <init pos:start="2508:22" pos:end="2509:65">= <expr pos:start="2508:24" pos:end="2509:65"><call pos:start="2508:24" pos:end="2509:65"><name pos:start="2508:24" pos:end="2508:97">Java_org_sipdroid_net_impl_OSNetworkSystem_sendConnectedDatagramDirectImpl</name><argument_list pos:start="2508:98" pos:end="2509:65">(<argument pos:start="2508:99" pos:end="2508:101"><expr pos:start="2508:99" pos:end="2508:101"><name pos:start="2508:99" pos:end="2508:101">env</name></expr></argument>,
            <argument pos:start="2509:13" pos:end="2509:17"><expr pos:start="2509:13" pos:end="2509:17"><name pos:start="2509:13" pos:end="2509:17">clazz</name></expr></argument>, <argument pos:start="2509:20" pos:end="2509:21"><expr pos:start="2509:20" pos:end="2509:21"><name pos:start="2509:20" pos:end="2509:21">fd</name></expr></argument>, <argument pos:start="2509:24" pos:end="2509:34"><expr pos:start="2509:24" pos:end="2509:34"><operator pos:start="2509:24" pos:end="2509:24">(</operator><name pos:start="2509:25" pos:end="2509:28">jint</name><operator pos:start="2509:29" pos:end="2509:29">)</operator><name pos:start="2509:30" pos:end="2509:34">bytes</name></expr></argument>, <argument pos:start="2509:37" pos:end="2509:42"><expr pos:start="2509:37" pos:end="2509:42"><name pos:start="2509:37" pos:end="2509:42">offset</name></expr></argument>, <argument pos:start="2509:45" pos:end="2509:50"><expr pos:start="2509:45" pos:end="2509:50"><name pos:start="2509:45" pos:end="2509:50">length</name></expr></argument>, <argument pos:start="2509:53" pos:end="2509:64"><expr pos:start="2509:53" pos:end="2509:64"><name pos:start="2509:53" pos:end="2509:64">bindToDevice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2510:5" pos:end="2510:58"><expr pos:start="2510:5" pos:end="2510:57"><call pos:start="2510:5" pos:end="2510:57"><name pos:start="2510:5" pos:end="2510:33"><name pos:start="2510:5" pos:end="2510:7">env</name><operator pos:start="2510:8" pos:end="2510:9">-&gt;</operator><name pos:start="2510:10" pos:end="2510:33">ReleaseByteArrayElements</name></name><argument_list pos:start="2510:34" pos:end="2510:57">(<argument pos:start="2510:35" pos:end="2510:38"><expr pos:start="2510:35" pos:end="2510:38"><name pos:start="2510:35" pos:end="2510:38">data</name></expr></argument>, <argument pos:start="2510:41" pos:end="2510:45"><expr pos:start="2510:41" pos:end="2510:45"><name pos:start="2510:41" pos:end="2510:45">bytes</name></expr></argument>, <argument pos:start="2510:48" pos:end="2510:56"><expr pos:start="2510:48" pos:end="2510:56"><name pos:start="2510:48" pos:end="2510:56">JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="2512:5" pos:end="2512:24">return <expr pos:start="2512:12" pos:end="2512:23"><name pos:start="2512:12" pos:end="2512:23">actualLength</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2515:1" pos:end="2537:1">extern <literal type="string" pos:start="2515:8" pos:end="2515:10">"C"</literal> <function pos:start="2515:12" pos:end="2537:1"><type pos:start="2515:12" pos:end="2515:15"><name pos:start="2515:12" pos:end="2515:15">void</name></type> <name pos:start="2515:17" pos:end="2515:87">Java_org_sipdroid_net_impl_OSNetworkSystem_createServerStreamSocketImpl</name><parameter_list pos:start="2515:88" pos:end="2516:71">(<parameter pos:start="2515:89" pos:end="2515:99"><decl pos:start="2515:89" pos:end="2515:99"><type pos:start="2515:89" pos:end="2515:99"><name pos:start="2515:89" pos:end="2515:94">JNIEnv</name><modifier pos:start="2515:95" pos:end="2515:95">*</modifier></type> <name pos:start="2515:97" pos:end="2515:99">env</name></decl></parameter>,
        <parameter pos:start="2516:9" pos:end="2516:20"><decl pos:start="2516:9" pos:end="2516:20"><type pos:start="2516:9" pos:end="2516:20"><name pos:start="2516:9" pos:end="2516:14">jclass</name></type> <name pos:start="2516:16" pos:end="2516:20">clazz</name></decl></parameter>, <parameter pos:start="2516:23" pos:end="2516:44"><decl pos:start="2516:23" pos:end="2516:44"><type pos:start="2516:23" pos:end="2516:44"><name pos:start="2516:23" pos:end="2516:29">jobject</name></type> <name pos:start="2516:31" pos:end="2516:44">fileDescriptor</name></decl></parameter>, <parameter pos:start="2516:47" pos:end="2516:70"><decl pos:start="2516:47" pos:end="2516:70"><type pos:start="2516:47" pos:end="2516:70"><name pos:start="2516:47" pos:end="2516:54">jboolean</name></type> <name pos:start="2516:56" pos:end="2516:70">preferIPv4Stack</name></decl></parameter>)</parameter_list> <block pos:start="2516:73" pos:end="2537:1">{<block_content pos:start="2519:5" pos:end="2536:70">
    <comment type="line" pos:start="2517:5" pos:end="2517:50">// LOGD("ENTER createServerStreamSocketImpl");</comment>

    <if_stmt pos:start="2519:5" pos:end="2522:5"><if pos:start="2519:5" pos:end="2522:5">if <condition pos:start="2519:8" pos:end="2519:31">(<expr pos:start="2519:9" pos:end="2519:30"><name pos:start="2519:9" pos:end="2519:22">fileDescriptor</name> <operator pos:start="2519:24" pos:end="2519:25">==</operator> <name pos:start="2519:27" pos:end="2519:30">NULL</name></expr>)</condition> <block pos:start="2519:33" pos:end="2522:5">{<block_content pos:start="2520:9" pos:end="2521:15">
        <expr_stmt pos:start="2520:9" pos:end="2520:39"><expr pos:start="2520:9" pos:end="2520:38"><call pos:start="2520:9" pos:end="2520:38"><name pos:start="2520:9" pos:end="2520:33">throwNullPointerException</name><argument_list pos:start="2520:34" pos:end="2520:38">(<argument pos:start="2520:35" pos:end="2520:37"><expr pos:start="2520:35" pos:end="2520:37"><name pos:start="2520:35" pos:end="2520:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2521:9" pos:end="2521:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2524:5" pos:end="2524:49"><decl pos:start="2524:5" pos:end="2524:48"><type pos:start="2524:5" pos:end="2524:7"><name pos:start="2524:5" pos:end="2524:7">int</name></type> <name pos:start="2524:9" pos:end="2524:14">handle</name> <init pos:start="2524:16" pos:end="2524:48">= <expr pos:start="2524:18" pos:end="2524:48"><call pos:start="2524:18" pos:end="2524:48"><name pos:start="2524:18" pos:end="2524:23">socket</name><argument_list pos:start="2524:24" pos:end="2524:48">(<argument pos:start="2524:25" pos:end="2524:31"><expr pos:start="2524:25" pos:end="2524:31"><name pos:start="2524:25" pos:end="2524:31">PF_INET</name></expr></argument>, <argument pos:start="2524:34" pos:end="2524:44"><expr pos:start="2524:34" pos:end="2524:44"><name pos:start="2524:34" pos:end="2524:44">SOCK_STREAM</name></expr></argument>, <argument pos:start="2524:47" pos:end="2524:47"><expr pos:start="2524:47" pos:end="2524:47"><literal type="number" pos:start="2524:47" pos:end="2524:47">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2526:5" pos:end="2530:5"><if pos:start="2526:5" pos:end="2530:5">if <condition pos:start="2526:8" pos:end="2526:19">(<expr pos:start="2526:9" pos:end="2526:18"><name pos:start="2526:9" pos:end="2526:14">handle</name> <operator pos:start="2526:16" pos:end="2526:16">&lt;</operator> <literal type="number" pos:start="2526:18" pos:end="2526:18">0</literal></expr>)</condition> <block pos:start="2526:21" pos:end="2530:5">{<block_content pos:start="2527:9" pos:end="2529:15">
        <decl_stmt pos:start="2527:9" pos:end="2527:38"><decl pos:start="2527:9" pos:end="2527:37"><type pos:start="2527:9" pos:end="2527:11"><name pos:start="2527:9" pos:end="2527:11">int</name></type> <name pos:start="2527:13" pos:end="2527:15">err</name> <init pos:start="2527:17" pos:end="2527:37">= <expr pos:start="2527:19" pos:end="2527:37"><call pos:start="2527:19" pos:end="2527:37"><name pos:start="2527:19" pos:end="2527:30">convertError</name><argument_list pos:start="2527:31" pos:end="2527:37">(<argument pos:start="2527:32" pos:end="2527:36"><expr pos:start="2527:32" pos:end="2527:36"><name pos:start="2527:32" pos:end="2527:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2528:9" pos:end="2528:39"><expr pos:start="2528:9" pos:end="2528:38"><call pos:start="2528:9" pos:end="2528:38"><name pos:start="2528:9" pos:end="2528:28">throwSocketException</name><argument_list pos:start="2528:29" pos:end="2528:38">(<argument pos:start="2528:30" pos:end="2528:32"><expr pos:start="2528:30" pos:end="2528:32"><name pos:start="2528:30" pos:end="2528:32">env</name></expr></argument>, <argument pos:start="2528:35" pos:end="2528:37"><expr pos:start="2528:35" pos:end="2528:37"><name pos:start="2528:35" pos:end="2528:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2529:9" pos:end="2529:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2532:5" pos:end="2532:58"><expr pos:start="2532:5" pos:end="2532:57"><call pos:start="2532:5" pos:end="2532:57"><name pos:start="2532:5" pos:end="2532:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="2532:29" pos:end="2532:57">(<argument pos:start="2532:30" pos:end="2532:32"><expr pos:start="2532:30" pos:end="2532:32"><name pos:start="2532:30" pos:end="2532:32">env</name></expr></argument>, <argument pos:start="2532:35" pos:end="2532:48"><expr pos:start="2532:35" pos:end="2532:48"><name pos:start="2532:35" pos:end="2532:48">fileDescriptor</name></expr></argument>, <argument pos:start="2532:51" pos:end="2532:56"><expr pos:start="2532:51" pos:end="2532:56"><name pos:start="2532:51" pos:end="2532:56">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="2534:5" pos:end="2534:18"><decl pos:start="2534:5" pos:end="2534:17"><type pos:start="2534:5" pos:end="2534:7"><name pos:start="2534:5" pos:end="2534:7">int</name></type> <name pos:start="2534:9" pos:end="2534:13">value</name> <init pos:start="2534:15" pos:end="2534:17">= <expr pos:start="2534:17" pos:end="2534:17"><literal type="number" pos:start="2534:17" pos:end="2534:17">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2536:5" pos:end="2536:70"><expr pos:start="2536:5" pos:end="2536:69"><call pos:start="2536:5" pos:end="2536:69"><name pos:start="2536:5" pos:end="2536:14">setsockopt</name><argument_list pos:start="2536:15" pos:end="2536:69">(<argument pos:start="2536:16" pos:end="2536:21"><expr pos:start="2536:16" pos:end="2536:21"><name pos:start="2536:16" pos:end="2536:21">handle</name></expr></argument>, <argument pos:start="2536:24" pos:end="2536:33"><expr pos:start="2536:24" pos:end="2536:33"><name pos:start="2536:24" pos:end="2536:33">SOL_SOCKET</name></expr></argument>, <argument pos:start="2536:36" pos:end="2536:47"><expr pos:start="2536:36" pos:end="2536:47"><name pos:start="2536:36" pos:end="2536:47">SO_REUSEADDR</name></expr></argument>, <argument pos:start="2536:50" pos:end="2536:55"><expr pos:start="2536:50" pos:end="2536:55"><operator pos:start="2536:50" pos:end="2536:50">&amp;</operator><name pos:start="2536:51" pos:end="2536:55">value</name></expr></argument>, <argument pos:start="2536:58" pos:end="2536:68"><expr pos:start="2536:58" pos:end="2536:68"><sizeof pos:start="2536:58" pos:end="2536:68">sizeof<argument_list pos:start="2536:64" pos:end="2536:68">(<argument pos:start="2536:65" pos:end="2536:67"><expr pos:start="2536:65" pos:end="2536:67"><name pos:start="2536:65" pos:end="2536:67">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2539:1" pos:end="2557:1">extern <literal type="string" pos:start="2539:8" pos:end="2539:10">"C"</literal> <function pos:start="2539:12" pos:end="2557:1"><type pos:start="2539:12" pos:end="2539:15"><name pos:start="2539:12" pos:end="2539:15">void</name></type> <name pos:start="2539:17" pos:end="2539:84">Java_org_sipdroid_net_impl_OSNetworkSystem_createMulticastSocketImpl</name><parameter_list pos:start="2539:85" pos:end="2540:71">(<parameter pos:start="2539:86" pos:end="2539:96"><decl pos:start="2539:86" pos:end="2539:96"><type pos:start="2539:86" pos:end="2539:96"><name pos:start="2539:86" pos:end="2539:91">JNIEnv</name><modifier pos:start="2539:92" pos:end="2539:92">*</modifier></type> <name pos:start="2539:94" pos:end="2539:96">env</name></decl></parameter>,
        <parameter pos:start="2540:9" pos:end="2540:20"><decl pos:start="2540:9" pos:end="2540:20"><type pos:start="2540:9" pos:end="2540:20"><name pos:start="2540:9" pos:end="2540:14">jclass</name></type> <name pos:start="2540:16" pos:end="2540:20">clazz</name></decl></parameter>, <parameter pos:start="2540:23" pos:end="2540:44"><decl pos:start="2540:23" pos:end="2540:44"><type pos:start="2540:23" pos:end="2540:44"><name pos:start="2540:23" pos:end="2540:29">jobject</name></type> <name pos:start="2540:31" pos:end="2540:44">fileDescriptor</name></decl></parameter>, <parameter pos:start="2540:47" pos:end="2540:70"><decl pos:start="2540:47" pos:end="2540:70"><type pos:start="2540:47" pos:end="2540:70"><name pos:start="2540:47" pos:end="2540:54">jboolean</name></type> <name pos:start="2540:56" pos:end="2540:70">preferIPv4Stack</name></decl></parameter>)</parameter_list> <block pos:start="2540:73" pos:end="2557:1">{<block_content pos:start="2543:5" pos:end="2556:70">
    <comment type="line" pos:start="2541:5" pos:end="2541:47">// LOGD("ENTER createMulticastSocketImpl");</comment>

    <decl_stmt pos:start="2543:5" pos:end="2543:48"><decl pos:start="2543:5" pos:end="2543:47"><type pos:start="2543:5" pos:end="2543:7"><name pos:start="2543:5" pos:end="2543:7">int</name></type> <name pos:start="2543:9" pos:end="2543:14">handle</name> <init pos:start="2543:16" pos:end="2543:47">= <expr pos:start="2543:18" pos:end="2543:47"><call pos:start="2543:18" pos:end="2543:47"><name pos:start="2543:18" pos:end="2543:23">socket</name><argument_list pos:start="2543:24" pos:end="2543:47">(<argument pos:start="2543:25" pos:end="2543:31"><expr pos:start="2543:25" pos:end="2543:31"><name pos:start="2543:25" pos:end="2543:31">PF_INET</name></expr></argument>, <argument pos:start="2543:34" pos:end="2543:43"><expr pos:start="2543:34" pos:end="2543:43"><name pos:start="2543:34" pos:end="2543:43">SOCK_DGRAM</name></expr></argument>, <argument pos:start="2543:46" pos:end="2543:46"><expr pos:start="2543:46" pos:end="2543:46"><literal type="number" pos:start="2543:46" pos:end="2543:46">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2545:5" pos:end="2549:5"><if pos:start="2545:5" pos:end="2549:5">if <condition pos:start="2545:8" pos:end="2545:19">(<expr pos:start="2545:9" pos:end="2545:18"><name pos:start="2545:9" pos:end="2545:14">handle</name> <operator pos:start="2545:16" pos:end="2545:16">&lt;</operator> <literal type="number" pos:start="2545:18" pos:end="2545:18">0</literal></expr>)</condition> <block pos:start="2545:21" pos:end="2549:5">{<block_content pos:start="2546:9" pos:end="2548:15">
        <decl_stmt pos:start="2546:9" pos:end="2546:38"><decl pos:start="2546:9" pos:end="2546:37"><type pos:start="2546:9" pos:end="2546:11"><name pos:start="2546:9" pos:end="2546:11">int</name></type> <name pos:start="2546:13" pos:end="2546:15">err</name> <init pos:start="2546:17" pos:end="2546:37">= <expr pos:start="2546:19" pos:end="2546:37"><call pos:start="2546:19" pos:end="2546:37"><name pos:start="2546:19" pos:end="2546:30">convertError</name><argument_list pos:start="2546:31" pos:end="2546:37">(<argument pos:start="2546:32" pos:end="2546:36"><expr pos:start="2546:32" pos:end="2546:36"><name pos:start="2546:32" pos:end="2546:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2547:9" pos:end="2547:39"><expr pos:start="2547:9" pos:end="2547:38"><call pos:start="2547:9" pos:end="2547:38"><name pos:start="2547:9" pos:end="2547:28">throwSocketException</name><argument_list pos:start="2547:29" pos:end="2547:38">(<argument pos:start="2547:30" pos:end="2547:32"><expr pos:start="2547:30" pos:end="2547:32"><name pos:start="2547:30" pos:end="2547:32">env</name></expr></argument>, <argument pos:start="2547:35" pos:end="2547:37"><expr pos:start="2547:35" pos:end="2547:37"><name pos:start="2547:35" pos:end="2547:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2548:9" pos:end="2548:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2551:5" pos:end="2551:58"><expr pos:start="2551:5" pos:end="2551:57"><call pos:start="2551:5" pos:end="2551:57"><name pos:start="2551:5" pos:end="2551:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="2551:29" pos:end="2551:57">(<argument pos:start="2551:30" pos:end="2551:32"><expr pos:start="2551:30" pos:end="2551:32"><name pos:start="2551:30" pos:end="2551:32">env</name></expr></argument>, <argument pos:start="2551:35" pos:end="2551:48"><expr pos:start="2551:35" pos:end="2551:48"><name pos:start="2551:35" pos:end="2551:48">fileDescriptor</name></expr></argument>, <argument pos:start="2551:51" pos:end="2551:56"><expr pos:start="2551:51" pos:end="2551:56"><name pos:start="2551:51" pos:end="2551:56">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="2553:5" pos:end="2553:18"><decl pos:start="2553:5" pos:end="2553:17"><type pos:start="2553:5" pos:end="2553:7"><name pos:start="2553:5" pos:end="2553:7">int</name></type> <name pos:start="2553:9" pos:end="2553:13">value</name> <init pos:start="2553:15" pos:end="2553:17">= <expr pos:start="2553:17" pos:end="2553:17"><literal type="number" pos:start="2553:17" pos:end="2553:17">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="2555:5" pos:end="2555:75">// setsockopt(handle, SOL_SOCKET, SO_REUSEPORT, &amp;value, sizeof(jbyte));</comment>
    <expr_stmt pos:start="2556:5" pos:end="2556:70"><expr pos:start="2556:5" pos:end="2556:69"><call pos:start="2556:5" pos:end="2556:69"><name pos:start="2556:5" pos:end="2556:14">setsockopt</name><argument_list pos:start="2556:15" pos:end="2556:69">(<argument pos:start="2556:16" pos:end="2556:21"><expr pos:start="2556:16" pos:end="2556:21"><name pos:start="2556:16" pos:end="2556:21">handle</name></expr></argument>, <argument pos:start="2556:24" pos:end="2556:33"><expr pos:start="2556:24" pos:end="2556:33"><name pos:start="2556:24" pos:end="2556:33">SOL_SOCKET</name></expr></argument>, <argument pos:start="2556:36" pos:end="2556:47"><expr pos:start="2556:36" pos:end="2556:47"><name pos:start="2556:36" pos:end="2556:47">SO_REUSEADDR</name></expr></argument>, <argument pos:start="2556:50" pos:end="2556:55"><expr pos:start="2556:50" pos:end="2556:55"><operator pos:start="2556:50" pos:end="2556:50">&amp;</operator><name pos:start="2556:51" pos:end="2556:55">value</name></expr></argument>, <argument pos:start="2556:58" pos:end="2556:68"><expr pos:start="2556:58" pos:end="2556:68"><sizeof pos:start="2556:58" pos:end="2556:68">sizeof<argument_list pos:start="2556:64" pos:end="2556:68">(<argument pos:start="2556:65" pos:end="2556:67"><expr pos:start="2556:65" pos:end="2556:67"><name pos:start="2556:65" pos:end="2556:67">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></extern>

<comment type="block" pos:start="2559:1" pos:end="2561:3">/*
 * @param timeout in milliseconds.  If zero, block until data received
 */</comment>
<extern pos:start="2562:1" pos:end="2616:1">extern <literal type="string" pos:start="2562:8" pos:end="2562:10">"C"</literal> <function pos:start="2562:12" pos:end="2616:1"><type pos:start="2562:12" pos:end="2562:15"><name pos:start="2562:12" pos:end="2562:15">jint</name></type> <name pos:start="2562:17" pos:end="2562:76">Java_org_sipdroid_net_impl_OSNetworkSystem_receiveStreamImpl</name><parameter_list pos:start="2562:77" pos:end="2564:21">(<parameter pos:start="2562:78" pos:end="2562:88"><decl pos:start="2562:78" pos:end="2562:88"><type pos:start="2562:78" pos:end="2562:88"><name pos:start="2562:78" pos:end="2562:83">JNIEnv</name><modifier pos:start="2562:84" pos:end="2562:84">*</modifier></type> <name pos:start="2562:86" pos:end="2562:88">env</name></decl></parameter>, <parameter pos:start="2562:91" pos:end="2562:102"><decl pos:start="2562:91" pos:end="2562:102"><type pos:start="2562:91" pos:end="2562:102"><name pos:start="2562:91" pos:end="2562:96">jclass</name></type> <name pos:start="2562:98" pos:end="2562:102">clazz</name></decl></parameter>,
        <parameter pos:start="2563:9" pos:end="2563:30"><decl pos:start="2563:9" pos:end="2563:30"><type pos:start="2563:9" pos:end="2563:30"><name pos:start="2563:9" pos:end="2563:15">jobject</name></type> <name pos:start="2563:17" pos:end="2563:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2563:33" pos:end="2563:47"><decl pos:start="2563:33" pos:end="2563:47"><type pos:start="2563:33" pos:end="2563:47"><name pos:start="2563:33" pos:end="2563:42">jbyteArray</name></type> <name pos:start="2563:44" pos:end="2563:47">data</name></decl></parameter>, <parameter pos:start="2563:50" pos:end="2563:60"><decl pos:start="2563:50" pos:end="2563:60"><type pos:start="2563:50" pos:end="2563:60"><name pos:start="2563:50" pos:end="2563:53">jint</name></type> <name pos:start="2563:55" pos:end="2563:60">offset</name></decl></parameter>, <parameter pos:start="2563:63" pos:end="2563:72"><decl pos:start="2563:63" pos:end="2563:72"><type pos:start="2563:63" pos:end="2563:72"><name pos:start="2563:63" pos:end="2563:66">jint</name></type> <name pos:start="2563:68" pos:end="2563:72">count</name></decl></parameter>,
        <parameter pos:start="2564:9" pos:end="2564:20"><decl pos:start="2564:9" pos:end="2564:20"><type pos:start="2564:9" pos:end="2564:20"><name pos:start="2564:9" pos:end="2564:12">jint</name></type> <name pos:start="2564:14" pos:end="2564:20">timeout</name></decl></parameter>)</parameter_list> <block pos:start="2564:23" pos:end="2616:1">{<block_content pos:start="2567:5" pos:end="2615:5">
    <comment type="line" pos:start="2565:5" pos:end="2565:39">// LOGD("ENTER receiveStreamImpl");</comment>

    <decl_stmt pos:start="2567:5" pos:end="2567:15"><decl pos:start="2567:5" pos:end="2567:14"><type pos:start="2567:5" pos:end="2567:7"><name pos:start="2567:5" pos:end="2567:7">int</name></type> <name pos:start="2567:9" pos:end="2567:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2568:5" pos:end="2568:65"><decl pos:start="2568:5" pos:end="2568:64"><type pos:start="2568:5" pos:end="2568:7"><name pos:start="2568:5" pos:end="2568:7">int</name></type> <name pos:start="2568:9" pos:end="2568:14">handle</name> <init pos:start="2568:16" pos:end="2568:64">= <expr pos:start="2568:18" pos:end="2568:64"><call pos:start="2568:18" pos:end="2568:64"><name pos:start="2568:18" pos:end="2568:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2568:44" pos:end="2568:64">(<argument pos:start="2568:45" pos:end="2568:47"><expr pos:start="2568:45" pos:end="2568:47"><name pos:start="2568:45" pos:end="2568:47">env</name></expr></argument>, <argument pos:start="2568:50" pos:end="2568:63"><expr pos:start="2568:50" pos:end="2568:63"><name pos:start="2568:50" pos:end="2568:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2570:5" pos:end="2573:5"><if pos:start="2570:5" pos:end="2573:5">if <condition pos:start="2570:8" pos:end="2570:36">(<expr pos:start="2570:9" pos:end="2570:35"><name pos:start="2570:9" pos:end="2570:14">handle</name> <operator pos:start="2570:16" pos:end="2570:17">==</operator> <literal type="number" pos:start="2570:19" pos:end="2570:19">0</literal> <operator pos:start="2570:21" pos:end="2570:22">||</operator> <name pos:start="2570:24" pos:end="2570:29">handle</name> <operator pos:start="2570:31" pos:end="2570:32">==</operator> <operator pos:start="2570:34" pos:end="2570:34">-</operator><literal type="number" pos:start="2570:35" pos:end="2570:35">1</literal></expr>)</condition> <block pos:start="2570:38" pos:end="2573:5">{<block_content pos:start="2571:9" pos:end="2572:17">
        <expr_stmt pos:start="2571:9" pos:end="2571:53"><expr pos:start="2571:9" pos:end="2571:52"><call pos:start="2571:9" pos:end="2571:52"><name pos:start="2571:9" pos:end="2571:28">throwSocketException</name><argument_list pos:start="2571:29" pos:end="2571:52">(<argument pos:start="2571:30" pos:end="2571:32"><expr pos:start="2571:30" pos:end="2571:32"><name pos:start="2571:30" pos:end="2571:32">env</name></expr></argument>, <argument pos:start="2571:35" pos:end="2571:51"><expr pos:start="2571:35" pos:end="2571:51"><name pos:start="2571:35" pos:end="2571:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2572:9" pos:end="2572:17">return <expr pos:start="2572:16" pos:end="2572:16"><literal type="number" pos:start="2572:16" pos:end="2572:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="2575:5" pos:end="2575:44">// Cap read length to available buf size</comment>
    <decl_stmt pos:start="2576:5" pos:end="2576:60"><decl pos:start="2576:5" pos:end="2576:59"><type pos:start="2576:5" pos:end="2576:7"><name pos:start="2576:5" pos:end="2576:7">int</name></type> <name pos:start="2576:9" pos:end="2576:22">spaceAvailable</name> <init pos:start="2576:24" pos:end="2576:59">= <expr pos:start="2576:26" pos:end="2576:59"><call pos:start="2576:26" pos:end="2576:50"><name pos:start="2576:26" pos:end="2576:44"><name pos:start="2576:26" pos:end="2576:28">env</name><operator pos:start="2576:29" pos:end="2576:30">-&gt;</operator><name pos:start="2576:31" pos:end="2576:44">GetArrayLength</name></name><argument_list pos:start="2576:45" pos:end="2576:50">(<argument pos:start="2576:46" pos:end="2576:49"><expr pos:start="2576:46" pos:end="2576:49"><name pos:start="2576:46" pos:end="2576:49">data</name></expr></argument>)</argument_list></call> <operator pos:start="2576:52" pos:end="2576:52">-</operator> <name pos:start="2576:54" pos:end="2576:59">offset</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2577:5" pos:end="2577:68"><decl pos:start="2577:5" pos:end="2577:67"><type pos:start="2577:5" pos:end="2577:7"><name pos:start="2577:5" pos:end="2577:7">int</name></type> <name pos:start="2577:9" pos:end="2577:18">localCount</name> <init pos:start="2577:20" pos:end="2577:67">= <expr pos:start="2577:22" pos:end="2577:67"><ternary pos:start="2577:22" pos:end="2577:67"><condition pos:start="2577:22" pos:end="2577:44"><expr pos:start="2577:22" pos:end="2577:43"><name pos:start="2577:22" pos:end="2577:26">count</name> <operator pos:start="2577:28" pos:end="2577:28">&lt;</operator> <name pos:start="2577:30" pos:end="2577:43">spaceAvailable</name></expr>?</condition><then pos:start="2577:46" pos:end="2577:50"> <expr pos:start="2577:46" pos:end="2577:50"><name pos:start="2577:46" pos:end="2577:50">count</name></expr> </then><else pos:start="2577:52" pos:end="2577:67">: <expr pos:start="2577:54" pos:end="2577:67"><name pos:start="2577:54" pos:end="2577:67">spaceAvailable</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2579:5" pos:end="2579:20"><decl pos:start="2579:5" pos:end="2579:19"><type pos:start="2579:5" pos:end="2579:12"><name pos:start="2579:5" pos:end="2579:12">jboolean</name></type> <name pos:start="2579:14" pos:end="2579:19">isCopy</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2580:5" pos:end="2580:59"><decl pos:start="2580:5" pos:end="2580:58"><type pos:start="2580:5" pos:end="2580:11"><name pos:start="2580:5" pos:end="2580:9">jbyte</name> <modifier pos:start="2580:11" pos:end="2580:11">*</modifier></type><name pos:start="2580:12" pos:end="2580:15">body</name> <init pos:start="2580:17" pos:end="2580:58">= <expr pos:start="2580:19" pos:end="2580:58"><call pos:start="2580:19" pos:end="2580:58"><name pos:start="2580:19" pos:end="2580:43"><name pos:start="2580:19" pos:end="2580:21">env</name><operator pos:start="2580:22" pos:end="2580:23">-&gt;</operator><name pos:start="2580:24" pos:end="2580:43">GetByteArrayElements</name></name><argument_list pos:start="2580:44" pos:end="2580:58">(<argument pos:start="2580:45" pos:end="2580:48"><expr pos:start="2580:45" pos:end="2580:48"><name pos:start="2580:45" pos:end="2580:48">data</name></expr></argument>, <argument pos:start="2580:51" pos:end="2580:57"><expr pos:start="2580:51" pos:end="2580:57"><operator pos:start="2580:51" pos:end="2580:51">&amp;</operator><name pos:start="2580:52" pos:end="2580:57">isCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="2582:5" pos:end="2582:18">// set timeout</comment>
    <decl_stmt pos:start="2583:5" pos:end="2583:22"><decl pos:start="2583:5" pos:end="2583:21"><type pos:start="2583:5" pos:end="2583:18"><name pos:start="2583:5" pos:end="2583:18"><name pos:start="2583:5" pos:end="2583:10">struct</name> <name pos:start="2583:12" pos:end="2583:18">timeval</name></name></type> <name pos:start="2583:20" pos:end="2583:21">tv</name></decl>;</decl_stmt>
    <expr_stmt pos:start="2584:5" pos:end="2584:31"><expr pos:start="2584:5" pos:end="2584:30"><name pos:start="2584:5" pos:end="2584:13"><name pos:start="2584:5" pos:end="2584:6">tv</name><operator pos:start="2584:7" pos:end="2584:7">.</operator><name pos:start="2584:8" pos:end="2584:13">tv_sec</name></name> <operator pos:start="2584:15" pos:end="2584:15">=</operator> <name pos:start="2584:17" pos:end="2584:23">timeout</name> <operator pos:start="2584:25" pos:end="2584:25">/</operator> <literal type="number" pos:start="2584:27" pos:end="2584:30">1000</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2585:5" pos:end="2585:41"><expr pos:start="2585:5" pos:end="2585:40"><name pos:start="2585:5" pos:end="2585:14"><name pos:start="2585:5" pos:end="2585:6">tv</name><operator pos:start="2585:7" pos:end="2585:7">.</operator><name pos:start="2585:8" pos:end="2585:14">tv_usec</name></name> <operator pos:start="2585:16" pos:end="2585:16">=</operator> <operator pos:start="2585:18" pos:end="2585:18">(</operator><name pos:start="2585:19" pos:end="2585:25">timeout</name> <operator pos:start="2585:27" pos:end="2585:27">%</operator> <literal type="number" pos:start="2585:29" pos:end="2585:32">1000</literal><operator pos:start="2585:33" pos:end="2585:33">)</operator> <operator pos:start="2585:35" pos:end="2585:35">*</operator> <literal type="number" pos:start="2585:37" pos:end="2585:40">1000</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2586:5" pos:end="2587:39"><expr pos:start="2586:5" pos:end="2587:38"><call pos:start="2586:5" pos:end="2587:38"><name pos:start="2586:5" pos:end="2586:14">setsockopt</name><argument_list pos:start="2586:15" pos:end="2587:38">(<argument pos:start="2586:16" pos:end="2586:21"><expr pos:start="2586:16" pos:end="2586:21"><name pos:start="2586:16" pos:end="2586:21">handle</name></expr></argument>, <argument pos:start="2586:24" pos:end="2586:33"><expr pos:start="2586:24" pos:end="2586:33"><name pos:start="2586:24" pos:end="2586:33">SOL_SOCKET</name></expr></argument>, <argument pos:start="2586:36" pos:end="2586:46"><expr pos:start="2586:36" pos:end="2586:46"><name pos:start="2586:36" pos:end="2586:46">SO_RCVTIMEO</name></expr></argument>, <argument pos:start="2586:49" pos:end="2586:69"><expr pos:start="2586:49" pos:end="2586:69"><operator pos:start="2586:49" pos:end="2586:49">(</operator>struct <name pos:start="2586:57" pos:end="2586:63">timeval</name> <operator pos:start="2586:65" pos:end="2586:65">*</operator><operator pos:start="2586:66" pos:end="2586:66">)</operator><operator pos:start="2586:67" pos:end="2586:67">&amp;</operator><name pos:start="2586:68" pos:end="2586:69">tv</name></expr></argument>,
               <argument pos:start="2587:16" pos:end="2587:37"><expr pos:start="2587:16" pos:end="2587:37"><sizeof pos:start="2587:16" pos:end="2587:37">sizeof<argument_list pos:start="2587:22" pos:end="2587:37">(<argument pos:start="2587:23" pos:end="2587:36"><expr pos:start="2587:23" pos:end="2587:36">struct <name pos:start="2587:30" pos:end="2587:36">timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="2589:5" pos:end="2591:43">do <block pos:start="2589:8" pos:end="2591:5">{<block_content pos:start="2590:9" pos:end="2590:73">
        <expr_stmt pos:start="2590:9" pos:end="2590:73"><expr pos:start="2590:9" pos:end="2590:72"><name pos:start="2590:9" pos:end="2590:14">result</name> <operator pos:start="2590:16" pos:end="2590:16">=</operator> <call pos:start="2590:18" pos:end="2590:72"><name pos:start="2590:18" pos:end="2590:21">recv</name><argument_list pos:start="2590:22" pos:end="2590:72">(<argument pos:start="2590:23" pos:end="2590:28"><expr pos:start="2590:23" pos:end="2590:28"><name pos:start="2590:23" pos:end="2590:28">handle</name></expr></argument>, <argument pos:start="2590:31" pos:end="2590:43"><expr pos:start="2590:31" pos:end="2590:43"><name pos:start="2590:31" pos:end="2590:34">body</name> <operator pos:start="2590:36" pos:end="2590:36">+</operator> <name pos:start="2590:38" pos:end="2590:43">offset</name></expr></argument>, <argument pos:start="2590:46" pos:end="2590:55"><expr pos:start="2590:46" pos:end="2590:55"><name pos:start="2590:46" pos:end="2590:55">localCount</name></expr></argument>, <argument pos:start="2590:58" pos:end="2590:71"><expr pos:start="2590:58" pos:end="2590:71"><name pos:start="2590:58" pos:end="2590:71">SOCKET_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="2591:13" pos:end="2591:42">(<expr pos:start="2591:14" pos:end="2591:41"><name pos:start="2591:14" pos:end="2591:19">result</name> <operator pos:start="2591:21" pos:end="2591:21">&lt;</operator> <literal type="number" pos:start="2591:23" pos:end="2591:23">0</literal> <operator pos:start="2591:25" pos:end="2591:26">&amp;&amp;</operator> <name pos:start="2591:28" pos:end="2591:32">errno</name> <operator pos:start="2591:34" pos:end="2591:35">==</operator> <name pos:start="2591:37" pos:end="2591:41">EINTR</name></expr>)</condition>;</do>

    <expr_stmt pos:start="2593:5" pos:end="2593:49"><expr pos:start="2593:5" pos:end="2593:48"><call pos:start="2593:5" pos:end="2593:48"><name pos:start="2593:5" pos:end="2593:33"><name pos:start="2593:5" pos:end="2593:7">env</name><operator pos:start="2593:8" pos:end="2593:9">-&gt;</operator><name pos:start="2593:10" pos:end="2593:33">ReleaseByteArrayElements</name></name><argument_list pos:start="2593:34" pos:end="2593:48">(<argument pos:start="2593:35" pos:end="2593:38"><expr pos:start="2593:35" pos:end="2593:38"><name pos:start="2593:35" pos:end="2593:38">data</name></expr></argument>, <argument pos:start="2593:41" pos:end="2593:44"><expr pos:start="2593:41" pos:end="2593:44"><name pos:start="2593:41" pos:end="2593:44">body</name></expr></argument>, <argument pos:start="2593:47" pos:end="2593:47"><expr pos:start="2593:47" pos:end="2593:47"><literal type="number" pos:start="2593:47" pos:end="2593:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2595:5" pos:end="2598:7">/*
     * If no bytes are read, return -1 to signal 'endOfFile'
     * to the Java input stream
     */</comment>
    <if_stmt pos:start="2599:5" pos:end="2615:5"><if pos:start="2599:5" pos:end="2602:5">if <condition pos:start="2599:8" pos:end="2599:19">(<expr pos:start="2599:9" pos:end="2599:18"><literal type="number" pos:start="2599:9" pos:end="2599:9">0</literal> <operator pos:start="2599:11" pos:end="2599:11">&lt;</operator> <name pos:start="2599:13" pos:end="2599:18">result</name></expr>)</condition> <block pos:start="2599:21" pos:end="2602:5">{<block_content pos:start="2600:9" pos:end="2601:22">
        <expr_stmt pos:start="2600:9" pos:end="2600:39"><expr pos:start="2600:9" pos:end="2600:38"><call pos:start="2600:9" pos:end="2600:38"><name pos:start="2600:9" pos:end="2600:22">add_recv_stats</name><argument_list pos:start="2600:23" pos:end="2600:38">(<argument pos:start="2600:24" pos:end="2600:29"><expr pos:start="2600:24" pos:end="2600:29"><name pos:start="2600:24" pos:end="2600:29">handle</name></expr></argument>, <argument pos:start="2600:32" pos:end="2600:37"><expr pos:start="2600:32" pos:end="2600:37"><name pos:start="2600:32" pos:end="2600:37">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2601:9" pos:end="2601:22">return <expr pos:start="2601:16" pos:end="2601:21"><name pos:start="2601:16" pos:end="2601:21">result</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="2602:7" pos:end="2604:5">else if <condition pos:start="2602:15" pos:end="2602:27">(<expr pos:start="2602:16" pos:end="2602:26"><literal type="number" pos:start="2602:16" pos:end="2602:16">0</literal> <operator pos:start="2602:18" pos:end="2602:19">==</operator> <name pos:start="2602:21" pos:end="2602:26">result</name></expr>)</condition> <block pos:start="2602:29" pos:end="2604:5">{<block_content pos:start="2603:9" pos:end="2603:18">
        <return pos:start="2603:9" pos:end="2603:18">return <expr pos:start="2603:16" pos:end="2603:17"><operator pos:start="2603:16" pos:end="2603:16">-</operator><literal type="number" pos:start="2603:17" pos:end="2603:17">1</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="2604:7" pos:end="2615:5">else <block pos:start="2604:12" pos:end="2615:5">{<block_content pos:start="2606:9" pos:end="2614:17">
        <comment type="line" pos:start="2605:9" pos:end="2605:51">// If EAGAIN or EWOULDBLOCK, read timed out</comment>
        <if_stmt pos:start="2606:9" pos:end="2613:9"><if pos:start="2606:9" pos:end="2609:9">if <condition pos:start="2606:12" pos:end="2606:52">(<expr pos:start="2606:13" pos:end="2606:51"><name pos:start="2606:13" pos:end="2606:17">errno</name> <operator pos:start="2606:19" pos:end="2606:20">==</operator> <name pos:start="2606:22" pos:end="2606:27">EAGAIN</name> <operator pos:start="2606:29" pos:end="2606:30">||</operator> <name pos:start="2606:32" pos:end="2606:36">errno</name> <operator pos:start="2606:38" pos:end="2606:39">==</operator> <name pos:start="2606:41" pos:end="2606:51">EWOULDBLOCK</name></expr>)</condition> <block pos:start="2606:54" pos:end="2609:9">{<block_content pos:start="2607:13" pos:end="2608:69">
            <expr_stmt pos:start="2607:13" pos:end="2608:69"><expr pos:start="2607:13" pos:end="2608:68"><call pos:start="2607:13" pos:end="2608:68"><name pos:start="2607:13" pos:end="2607:29">jniThrowException</name><argument_list pos:start="2607:30" pos:end="2608:68">(<argument pos:start="2607:31" pos:end="2607:33"><expr pos:start="2607:31" pos:end="2607:33"><name pos:start="2607:31" pos:end="2607:33">env</name></expr></argument>, <argument pos:start="2607:36" pos:end="2607:68"><expr pos:start="2607:36" pos:end="2607:68"><literal type="string" pos:start="2607:36" pos:end="2607:68">"java/net/SocketTimeoutException"</literal></expr></argument>,
                              <argument pos:start="2608:31" pos:end="2608:67"><expr pos:start="2608:31" pos:end="2608:67"><call pos:start="2608:31" pos:end="2608:67"><name pos:start="2608:31" pos:end="2608:50">netLookupErrorString</name><argument_list pos:start="2608:51" pos:end="2608:67">(<argument pos:start="2608:52" pos:end="2608:66"><expr pos:start="2608:52" pos:end="2608:66"><name pos:start="2608:52" pos:end="2608:66">SOCKERR_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2609:11" pos:end="2613:9">else <block pos:start="2609:16" pos:end="2613:9">{<block_content pos:start="2610:13" pos:end="2612:43">
            <decl_stmt pos:start="2610:13" pos:end="2610:42"><decl pos:start="2610:13" pos:end="2610:41"><type pos:start="2610:13" pos:end="2610:15"><name pos:start="2610:13" pos:end="2610:15">int</name></type> <name pos:start="2610:17" pos:end="2610:19">err</name> <init pos:start="2610:21" pos:end="2610:41">= <expr pos:start="2610:23" pos:end="2610:41"><call pos:start="2610:23" pos:end="2610:41"><name pos:start="2610:23" pos:end="2610:34">convertError</name><argument_list pos:start="2610:35" pos:end="2610:41">(<argument pos:start="2610:36" pos:end="2610:40"><expr pos:start="2610:36" pos:end="2610:40"><name pos:start="2610:36" pos:end="2610:40">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2611:13" pos:end="2611:42"><expr pos:start="2611:13" pos:end="2611:41"><call pos:start="2611:13" pos:end="2611:41"><name pos:start="2611:13" pos:end="2611:28">log_socket_close</name><argument_list pos:start="2611:29" pos:end="2611:41">(<argument pos:start="2611:30" pos:end="2611:35"><expr pos:start="2611:30" pos:end="2611:35"><name pos:start="2611:30" pos:end="2611:35">handle</name></expr></argument>, <argument pos:start="2611:38" pos:end="2611:40"><expr pos:start="2611:38" pos:end="2611:40"><name pos:start="2611:38" pos:end="2611:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2612:13" pos:end="2612:43"><expr pos:start="2612:13" pos:end="2612:42"><call pos:start="2612:13" pos:end="2612:42"><name pos:start="2612:13" pos:end="2612:32">throwSocketException</name><argument_list pos:start="2612:33" pos:end="2612:42">(<argument pos:start="2612:34" pos:end="2612:36"><expr pos:start="2612:34" pos:end="2612:36"><name pos:start="2612:34" pos:end="2612:36">env</name></expr></argument>, <argument pos:start="2612:39" pos:end="2612:41"><expr pos:start="2612:39" pos:end="2612:41"><name pos:start="2612:39" pos:end="2612:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return pos:start="2614:9" pos:end="2614:17">return <expr pos:start="2614:16" pos:end="2614:16"><literal type="number" pos:start="2614:16" pos:end="2614:16">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2618:1" pos:end="2665:1">extern <literal type="string" pos:start="2618:8" pos:end="2618:10">"C"</literal> <function pos:start="2618:12" pos:end="2665:1"><type pos:start="2618:12" pos:end="2618:15"><name pos:start="2618:12" pos:end="2618:15">jint</name></type> <name pos:start="2618:17" pos:end="2618:73">Java_org_sipdroid_net_impl_OSNetworkSystem_sendStreamImpl</name><parameter_list pos:start="2618:74" pos:end="2619:73">(<parameter pos:start="2618:75" pos:end="2618:85"><decl pos:start="2618:75" pos:end="2618:85"><type pos:start="2618:75" pos:end="2618:85"><name pos:start="2618:75" pos:end="2618:80">JNIEnv</name><modifier pos:start="2618:81" pos:end="2618:81">*</modifier></type> <name pos:start="2618:83" pos:end="2618:85">env</name></decl></parameter>, <parameter pos:start="2618:88" pos:end="2618:99"><decl pos:start="2618:88" pos:end="2618:99"><type pos:start="2618:88" pos:end="2618:99"><name pos:start="2618:88" pos:end="2618:93">jclass</name></type> <name pos:start="2618:95" pos:end="2618:99">clazz</name></decl></parameter>,
        <parameter pos:start="2619:9" pos:end="2619:30"><decl pos:start="2619:9" pos:end="2619:30"><type pos:start="2619:9" pos:end="2619:30"><name pos:start="2619:9" pos:end="2619:15">jobject</name></type> <name pos:start="2619:17" pos:end="2619:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2619:33" pos:end="2619:47"><decl pos:start="2619:33" pos:end="2619:47"><type pos:start="2619:33" pos:end="2619:47"><name pos:start="2619:33" pos:end="2619:42">jbyteArray</name></type> <name pos:start="2619:44" pos:end="2619:47">data</name></decl></parameter>, <parameter pos:start="2619:50" pos:end="2619:60"><decl pos:start="2619:50" pos:end="2619:60"><type pos:start="2619:50" pos:end="2619:60"><name pos:start="2619:50" pos:end="2619:53">jint</name></type> <name pos:start="2619:55" pos:end="2619:60">offset</name></decl></parameter>, <parameter pos:start="2619:63" pos:end="2619:72"><decl pos:start="2619:63" pos:end="2619:72"><type pos:start="2619:63" pos:end="2619:72"><name pos:start="2619:63" pos:end="2619:66">jint</name></type> <name pos:start="2619:68" pos:end="2619:72">count</name></decl></parameter>)</parameter_list> <block pos:start="2619:75" pos:end="2665:1">{<block_content pos:start="2622:5" pos:end="2664:16">
    <comment type="line" pos:start="2620:5" pos:end="2620:36">// LOGD("ENTER sendStreamImpl");</comment>

    <decl_stmt pos:start="2622:5" pos:end="2622:19"><decl pos:start="2622:5" pos:end="2622:18"><type pos:start="2622:5" pos:end="2622:7"><name pos:start="2622:5" pos:end="2622:7">int</name></type> <name pos:start="2622:9" pos:end="2622:14">handle</name> <init pos:start="2622:16" pos:end="2622:18">= <expr pos:start="2622:18" pos:end="2622:18"><literal type="number" pos:start="2622:18" pos:end="2622:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2623:5" pos:end="2623:29"><decl pos:start="2623:5" pos:end="2623:18"><type pos:start="2623:5" pos:end="2623:7"><name pos:start="2623:5" pos:end="2623:7">int</name></type> <name pos:start="2623:9" pos:end="2623:14">result</name> <init pos:start="2623:16" pos:end="2623:18">= <expr pos:start="2623:18" pos:end="2623:18"><literal type="number" pos:start="2623:18" pos:end="2623:18">0</literal></expr></init></decl>, <decl pos:start="2623:21" pos:end="2623:28"><type ref="prev" pos:start="2623:5" pos:end="2623:7"/><name pos:start="2623:21" pos:end="2623:24">sent</name> <init pos:start="2623:26" pos:end="2623:28">= <expr pos:start="2623:28" pos:end="2623:28"><literal type="number" pos:start="2623:28" pos:end="2623:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2625:5" pos:end="2625:20"><decl pos:start="2625:5" pos:end="2625:19"><type pos:start="2625:5" pos:end="2625:12"><name pos:start="2625:5" pos:end="2625:12">jboolean</name></type> <name pos:start="2625:14" pos:end="2625:19">isCopy</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2626:5" pos:end="2626:62"><decl pos:start="2626:5" pos:end="2626:61"><type pos:start="2626:5" pos:end="2626:11"><name pos:start="2626:5" pos:end="2626:9">jbyte</name> <modifier pos:start="2626:11" pos:end="2626:11">*</modifier></type><name pos:start="2626:12" pos:end="2626:18">message</name> <init pos:start="2626:20" pos:end="2626:61">= <expr pos:start="2626:22" pos:end="2626:61"><call pos:start="2626:22" pos:end="2626:61"><name pos:start="2626:22" pos:end="2626:46"><name pos:start="2626:22" pos:end="2626:24">env</name><operator pos:start="2626:25" pos:end="2626:26">-&gt;</operator><name pos:start="2626:27" pos:end="2626:46">GetByteArrayElements</name></name><argument_list pos:start="2626:47" pos:end="2626:61">(<argument pos:start="2626:48" pos:end="2626:51"><expr pos:start="2626:48" pos:end="2626:51"><name pos:start="2626:48" pos:end="2626:51">data</name></expr></argument>, <argument pos:start="2626:54" pos:end="2626:60"><expr pos:start="2626:54" pos:end="2626:60"><operator pos:start="2626:54" pos:end="2626:54">&amp;</operator><name pos:start="2626:55" pos:end="2626:60">isCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="2628:5" pos:end="2628:45">// Cap write length to available buf size</comment>
    <decl_stmt pos:start="2629:5" pos:end="2629:60"><decl pos:start="2629:5" pos:end="2629:59"><type pos:start="2629:5" pos:end="2629:7"><name pos:start="2629:5" pos:end="2629:7">int</name></type> <name pos:start="2629:9" pos:end="2629:22">spaceAvailable</name> <init pos:start="2629:24" pos:end="2629:59">= <expr pos:start="2629:26" pos:end="2629:59"><call pos:start="2629:26" pos:end="2629:50"><name pos:start="2629:26" pos:end="2629:44"><name pos:start="2629:26" pos:end="2629:28">env</name><operator pos:start="2629:29" pos:end="2629:30">-&gt;</operator><name pos:start="2629:31" pos:end="2629:44">GetArrayLength</name></name><argument_list pos:start="2629:45" pos:end="2629:50">(<argument pos:start="2629:46" pos:end="2629:49"><expr pos:start="2629:46" pos:end="2629:49"><name pos:start="2629:46" pos:end="2629:49">data</name></expr></argument>)</argument_list></call> <operator pos:start="2629:52" pos:end="2629:52">-</operator> <name pos:start="2629:54" pos:end="2629:59">offset</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2630:5" pos:end="2630:55"><if pos:start="2630:5" pos:end="2630:55">if <condition pos:start="2630:8" pos:end="2630:31">(<expr pos:start="2630:9" pos:end="2630:30"><name pos:start="2630:9" pos:end="2630:13">count</name> <operator pos:start="2630:15" pos:end="2630:15">&gt;</operator> <name pos:start="2630:17" pos:end="2630:30">spaceAvailable</name></expr>)</condition><block type="pseudo" pos:start="2630:33" pos:end="2630:55"><block_content pos:start="2630:33" pos:end="2630:55"> <expr_stmt pos:start="2630:33" pos:end="2630:55"><expr pos:start="2630:33" pos:end="2630:54"><name pos:start="2630:33" pos:end="2630:37">count</name> <operator pos:start="2630:39" pos:end="2630:39">=</operator> <name pos:start="2630:41" pos:end="2630:54">spaceAvailable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while pos:start="2632:5" pos:end="2660:5">while <condition pos:start="2632:11" pos:end="2632:24">(<expr pos:start="2632:12" pos:end="2632:23"><name pos:start="2632:12" pos:end="2632:15">sent</name> <operator pos:start="2632:17" pos:end="2632:17">&lt;</operator> <name pos:start="2632:19" pos:end="2632:23">count</name></expr>)</condition> <block pos:start="2632:26" pos:end="2660:5">{<block_content pos:start="2634:9" pos:end="2659:23">

        <expr_stmt pos:start="2634:9" pos:end="2634:65"><expr pos:start="2634:9" pos:end="2634:64"><name pos:start="2634:9" pos:end="2634:14">handle</name> <operator pos:start="2634:16" pos:end="2634:16">=</operator> <call pos:start="2634:18" pos:end="2634:64"><name pos:start="2634:18" pos:end="2634:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2634:44" pos:end="2634:64">(<argument pos:start="2634:45" pos:end="2634:47"><expr pos:start="2634:45" pos:end="2634:47"><name pos:start="2634:45" pos:end="2634:47">env</name></expr></argument>, <argument pos:start="2634:50" pos:end="2634:63"><expr pos:start="2634:50" pos:end="2634:63"><name pos:start="2634:50" pos:end="2634:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2635:9" pos:end="2640:9"><if pos:start="2635:9" pos:end="2640:9">if <condition pos:start="2635:12" pos:end="2635:40">(<expr pos:start="2635:13" pos:end="2635:39"><name pos:start="2635:13" pos:end="2635:18">handle</name> <operator pos:start="2635:20" pos:end="2635:21">==</operator> <literal type="number" pos:start="2635:23" pos:end="2635:23">0</literal> <operator pos:start="2635:25" pos:end="2635:26">||</operator> <name pos:start="2635:28" pos:end="2635:33">handle</name> <operator pos:start="2635:35" pos:end="2635:36">==</operator> <operator pos:start="2635:38" pos:end="2635:38">-</operator><literal type="number" pos:start="2635:39" pos:end="2635:39">1</literal></expr>)</condition> <block pos:start="2635:42" pos:end="2640:9">{<block_content pos:start="2636:13" pos:end="2639:21">
            <expr_stmt pos:start="2636:13" pos:end="2637:73"><expr pos:start="2636:13" pos:end="2637:72"><call pos:start="2636:13" pos:end="2637:72"><name pos:start="2636:13" pos:end="2636:32">throwSocketException</name><argument_list pos:start="2636:33" pos:end="2637:72">(<argument pos:start="2636:34" pos:end="2636:36"><expr pos:start="2636:34" pos:end="2636:36"><name pos:start="2636:34" pos:end="2636:36">env</name></expr></argument>,
                    <argument pos:start="2637:21" pos:end="2637:71"><expr pos:start="2637:21" pos:end="2637:71"><ternary pos:start="2637:21" pos:end="2637:71"><condition pos:start="2637:21" pos:end="2637:31"><expr pos:start="2637:21" pos:end="2637:29"><name pos:start="2637:21" pos:end="2637:24">sent</name> <operator pos:start="2637:26" pos:end="2637:27">==</operator> <literal type="number" pos:start="2637:29" pos:end="2637:29">0</literal></expr> ?</condition><then pos:start="2637:33" pos:end="2637:49"> <expr pos:start="2637:33" pos:end="2637:49"><name pos:start="2637:33" pos:end="2637:49">SOCKERR_BADSOCKET</name></expr> </then><else pos:start="2637:51" pos:end="2637:71">: <expr pos:start="2637:53" pos:end="2637:71"><name pos:start="2637:53" pos:end="2637:71">SOCKERR_INTERRUPTED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2638:13" pos:end="2638:60"><expr pos:start="2638:13" pos:end="2638:59"><call pos:start="2638:13" pos:end="2638:59"><name pos:start="2638:13" pos:end="2638:41"><name pos:start="2638:13" pos:end="2638:15">env</name><operator pos:start="2638:16" pos:end="2638:17">-&gt;</operator><name pos:start="2638:18" pos:end="2638:41">ReleaseByteArrayElements</name></name><argument_list pos:start="2638:42" pos:end="2638:59">(<argument pos:start="2638:43" pos:end="2638:46"><expr pos:start="2638:43" pos:end="2638:46"><name pos:start="2638:43" pos:end="2638:46">data</name></expr></argument>, <argument pos:start="2638:49" pos:end="2638:55"><expr pos:start="2638:49" pos:end="2638:55"><name pos:start="2638:49" pos:end="2638:55">message</name></expr></argument>, <argument pos:start="2638:58" pos:end="2638:58"><expr pos:start="2638:58" pos:end="2638:58"><literal type="number" pos:start="2638:58" pos:end="2638:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2639:13" pos:end="2639:21">return <expr pos:start="2639:20" pos:end="2639:20"><literal type="number" pos:start="2639:20" pos:end="2639:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="2642:9" pos:end="2642:43">// LOGD("before select %d", count);</comment>
        <expr_stmt pos:start="2643:9" pos:end="2643:63"><expr pos:start="2643:9" pos:end="2643:62"><call pos:start="2643:9" pos:end="2643:62"><name pos:start="2643:9" pos:end="2643:18">selectWait</name><argument_list pos:start="2643:19" pos:end="2643:62">(<argument pos:start="2643:20" pos:end="2643:25"><expr pos:start="2643:20" pos:end="2643:25"><name pos:start="2643:20" pos:end="2643:25">handle</name></expr></argument>, <argument pos:start="2643:28" pos:end="2643:42"><expr pos:start="2643:28" pos:end="2643:42"><name pos:start="2643:28" pos:end="2643:42">SEND_RETRY_TIME</name></expr></argument>, <argument pos:start="2643:45" pos:end="2643:61"><expr pos:start="2643:45" pos:end="2643:61"><name pos:start="2643:45" pos:end="2643:61">SELECT_WRITE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2644:9" pos:end="2645:52"><expr pos:start="2644:9" pos:end="2645:51"><name pos:start="2644:9" pos:end="2644:14">result</name> <operator pos:start="2644:16" pos:end="2644:16">=</operator> <call pos:start="2644:18" pos:end="2645:51"><name pos:start="2644:18" pos:end="2644:21">send</name><argument_list pos:start="2644:22" pos:end="2645:51">(<argument pos:start="2644:23" pos:end="2644:28"><expr pos:start="2644:23" pos:end="2644:28"><name pos:start="2644:23" pos:end="2644:28">handle</name></expr></argument>, <argument pos:start="2644:31" pos:end="2644:62"><expr pos:start="2644:31" pos:end="2644:62"><operator pos:start="2644:31" pos:end="2644:31">(</operator><name pos:start="2644:32" pos:end="2644:36">jbyte</name> <operator pos:start="2644:38" pos:end="2644:38">*</operator><operator pos:start="2644:39" pos:end="2644:39">)</operator><name pos:start="2644:40" pos:end="2644:46">message</name> <operator pos:start="2644:48" pos:end="2644:48">+</operator> <name pos:start="2644:50" pos:end="2644:55">offset</name> <operator pos:start="2644:57" pos:end="2644:57">+</operator> <name pos:start="2644:59" pos:end="2644:62">sent</name></expr></argument>,
                <argument pos:start="2645:17" pos:end="2645:34"><expr pos:start="2645:17" pos:end="2645:34"><operator pos:start="2645:17" pos:end="2645:17">(</operator><name pos:start="2645:18" pos:end="2645:20">int</name><operator pos:start="2645:21" pos:end="2645:21">)</operator> <name pos:start="2645:23" pos:end="2645:27">count</name> <operator pos:start="2645:29" pos:end="2645:29">-</operator> <name pos:start="2645:31" pos:end="2645:34">sent</name></expr></argument>, <argument pos:start="2645:37" pos:end="2645:50"><expr pos:start="2645:37" pos:end="2645:50"><name pos:start="2645:37" pos:end="2645:50">SOCKET_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2647:9" pos:end="2658:9"><if pos:start="2647:9" pos:end="2658:9">if <condition pos:start="2647:12" pos:end="2647:23">(<expr pos:start="2647:13" pos:end="2647:22"><name pos:start="2647:13" pos:end="2647:18">result</name> <operator pos:start="2647:20" pos:end="2647:20">&lt;</operator> <literal type="number" pos:start="2647:22" pos:end="2647:22">0</literal></expr>)</condition> <block pos:start="2647:25" pos:end="2658:9">{<block_content pos:start="2648:13" pos:end="2657:21">
            <expr_stmt pos:start="2648:13" pos:end="2648:27"><expr pos:start="2648:13" pos:end="2648:26"><name pos:start="2648:13" pos:end="2648:18">result</name> <operator pos:start="2648:20" pos:end="2648:20">=</operator> <name pos:start="2648:22" pos:end="2648:26">errno</name></expr>;</expr_stmt>
            <if_stmt pos:start="2649:13" pos:end="2652:13"><if pos:start="2649:13" pos:end="2652:13">if <condition pos:start="2649:16" pos:end="2649:57">(<expr pos:start="2649:17" pos:end="2649:56"><name pos:start="2649:17" pos:end="2649:22">result</name> <operator pos:start="2649:24" pos:end="2649:25">==</operator> <name pos:start="2649:27" pos:end="2649:32">EAGAIN</name> <operator pos:start="2649:34" pos:end="2649:35">||</operator><name pos:start="2649:36" pos:end="2649:41">result</name> <operator pos:start="2649:43" pos:end="2649:44">==</operator> <name pos:start="2649:46" pos:end="2649:56">EWOULDBLOCK</name></expr>)</condition> <block pos:start="2649:59" pos:end="2652:13">{<block_content pos:start="2651:17" pos:end="2651:25">
                <comment type="line" pos:start="2650:17" pos:end="2650:50">// LOGD("write blocked %d", sent);</comment>
                <continue pos:start="2651:17" pos:end="2651:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2653:13" pos:end="2653:60"><expr pos:start="2653:13" pos:end="2653:59"><call pos:start="2653:13" pos:end="2653:59"><name pos:start="2653:13" pos:end="2653:41"><name pos:start="2653:13" pos:end="2653:15">env</name><operator pos:start="2653:16" pos:end="2653:17">-&gt;</operator><name pos:start="2653:18" pos:end="2653:41">ReleaseByteArrayElements</name></name><argument_list pos:start="2653:42" pos:end="2653:59">(<argument pos:start="2653:43" pos:end="2653:46"><expr pos:start="2653:43" pos:end="2653:46"><name pos:start="2653:43" pos:end="2653:46">data</name></expr></argument>, <argument pos:start="2653:49" pos:end="2653:55"><expr pos:start="2653:49" pos:end="2653:55"><name pos:start="2653:49" pos:end="2653:55">message</name></expr></argument>, <argument pos:start="2653:58" pos:end="2653:58"><expr pos:start="2653:58" pos:end="2653:58"><literal type="number" pos:start="2653:58" pos:end="2653:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt pos:start="2654:13" pos:end="2654:43"><decl pos:start="2654:13" pos:end="2654:42"><type pos:start="2654:13" pos:end="2654:15"><name pos:start="2654:13" pos:end="2654:15">int</name></type> <name pos:start="2654:17" pos:end="2654:19">err</name> <init pos:start="2654:21" pos:end="2654:42">= <expr pos:start="2654:23" pos:end="2654:42"><call pos:start="2654:23" pos:end="2654:42"><name pos:start="2654:23" pos:end="2654:34">convertError</name><argument_list pos:start="2654:35" pos:end="2654:42">(<argument pos:start="2654:36" pos:end="2654:41"><expr pos:start="2654:36" pos:end="2654:41"><name pos:start="2654:36" pos:end="2654:41">result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2655:13" pos:end="2655:42"><expr pos:start="2655:13" pos:end="2655:41"><call pos:start="2655:13" pos:end="2655:41"><name pos:start="2655:13" pos:end="2655:28">log_socket_close</name><argument_list pos:start="2655:29" pos:end="2655:41">(<argument pos:start="2655:30" pos:end="2655:35"><expr pos:start="2655:30" pos:end="2655:35"><name pos:start="2655:30" pos:end="2655:35">handle</name></expr></argument>, <argument pos:start="2655:38" pos:end="2655:40"><expr pos:start="2655:38" pos:end="2655:40"><name pos:start="2655:38" pos:end="2655:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2656:13" pos:end="2656:43"><expr pos:start="2656:13" pos:end="2656:42"><call pos:start="2656:13" pos:end="2656:42"><name pos:start="2656:13" pos:end="2656:32">throwSocketException</name><argument_list pos:start="2656:33" pos:end="2656:42">(<argument pos:start="2656:34" pos:end="2656:36"><expr pos:start="2656:34" pos:end="2656:36"><name pos:start="2656:34" pos:end="2656:36">env</name></expr></argument>, <argument pos:start="2656:39" pos:end="2656:41"><expr pos:start="2656:39" pos:end="2656:41"><name pos:start="2656:39" pos:end="2656:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2657:13" pos:end="2657:21">return <expr pos:start="2657:20" pos:end="2657:20"><literal type="number" pos:start="2657:20" pos:end="2657:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2659:9" pos:end="2659:23"><expr pos:start="2659:9" pos:end="2659:22"><name pos:start="2659:9" pos:end="2659:12">sent</name> <operator pos:start="2659:14" pos:end="2659:15">+=</operator> <name pos:start="2659:17" pos:end="2659:22">result</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="2662:5" pos:end="2662:52"><expr pos:start="2662:5" pos:end="2662:51"><call pos:start="2662:5" pos:end="2662:51"><name pos:start="2662:5" pos:end="2662:33"><name pos:start="2662:5" pos:end="2662:7">env</name><operator pos:start="2662:8" pos:end="2662:9">-&gt;</operator><name pos:start="2662:10" pos:end="2662:33">ReleaseByteArrayElements</name></name><argument_list pos:start="2662:34" pos:end="2662:51">(<argument pos:start="2662:35" pos:end="2662:38"><expr pos:start="2662:35" pos:end="2662:38"><name pos:start="2662:35" pos:end="2662:38">data</name></expr></argument>, <argument pos:start="2662:41" pos:end="2662:47"><expr pos:start="2662:41" pos:end="2662:47"><name pos:start="2662:41" pos:end="2662:47">message</name></expr></argument>, <argument pos:start="2662:50" pos:end="2662:50"><expr pos:start="2662:50" pos:end="2662:50"><literal type="number" pos:start="2662:50" pos:end="2662:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2663:5" pos:end="2663:33"><expr pos:start="2663:5" pos:end="2663:32"><call pos:start="2663:5" pos:end="2663:32"><name pos:start="2663:5" pos:end="2663:18">add_send_stats</name><argument_list pos:start="2663:19" pos:end="2663:32">(<argument pos:start="2663:20" pos:end="2663:25"><expr pos:start="2663:20" pos:end="2663:25"><name pos:start="2663:20" pos:end="2663:25">handle</name></expr></argument>, <argument pos:start="2663:28" pos:end="2663:31"><expr pos:start="2663:28" pos:end="2663:31"><name pos:start="2663:28" pos:end="2663:31">sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2664:5" pos:end="2664:16">return <expr pos:start="2664:12" pos:end="2664:15"><name pos:start="2664:12" pos:end="2664:15">sent</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2667:1" pos:end="2689:1">extern <literal type="string" pos:start="2667:8" pos:end="2667:10">"C"</literal> <function pos:start="2667:12" pos:end="2689:1"><type pos:start="2667:12" pos:end="2667:15"><name pos:start="2667:12" pos:end="2667:15">void</name></type> <name pos:start="2667:17" pos:end="2667:76">Java_org_sipdroid_net_impl_OSNetworkSystem_shutdownInputImpl</name><parameter_list pos:start="2667:77" pos:end="2668:31">(<parameter pos:start="2667:78" pos:end="2667:88"><decl pos:start="2667:78" pos:end="2667:88"><type pos:start="2667:78" pos:end="2667:88"><name pos:start="2667:78" pos:end="2667:83">JNIEnv</name><modifier pos:start="2667:84" pos:end="2667:84">*</modifier></type> <name pos:start="2667:86" pos:end="2667:88">env</name></decl></parameter>, <parameter pos:start="2667:91" pos:end="2667:101"><decl pos:start="2667:91" pos:end="2667:101"><type pos:start="2667:91" pos:end="2667:101"><name pos:start="2667:91" pos:end="2667:97">jobject</name></type> <name pos:start="2667:99" pos:end="2667:101">obj</name></decl></parameter>,
        <parameter pos:start="2668:9" pos:end="2668:30"><decl pos:start="2668:9" pos:end="2668:30"><type pos:start="2668:9" pos:end="2668:30"><name pos:start="2668:9" pos:end="2668:15">jobject</name></type> <name pos:start="2668:17" pos:end="2668:30">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="2668:33" pos:end="2689:1">{<block_content pos:start="2671:5" pos:end="2688:5">
    <comment type="line" pos:start="2669:5" pos:end="2669:39">// LOGD("ENTER shutdownInputImpl");</comment>

    <decl_stmt pos:start="2671:5" pos:end="2671:12"><decl pos:start="2671:5" pos:end="2671:11"><type pos:start="2671:5" pos:end="2671:7"><name pos:start="2671:5" pos:end="2671:7">int</name></type> <name pos:start="2671:9" pos:end="2671:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2672:5" pos:end="2672:15"><decl pos:start="2672:5" pos:end="2672:14"><type pos:start="2672:5" pos:end="2672:7"><name pos:start="2672:5" pos:end="2672:7">int</name></type> <name pos:start="2672:9" pos:end="2672:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2674:5" pos:end="2674:61"><expr pos:start="2674:5" pos:end="2674:60"><name pos:start="2674:5" pos:end="2674:10">handle</name> <operator pos:start="2674:12" pos:end="2674:12">=</operator> <call pos:start="2674:14" pos:end="2674:60"><name pos:start="2674:14" pos:end="2674:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2674:40" pos:end="2674:60">(<argument pos:start="2674:41" pos:end="2674:43"><expr pos:start="2674:41" pos:end="2674:43"><name pos:start="2674:41" pos:end="2674:43">env</name></expr></argument>, <argument pos:start="2674:46" pos:end="2674:59"><expr pos:start="2674:46" pos:end="2674:59"><name pos:start="2674:46" pos:end="2674:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2676:5" pos:end="2679:5"><if pos:start="2676:5" pos:end="2679:5">if <condition pos:start="2676:8" pos:end="2676:36">(<expr pos:start="2676:9" pos:end="2676:35"><name pos:start="2676:9" pos:end="2676:14">handle</name> <operator pos:start="2676:16" pos:end="2676:17">==</operator> <literal type="number" pos:start="2676:19" pos:end="2676:19">0</literal> <operator pos:start="2676:21" pos:end="2676:22">||</operator> <name pos:start="2676:24" pos:end="2676:29">handle</name> <operator pos:start="2676:31" pos:end="2676:32">==</operator> <operator pos:start="2676:34" pos:end="2676:34">-</operator><literal type="number" pos:start="2676:35" pos:end="2676:35">1</literal></expr>)</condition> <block pos:start="2676:38" pos:end="2679:5">{<block_content pos:start="2677:9" pos:end="2678:15">
        <expr_stmt pos:start="2677:9" pos:end="2677:53"><expr pos:start="2677:9" pos:end="2677:52"><call pos:start="2677:9" pos:end="2677:52"><name pos:start="2677:9" pos:end="2677:28">throwSocketException</name><argument_list pos:start="2677:29" pos:end="2677:52">(<argument pos:start="2677:30" pos:end="2677:32"><expr pos:start="2677:30" pos:end="2677:32"><name pos:start="2677:30" pos:end="2677:32">env</name></expr></argument>, <argument pos:start="2677:35" pos:end="2677:51"><expr pos:start="2677:35" pos:end="2677:51"><name pos:start="2677:35" pos:end="2677:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2678:9" pos:end="2678:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2681:5" pos:end="2681:36"><expr pos:start="2681:5" pos:end="2681:35"><name pos:start="2681:5" pos:end="2681:7">ret</name> <operator pos:start="2681:9" pos:end="2681:9">=</operator> <call pos:start="2681:11" pos:end="2681:35"><name pos:start="2681:11" pos:end="2681:18">shutdown</name><argument_list pos:start="2681:19" pos:end="2681:35">(<argument pos:start="2681:20" pos:end="2681:25"><expr pos:start="2681:20" pos:end="2681:25"><name pos:start="2681:20" pos:end="2681:25">handle</name></expr></argument>, <argument pos:start="2681:28" pos:end="2681:34"><expr pos:start="2681:28" pos:end="2681:34"><name pos:start="2681:28" pos:end="2681:34">SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2683:5" pos:end="2688:5"><if pos:start="2683:5" pos:end="2688:5">if <condition pos:start="2683:8" pos:end="2683:16">(<expr pos:start="2683:9" pos:end="2683:15"><name pos:start="2683:9" pos:end="2683:11">ret</name> <operator pos:start="2683:13" pos:end="2683:13">&lt;</operator> <literal type="number" pos:start="2683:15" pos:end="2683:15">0</literal></expr>)</condition> <block pos:start="2683:18" pos:end="2688:5">{<block_content pos:start="2684:9" pos:end="2687:15">
        <decl_stmt pos:start="2684:9" pos:end="2684:38"><decl pos:start="2684:9" pos:end="2684:37"><type pos:start="2684:9" pos:end="2684:11"><name pos:start="2684:9" pos:end="2684:11">int</name></type> <name pos:start="2684:13" pos:end="2684:15">err</name> <init pos:start="2684:17" pos:end="2684:37">= <expr pos:start="2684:19" pos:end="2684:37"><call pos:start="2684:19" pos:end="2684:37"><name pos:start="2684:19" pos:end="2684:30">convertError</name><argument_list pos:start="2684:31" pos:end="2684:37">(<argument pos:start="2684:32" pos:end="2684:36"><expr pos:start="2684:32" pos:end="2684:36"><name pos:start="2684:32" pos:end="2684:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2685:9" pos:end="2685:38"><expr pos:start="2685:9" pos:end="2685:37"><call pos:start="2685:9" pos:end="2685:37"><name pos:start="2685:9" pos:end="2685:24">log_socket_close</name><argument_list pos:start="2685:25" pos:end="2685:37">(<argument pos:start="2685:26" pos:end="2685:31"><expr pos:start="2685:26" pos:end="2685:31"><name pos:start="2685:26" pos:end="2685:31">handle</name></expr></argument>, <argument pos:start="2685:34" pos:end="2685:36"><expr pos:start="2685:34" pos:end="2685:36"><name pos:start="2685:34" pos:end="2685:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2686:9" pos:end="2686:39"><expr pos:start="2686:9" pos:end="2686:38"><call pos:start="2686:9" pos:end="2686:38"><name pos:start="2686:9" pos:end="2686:28">throwSocketException</name><argument_list pos:start="2686:29" pos:end="2686:38">(<argument pos:start="2686:30" pos:end="2686:32"><expr pos:start="2686:30" pos:end="2686:32"><name pos:start="2686:30" pos:end="2686:32">env</name></expr></argument>, <argument pos:start="2686:35" pos:end="2686:37"><expr pos:start="2686:35" pos:end="2686:37"><name pos:start="2686:35" pos:end="2686:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2687:9" pos:end="2687:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2691:1" pos:end="2712:1">extern <literal type="string" pos:start="2691:8" pos:end="2691:10">"C"</literal> <function pos:start="2691:12" pos:end="2712:1"><type pos:start="2691:12" pos:end="2691:15"><name pos:start="2691:12" pos:end="2691:15">void</name></type> <name pos:start="2691:17" pos:end="2691:77">Java_org_sipdroid_net_impl_OSNetworkSystem_shutdownOutputImpl</name><parameter_list pos:start="2691:78" pos:end="2692:31">(<parameter pos:start="2691:79" pos:end="2691:89"><decl pos:start="2691:79" pos:end="2691:89"><type pos:start="2691:79" pos:end="2691:89"><name pos:start="2691:79" pos:end="2691:84">JNIEnv</name><modifier pos:start="2691:85" pos:end="2691:85">*</modifier></type> <name pos:start="2691:87" pos:end="2691:89">env</name></decl></parameter>, <parameter pos:start="2691:92" pos:end="2691:102"><decl pos:start="2691:92" pos:end="2691:102"><type pos:start="2691:92" pos:end="2691:102"><name pos:start="2691:92" pos:end="2691:98">jobject</name></type> <name pos:start="2691:100" pos:end="2691:102">obj</name></decl></parameter>,
        <parameter pos:start="2692:9" pos:end="2692:30"><decl pos:start="2692:9" pos:end="2692:30"><type pos:start="2692:9" pos:end="2692:30"><name pos:start="2692:9" pos:end="2692:15">jobject</name></type> <name pos:start="2692:17" pos:end="2692:30">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="2692:33" pos:end="2712:1">{<block_content pos:start="2695:5" pos:end="2711:5">
    <comment type="line" pos:start="2693:5" pos:end="2693:40">// LOGD("ENTER shutdownOutputImpl");</comment>

    <decl_stmt pos:start="2695:5" pos:end="2695:12"><decl pos:start="2695:5" pos:end="2695:11"><type pos:start="2695:5" pos:end="2695:7"><name pos:start="2695:5" pos:end="2695:7">int</name></type> <name pos:start="2695:9" pos:end="2695:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2696:5" pos:end="2696:15"><decl pos:start="2696:5" pos:end="2696:14"><type pos:start="2696:5" pos:end="2696:7"><name pos:start="2696:5" pos:end="2696:7">int</name></type> <name pos:start="2696:9" pos:end="2696:14">handle</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2698:5" pos:end="2698:61"><expr pos:start="2698:5" pos:end="2698:60"><name pos:start="2698:5" pos:end="2698:10">handle</name> <operator pos:start="2698:12" pos:end="2698:12">=</operator> <call pos:start="2698:14" pos:end="2698:60"><name pos:start="2698:14" pos:end="2698:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2698:40" pos:end="2698:60">(<argument pos:start="2698:41" pos:end="2698:43"><expr pos:start="2698:41" pos:end="2698:43"><name pos:start="2698:41" pos:end="2698:43">env</name></expr></argument>, <argument pos:start="2698:46" pos:end="2698:59"><expr pos:start="2698:46" pos:end="2698:59"><name pos:start="2698:46" pos:end="2698:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2700:5" pos:end="2702:5"><if pos:start="2700:5" pos:end="2702:5">if <condition pos:start="2700:8" pos:end="2700:36">(<expr pos:start="2700:9" pos:end="2700:35"><name pos:start="2700:9" pos:end="2700:14">handle</name> <operator pos:start="2700:16" pos:end="2700:17">==</operator> <literal type="number" pos:start="2700:19" pos:end="2700:19">0</literal> <operator pos:start="2700:21" pos:end="2700:22">||</operator> <name pos:start="2700:24" pos:end="2700:29">handle</name> <operator pos:start="2700:31" pos:end="2700:32">==</operator> <operator pos:start="2700:34" pos:end="2700:34">-</operator><literal type="number" pos:start="2700:35" pos:end="2700:35">1</literal></expr>)</condition> <block pos:start="2700:38" pos:end="2702:5">{<block_content pos:start="2701:9" pos:end="2701:15">
        <return pos:start="2701:9" pos:end="2701:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2704:5" pos:end="2704:36"><expr pos:start="2704:5" pos:end="2704:35"><name pos:start="2704:5" pos:end="2704:7">ret</name> <operator pos:start="2704:9" pos:end="2704:9">=</operator> <call pos:start="2704:11" pos:end="2704:35"><name pos:start="2704:11" pos:end="2704:18">shutdown</name><argument_list pos:start="2704:19" pos:end="2704:35">(<argument pos:start="2704:20" pos:end="2704:25"><expr pos:start="2704:20" pos:end="2704:25"><name pos:start="2704:20" pos:end="2704:25">handle</name></expr></argument>, <argument pos:start="2704:28" pos:end="2704:34"><expr pos:start="2704:28" pos:end="2704:34"><name pos:start="2704:28" pos:end="2704:34">SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2706:5" pos:end="2711:5"><if pos:start="2706:5" pos:end="2711:5">if <condition pos:start="2706:8" pos:end="2706:16">(<expr pos:start="2706:9" pos:end="2706:15"><name pos:start="2706:9" pos:end="2706:11">ret</name> <operator pos:start="2706:13" pos:end="2706:13">&lt;</operator> <literal type="number" pos:start="2706:15" pos:end="2706:15">0</literal></expr>)</condition> <block pos:start="2706:18" pos:end="2711:5">{<block_content pos:start="2707:9" pos:end="2710:15">
        <decl_stmt pos:start="2707:9" pos:end="2707:38"><decl pos:start="2707:9" pos:end="2707:37"><type pos:start="2707:9" pos:end="2707:11"><name pos:start="2707:9" pos:end="2707:11">int</name></type> <name pos:start="2707:13" pos:end="2707:15">err</name> <init pos:start="2707:17" pos:end="2707:37">= <expr pos:start="2707:19" pos:end="2707:37"><call pos:start="2707:19" pos:end="2707:37"><name pos:start="2707:19" pos:end="2707:30">convertError</name><argument_list pos:start="2707:31" pos:end="2707:37">(<argument pos:start="2707:32" pos:end="2707:36"><expr pos:start="2707:32" pos:end="2707:36"><name pos:start="2707:32" pos:end="2707:36">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2708:9" pos:end="2708:38"><expr pos:start="2708:9" pos:end="2708:37"><call pos:start="2708:9" pos:end="2708:37"><name pos:start="2708:9" pos:end="2708:24">log_socket_close</name><argument_list pos:start="2708:25" pos:end="2708:37">(<argument pos:start="2708:26" pos:end="2708:31"><expr pos:start="2708:26" pos:end="2708:31"><name pos:start="2708:26" pos:end="2708:31">handle</name></expr></argument>, <argument pos:start="2708:34" pos:end="2708:36"><expr pos:start="2708:34" pos:end="2708:36"><name pos:start="2708:34" pos:end="2708:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2709:9" pos:end="2709:39"><expr pos:start="2709:9" pos:end="2709:38"><call pos:start="2709:9" pos:end="2709:38"><name pos:start="2709:9" pos:end="2709:28">throwSocketException</name><argument_list pos:start="2709:29" pos:end="2709:38">(<argument pos:start="2709:30" pos:end="2709:32"><expr pos:start="2709:30" pos:end="2709:32"><name pos:start="2709:30" pos:end="2709:32">env</name></expr></argument>, <argument pos:start="2709:35" pos:end="2709:37"><expr pos:start="2709:35" pos:end="2709:37"><name pos:start="2709:35" pos:end="2709:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2710:9" pos:end="2710:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2714:1" pos:end="2781:1">extern <literal type="string" pos:start="2714:8" pos:end="2714:10">"C"</literal> <function pos:start="2714:12" pos:end="2781:1"><type pos:start="2714:12" pos:end="2714:15"><name pos:start="2714:12" pos:end="2714:15">jint</name></type> <name pos:start="2714:17" pos:end="2714:76">Java_org_sipdroid_net_impl_OSNetworkSystem_sendDatagramImpl2</name><parameter_list pos:start="2714:77" pos:end="2716:28">(<parameter pos:start="2714:78" pos:end="2714:88"><decl pos:start="2714:78" pos:end="2714:88"><type pos:start="2714:78" pos:end="2714:88"><name pos:start="2714:78" pos:end="2714:83">JNIEnv</name><modifier pos:start="2714:84" pos:end="2714:84">*</modifier></type> <name pos:start="2714:86" pos:end="2714:88">env</name></decl></parameter>, <parameter pos:start="2714:91" pos:end="2714:102"><decl pos:start="2714:91" pos:end="2714:102"><type pos:start="2714:91" pos:end="2714:102"><name pos:start="2714:91" pos:end="2714:96">jclass</name></type> <name pos:start="2714:98" pos:end="2714:102">clazz</name></decl></parameter>,
        <parameter pos:start="2715:9" pos:end="2715:18"><decl pos:start="2715:9" pos:end="2715:18"><type pos:start="2715:9" pos:end="2715:18"><name pos:start="2715:9" pos:end="2715:15">jobject</name></type> <name pos:start="2715:17" pos:end="2715:18">fd</name></decl></parameter>, <parameter pos:start="2715:21" pos:end="2715:35"><decl pos:start="2715:21" pos:end="2715:35"><type pos:start="2715:21" pos:end="2715:35"><name pos:start="2715:21" pos:end="2715:30">jbyteArray</name></type> <name pos:start="2715:32" pos:end="2715:35">data</name></decl></parameter>, <parameter pos:start="2715:38" pos:end="2715:48"><decl pos:start="2715:38" pos:end="2715:48"><type pos:start="2715:38" pos:end="2715:48"><name pos:start="2715:38" pos:end="2715:41">jint</name></type> <name pos:start="2715:43" pos:end="2715:48">offset</name></decl></parameter>, <parameter pos:start="2715:51" pos:end="2715:61"><decl pos:start="2715:51" pos:end="2715:61"><type pos:start="2715:51" pos:end="2715:61"><name pos:start="2715:51" pos:end="2715:54">jint</name></type> <name pos:start="2715:56" pos:end="2715:61">length</name></decl></parameter>, <parameter pos:start="2715:64" pos:end="2715:72"><decl pos:start="2715:64" pos:end="2715:72"><type pos:start="2715:64" pos:end="2715:72"><name pos:start="2715:64" pos:end="2715:67">jint</name></type> <name pos:start="2715:69" pos:end="2715:72">port</name></decl></parameter>,
        <parameter pos:start="2716:9" pos:end="2716:27"><decl pos:start="2716:9" pos:end="2716:27"><type pos:start="2716:9" pos:end="2716:27"><name pos:start="2716:9" pos:end="2716:15">jobject</name></type> <name pos:start="2716:17" pos:end="2716:27">inetAddress</name></decl></parameter>)</parameter_list> <block pos:start="2716:30" pos:end="2781:1">{<block_content pos:start="2719:5" pos:end="2780:16">
    <comment type="line" pos:start="2717:5" pos:end="2717:39">// LOGD("ENTER sendDatagramImpl2");</comment>

    <decl_stmt pos:start="2719:5" pos:end="2719:19"><decl pos:start="2719:5" pos:end="2719:18"><type pos:start="2719:5" pos:end="2719:11"><name pos:start="2719:5" pos:end="2719:9">jbyte</name> <modifier pos:start="2719:11" pos:end="2719:11">*</modifier></type><name pos:start="2719:12" pos:end="2719:18">message</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2720:5" pos:end="2720:28"><decl pos:start="2720:5" pos:end="2720:27"><type pos:start="2720:5" pos:end="2720:9"><name pos:start="2720:5" pos:end="2720:9">jbyte</name></type> <name pos:start="2720:11" pos:end="2720:27"><name pos:start="2720:11" pos:end="2720:24">nhostAddrBytes</name><index pos:start="2720:25" pos:end="2720:27">[<expr pos:start="2720:26" pos:end="2720:26"><literal type="number" pos:start="2720:26" pos:end="2720:26">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2721:5" pos:end="2721:25"><decl pos:start="2721:5" pos:end="2721:24"><type pos:start="2721:5" pos:end="2721:18"><name pos:start="2721:5" pos:end="2721:12">unsigned</name> <name pos:start="2721:14" pos:end="2721:18">short</name></type> <name pos:start="2721:20" pos:end="2721:24">nPort</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2722:5" pos:end="2722:29"><decl pos:start="2722:5" pos:end="2722:18"><type pos:start="2722:5" pos:end="2722:7"><name pos:start="2722:5" pos:end="2722:7">int</name></type> <name pos:start="2722:9" pos:end="2722:14">result</name> <init pos:start="2722:16" pos:end="2722:18">= <expr pos:start="2722:18" pos:end="2722:18"><literal type="number" pos:start="2722:18" pos:end="2722:18">0</literal></expr></init></decl>, <decl pos:start="2722:21" pos:end="2722:28"><type ref="prev" pos:start="2722:5" pos:end="2722:7"/><name pos:start="2722:21" pos:end="2722:24">sent</name> <init pos:start="2722:26" pos:end="2722:28">= <expr pos:start="2722:28" pos:end="2722:28"><literal type="number" pos:start="2722:28" pos:end="2722:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2723:5" pos:end="2723:19"><decl pos:start="2723:5" pos:end="2723:18"><type pos:start="2723:5" pos:end="2723:7"><name pos:start="2723:5" pos:end="2723:7">int</name></type> <name pos:start="2723:9" pos:end="2723:14">handle</name> <init pos:start="2723:16" pos:end="2723:18">= <expr pos:start="2723:18" pos:end="2723:18"><literal type="number" pos:start="2723:18" pos:end="2723:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2724:5" pos:end="2724:33"><decl pos:start="2724:5" pos:end="2724:32"><type pos:start="2724:5" pos:end="2724:22"><name pos:start="2724:5" pos:end="2724:22"><name pos:start="2724:5" pos:end="2724:10">struct</name> <name pos:start="2724:12" pos:end="2724:22">sockaddr_in</name></name></type> <name pos:start="2724:24" pos:end="2724:32">sockaddrP</name></decl>;</decl_stmt>

    <if_stmt pos:start="2726:5" pos:end="2742:5"><if pos:start="2726:5" pos:end="2742:5">if <condition pos:start="2726:8" pos:end="2726:28">(<expr pos:start="2726:9" pos:end="2726:27"><name pos:start="2726:9" pos:end="2726:19">inetAddress</name> <operator pos:start="2726:21" pos:end="2726:22">!=</operator> <name pos:start="2726:24" pos:end="2726:27">NULL</name></expr>)</condition> <block pos:start="2726:30" pos:end="2742:5">{<block_content pos:start="2728:9" pos:end="2741:9">

        <expr_stmt pos:start="2728:9" pos:end="2729:51"><expr pos:start="2728:9" pos:end="2729:50"><name pos:start="2728:9" pos:end="2728:14">result</name> <operator pos:start="2728:16" pos:end="2728:16">=</operator> <call pos:start="2728:18" pos:end="2729:50"><name pos:start="2728:18" pos:end="2728:43">inetAddressToSocketAddress</name><argument_list pos:start="2728:44" pos:end="2729:50">(<argument pos:start="2728:45" pos:end="2728:47"><expr pos:start="2728:45" pos:end="2728:47"><name pos:start="2728:45" pos:end="2728:47">env</name></expr></argument>, <argument pos:start="2728:50" pos:end="2728:60"><expr pos:start="2728:50" pos:end="2728:60"><name pos:start="2728:50" pos:end="2728:60">inetAddress</name></expr></argument>, <argument pos:start="2728:63" pos:end="2728:66"><expr pos:start="2728:63" pos:end="2728:66"><name pos:start="2728:63" pos:end="2728:66">port</name></expr></argument>,
                <argument pos:start="2729:17" pos:end="2729:49"><expr pos:start="2729:17" pos:end="2729:49"><operator pos:start="2729:17" pos:end="2729:17">(</operator>struct <name pos:start="2729:25" pos:end="2729:35">sockaddr_in</name> <operator pos:start="2729:37" pos:end="2729:37">*</operator><operator pos:start="2729:38" pos:end="2729:38">)</operator> <operator pos:start="2729:40" pos:end="2729:40">&amp;</operator><name pos:start="2729:41" pos:end="2729:49">sockaddrP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2731:9" pos:end="2734:9"><if pos:start="2731:9" pos:end="2734:9">if <condition pos:start="2731:12" pos:end="2731:23">(<expr pos:start="2731:13" pos:end="2731:22"><name pos:start="2731:13" pos:end="2731:18">result</name> <operator pos:start="2731:20" pos:end="2731:20">&lt;</operator> <literal type="number" pos:start="2731:22" pos:end="2731:22">0</literal></expr>)</condition> <block pos:start="2731:25" pos:end="2734:9">{<block_content pos:start="2732:13" pos:end="2733:21">
            <expr_stmt pos:start="2732:13" pos:end="2732:57"><expr pos:start="2732:13" pos:end="2732:56"><call pos:start="2732:13" pos:end="2732:56"><name pos:start="2732:13" pos:end="2732:32">throwSocketException</name><argument_list pos:start="2732:33" pos:end="2732:56">(<argument pos:start="2732:34" pos:end="2732:36"><expr pos:start="2732:34" pos:end="2732:36"><name pos:start="2732:34" pos:end="2732:36">env</name></expr></argument>, <argument pos:start="2732:39" pos:end="2732:55"><expr pos:start="2732:39" pos:end="2732:55"><name pos:start="2732:39" pos:end="2732:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2733:13" pos:end="2733:21">return <expr pos:start="2733:20" pos:end="2733:20"><literal type="number" pos:start="2733:20" pos:end="2733:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2736:9" pos:end="2736:53"><expr pos:start="2736:9" pos:end="2736:52"><name pos:start="2736:9" pos:end="2736:14">handle</name> <operator pos:start="2736:16" pos:end="2736:16">=</operator> <call pos:start="2736:18" pos:end="2736:52"><name pos:start="2736:18" pos:end="2736:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2736:44" pos:end="2736:52">(<argument pos:start="2736:45" pos:end="2736:47"><expr pos:start="2736:45" pos:end="2736:47"><name pos:start="2736:45" pos:end="2736:47">env</name></expr></argument>, <argument pos:start="2736:50" pos:end="2736:51"><expr pos:start="2736:50" pos:end="2736:51"><name pos:start="2736:50" pos:end="2736:51">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2738:9" pos:end="2741:9"><if pos:start="2738:9" pos:end="2741:9">if <condition pos:start="2738:12" pos:end="2738:40">(<expr pos:start="2738:13" pos:end="2738:39"><name pos:start="2738:13" pos:end="2738:18">handle</name> <operator pos:start="2738:20" pos:end="2738:21">==</operator> <literal type="number" pos:start="2738:23" pos:end="2738:23">0</literal> <operator pos:start="2738:25" pos:end="2738:26">||</operator> <name pos:start="2738:28" pos:end="2738:33">handle</name> <operator pos:start="2738:35" pos:end="2738:36">==</operator> <operator pos:start="2738:38" pos:end="2738:38">-</operator><literal type="number" pos:start="2738:39" pos:end="2738:39">1</literal></expr>)</condition> <block pos:start="2738:42" pos:end="2741:9">{<block_content pos:start="2739:13" pos:end="2740:21">
            <expr_stmt pos:start="2739:13" pos:end="2739:57"><expr pos:start="2739:13" pos:end="2739:56"><call pos:start="2739:13" pos:end="2739:56"><name pos:start="2739:13" pos:end="2739:32">throwSocketException</name><argument_list pos:start="2739:33" pos:end="2739:56">(<argument pos:start="2739:34" pos:end="2739:36"><expr pos:start="2739:34" pos:end="2739:36"><name pos:start="2739:34" pos:end="2739:36">env</name></expr></argument>, <argument pos:start="2739:39" pos:end="2739:55"><expr pos:start="2739:39" pos:end="2739:55"><name pos:start="2739:39" pos:end="2739:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2740:13" pos:end="2740:21">return <expr pos:start="2740:20" pos:end="2740:20"><literal type="number" pos:start="2740:20" pos:end="2740:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2744:5" pos:end="2744:54"><expr pos:start="2744:5" pos:end="2744:53"><name pos:start="2744:5" pos:end="2744:11">message</name> <operator pos:start="2744:13" pos:end="2744:13">=</operator> <operator pos:start="2744:15" pos:end="2744:15">(</operator><name pos:start="2744:16" pos:end="2744:20">jbyte</name><operator pos:start="2744:21" pos:end="2744:21">*</operator><operator pos:start="2744:22" pos:end="2744:22">)</operator> <call pos:start="2744:24" pos:end="2744:53"><name pos:start="2744:24" pos:end="2744:29">malloc</name><argument_list pos:start="2744:30" pos:end="2744:53">(<argument pos:start="2744:31" pos:end="2744:52"><expr pos:start="2744:31" pos:end="2744:52"><name pos:start="2744:31" pos:end="2744:36">length</name> <operator pos:start="2744:38" pos:end="2744:38">*</operator> <sizeof pos:start="2744:40" pos:end="2744:52">sizeof<argument_list pos:start="2744:46" pos:end="2744:52">(<argument pos:start="2744:47" pos:end="2744:51"><expr pos:start="2744:47" pos:end="2744:51"><name pos:start="2744:47" pos:end="2744:51">jbyte</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2745:5" pos:end="2749:5"><if pos:start="2745:5" pos:end="2749:5">if <condition pos:start="2745:8" pos:end="2745:24">(<expr pos:start="2745:9" pos:end="2745:23"><name pos:start="2745:9" pos:end="2745:15">message</name> <operator pos:start="2745:17" pos:end="2745:18">==</operator> <name pos:start="2745:20" pos:end="2745:23">NULL</name></expr>)</condition> <block pos:start="2745:26" pos:end="2749:5">{<block_content pos:start="2746:9" pos:end="2748:17">
        <expr_stmt pos:start="2746:9" pos:end="2747:66"><expr pos:start="2746:9" pos:end="2747:65"><call pos:start="2746:9" pos:end="2747:65"><name pos:start="2746:9" pos:end="2746:25">jniThrowException</name><argument_list pos:start="2746:26" pos:end="2747:65">(<argument pos:start="2746:27" pos:end="2746:29"><expr pos:start="2746:27" pos:end="2746:29"><name pos:start="2746:27" pos:end="2746:29">env</name></expr></argument>, <argument pos:start="2746:32" pos:end="2746:59"><expr pos:start="2746:32" pos:end="2746:59"><literal type="string" pos:start="2746:32" pos:end="2746:59">"java/lang/OutOfMemoryError"</literal></expr></argument>,
                <argument pos:start="2747:17" pos:end="2747:64"><expr pos:start="2747:17" pos:end="2747:64"><literal type="string" pos:start="2747:17" pos:end="2747:64">"couldn't allocate enough memory for readSocket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2748:9" pos:end="2748:17">return <expr pos:start="2748:16" pos:end="2748:16"><literal type="number" pos:start="2748:16" pos:end="2748:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2751:5" pos:end="2751:59"><expr pos:start="2751:5" pos:end="2751:58"><call pos:start="2751:5" pos:end="2751:58"><name pos:start="2751:5" pos:end="2751:27"><name pos:start="2751:5" pos:end="2751:7">env</name><operator pos:start="2751:8" pos:end="2751:9">-&gt;</operator><name pos:start="2751:10" pos:end="2751:27">GetByteArrayRegion</name></name><argument_list pos:start="2751:28" pos:end="2751:58">(<argument pos:start="2751:29" pos:end="2751:32"><expr pos:start="2751:29" pos:end="2751:32"><name pos:start="2751:29" pos:end="2751:32">data</name></expr></argument>, <argument pos:start="2751:35" pos:end="2751:40"><expr pos:start="2751:35" pos:end="2751:40"><name pos:start="2751:35" pos:end="2751:40">offset</name></expr></argument>, <argument pos:start="2751:43" pos:end="2751:48"><expr pos:start="2751:43" pos:end="2751:48"><name pos:start="2751:43" pos:end="2751:48">length</name></expr></argument>, <argument pos:start="2751:51" pos:end="2751:57"><expr pos:start="2751:51" pos:end="2751:57"><name pos:start="2751:51" pos:end="2751:57">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="2753:5" pos:end="2776:5">while <condition pos:start="2753:11" pos:end="2753:25">(<expr pos:start="2753:12" pos:end="2753:24"><name pos:start="2753:12" pos:end="2753:15">sent</name> <operator pos:start="2753:17" pos:end="2753:17">&lt;</operator> <name pos:start="2753:19" pos:end="2753:24">length</name></expr>)</condition> <block pos:start="2753:27" pos:end="2776:5">{<block_content pos:start="2754:9" pos:end="2775:23">
        <expr_stmt pos:start="2754:9" pos:end="2754:53"><expr pos:start="2754:9" pos:end="2754:52"><name pos:start="2754:9" pos:end="2754:14">handle</name> <operator pos:start="2754:16" pos:end="2754:16">=</operator> <call pos:start="2754:18" pos:end="2754:52"><name pos:start="2754:18" pos:end="2754:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2754:44" pos:end="2754:52">(<argument pos:start="2754:45" pos:end="2754:47"><expr pos:start="2754:45" pos:end="2754:47"><name pos:start="2754:45" pos:end="2754:47">env</name></expr></argument>, <argument pos:start="2754:50" pos:end="2754:51"><expr pos:start="2754:50" pos:end="2754:51"><name pos:start="2754:50" pos:end="2754:51">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2756:9" pos:end="2761:9"><if pos:start="2756:9" pos:end="2761:9">if <condition pos:start="2756:12" pos:end="2756:40">(<expr pos:start="2756:13" pos:end="2756:39"><name pos:start="2756:13" pos:end="2756:18">handle</name> <operator pos:start="2756:20" pos:end="2756:21">==</operator> <literal type="number" pos:start="2756:23" pos:end="2756:23">0</literal> <operator pos:start="2756:25" pos:end="2756:26">||</operator> <name pos:start="2756:28" pos:end="2756:33">handle</name> <operator pos:start="2756:35" pos:end="2756:36">==</operator> <operator pos:start="2756:38" pos:end="2756:38">-</operator><literal type="number" pos:start="2756:39" pos:end="2756:39">1</literal></expr>)</condition> <block pos:start="2756:42" pos:end="2761:9">{<block_content pos:start="2757:13" pos:end="2760:21">
            <expr_stmt pos:start="2757:13" pos:end="2758:73"><expr pos:start="2757:13" pos:end="2758:72"><call pos:start="2757:13" pos:end="2758:72"><name pos:start="2757:13" pos:end="2757:32">throwSocketException</name><argument_list pos:start="2757:33" pos:end="2758:72">(<argument pos:start="2757:34" pos:end="2757:36"><expr pos:start="2757:34" pos:end="2757:36"><name pos:start="2757:34" pos:end="2757:36">env</name></expr></argument>,
                    <argument pos:start="2758:21" pos:end="2758:71"><expr pos:start="2758:21" pos:end="2758:71"><ternary pos:start="2758:21" pos:end="2758:71"><condition pos:start="2758:21" pos:end="2758:31"><expr pos:start="2758:21" pos:end="2758:29"><name pos:start="2758:21" pos:end="2758:24">sent</name> <operator pos:start="2758:26" pos:end="2758:27">==</operator> <literal type="number" pos:start="2758:29" pos:end="2758:29">0</literal></expr> ?</condition><then pos:start="2758:33" pos:end="2758:49"> <expr pos:start="2758:33" pos:end="2758:49"><name pos:start="2758:33" pos:end="2758:49">SOCKERR_BADSOCKET</name></expr> </then><else pos:start="2758:51" pos:end="2758:71">: <expr pos:start="2758:53" pos:end="2758:71"><name pos:start="2758:53" pos:end="2758:71">SOCKERR_INTERRUPTED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2759:13" pos:end="2759:26"><expr pos:start="2759:13" pos:end="2759:25"><call pos:start="2759:13" pos:end="2759:25"><name pos:start="2759:13" pos:end="2759:16">free</name><argument_list pos:start="2759:17" pos:end="2759:25">(<argument pos:start="2759:18" pos:end="2759:24"><expr pos:start="2759:18" pos:end="2759:24"><name pos:start="2759:18" pos:end="2759:24">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2760:13" pos:end="2760:21">return <expr pos:start="2760:20" pos:end="2760:20"><literal type="number" pos:start="2760:20" pos:end="2760:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2763:9" pos:end="2765:67"><expr pos:start="2763:9" pos:end="2765:66"><name pos:start="2763:9" pos:end="2763:14">result</name> <operator pos:start="2763:16" pos:end="2763:16">=</operator> <call pos:start="2763:18" pos:end="2765:66"><name pos:start="2763:18" pos:end="2763:23">sendto</name><argument_list pos:start="2763:24" pos:end="2765:66">(<argument pos:start="2763:25" pos:end="2763:30"><expr pos:start="2763:25" pos:end="2763:30"><name pos:start="2763:25" pos:end="2763:30">handle</name></expr></argument>, <argument pos:start="2763:33" pos:end="2763:57"><expr pos:start="2763:33" pos:end="2763:57"><operator pos:start="2763:33" pos:end="2763:33">(</operator><name pos:start="2763:34" pos:end="2763:37">char</name> <operator pos:start="2763:39" pos:end="2763:39">*</operator><operator pos:start="2763:40" pos:end="2763:40">)</operator> <operator pos:start="2763:42" pos:end="2763:42">(</operator><name pos:start="2763:43" pos:end="2763:49">message</name> <operator pos:start="2763:51" pos:end="2763:51">+</operator> <name pos:start="2763:53" pos:end="2763:56">sent</name><operator pos:start="2763:57" pos:end="2763:57">)</operator></expr></argument>,
                <argument pos:start="2764:17" pos:end="2764:37"><expr pos:start="2764:17" pos:end="2764:37"><operator pos:start="2764:17" pos:end="2764:17">(</operator><name pos:start="2764:18" pos:end="2764:20">int</name><operator pos:start="2764:21" pos:end="2764:21">)</operator> <operator pos:start="2764:23" pos:end="2764:23">(</operator><name pos:start="2764:24" pos:end="2764:29">length</name> <operator pos:start="2764:31" pos:end="2764:31">-</operator> <name pos:start="2764:33" pos:end="2764:36">sent</name><operator pos:start="2764:37" pos:end="2764:37">)</operator></expr></argument>, <argument pos:start="2764:40" pos:end="2764:53"><expr pos:start="2764:40" pos:end="2764:53"><name pos:start="2764:40" pos:end="2764:53">SOCKET_NOFLAGS</name></expr></argument>,
                <argument pos:start="2765:17" pos:end="2765:46"><expr pos:start="2765:17" pos:end="2765:46"><operator pos:start="2765:17" pos:end="2765:17">(</operator>struct <name pos:start="2765:25" pos:end="2765:32">sockaddr</name> <operator pos:start="2765:34" pos:end="2765:34">*</operator><operator pos:start="2765:35" pos:end="2765:35">)</operator> <operator pos:start="2765:37" pos:end="2765:37">&amp;</operator><name pos:start="2765:38" pos:end="2765:46">sockaddrP</name></expr></argument>, <argument pos:start="2765:49" pos:end="2765:65"><expr pos:start="2765:49" pos:end="2765:65"><sizeof pos:start="2765:49" pos:end="2765:65">sizeof<argument_list pos:start="2765:55" pos:end="2765:65">(<argument pos:start="2765:56" pos:end="2765:64"><expr pos:start="2765:56" pos:end="2765:64"><name pos:start="2765:56" pos:end="2765:64">sockaddrP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2767:9" pos:end="2773:9"><if pos:start="2767:9" pos:end="2773:9">if <condition pos:start="2767:12" pos:end="2767:23">(<expr pos:start="2767:13" pos:end="2767:22"><name pos:start="2767:13" pos:end="2767:18">result</name> <operator pos:start="2767:20" pos:end="2767:20">&lt;</operator> <literal type="number" pos:start="2767:22" pos:end="2767:22">0</literal></expr>)</condition> <block pos:start="2767:25" pos:end="2773:9">{<block_content pos:start="2768:13" pos:end="2772:21">
            <decl_stmt pos:start="2768:13" pos:end="2768:42"><decl pos:start="2768:13" pos:end="2768:41"><type pos:start="2768:13" pos:end="2768:15"><name pos:start="2768:13" pos:end="2768:15">int</name></type> <name pos:start="2768:17" pos:end="2768:19">err</name> <init pos:start="2768:21" pos:end="2768:41">= <expr pos:start="2768:23" pos:end="2768:41"><call pos:start="2768:23" pos:end="2768:41"><name pos:start="2768:23" pos:end="2768:34">convertError</name><argument_list pos:start="2768:35" pos:end="2768:41">(<argument pos:start="2768:36" pos:end="2768:40"><expr pos:start="2768:36" pos:end="2768:40"><name pos:start="2768:36" pos:end="2768:40">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2769:13" pos:end="2769:42"><expr pos:start="2769:13" pos:end="2769:41"><call pos:start="2769:13" pos:end="2769:41"><name pos:start="2769:13" pos:end="2769:28">log_socket_close</name><argument_list pos:start="2769:29" pos:end="2769:41">(<argument pos:start="2769:30" pos:end="2769:35"><expr pos:start="2769:30" pos:end="2769:35"><name pos:start="2769:30" pos:end="2769:35">handle</name></expr></argument>, <argument pos:start="2769:38" pos:end="2769:40"><expr pos:start="2769:38" pos:end="2769:40"><name pos:start="2769:38" pos:end="2769:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2770:13" pos:end="2770:43"><expr pos:start="2770:13" pos:end="2770:42"><call pos:start="2770:13" pos:end="2770:42"><name pos:start="2770:13" pos:end="2770:32">throwSocketException</name><argument_list pos:start="2770:33" pos:end="2770:42">(<argument pos:start="2770:34" pos:end="2770:36"><expr pos:start="2770:34" pos:end="2770:36"><name pos:start="2770:34" pos:end="2770:36">env</name></expr></argument>, <argument pos:start="2770:39" pos:end="2770:41"><expr pos:start="2770:39" pos:end="2770:41"><name pos:start="2770:39" pos:end="2770:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2771:13" pos:end="2771:26"><expr pos:start="2771:13" pos:end="2771:25"><call pos:start="2771:13" pos:end="2771:25"><name pos:start="2771:13" pos:end="2771:16">free</name><argument_list pos:start="2771:17" pos:end="2771:25">(<argument pos:start="2771:18" pos:end="2771:24"><expr pos:start="2771:18" pos:end="2771:24"><name pos:start="2771:18" pos:end="2771:24">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2772:13" pos:end="2772:21">return <expr pos:start="2772:20" pos:end="2772:20"><literal type="number" pos:start="2772:20" pos:end="2772:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2775:9" pos:end="2775:23"><expr pos:start="2775:9" pos:end="2775:22"><name pos:start="2775:9" pos:end="2775:12">sent</name> <operator pos:start="2775:14" pos:end="2775:15">+=</operator> <name pos:start="2775:17" pos:end="2775:22">result</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="2778:5" pos:end="2778:18"><expr pos:start="2778:5" pos:end="2778:17"><call pos:start="2778:5" pos:end="2778:17"><name pos:start="2778:5" pos:end="2778:8">free</name><argument_list pos:start="2778:9" pos:end="2778:17">(<argument pos:start="2778:10" pos:end="2778:16"><expr pos:start="2778:10" pos:end="2778:16"><name pos:start="2778:10" pos:end="2778:16">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2779:5" pos:end="2779:33"><expr pos:start="2779:5" pos:end="2779:32"><call pos:start="2779:5" pos:end="2779:32"><name pos:start="2779:5" pos:end="2779:18">add_send_stats</name><argument_list pos:start="2779:19" pos:end="2779:32">(<argument pos:start="2779:20" pos:end="2779:25"><expr pos:start="2779:20" pos:end="2779:25"><name pos:start="2779:20" pos:end="2779:25">handle</name></expr></argument>, <argument pos:start="2779:28" pos:end="2779:31"><expr pos:start="2779:28" pos:end="2779:31"><name pos:start="2779:28" pos:end="2779:31">sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2780:5" pos:end="2780:16">return <expr pos:start="2780:12" pos:end="2780:15"><name pos:start="2780:12" pos:end="2780:15">sent</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2783:1" pos:end="2888:1">extern <literal type="string" pos:start="2783:8" pos:end="2783:10">"C"</literal> <function pos:start="2783:12" pos:end="2888:1"><type pos:start="2783:12" pos:end="2783:15"><name pos:start="2783:12" pos:end="2783:15">jint</name></type> <name pos:start="2783:17" pos:end="2783:69">Java_org_sipdroid_net_impl_OSNetworkSystem_selectImpl</name><parameter_list pos:start="2783:70" pos:end="2785:60">(<parameter pos:start="2783:71" pos:end="2783:81"><decl pos:start="2783:71" pos:end="2783:81"><type pos:start="2783:71" pos:end="2783:81"><name pos:start="2783:71" pos:end="2783:76">JNIEnv</name><modifier pos:start="2783:77" pos:end="2783:77">*</modifier></type> <name pos:start="2783:79" pos:end="2783:81">env</name></decl></parameter>, <parameter pos:start="2783:84" pos:end="2783:95"><decl pos:start="2783:84" pos:end="2783:95"><type pos:start="2783:84" pos:end="2783:95"><name pos:start="2783:84" pos:end="2783:89">jclass</name></type> <name pos:start="2783:91" pos:end="2783:95">clazz</name></decl></parameter>,
        <parameter pos:start="2784:9" pos:end="2784:32"><decl pos:start="2784:9" pos:end="2784:32"><type pos:start="2784:9" pos:end="2784:32"><name pos:start="2784:9" pos:end="2784:20">jobjectArray</name></type> <name pos:start="2784:22" pos:end="2784:32">readFDArray</name></decl></parameter>, <parameter pos:start="2784:35" pos:end="2784:59"><decl pos:start="2784:35" pos:end="2784:59"><type pos:start="2784:35" pos:end="2784:59"><name pos:start="2784:35" pos:end="2784:46">jobjectArray</name></type> <name pos:start="2784:48" pos:end="2784:59">writeFDArray</name></decl></parameter>, <parameter pos:start="2784:62" pos:end="2784:76"><decl pos:start="2784:62" pos:end="2784:76"><type pos:start="2784:62" pos:end="2784:76"><name pos:start="2784:62" pos:end="2784:65">jint</name></type> <name pos:start="2784:67" pos:end="2784:76">countReadC</name></decl></parameter>,
        <parameter pos:start="2785:9" pos:end="2785:24"><decl pos:start="2785:9" pos:end="2785:24"><type pos:start="2785:9" pos:end="2785:24"><name pos:start="2785:9" pos:end="2785:12">jint</name></type> <name pos:start="2785:14" pos:end="2785:24">countWriteC</name></decl></parameter>, <parameter pos:start="2785:27" pos:end="2785:44"><decl pos:start="2785:27" pos:end="2785:44"><type pos:start="2785:27" pos:end="2785:44"><name pos:start="2785:27" pos:end="2785:35">jintArray</name></type> <name pos:start="2785:37" pos:end="2785:44">outFlags</name></decl></parameter>, <parameter pos:start="2785:47" pos:end="2785:59"><decl pos:start="2785:47" pos:end="2785:59"><type pos:start="2785:47" pos:end="2785:59"><name pos:start="2785:47" pos:end="2785:51">jlong</name></type> <name pos:start="2785:53" pos:end="2785:59">timeout</name></decl></parameter>)</parameter_list> <block pos:start="2785:62" pos:end="2888:1">{<block_content pos:start="2788:5" pos:end="2887:18">
    <comment type="line" pos:start="2786:5" pos:end="2786:32">// LOGD("ENTER selectImpl");</comment>

    <decl_stmt pos:start="2788:5" pos:end="2788:25"><decl pos:start="2788:5" pos:end="2788:24"><type pos:start="2788:5" pos:end="2788:18"><name pos:start="2788:5" pos:end="2788:18"><name pos:start="2788:5" pos:end="2788:10">struct</name> <name pos:start="2788:12" pos:end="2788:18">timeval</name></name></type> <name pos:start="2788:20" pos:end="2788:24">timeP</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2789:5" pos:end="2789:19"><decl pos:start="2789:5" pos:end="2789:18"><type pos:start="2789:5" pos:end="2789:7"><name pos:start="2789:5" pos:end="2789:7">int</name></type> <name pos:start="2789:9" pos:end="2789:14">result</name> <init pos:start="2789:16" pos:end="2789:18">= <expr pos:start="2789:18" pos:end="2789:18"><literal type="number" pos:start="2789:18" pos:end="2789:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2790:5" pos:end="2790:17"><decl pos:start="2790:5" pos:end="2790:16"><type pos:start="2790:5" pos:end="2790:7"><name pos:start="2790:5" pos:end="2790:7">int</name></type> <name pos:start="2790:9" pos:end="2790:12">size</name> <init pos:start="2790:14" pos:end="2790:16">= <expr pos:start="2790:16" pos:end="2790:16"><literal type="number" pos:start="2790:16" pos:end="2790:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2791:5" pos:end="2791:18"><decl pos:start="2791:5" pos:end="2791:17"><type pos:start="2791:5" pos:end="2791:11"><name pos:start="2791:5" pos:end="2791:11">jobject</name></type> <name pos:start="2791:13" pos:end="2791:17">gotFD</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2792:5" pos:end="2792:36"><decl pos:start="2792:5" pos:end="2792:22"><type pos:start="2792:5" pos:end="2792:12"><name pos:start="2792:5" pos:end="2792:10">fd_set</name> <modifier pos:start="2792:12" pos:end="2792:12">*</modifier></type><name pos:start="2792:13" pos:end="2792:22">fdset_read</name></decl>,<decl pos:start="2792:24" pos:end="2792:35"><type ref="prev" pos:start="2792:5" pos:end="2792:12"><modifier pos:start="2792:24" pos:end="2792:24">*</modifier></type><name pos:start="2792:25" pos:end="2792:35">fdset_write</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2793:5" pos:end="2793:15"><decl pos:start="2793:5" pos:end="2793:14"><type pos:start="2793:5" pos:end="2793:7"><name pos:start="2793:5" pos:end="2793:7">int</name></type> <name pos:start="2793:9" pos:end="2793:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2794:5" pos:end="2794:21"><decl pos:start="2794:5" pos:end="2794:19"><type pos:start="2794:5" pos:end="2794:12"><name pos:start="2794:5" pos:end="2794:12">jboolean</name></type> <name pos:start="2794:14" pos:end="2794:19">isCopy</name></decl> ;</decl_stmt>
    <decl_stmt pos:start="2795:5" pos:end="2795:20"><decl pos:start="2795:5" pos:end="2795:19"><type pos:start="2795:5" pos:end="2795:10"><name pos:start="2795:5" pos:end="2795:8">jint</name> <modifier pos:start="2795:10" pos:end="2795:10">*</modifier></type><name pos:start="2795:11" pos:end="2795:19">flagArray</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2796:5" pos:end="2796:12"><decl pos:start="2796:5" pos:end="2796:11"><type pos:start="2796:5" pos:end="2796:7"><name pos:start="2796:5" pos:end="2796:7">int</name></type> <name pos:start="2796:9" pos:end="2796:11">val</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2797:5" pos:end="2797:55"><decl pos:start="2797:5" pos:end="2797:54"><type pos:start="2797:5" pos:end="2797:16"><name pos:start="2797:5" pos:end="2797:12">unsigned</name> <name pos:start="2797:14" pos:end="2797:16">int</name></type> <name pos:start="2797:18" pos:end="2797:25">time_sec</name> <init pos:start="2797:27" pos:end="2797:54">= <expr pos:start="2797:29" pos:end="2797:54"><operator pos:start="2797:29" pos:end="2797:29">(</operator><name pos:start="2797:30" pos:end="2797:37">unsigned</name> <name pos:start="2797:39" pos:end="2797:41">int</name><operator pos:start="2797:42" pos:end="2797:42">)</operator><name pos:start="2797:43" pos:end="2797:49">timeout</name><operator pos:start="2797:50" pos:end="2797:50">/</operator><literal type="number" pos:start="2797:51" pos:end="2797:54">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2798:5" pos:end="2798:58"><decl pos:start="2798:5" pos:end="2798:57"><type pos:start="2798:5" pos:end="2798:16"><name pos:start="2798:5" pos:end="2798:12">unsigned</name> <name pos:start="2798:14" pos:end="2798:16">int</name></type> <name pos:start="2798:18" pos:end="2798:26">time_msec</name> <init pos:start="2798:28" pos:end="2798:57">= <expr pos:start="2798:30" pos:end="2798:57"><operator pos:start="2798:30" pos:end="2798:30">(</operator><name pos:start="2798:31" pos:end="2798:38">unsigned</name> <name pos:start="2798:40" pos:end="2798:42">int</name><operator pos:start="2798:43" pos:end="2798:43">)</operator><operator pos:start="2798:44" pos:end="2798:44">(</operator><name pos:start="2798:45" pos:end="2798:51">timeout</name><operator pos:start="2798:52" pos:end="2798:52">%</operator><literal type="number" pos:start="2798:53" pos:end="2798:56">1000</literal><operator pos:start="2798:57" pos:end="2798:57">)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2800:5" pos:end="2800:50"><expr pos:start="2800:5" pos:end="2800:49"><name pos:start="2800:5" pos:end="2800:14">fdset_read</name> <operator pos:start="2800:16" pos:end="2800:16">=</operator> <operator pos:start="2800:18" pos:end="2800:18">(</operator><name pos:start="2800:19" pos:end="2800:24">fd_set</name> <operator pos:start="2800:26" pos:end="2800:26">*</operator><operator pos:start="2800:27" pos:end="2800:27">)</operator><call pos:start="2800:28" pos:end="2800:49"><name pos:start="2800:28" pos:end="2800:33">malloc</name><argument_list pos:start="2800:34" pos:end="2800:49">(<argument pos:start="2800:35" pos:end="2800:48"><expr pos:start="2800:35" pos:end="2800:48"><sizeof pos:start="2800:35" pos:end="2800:48">sizeof<argument_list pos:start="2800:41" pos:end="2800:48">(<argument pos:start="2800:42" pos:end="2800:47"><expr pos:start="2800:42" pos:end="2800:47"><name pos:start="2800:42" pos:end="2800:47">fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2801:5" pos:end="2801:51"><expr pos:start="2801:5" pos:end="2801:50"><name pos:start="2801:5" pos:end="2801:15">fdset_write</name> <operator pos:start="2801:17" pos:end="2801:17">=</operator> <operator pos:start="2801:19" pos:end="2801:19">(</operator><name pos:start="2801:20" pos:end="2801:25">fd_set</name> <operator pos:start="2801:27" pos:end="2801:27">*</operator><operator pos:start="2801:28" pos:end="2801:28">)</operator><call pos:start="2801:29" pos:end="2801:50"><name pos:start="2801:29" pos:end="2801:34">malloc</name><argument_list pos:start="2801:35" pos:end="2801:50">(<argument pos:start="2801:36" pos:end="2801:49"><expr pos:start="2801:36" pos:end="2801:49"><sizeof pos:start="2801:36" pos:end="2801:49">sizeof<argument_list pos:start="2801:42" pos:end="2801:49">(<argument pos:start="2801:43" pos:end="2801:48"><expr pos:start="2801:43" pos:end="2801:48"><name pos:start="2801:43" pos:end="2801:48">fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2803:5" pos:end="2803:24"><expr pos:start="2803:5" pos:end="2803:23"><call pos:start="2803:5" pos:end="2803:23"><name pos:start="2803:5" pos:end="2803:11">FD_ZERO</name><argument_list pos:start="2803:12" pos:end="2803:23">(<argument pos:start="2803:13" pos:end="2803:22"><expr pos:start="2803:13" pos:end="2803:22"><name pos:start="2803:13" pos:end="2803:22">fdset_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2804:5" pos:end="2804:25"><expr pos:start="2804:5" pos:end="2804:24"><call pos:start="2804:5" pos:end="2804:24"><name pos:start="2804:5" pos:end="2804:11">FD_ZERO</name><argument_list pos:start="2804:12" pos:end="2804:24">(<argument pos:start="2804:13" pos:end="2804:23"><expr pos:start="2804:13" pos:end="2804:23"><name pos:start="2804:13" pos:end="2804:23">fdset_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="2806:5" pos:end="2817:5">for <control pos:start="2806:9" pos:end="2806:40">(<init pos:start="2806:10" pos:end="2806:17"><expr pos:start="2806:10" pos:end="2806:16"><name pos:start="2806:10" pos:end="2806:12">val</name> <operator pos:start="2806:14" pos:end="2806:14">=</operator> <literal type="number" pos:start="2806:16" pos:end="2806:16">0</literal></expr>;</init> <condition pos:start="2806:19" pos:end="2806:33"><expr pos:start="2806:19" pos:end="2806:32"><name pos:start="2806:19" pos:end="2806:21">val</name><operator pos:start="2806:22" pos:end="2806:22">&lt;</operator><name pos:start="2806:23" pos:end="2806:32">countReadC</name></expr>;</condition> <incr pos:start="2806:35" pos:end="2806:39"><expr pos:start="2806:35" pos:end="2806:39"><name pos:start="2806:35" pos:end="2806:37">val</name><operator pos:start="2806:38" pos:end="2806:39">++</operator></expr></incr>)</control> <block pos:start="2806:42" pos:end="2817:5">{<block_content pos:start="2808:9" pos:end="2816:9">

        <expr_stmt pos:start="2808:9" pos:end="2808:60"><expr pos:start="2808:9" pos:end="2808:59"><name pos:start="2808:9" pos:end="2808:13">gotFD</name> <operator pos:start="2808:15" pos:end="2808:15">=</operator> <call pos:start="2808:17" pos:end="2808:59"><name pos:start="2808:17" pos:end="2808:42"><name pos:start="2808:17" pos:end="2808:19">env</name><operator pos:start="2808:20" pos:end="2808:21">-&gt;</operator><name pos:start="2808:22" pos:end="2808:42">GetObjectArrayElement</name></name><argument_list pos:start="2808:43" pos:end="2808:59">(<argument pos:start="2808:44" pos:end="2808:54"><expr pos:start="2808:44" pos:end="2808:54"><name pos:start="2808:44" pos:end="2808:54">readFDArray</name></expr></argument>,<argument pos:start="2808:56" pos:end="2808:58"><expr pos:start="2808:56" pos:end="2808:58"><name pos:start="2808:56" pos:end="2808:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2810:9" pos:end="2810:56"><expr pos:start="2810:9" pos:end="2810:55"><name pos:start="2810:9" pos:end="2810:14">handle</name> <operator pos:start="2810:16" pos:end="2810:16">=</operator> <call pos:start="2810:18" pos:end="2810:55"><name pos:start="2810:18" pos:end="2810:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2810:44" pos:end="2810:55">(<argument pos:start="2810:45" pos:end="2810:47"><expr pos:start="2810:45" pos:end="2810:47"><name pos:start="2810:45" pos:end="2810:47">env</name></expr></argument>, <argument pos:start="2810:50" pos:end="2810:54"><expr pos:start="2810:50" pos:end="2810:54"><name pos:start="2810:50" pos:end="2810:54">gotFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2812:9" pos:end="2812:35"><expr pos:start="2812:9" pos:end="2812:34"><call pos:start="2812:9" pos:end="2812:34"><name pos:start="2812:9" pos:end="2812:14">FD_SET</name><argument_list pos:start="2812:15" pos:end="2812:34">(<argument pos:start="2812:16" pos:end="2812:21"><expr pos:start="2812:16" pos:end="2812:21"><name pos:start="2812:16" pos:end="2812:21">handle</name></expr></argument>, <argument pos:start="2812:24" pos:end="2812:33"><expr pos:start="2812:24" pos:end="2812:33"><name pos:start="2812:24" pos:end="2812:33">fdset_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2814:9" pos:end="2816:9"><if pos:start="2814:9" pos:end="2816:9">if <condition pos:start="2814:12" pos:end="2814:32">(<expr pos:start="2814:13" pos:end="2814:31"><literal type="number" pos:start="2814:13" pos:end="2814:13">0</literal> <operator pos:start="2814:15" pos:end="2814:15">&gt;</operator> <operator pos:start="2814:17" pos:end="2814:17">(</operator><name pos:start="2814:18" pos:end="2814:21">size</name> <operator pos:start="2814:23" pos:end="2814:23">-</operator> <name pos:start="2814:25" pos:end="2814:30">handle</name><operator pos:start="2814:31" pos:end="2814:31">)</operator></expr>)</condition> <block pos:start="2814:34" pos:end="2816:9">{<block_content pos:start="2815:13" pos:end="2815:26">
            <expr_stmt pos:start="2815:13" pos:end="2815:26"><expr pos:start="2815:13" pos:end="2815:25"><name pos:start="2815:13" pos:end="2815:16">size</name> <operator pos:start="2815:18" pos:end="2815:18">=</operator> <name pos:start="2815:20" pos:end="2815:25">handle</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for pos:start="2819:5" pos:end="2830:5">for <control pos:start="2819:9" pos:end="2819:41">(<init pos:start="2819:10" pos:end="2819:17"><expr pos:start="2819:10" pos:end="2819:16"><name pos:start="2819:10" pos:end="2819:12">val</name> <operator pos:start="2819:14" pos:end="2819:14">=</operator> <literal type="number" pos:start="2819:16" pos:end="2819:16">0</literal></expr>;</init> <condition pos:start="2819:19" pos:end="2819:34"><expr pos:start="2819:19" pos:end="2819:33"><name pos:start="2819:19" pos:end="2819:21">val</name><operator pos:start="2819:22" pos:end="2819:22">&lt;</operator><name pos:start="2819:23" pos:end="2819:33">countWriteC</name></expr>;</condition> <incr pos:start="2819:36" pos:end="2819:40"><expr pos:start="2819:36" pos:end="2819:40"><name pos:start="2819:36" pos:end="2819:38">val</name><operator pos:start="2819:39" pos:end="2819:40">++</operator></expr></incr>)</control> <block pos:start="2819:43" pos:end="2830:5">{<block_content pos:start="2821:9" pos:end="2829:9">

        <expr_stmt pos:start="2821:9" pos:end="2821:61"><expr pos:start="2821:9" pos:end="2821:60"><name pos:start="2821:9" pos:end="2821:13">gotFD</name> <operator pos:start="2821:15" pos:end="2821:15">=</operator> <call pos:start="2821:17" pos:end="2821:60"><name pos:start="2821:17" pos:end="2821:42"><name pos:start="2821:17" pos:end="2821:19">env</name><operator pos:start="2821:20" pos:end="2821:21">-&gt;</operator><name pos:start="2821:22" pos:end="2821:42">GetObjectArrayElement</name></name><argument_list pos:start="2821:43" pos:end="2821:60">(<argument pos:start="2821:44" pos:end="2821:55"><expr pos:start="2821:44" pos:end="2821:55"><name pos:start="2821:44" pos:end="2821:55">writeFDArray</name></expr></argument>,<argument pos:start="2821:57" pos:end="2821:59"><expr pos:start="2821:57" pos:end="2821:59"><name pos:start="2821:57" pos:end="2821:59">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2823:9" pos:end="2823:56"><expr pos:start="2823:9" pos:end="2823:55"><name pos:start="2823:9" pos:end="2823:14">handle</name> <operator pos:start="2823:16" pos:end="2823:16">=</operator> <call pos:start="2823:18" pos:end="2823:55"><name pos:start="2823:18" pos:end="2823:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2823:44" pos:end="2823:55">(<argument pos:start="2823:45" pos:end="2823:47"><expr pos:start="2823:45" pos:end="2823:47"><name pos:start="2823:45" pos:end="2823:47">env</name></expr></argument>, <argument pos:start="2823:50" pos:end="2823:54"><expr pos:start="2823:50" pos:end="2823:54"><name pos:start="2823:50" pos:end="2823:54">gotFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2825:9" pos:end="2825:36"><expr pos:start="2825:9" pos:end="2825:35"><call pos:start="2825:9" pos:end="2825:35"><name pos:start="2825:9" pos:end="2825:14">FD_SET</name><argument_list pos:start="2825:15" pos:end="2825:35">(<argument pos:start="2825:16" pos:end="2825:21"><expr pos:start="2825:16" pos:end="2825:21"><name pos:start="2825:16" pos:end="2825:21">handle</name></expr></argument>, <argument pos:start="2825:24" pos:end="2825:34"><expr pos:start="2825:24" pos:end="2825:34"><name pos:start="2825:24" pos:end="2825:34">fdset_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2827:9" pos:end="2829:9"><if pos:start="2827:9" pos:end="2829:9">if <condition pos:start="2827:12" pos:end="2827:32">(<expr pos:start="2827:13" pos:end="2827:31"><literal type="number" pos:start="2827:13" pos:end="2827:13">0</literal> <operator pos:start="2827:15" pos:end="2827:15">&gt;</operator> <operator pos:start="2827:17" pos:end="2827:17">(</operator><name pos:start="2827:18" pos:end="2827:21">size</name> <operator pos:start="2827:23" pos:end="2827:23">-</operator> <name pos:start="2827:25" pos:end="2827:30">handle</name><operator pos:start="2827:31" pos:end="2827:31">)</operator></expr>)</condition> <block pos:start="2827:34" pos:end="2829:9">{<block_content pos:start="2828:13" pos:end="2828:26">
            <expr_stmt pos:start="2828:13" pos:end="2828:26"><expr pos:start="2828:13" pos:end="2828:25"><name pos:start="2828:13" pos:end="2828:16">size</name> <operator pos:start="2828:18" pos:end="2828:18">=</operator> <name pos:start="2828:20" pos:end="2828:25">handle</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="2832:5" pos:end="2832:36">/* the size is the max_fd + 1 */</comment>
    <expr_stmt pos:start="2833:5" pos:end="2833:19"><expr pos:start="2833:5" pos:end="2833:18"><name pos:start="2833:5" pos:end="2833:8">size</name> <operator pos:start="2833:10" pos:end="2833:10">=</operator><name pos:start="2833:11" pos:end="2833:14">size</name> <operator pos:start="2833:16" pos:end="2833:16">+</operator> <literal type="number" pos:start="2833:18" pos:end="2833:18">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="2835:5" pos:end="2849:5"><if pos:start="2835:5" pos:end="2837:5">if <condition pos:start="2835:8" pos:end="2835:17">(<expr pos:start="2835:9" pos:end="2835:16"><literal type="number" pos:start="2835:9" pos:end="2835:9">0</literal> <operator pos:start="2835:11" pos:end="2835:11">&gt;</operator> <name pos:start="2835:13" pos:end="2835:16">size</name></expr>)</condition> <block pos:start="2835:19" pos:end="2837:5">{<block_content pos:start="2836:9" pos:end="2836:39">
        <expr_stmt pos:start="2836:9" pos:end="2836:39"><expr pos:start="2836:9" pos:end="2836:38"><name pos:start="2836:9" pos:end="2836:14">result</name> <operator pos:start="2836:16" pos:end="2836:16">=</operator> <name pos:start="2836:18" pos:end="2836:38">SOCKERR_FDSET_SIZEBAD</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="2837:7" pos:end="2849:5">else <block pos:start="2837:12" pos:end="2849:5">{<block_content pos:start="2839:9" pos:end="2848:9">
      <comment type="block" pos:start="2838:7" pos:end="2838:49">/* only set when timeout &gt;= 0 (non-block)*/</comment>
        <if_stmt pos:start="2839:9" pos:end="2848:9"><if pos:start="2839:9" pos:end="2846:9">if <condition pos:start="2839:12" pos:end="2839:25">(<expr pos:start="2839:13" pos:end="2839:24"><literal type="number" pos:start="2839:13" pos:end="2839:13">0</literal> <operator pos:start="2839:15" pos:end="2839:16">&lt;=</operator> <name pos:start="2839:18" pos:end="2839:24">timeout</name></expr>)</condition> <block pos:start="2839:27" pos:end="2846:9">{<block_content pos:start="2841:13" pos:end="2844:77">

            <expr_stmt pos:start="2841:13" pos:end="2841:36"><expr pos:start="2841:13" pos:end="2841:35"><name pos:start="2841:13" pos:end="2841:24"><name pos:start="2841:13" pos:end="2841:17">timeP</name><operator pos:start="2841:18" pos:end="2841:18">.</operator><name pos:start="2841:19" pos:end="2841:24">tv_sec</name></name> <operator pos:start="2841:26" pos:end="2841:26">=</operator> <name pos:start="2841:28" pos:end="2841:35">time_sec</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2842:13" pos:end="2842:43"><expr pos:start="2842:13" pos:end="2842:42"><name pos:start="2842:13" pos:end="2842:25"><name pos:start="2842:13" pos:end="2842:17">timeP</name><operator pos:start="2842:18" pos:end="2842:18">.</operator><name pos:start="2842:19" pos:end="2842:25">tv_usec</name></name> <operator pos:start="2842:27" pos:end="2842:27">=</operator> <name pos:start="2842:29" pos:end="2842:37">time_msec</name><operator pos:start="2842:38" pos:end="2842:38">*</operator><literal type="number" pos:start="2842:39" pos:end="2842:42">1000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2844:13" pos:end="2844:77"><expr pos:start="2844:13" pos:end="2844:76"><name pos:start="2844:13" pos:end="2844:18">result</name> <operator pos:start="2844:20" pos:end="2844:20">=</operator> <call pos:start="2844:22" pos:end="2844:76"><name pos:start="2844:22" pos:end="2844:31">sockSelect</name><argument_list pos:start="2844:32" pos:end="2844:76">(<argument pos:start="2844:33" pos:end="2844:36"><expr pos:start="2844:33" pos:end="2844:36"><name pos:start="2844:33" pos:end="2844:36">size</name></expr></argument>, <argument pos:start="2844:39" pos:end="2844:48"><expr pos:start="2844:39" pos:end="2844:48"><name pos:start="2844:39" pos:end="2844:48">fdset_read</name></expr></argument>, <argument pos:start="2844:51" pos:end="2844:61"><expr pos:start="2844:51" pos:end="2844:61"><name pos:start="2844:51" pos:end="2844:61">fdset_write</name></expr></argument>, <argument pos:start="2844:64" pos:end="2844:67"><expr pos:start="2844:64" pos:end="2844:67"><name pos:start="2844:64" pos:end="2844:67">NULL</name></expr></argument>, <argument pos:start="2844:70" pos:end="2844:75"><expr pos:start="2844:70" pos:end="2844:75"><operator pos:start="2844:70" pos:end="2844:70">&amp;</operator><name pos:start="2844:71" pos:end="2844:75">timeP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2846:11" pos:end="2848:9">else <block pos:start="2846:16" pos:end="2848:9">{<block_content pos:start="2847:13" pos:end="2847:75">
            <expr_stmt pos:start="2847:13" pos:end="2847:75"><expr pos:start="2847:13" pos:end="2847:74"><name pos:start="2847:13" pos:end="2847:18">result</name> <operator pos:start="2847:20" pos:end="2847:20">=</operator> <call pos:start="2847:22" pos:end="2847:74"><name pos:start="2847:22" pos:end="2847:31">sockSelect</name><argument_list pos:start="2847:32" pos:end="2847:74">(<argument pos:start="2847:33" pos:end="2847:36"><expr pos:start="2847:33" pos:end="2847:36"><name pos:start="2847:33" pos:end="2847:36">size</name></expr></argument>, <argument pos:start="2847:39" pos:end="2847:48"><expr pos:start="2847:39" pos:end="2847:48"><name pos:start="2847:39" pos:end="2847:48">fdset_read</name></expr></argument>, <argument pos:start="2847:51" pos:end="2847:61"><expr pos:start="2847:51" pos:end="2847:61"><name pos:start="2847:51" pos:end="2847:61">fdset_write</name></expr></argument>, <argument pos:start="2847:64" pos:end="2847:67"><expr pos:start="2847:64" pos:end="2847:67"><name pos:start="2847:64" pos:end="2847:67">NULL</name></expr></argument>, <argument pos:start="2847:70" pos:end="2847:73"><expr pos:start="2847:70" pos:end="2847:73"><name pos:start="2847:70" pos:end="2847:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="2851:5" pos:end="2881:5"><if pos:start="2851:5" pos:end="2881:5">if <condition pos:start="2851:8" pos:end="2851:19">(<expr pos:start="2851:9" pos:end="2851:18"><literal type="number" pos:start="2851:9" pos:end="2851:9">0</literal> <operator pos:start="2851:11" pos:end="2851:11">&lt;</operator> <name pos:start="2851:13" pos:end="2851:18">result</name></expr>)</condition> <block pos:start="2851:21" pos:end="2881:5">{<block_content pos:start="2853:8" pos:end="2880:61">
       <comment type="block" pos:start="2852:8" pos:end="2852:43">/*output the result to a int array*/</comment>
       <expr_stmt pos:start="2853:8" pos:end="2853:63"><expr pos:start="2853:8" pos:end="2853:62"><name pos:start="2853:8" pos:end="2853:16">flagArray</name> <operator pos:start="2853:18" pos:end="2853:18">=</operator> <call pos:start="2853:20" pos:end="2853:62"><name pos:start="2853:20" pos:end="2853:43"><name pos:start="2853:20" pos:end="2853:22">env</name><operator pos:start="2853:23" pos:end="2853:24">-&gt;</operator><name pos:start="2853:25" pos:end="2853:43">GetIntArrayElements</name></name><argument_list pos:start="2853:44" pos:end="2853:62">(<argument pos:start="2853:45" pos:end="2853:52"><expr pos:start="2853:45" pos:end="2853:52"><name pos:start="2853:45" pos:end="2853:52">outFlags</name></expr></argument>, <argument pos:start="2853:55" pos:end="2853:61"><expr pos:start="2853:55" pos:end="2853:61"><operator pos:start="2853:55" pos:end="2853:55">&amp;</operator><name pos:start="2853:56" pos:end="2853:61">isCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <for pos:start="2855:8" pos:end="2865:9">for <control pos:start="2855:12" pos:end="2855:41">(<init pos:start="2855:13" pos:end="2855:18"><expr pos:start="2855:13" pos:end="2855:17"><name pos:start="2855:13" pos:end="2855:15">val</name><operator pos:start="2855:16" pos:end="2855:16">=</operator><literal type="number" pos:start="2855:17" pos:end="2855:17">0</literal></expr>;</init> <condition pos:start="2855:20" pos:end="2855:34"><expr pos:start="2855:20" pos:end="2855:33"><name pos:start="2855:20" pos:end="2855:22">val</name><operator pos:start="2855:23" pos:end="2855:23">&lt;</operator><name pos:start="2855:24" pos:end="2855:33">countReadC</name></expr>;</condition> <incr pos:start="2855:36" pos:end="2855:40"><expr pos:start="2855:36" pos:end="2855:40"><name pos:start="2855:36" pos:end="2855:38">val</name><operator pos:start="2855:39" pos:end="2855:40">++</operator></expr></incr>)</control> <block pos:start="2855:43" pos:end="2865:9">{<block_content pos:start="2856:13" pos:end="2864:13">
            <expr_stmt pos:start="2856:13" pos:end="2856:64"><expr pos:start="2856:13" pos:end="2856:63"><name pos:start="2856:13" pos:end="2856:17">gotFD</name> <operator pos:start="2856:19" pos:end="2856:19">=</operator> <call pos:start="2856:21" pos:end="2856:63"><name pos:start="2856:21" pos:end="2856:46"><name pos:start="2856:21" pos:end="2856:23">env</name><operator pos:start="2856:24" pos:end="2856:25">-&gt;</operator><name pos:start="2856:26" pos:end="2856:46">GetObjectArrayElement</name></name><argument_list pos:start="2856:47" pos:end="2856:63">(<argument pos:start="2856:48" pos:end="2856:58"><expr pos:start="2856:48" pos:end="2856:58"><name pos:start="2856:48" pos:end="2856:58">readFDArray</name></expr></argument>,<argument pos:start="2856:60" pos:end="2856:62"><expr pos:start="2856:60" pos:end="2856:62"><name pos:start="2856:60" pos:end="2856:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2858:13" pos:end="2858:60"><expr pos:start="2858:13" pos:end="2858:59"><name pos:start="2858:13" pos:end="2858:18">handle</name> <operator pos:start="2858:20" pos:end="2858:20">=</operator> <call pos:start="2858:22" pos:end="2858:59"><name pos:start="2858:22" pos:end="2858:47">jniGetFDFromFileDescriptor</name><argument_list pos:start="2858:48" pos:end="2858:59">(<argument pos:start="2858:49" pos:end="2858:51"><expr pos:start="2858:49" pos:end="2858:51"><name pos:start="2858:49" pos:end="2858:51">env</name></expr></argument>, <argument pos:start="2858:54" pos:end="2858:58"><expr pos:start="2858:54" pos:end="2858:58"><name pos:start="2858:54" pos:end="2858:58">gotFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2860:13" pos:end="2864:13"><if pos:start="2860:13" pos:end="2862:13">if <condition pos:start="2860:16" pos:end="2860:44">(<expr pos:start="2860:17" pos:end="2860:43"><call pos:start="2860:17" pos:end="2860:43"><name pos:start="2860:17" pos:end="2860:24">FD_ISSET</name><argument_list pos:start="2860:25" pos:end="2860:43">(<argument pos:start="2860:26" pos:end="2860:31"><expr pos:start="2860:26" pos:end="2860:31"><name pos:start="2860:26" pos:end="2860:31">handle</name></expr></argument>,<argument pos:start="2860:33" pos:end="2860:42"><expr pos:start="2860:33" pos:end="2860:42"><name pos:start="2860:33" pos:end="2860:42">fdset_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2860:46" pos:end="2862:13">{<block_content pos:start="2861:17" pos:end="2861:48">
                <expr_stmt pos:start="2861:17" pos:end="2861:48"><expr pos:start="2861:17" pos:end="2861:47"><name pos:start="2861:17" pos:end="2861:30"><name pos:start="2861:17" pos:end="2861:25">flagArray</name><index pos:start="2861:26" pos:end="2861:30">[<expr pos:start="2861:27" pos:end="2861:29"><name pos:start="2861:27" pos:end="2861:29">val</name></expr>]</index></name> <operator pos:start="2861:32" pos:end="2861:32">=</operator> <name pos:start="2861:34" pos:end="2861:47">SOCKET_OP_READ</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2862:15" pos:end="2864:13">else <block pos:start="2862:20" pos:end="2864:13">{<block_content pos:start="2863:17" pos:end="2863:48">
                <expr_stmt pos:start="2863:17" pos:end="2863:48"><expr pos:start="2863:17" pos:end="2863:47"><name pos:start="2863:17" pos:end="2863:30"><name pos:start="2863:17" pos:end="2863:25">flagArray</name><index pos:start="2863:26" pos:end="2863:30">[<expr pos:start="2863:27" pos:end="2863:29"><name pos:start="2863:27" pos:end="2863:29">val</name></expr>]</index></name> <operator pos:start="2863:32" pos:end="2863:32">=</operator> <name pos:start="2863:34" pos:end="2863:47">SOCKET_OP_NONE</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <for pos:start="2867:9" pos:end="2878:9">for <control pos:start="2867:13" pos:end="2867:43">(<init pos:start="2867:14" pos:end="2867:19"><expr pos:start="2867:14" pos:end="2867:18"><name pos:start="2867:14" pos:end="2867:16">val</name><operator pos:start="2867:17" pos:end="2867:17">=</operator><literal type="number" pos:start="2867:18" pos:end="2867:18">0</literal></expr>;</init> <condition pos:start="2867:21" pos:end="2867:36"><expr pos:start="2867:21" pos:end="2867:35"><name pos:start="2867:21" pos:end="2867:23">val</name><operator pos:start="2867:24" pos:end="2867:24">&lt;</operator><name pos:start="2867:25" pos:end="2867:35">countWriteC</name></expr>;</condition> <incr pos:start="2867:38" pos:end="2867:42"><expr pos:start="2867:38" pos:end="2867:42"><name pos:start="2867:38" pos:end="2867:40">val</name><operator pos:start="2867:41" pos:end="2867:42">++</operator></expr></incr>)</control> <block pos:start="2867:45" pos:end="2878:9">{<block_content pos:start="2869:13" pos:end="2877:13">

            <expr_stmt pos:start="2869:13" pos:end="2869:65"><expr pos:start="2869:13" pos:end="2869:64"><name pos:start="2869:13" pos:end="2869:17">gotFD</name> <operator pos:start="2869:19" pos:end="2869:19">=</operator> <call pos:start="2869:21" pos:end="2869:64"><name pos:start="2869:21" pos:end="2869:46"><name pos:start="2869:21" pos:end="2869:23">env</name><operator pos:start="2869:24" pos:end="2869:25">-&gt;</operator><name pos:start="2869:26" pos:end="2869:46">GetObjectArrayElement</name></name><argument_list pos:start="2869:47" pos:end="2869:64">(<argument pos:start="2869:48" pos:end="2869:59"><expr pos:start="2869:48" pos:end="2869:59"><name pos:start="2869:48" pos:end="2869:59">writeFDArray</name></expr></argument>,<argument pos:start="2869:61" pos:end="2869:63"><expr pos:start="2869:61" pos:end="2869:63"><name pos:start="2869:61" pos:end="2869:63">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2871:13" pos:end="2871:60"><expr pos:start="2871:13" pos:end="2871:59"><name pos:start="2871:13" pos:end="2871:18">handle</name> <operator pos:start="2871:20" pos:end="2871:20">=</operator> <call pos:start="2871:22" pos:end="2871:59"><name pos:start="2871:22" pos:end="2871:47">jniGetFDFromFileDescriptor</name><argument_list pos:start="2871:48" pos:end="2871:59">(<argument pos:start="2871:49" pos:end="2871:51"><expr pos:start="2871:49" pos:end="2871:51"><name pos:start="2871:49" pos:end="2871:51">env</name></expr></argument>, <argument pos:start="2871:54" pos:end="2871:58"><expr pos:start="2871:54" pos:end="2871:58"><name pos:start="2871:54" pos:end="2871:58">gotFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2873:13" pos:end="2877:13"><if pos:start="2873:13" pos:end="2875:13">if <condition pos:start="2873:16" pos:end="2873:45">(<expr pos:start="2873:17" pos:end="2873:44"><call pos:start="2873:17" pos:end="2873:44"><name pos:start="2873:17" pos:end="2873:24">FD_ISSET</name><argument_list pos:start="2873:25" pos:end="2873:44">(<argument pos:start="2873:26" pos:end="2873:31"><expr pos:start="2873:26" pos:end="2873:31"><name pos:start="2873:26" pos:end="2873:31">handle</name></expr></argument>,<argument pos:start="2873:33" pos:end="2873:43"><expr pos:start="2873:33" pos:end="2873:43"><name pos:start="2873:33" pos:end="2873:43">fdset_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2873:47" pos:end="2875:13">{<block_content pos:start="2874:17" pos:end="2874:60">
                <expr_stmt pos:start="2874:17" pos:end="2874:60"><expr pos:start="2874:17" pos:end="2874:59"><name pos:start="2874:17" pos:end="2874:41"><name pos:start="2874:17" pos:end="2874:25">flagArray</name><index pos:start="2874:26" pos:end="2874:41">[<expr pos:start="2874:27" pos:end="2874:40"><name pos:start="2874:27" pos:end="2874:29">val</name><operator pos:start="2874:30" pos:end="2874:30">+</operator><name pos:start="2874:31" pos:end="2874:40">countReadC</name></expr>]</index></name> <operator pos:start="2874:43" pos:end="2874:43">=</operator> <name pos:start="2874:45" pos:end="2874:59">SOCKET_OP_WRITE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2875:15" pos:end="2877:13">else <block pos:start="2875:20" pos:end="2877:13">{<block_content pos:start="2876:17" pos:end="2876:59">
                <expr_stmt pos:start="2876:17" pos:end="2876:59"><expr pos:start="2876:17" pos:end="2876:58"><name pos:start="2876:17" pos:end="2876:41"><name pos:start="2876:17" pos:end="2876:25">flagArray</name><index pos:start="2876:26" pos:end="2876:41">[<expr pos:start="2876:27" pos:end="2876:40"><name pos:start="2876:27" pos:end="2876:29">val</name><operator pos:start="2876:30" pos:end="2876:30">+</operator><name pos:start="2876:31" pos:end="2876:40">countReadC</name></expr>]</index></name> <operator pos:start="2876:43" pos:end="2876:43">=</operator> <name pos:start="2876:45" pos:end="2876:58">SOCKET_OP_NONE</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="2880:9" pos:end="2880:61"><expr pos:start="2880:9" pos:end="2880:60"><call pos:start="2880:9" pos:end="2880:60"><name pos:start="2880:9" pos:end="2880:36"><name pos:start="2880:9" pos:end="2880:11">env</name><operator pos:start="2880:12" pos:end="2880:13">-&gt;</operator><name pos:start="2880:14" pos:end="2880:36">ReleaseIntArrayElements</name></name><argument_list pos:start="2880:37" pos:end="2880:60">(<argument pos:start="2880:38" pos:end="2880:45"><expr pos:start="2880:38" pos:end="2880:45"><name pos:start="2880:38" pos:end="2880:45">outFlags</name></expr></argument>, <argument pos:start="2880:48" pos:end="2880:56"><expr pos:start="2880:48" pos:end="2880:56"><name pos:start="2880:48" pos:end="2880:56">flagArray</name></expr></argument>, <argument pos:start="2880:59" pos:end="2880:59"><expr pos:start="2880:59" pos:end="2880:59"><literal type="number" pos:start="2880:59" pos:end="2880:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2883:5" pos:end="2883:22"><expr pos:start="2883:5" pos:end="2883:21"><call pos:start="2883:5" pos:end="2883:21"><name pos:start="2883:5" pos:end="2883:8">free</name><argument_list pos:start="2883:9" pos:end="2883:21">(<argument pos:start="2883:10" pos:end="2883:20"><expr pos:start="2883:10" pos:end="2883:20"><name pos:start="2883:10" pos:end="2883:20">fdset_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2884:5" pos:end="2884:21"><expr pos:start="2884:5" pos:end="2884:20"><call pos:start="2884:5" pos:end="2884:20"><name pos:start="2884:5" pos:end="2884:8">free</name><argument_list pos:start="2884:9" pos:end="2884:20">(<argument pos:start="2884:10" pos:end="2884:19"><expr pos:start="2884:10" pos:end="2884:19"><name pos:start="2884:10" pos:end="2884:19">fdset_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2886:5" pos:end="2886:76">/* return both correct and error result, let java handle the exception*/</comment>
    <return pos:start="2887:5" pos:end="2887:18">return <expr pos:start="2887:12" pos:end="2887:17"><name pos:start="2887:12" pos:end="2887:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="2890:1" pos:end="2914:1">extern <literal type="string" pos:start="2890:8" pos:end="2890:10">"C"</literal> <function pos:start="2890:12" pos:end="2914:1"><type pos:start="2890:12" pos:end="2890:18"><name pos:start="2890:12" pos:end="2890:18">jobject</name></type> <name pos:start="2890:20" pos:end="2890:87">Java_org_sipdroid_net_impl_OSNetworkSystem_getSocketLocalAddressImpl</name><parameter_list pos:start="2890:88" pos:end="2891:75">(<parameter pos:start="2890:89" pos:end="2890:99"><decl pos:start="2890:89" pos:end="2890:99"><type pos:start="2890:89" pos:end="2890:99"><name pos:start="2890:89" pos:end="2890:94">JNIEnv</name><modifier pos:start="2890:95" pos:end="2890:95">*</modifier></type> <name pos:start="2890:97" pos:end="2890:99">env</name></decl></parameter>,
        <parameter pos:start="2891:9" pos:end="2891:20"><decl pos:start="2891:9" pos:end="2891:20"><type pos:start="2891:9" pos:end="2891:20"><name pos:start="2891:9" pos:end="2891:14">jclass</name></type> <name pos:start="2891:16" pos:end="2891:20">clazz</name></decl></parameter>, <parameter pos:start="2891:23" pos:end="2891:44"><decl pos:start="2891:23" pos:end="2891:44"><type pos:start="2891:23" pos:end="2891:44"><name pos:start="2891:23" pos:end="2891:29">jobject</name></type> <name pos:start="2891:31" pos:end="2891:44">fileDescriptor</name></decl></parameter>, <parameter pos:start="2891:47" pos:end="2891:74"><decl pos:start="2891:47" pos:end="2891:74"><type pos:start="2891:47" pos:end="2891:74"><name pos:start="2891:47" pos:end="2891:54">jboolean</name></type> <name pos:start="2891:56" pos:end="2891:74">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <block pos:start="2891:77" pos:end="2914:1">{<block_content pos:start="2894:5" pos:end="2912:56">
    <comment type="line" pos:start="2892:5" pos:end="2892:47">// LOGD("ENTER getSocketLocalAddressImpl");</comment>

    <decl_stmt pos:start="2894:5" pos:end="2894:28"><decl pos:start="2894:5" pos:end="2894:27"><type pos:start="2894:5" pos:end="2894:22"><name pos:start="2894:5" pos:end="2894:22"><name pos:start="2894:5" pos:end="2894:10">struct</name> <name pos:start="2894:12" pos:end="2894:22">sockaddr_in</name></name></type> <name pos:start="2894:24" pos:end="2894:27">addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2895:5" pos:end="2895:37"><decl pos:start="2895:5" pos:end="2895:36"><type pos:start="2895:5" pos:end="2895:13"><name pos:start="2895:5" pos:end="2895:13">socklen_t</name></type> <name pos:start="2895:15" pos:end="2895:21">addrLen</name> <init pos:start="2895:23" pos:end="2895:36">= <expr pos:start="2895:25" pos:end="2895:36"><sizeof pos:start="2895:25" pos:end="2895:36">sizeof<argument_list pos:start="2895:31" pos:end="2895:36">(<argument pos:start="2895:32" pos:end="2895:35"><expr pos:start="2895:32" pos:end="2895:35"><name pos:start="2895:32" pos:end="2895:35">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2897:5" pos:end="2897:30"><expr pos:start="2897:5" pos:end="2897:29"><call pos:start="2897:5" pos:end="2897:29"><name pos:start="2897:5" pos:end="2897:10">memset</name><argument_list pos:start="2897:11" pos:end="2897:29">(<argument pos:start="2897:12" pos:end="2897:16"><expr pos:start="2897:12" pos:end="2897:16"><operator pos:start="2897:12" pos:end="2897:12">&amp;</operator><name pos:start="2897:13" pos:end="2897:16">addr</name></expr></argument>, <argument pos:start="2897:19" pos:end="2897:19"><expr pos:start="2897:19" pos:end="2897:19"><literal type="number" pos:start="2897:19" pos:end="2897:19">0</literal></expr></argument>, <argument pos:start="2897:22" pos:end="2897:28"><expr pos:start="2897:22" pos:end="2897:28"><name pos:start="2897:22" pos:end="2897:28">addrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="2899:5" pos:end="2899:65"><decl pos:start="2899:5" pos:end="2899:64"><type pos:start="2899:5" pos:end="2899:7"><name pos:start="2899:5" pos:end="2899:7">int</name></type> <name pos:start="2899:9" pos:end="2899:14">handle</name> <init pos:start="2899:16" pos:end="2899:64">= <expr pos:start="2899:18" pos:end="2899:64"><call pos:start="2899:18" pos:end="2899:64"><name pos:start="2899:18" pos:end="2899:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2899:44" pos:end="2899:64">(<argument pos:start="2899:45" pos:end="2899:47"><expr pos:start="2899:45" pos:end="2899:47"><name pos:start="2899:45" pos:end="2899:47">env</name></expr></argument>, <argument pos:start="2899:50" pos:end="2899:63"><expr pos:start="2899:50" pos:end="2899:63"><name pos:start="2899:50" pos:end="2899:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2901:5" pos:end="2901:15"><decl pos:start="2901:5" pos:end="2901:14"><type pos:start="2901:5" pos:end="2901:7"><name pos:start="2901:5" pos:end="2901:7">int</name></type> <name pos:start="2901:9" pos:end="2901:14">result</name></decl>;</decl_stmt>

    <if_stmt pos:start="2903:5" pos:end="2906:5"><if pos:start="2903:5" pos:end="2906:5">if <condition pos:start="2903:8" pos:end="2903:36">(<expr pos:start="2903:9" pos:end="2903:35"><name pos:start="2903:9" pos:end="2903:14">handle</name> <operator pos:start="2903:16" pos:end="2903:17">==</operator> <literal type="number" pos:start="2903:19" pos:end="2903:19">0</literal> <operator pos:start="2903:21" pos:end="2903:22">||</operator> <name pos:start="2903:24" pos:end="2903:29">handle</name> <operator pos:start="2903:31" pos:end="2903:32">==</operator> <operator pos:start="2903:34" pos:end="2903:34">-</operator><literal type="number" pos:start="2903:35" pos:end="2903:35">1</literal></expr>)</condition> <block pos:start="2903:38" pos:end="2906:5">{<block_content pos:start="2904:9" pos:end="2905:20">
        <expr_stmt pos:start="2904:9" pos:end="2904:57"><expr pos:start="2904:9" pos:end="2904:56"><call pos:start="2904:9" pos:end="2904:56"><name pos:start="2904:9" pos:end="2904:28">throwSocketException</name><argument_list pos:start="2904:29" pos:end="2904:56">(<argument pos:start="2904:30" pos:end="2904:32"><expr pos:start="2904:30" pos:end="2904:32"><name pos:start="2904:30" pos:end="2904:32">env</name></expr></argument>, <argument pos:start="2904:35" pos:end="2904:55"><expr pos:start="2904:35" pos:end="2904:55"><name pos:start="2904:35" pos:end="2904:55">SOCKERR_UNKNOWNSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2905:9" pos:end="2905:20">return <expr pos:start="2905:16" pos:end="2905:19"><name pos:start="2905:16" pos:end="2905:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2908:5" pos:end="2908:69"><expr pos:start="2908:5" pos:end="2908:68"><name pos:start="2908:5" pos:end="2908:10">result</name> <operator pos:start="2908:12" pos:end="2908:12">=</operator> <call pos:start="2908:14" pos:end="2908:68"><name pos:start="2908:14" pos:end="2908:24">getsockname</name><argument_list pos:start="2908:25" pos:end="2908:68">(<argument pos:start="2908:26" pos:end="2908:31"><expr pos:start="2908:26" pos:end="2908:31"><name pos:start="2908:26" pos:end="2908:31">handle</name></expr></argument>, <argument pos:start="2908:34" pos:end="2908:57"><expr pos:start="2908:34" pos:end="2908:57"><operator pos:start="2908:34" pos:end="2908:34">(</operator>struct <name pos:start="2908:42" pos:end="2908:49">sockaddr</name> <operator pos:start="2908:51" pos:end="2908:51">*</operator><operator pos:start="2908:52" pos:end="2908:52">)</operator><operator pos:start="2908:53" pos:end="2908:53">&amp;</operator><name pos:start="2908:54" pos:end="2908:57">addr</name></expr></argument>, <argument pos:start="2908:60" pos:end="2908:67"><expr pos:start="2908:60" pos:end="2908:67"><operator pos:start="2908:60" pos:end="2908:60">&amp;</operator><name pos:start="2908:61" pos:end="2908:67">addrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="2910:5" pos:end="2910:34">// Spec says ignore all errors</comment>

    <return pos:start="2912:5" pos:end="2912:56">return <expr pos:start="2912:12" pos:end="2912:55"><call pos:start="2912:12" pos:end="2912:55"><name pos:start="2912:12" pos:end="2912:32">structInToInetAddress</name><argument_list pos:start="2912:33" pos:end="2912:55">(<argument pos:start="2912:34" pos:end="2912:36"><expr pos:start="2912:34" pos:end="2912:36"><name pos:start="2912:34" pos:end="2912:36">env</name></expr></argument>, <argument pos:start="2912:39" pos:end="2912:54"><expr pos:start="2912:39" pos:end="2912:54"><operator pos:start="2912:39" pos:end="2912:39">&amp;</operator><operator pos:start="2912:40" pos:end="2912:40">(</operator><name pos:start="2912:41" pos:end="2912:53"><name pos:start="2912:41" pos:end="2912:44">addr</name><operator pos:start="2912:45" pos:end="2912:45">.</operator><name pos:start="2912:46" pos:end="2912:53">sin_addr</name></name><operator pos:start="2912:54" pos:end="2912:54">)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function></extern>

<extern pos:start="2916:1" pos:end="2939:1">extern <literal type="string" pos:start="2916:8" pos:end="2916:10">"C"</literal> <function pos:start="2916:12" pos:end="2939:1"><type pos:start="2916:12" pos:end="2916:15"><name pos:start="2916:12" pos:end="2916:15">jint</name></type> <name pos:start="2916:17" pos:end="2916:81">Java_org_sipdroid_net_impl_OSNetworkSystem_getSocketLocalPortImpl</name><parameter_list pos:start="2916:82" pos:end="2917:61">(<parameter pos:start="2916:83" pos:end="2916:93"><decl pos:start="2916:83" pos:end="2916:93"><type pos:start="2916:83" pos:end="2916:93"><name pos:start="2916:83" pos:end="2916:88">JNIEnv</name><modifier pos:start="2916:89" pos:end="2916:89">*</modifier></type> <name pos:start="2916:91" pos:end="2916:93">env</name></decl></parameter>, <parameter pos:start="2916:96" pos:end="2916:107"><decl pos:start="2916:96" pos:end="2916:107"><type pos:start="2916:96" pos:end="2916:107"><name pos:start="2916:96" pos:end="2916:101">jclass</name></type> <name pos:start="2916:103" pos:end="2916:107">clazz</name></decl></parameter>,
        <parameter pos:start="2917:9" pos:end="2917:30"><decl pos:start="2917:9" pos:end="2917:30"><type pos:start="2917:9" pos:end="2917:30"><name pos:start="2917:9" pos:end="2917:15">jobject</name></type> <name pos:start="2917:17" pos:end="2917:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2917:33" pos:end="2917:60"><decl pos:start="2917:33" pos:end="2917:60"><type pos:start="2917:33" pos:end="2917:60"><name pos:start="2917:33" pos:end="2917:40">jboolean</name></type> <name pos:start="2917:42" pos:end="2917:60">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <block pos:start="2917:63" pos:end="2939:1">{<block_content pos:start="2920:5" pos:end="2938:5">
    <comment type="line" pos:start="2918:5" pos:end="2918:44">// LOGD("ENTER getSocketLocalPortImpl");</comment>

    <decl_stmt pos:start="2920:5" pos:end="2920:28"><decl pos:start="2920:5" pos:end="2920:27"><type pos:start="2920:5" pos:end="2920:22"><name pos:start="2920:5" pos:end="2920:22"><name pos:start="2920:5" pos:end="2920:10">struct</name> <name pos:start="2920:12" pos:end="2920:22">sockaddr_in</name></name></type> <name pos:start="2920:24" pos:end="2920:27">addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2921:5" pos:end="2921:37"><decl pos:start="2921:5" pos:end="2921:36"><type pos:start="2921:5" pos:end="2921:13"><name pos:start="2921:5" pos:end="2921:13">socklen_t</name></type> <name pos:start="2921:15" pos:end="2921:21">addrLen</name> <init pos:start="2921:23" pos:end="2921:36">= <expr pos:start="2921:25" pos:end="2921:36"><sizeof pos:start="2921:25" pos:end="2921:36">sizeof<argument_list pos:start="2921:31" pos:end="2921:36">(<argument pos:start="2921:32" pos:end="2921:35"><expr pos:start="2921:32" pos:end="2921:35"><name pos:start="2921:32" pos:end="2921:35">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="2923:5" pos:end="2923:65"><decl pos:start="2923:5" pos:end="2923:64"><type pos:start="2923:5" pos:end="2923:7"><name pos:start="2923:5" pos:end="2923:7">int</name></type> <name pos:start="2923:9" pos:end="2923:14">handle</name> <init pos:start="2923:16" pos:end="2923:64">= <expr pos:start="2923:18" pos:end="2923:64"><call pos:start="2923:18" pos:end="2923:64"><name pos:start="2923:18" pos:end="2923:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="2923:44" pos:end="2923:64">(<argument pos:start="2923:45" pos:end="2923:47"><expr pos:start="2923:45" pos:end="2923:47"><name pos:start="2923:45" pos:end="2923:47">env</name></expr></argument>, <argument pos:start="2923:50" pos:end="2923:63"><expr pos:start="2923:50" pos:end="2923:63"><name pos:start="2923:50" pos:end="2923:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2924:5" pos:end="2924:15"><decl pos:start="2924:5" pos:end="2924:14"><type pos:start="2924:5" pos:end="2924:7"><name pos:start="2924:5" pos:end="2924:7">int</name></type> <name pos:start="2924:9" pos:end="2924:14">result</name></decl>;</decl_stmt>

    <if_stmt pos:start="2926:5" pos:end="2929:5"><if pos:start="2926:5" pos:end="2929:5">if <condition pos:start="2926:8" pos:end="2926:36">(<expr pos:start="2926:9" pos:end="2926:35"><name pos:start="2926:9" pos:end="2926:14">handle</name> <operator pos:start="2926:16" pos:end="2926:17">==</operator> <literal type="number" pos:start="2926:19" pos:end="2926:19">0</literal> <operator pos:start="2926:21" pos:end="2926:22">||</operator> <name pos:start="2926:24" pos:end="2926:29">handle</name> <operator pos:start="2926:31" pos:end="2926:32">==</operator> <operator pos:start="2926:34" pos:end="2926:34">-</operator><literal type="number" pos:start="2926:35" pos:end="2926:35">1</literal></expr>)</condition> <block pos:start="2926:38" pos:end="2929:5">{<block_content pos:start="2927:9" pos:end="2928:17">
        <expr_stmt pos:start="2927:9" pos:end="2927:57"><expr pos:start="2927:9" pos:end="2927:56"><call pos:start="2927:9" pos:end="2927:56"><name pos:start="2927:9" pos:end="2927:28">throwSocketException</name><argument_list pos:start="2927:29" pos:end="2927:56">(<argument pos:start="2927:30" pos:end="2927:32"><expr pos:start="2927:30" pos:end="2927:32"><name pos:start="2927:30" pos:end="2927:32">env</name></expr></argument>, <argument pos:start="2927:35" pos:end="2927:55"><expr pos:start="2927:35" pos:end="2927:55"><name pos:start="2927:35" pos:end="2927:55">SOCKERR_UNKNOWNSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2928:9" pos:end="2928:17">return <expr pos:start="2928:16" pos:end="2928:16"><literal type="number" pos:start="2928:16" pos:end="2928:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2931:5" pos:end="2931:69"><expr pos:start="2931:5" pos:end="2931:68"><name pos:start="2931:5" pos:end="2931:10">result</name> <operator pos:start="2931:12" pos:end="2931:12">=</operator> <call pos:start="2931:14" pos:end="2931:68"><name pos:start="2931:14" pos:end="2931:24">getsockname</name><argument_list pos:start="2931:25" pos:end="2931:68">(<argument pos:start="2931:26" pos:end="2931:31"><expr pos:start="2931:26" pos:end="2931:31"><name pos:start="2931:26" pos:end="2931:31">handle</name></expr></argument>, <argument pos:start="2931:34" pos:end="2931:57"><expr pos:start="2931:34" pos:end="2931:57"><operator pos:start="2931:34" pos:end="2931:34">(</operator>struct <name pos:start="2931:42" pos:end="2931:49">sockaddr</name> <operator pos:start="2931:51" pos:end="2931:51">*</operator><operator pos:start="2931:52" pos:end="2931:52">)</operator><operator pos:start="2931:53" pos:end="2931:53">&amp;</operator><name pos:start="2931:54" pos:end="2931:57">addr</name></expr></argument>, <argument pos:start="2931:60" pos:end="2931:67"><expr pos:start="2931:60" pos:end="2931:67"><operator pos:start="2931:60" pos:end="2931:60">&amp;</operator><name pos:start="2931:61" pos:end="2931:67">addrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2933:5" pos:end="2938:5"><if pos:start="2933:5" pos:end="2936:5">if <condition pos:start="2933:8" pos:end="2933:20">(<expr pos:start="2933:9" pos:end="2933:19"><literal type="number" pos:start="2933:9" pos:end="2933:9">0</literal> <operator pos:start="2933:11" pos:end="2933:12">!=</operator> <name pos:start="2933:14" pos:end="2933:19">result</name></expr>)</condition> <block pos:start="2933:22" pos:end="2936:5">{<block_content pos:start="2935:9" pos:end="2935:17">
        <comment type="line" pos:start="2934:9" pos:end="2934:70">// The java spec does not indicate any exceptions on this call</comment>
        <return pos:start="2935:9" pos:end="2935:17">return <expr pos:start="2935:16" pos:end="2935:16"><literal type="number" pos:start="2935:16" pos:end="2935:16">0</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="2936:7" pos:end="2938:5">else <block pos:start="2936:12" pos:end="2938:5">{<block_content pos:start="2937:9" pos:end="2937:36">
        <return pos:start="2937:9" pos:end="2937:36">return <expr pos:start="2937:16" pos:end="2937:35"><call pos:start="2937:16" pos:end="2937:35"><name pos:start="2937:16" pos:end="2937:20">ntohs</name><argument_list pos:start="2937:21" pos:end="2937:35">(<argument pos:start="2937:22" pos:end="2937:34"><expr pos:start="2937:22" pos:end="2937:34"><name pos:start="2937:22" pos:end="2937:34"><name pos:start="2937:22" pos:end="2937:25">addr</name><operator pos:start="2937:26" pos:end="2937:26">.</operator><name pos:start="2937:27" pos:end="2937:34">sin_port</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="2941:1" pos:end="3089:1">extern <literal type="string" pos:start="2941:8" pos:end="2941:10">"C"</literal> <function pos:start="2941:12" pos:end="3089:1"><type pos:start="2941:12" pos:end="2941:18"><name pos:start="2941:12" pos:end="2941:18">jobject</name></type> <name pos:start="2941:20" pos:end="2941:81">Java_org_sipdroid_net_impl_OSNetworkSystem_getSocketOptionImpl</name><parameter_list pos:start="2941:82" pos:end="2942:46">(<parameter pos:start="2941:83" pos:end="2941:93"><decl pos:start="2941:83" pos:end="2941:93"><type pos:start="2941:83" pos:end="2941:93"><name pos:start="2941:83" pos:end="2941:88">JNIEnv</name><modifier pos:start="2941:89" pos:end="2941:89">*</modifier></type> <name pos:start="2941:91" pos:end="2941:93">env</name></decl></parameter>, <parameter pos:start="2941:96" pos:end="2941:107"><decl pos:start="2941:96" pos:end="2941:107"><type pos:start="2941:96" pos:end="2941:107"><name pos:start="2941:96" pos:end="2941:101">jclass</name></type> <name pos:start="2941:103" pos:end="2941:107">clazz</name></decl></parameter>,
        <parameter pos:start="2942:9" pos:end="2942:30"><decl pos:start="2942:9" pos:end="2942:30"><type pos:start="2942:9" pos:end="2942:30"><name pos:start="2942:9" pos:end="2942:15">jobject</name></type> <name pos:start="2942:17" pos:end="2942:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="2942:33" pos:end="2942:45"><decl pos:start="2942:33" pos:end="2942:45"><type pos:start="2942:33" pos:end="2942:45"><name pos:start="2942:33" pos:end="2942:36">jint</name></type> <name pos:start="2942:38" pos:end="2942:45">anOption</name></decl></parameter>)</parameter_list> <block pos:start="2942:48" pos:end="3089:1">{<block_content pos:start="2945:5" pos:end="3087:5">
    <comment type="line" pos:start="2943:5" pos:end="2943:41">// LOGD("ENTER getSocketOptionImpl");</comment>

    <decl_stmt pos:start="2945:5" pos:end="2945:15"><decl pos:start="2945:5" pos:end="2945:14"><type pos:start="2945:5" pos:end="2945:7"><name pos:start="2945:5" pos:end="2945:7">int</name></type> <name pos:start="2945:9" pos:end="2945:14">handle</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2946:5" pos:end="2946:21"><decl pos:start="2946:5" pos:end="2946:20"><type pos:start="2946:5" pos:end="2946:7"><name pos:start="2946:5" pos:end="2946:7">int</name></type> <name pos:start="2946:9" pos:end="2946:16">intValue</name> <init pos:start="2946:18" pos:end="2946:20">= <expr pos:start="2946:20" pos:end="2946:20"><literal type="number" pos:start="2946:20" pos:end="2946:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2947:5" pos:end="2947:36"><decl pos:start="2947:5" pos:end="2947:35"><type pos:start="2947:5" pos:end="2947:13"><name pos:start="2947:5" pos:end="2947:13">socklen_t</name></type> <name pos:start="2947:15" pos:end="2947:21">intSize</name> <init pos:start="2947:23" pos:end="2947:35">= <expr pos:start="2947:25" pos:end="2947:35"><sizeof pos:start="2947:25" pos:end="2947:35">sizeof<argument_list pos:start="2947:31" pos:end="2947:35">(<argument pos:start="2947:32" pos:end="2947:34"><expr pos:start="2947:32" pos:end="2947:34"><name pos:start="2947:32" pos:end="2947:34">int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2948:5" pos:end="2948:32"><decl pos:start="2948:5" pos:end="2948:31"><type pos:start="2948:5" pos:end="2948:17"><name pos:start="2948:5" pos:end="2948:12">unsigned</name> <name pos:start="2948:14" pos:end="2948:17">char</name></type> <name pos:start="2948:19" pos:end="2948:27">byteValue</name> <init pos:start="2948:29" pos:end="2948:31">= <expr pos:start="2948:31" pos:end="2948:31"><literal type="number" pos:start="2948:31" pos:end="2948:31">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2949:5" pos:end="2949:47"><decl pos:start="2949:5" pos:end="2949:46"><type pos:start="2949:5" pos:end="2949:13"><name pos:start="2949:5" pos:end="2949:13">socklen_t</name></type> <name pos:start="2949:15" pos:end="2949:22">byteSize</name> <init pos:start="2949:24" pos:end="2949:46">= <expr pos:start="2949:26" pos:end="2949:46">sizeof<operator pos:start="2949:32" pos:end="2949:32">(</operator><name pos:start="2949:33" pos:end="2949:40">unsigned</name> <name pos:start="2949:42" pos:end="2949:45">char</name><operator pos:start="2949:46" pos:end="2949:46">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2950:5" pos:end="2950:15"><decl pos:start="2950:5" pos:end="2950:14"><type pos:start="2950:5" pos:end="2950:7"><name pos:start="2950:5" pos:end="2950:7">int</name></type> <name pos:start="2950:9" pos:end="2950:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2951:5" pos:end="2951:31"><decl pos:start="2951:5" pos:end="2951:30"><type pos:start="2951:5" pos:end="2951:22"><name pos:start="2951:5" pos:end="2951:22"><name pos:start="2951:5" pos:end="2951:10">struct</name> <name pos:start="2951:12" pos:end="2951:22">sockaddr_in</name></name></type> <name pos:start="2951:24" pos:end="2951:30">sockVal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2952:5" pos:end="2952:41"><decl pos:start="2952:5" pos:end="2952:40"><type pos:start="2952:5" pos:end="2952:13"><name pos:start="2952:5" pos:end="2952:13">socklen_t</name></type> <name pos:start="2952:15" pos:end="2952:22">sockSize</name> <init pos:start="2952:24" pos:end="2952:40">= <expr pos:start="2952:26" pos:end="2952:40"><sizeof pos:start="2952:26" pos:end="2952:40">sizeof<argument_list pos:start="2952:32" pos:end="2952:40">(<argument pos:start="2952:33" pos:end="2952:39"><expr pos:start="2952:33" pos:end="2952:39"><name pos:start="2952:33" pos:end="2952:39">sockVal</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2954:5" pos:end="2954:61"><expr pos:start="2954:5" pos:end="2954:60"><name pos:start="2954:5" pos:end="2954:10">handle</name> <operator pos:start="2954:12" pos:end="2954:12">=</operator> <call pos:start="2954:14" pos:end="2954:60"><name pos:start="2954:14" pos:end="2954:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="2954:40" pos:end="2954:60">(<argument pos:start="2954:41" pos:end="2954:43"><expr pos:start="2954:41" pos:end="2954:43"><name pos:start="2954:41" pos:end="2954:43">env</name></expr></argument>, <argument pos:start="2954:46" pos:end="2954:59"><expr pos:start="2954:46" pos:end="2954:59"><name pos:start="2954:46" pos:end="2954:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2955:5" pos:end="2958:5"><if pos:start="2955:5" pos:end="2958:5">if <condition pos:start="2955:8" pos:end="2955:36">(<expr pos:start="2955:9" pos:end="2955:35"><name pos:start="2955:9" pos:end="2955:14">handle</name> <operator pos:start="2955:16" pos:end="2955:17">==</operator> <literal type="number" pos:start="2955:19" pos:end="2955:19">0</literal> <operator pos:start="2955:21" pos:end="2955:22">||</operator> <name pos:start="2955:24" pos:end="2955:29">handle</name> <operator pos:start="2955:31" pos:end="2955:32">==</operator> <operator pos:start="2955:34" pos:end="2955:34">-</operator><literal type="number" pos:start="2955:35" pos:end="2955:35">1</literal></expr>)</condition> <block pos:start="2955:38" pos:end="2958:5">{<block_content pos:start="2956:9" pos:end="2957:20">
        <expr_stmt pos:start="2956:9" pos:end="2956:53"><expr pos:start="2956:9" pos:end="2956:52"><call pos:start="2956:9" pos:end="2956:52"><name pos:start="2956:9" pos:end="2956:28">throwSocketException</name><argument_list pos:start="2956:29" pos:end="2956:52">(<argument pos:start="2956:30" pos:end="2956:32"><expr pos:start="2956:30" pos:end="2956:32"><name pos:start="2956:30" pos:end="2956:32">env</name></expr></argument>, <argument pos:start="2956:35" pos:end="2956:51"><expr pos:start="2956:35" pos:end="2956:51"><name pos:start="2956:35" pos:end="2956:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2957:9" pos:end="2957:20">return <expr pos:start="2957:16" pos:end="2957:19"><name pos:start="2957:16" pos:end="2957:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch pos:start="2960:5" pos:end="3087:5">switch <condition pos:start="2960:12" pos:end="2960:36">(<expr pos:start="2960:13" pos:end="2960:35"><operator pos:start="2960:13" pos:end="2960:13">(</operator><name pos:start="2960:14" pos:end="2960:16">int</name><operator pos:start="2960:17" pos:end="2960:17">)</operator> <name pos:start="2960:19" pos:end="2960:26">anOption</name> <operator pos:start="2960:28" pos:end="2960:28">&amp;</operator> <literal type="number" pos:start="2960:30" pos:end="2960:35">0xffff</literal></expr>)</condition> <block pos:start="2960:38" pos:end="3087:5">{<block_content pos:start="2961:9" pos:end="3086:9">
        <case pos:start="2961:9" pos:end="2961:35">case <expr pos:start="2961:14" pos:end="2961:34"><name pos:start="2961:14" pos:end="2961:34">JAVASOCKOPT_SO_LINGER</name></expr>:</case> <block pos:start="2961:37" pos:end="2975:9">{<block_content pos:start="2962:13" pos:end="2974:53">
            <decl_stmt pos:start="2962:13" pos:end="2962:32"><decl pos:start="2962:13" pos:end="2962:31"><type pos:start="2962:13" pos:end="2962:25"><name pos:start="2962:13" pos:end="2962:25"><name pos:start="2962:13" pos:end="2962:18">struct</name> <name pos:start="2962:20" pos:end="2962:25">linger</name></name></type> <name pos:start="2962:27" pos:end="2962:31">lingr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2963:13" pos:end="2963:51"><decl pos:start="2963:13" pos:end="2963:50"><type pos:start="2963:13" pos:end="2963:21"><name pos:start="2963:13" pos:end="2963:21">socklen_t</name></type> <name pos:start="2963:23" pos:end="2963:26">size</name> <init pos:start="2963:28" pos:end="2963:50">= <expr pos:start="2963:30" pos:end="2963:50"><sizeof pos:start="2963:30" pos:end="2963:50">sizeof<argument_list pos:start="2963:36" pos:end="2963:50">(<argument pos:start="2963:37" pos:end="2963:49"><expr pos:start="2963:37" pos:end="2963:49">struct <name pos:start="2963:44" pos:end="2963:49">linger</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2964:13" pos:end="2964:78"><expr pos:start="2964:13" pos:end="2964:77"><name pos:start="2964:13" pos:end="2964:18">result</name> <operator pos:start="2964:20" pos:end="2964:20">=</operator> <call pos:start="2964:22" pos:end="2964:77"><name pos:start="2964:22" pos:end="2964:31">getsockopt</name><argument_list pos:start="2964:32" pos:end="2964:77">(<argument pos:start="2964:33" pos:end="2964:38"><expr pos:start="2964:33" pos:end="2964:38"><name pos:start="2964:33" pos:end="2964:38">handle</name></expr></argument>, <argument pos:start="2964:41" pos:end="2964:50"><expr pos:start="2964:41" pos:end="2964:50"><name pos:start="2964:41" pos:end="2964:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="2964:53" pos:end="2964:61"><expr pos:start="2964:53" pos:end="2964:61"><name pos:start="2964:53" pos:end="2964:61">SO_LINGER</name></expr></argument>, <argument pos:start="2964:64" pos:end="2964:69"><expr pos:start="2964:64" pos:end="2964:69"><operator pos:start="2964:64" pos:end="2964:64">&amp;</operator><name pos:start="2964:65" pos:end="2964:69">lingr</name></expr></argument>, <argument pos:start="2964:72" pos:end="2964:76"><expr pos:start="2964:72" pos:end="2964:76"><operator pos:start="2964:72" pos:end="2964:72">&amp;</operator><name pos:start="2964:73" pos:end="2964:76">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2965:13" pos:end="2968:13"><if pos:start="2965:13" pos:end="2968:13">if <condition pos:start="2965:16" pos:end="2965:28">(<expr pos:start="2965:17" pos:end="2965:27"><literal type="number" pos:start="2965:17" pos:end="2965:17">0</literal> <operator pos:start="2965:19" pos:end="2965:20">!=</operator> <name pos:start="2965:22" pos:end="2965:27">result</name></expr>)</condition> <block pos:start="2965:30" pos:end="2968:13">{<block_content pos:start="2966:17" pos:end="2967:28">
                <expr_stmt pos:start="2966:17" pos:end="2966:63"><expr pos:start="2966:17" pos:end="2966:62"><call pos:start="2966:17" pos:end="2966:62"><name pos:start="2966:17" pos:end="2966:36">throwSocketException</name><argument_list pos:start="2966:37" pos:end="2966:62">(<argument pos:start="2966:38" pos:end="2966:40"><expr pos:start="2966:38" pos:end="2966:40"><name pos:start="2966:38" pos:end="2966:40">env</name></expr></argument>, <argument pos:start="2966:43" pos:end="2966:61"><expr pos:start="2966:43" pos:end="2966:61"><call pos:start="2966:43" pos:end="2966:61"><name pos:start="2966:43" pos:end="2966:54">convertError</name><argument_list pos:start="2966:55" pos:end="2966:61">(<argument pos:start="2966:56" pos:end="2966:60"><expr pos:start="2966:56" pos:end="2966:60"><name pos:start="2966:56" pos:end="2966:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2967:17" pos:end="2967:28">return <expr pos:start="2967:24" pos:end="2967:27"><name pos:start="2967:24" pos:end="2967:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="2969:13" pos:end="2973:13"><if pos:start="2969:13" pos:end="2971:13">if <condition pos:start="2969:16" pos:end="2969:31">(<expr pos:start="2969:17" pos:end="2969:30"><operator pos:start="2969:17" pos:end="2969:17">!</operator><name pos:start="2969:18" pos:end="2969:30"><name pos:start="2969:18" pos:end="2969:22">lingr</name><operator pos:start="2969:23" pos:end="2969:23">.</operator><name pos:start="2969:24" pos:end="2969:30">l_onoff</name></name></expr>)</condition> <block pos:start="2969:33" pos:end="2971:13">{<block_content pos:start="2970:17" pos:end="2970:30">
                <expr_stmt pos:start="2970:17" pos:end="2970:30"><expr pos:start="2970:17" pos:end="2970:29"><name pos:start="2970:17" pos:end="2970:24">intValue</name> <operator pos:start="2970:26" pos:end="2970:26">=</operator> <operator pos:start="2970:28" pos:end="2970:28">-</operator><literal type="number" pos:start="2970:29" pos:end="2970:29">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2971:15" pos:end="2973:13">else <block pos:start="2971:20" pos:end="2973:13">{<block_content pos:start="2972:17" pos:end="2972:42">
                <expr_stmt pos:start="2972:17" pos:end="2972:42"><expr pos:start="2972:17" pos:end="2972:41"><name pos:start="2972:17" pos:end="2972:24">intValue</name> <operator pos:start="2972:26" pos:end="2972:26">=</operator> <name pos:start="2972:28" pos:end="2972:41"><name pos:start="2972:28" pos:end="2972:32">lingr</name><operator pos:start="2972:33" pos:end="2972:33">.</operator><name pos:start="2972:34" pos:end="2972:41">l_linger</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return pos:start="2974:13" pos:end="2974:53">return <expr pos:start="2974:20" pos:end="2974:52"><call pos:start="2974:20" pos:end="2974:52"><name pos:start="2974:20" pos:end="2974:37">newJavaLangInteger</name><argument_list pos:start="2974:38" pos:end="2974:52">(<argument pos:start="2974:39" pos:end="2974:41"><expr pos:start="2974:39" pos:end="2974:41"><name pos:start="2974:39" pos:end="2974:41">env</name></expr></argument>, <argument pos:start="2974:44" pos:end="2974:51"><expr pos:start="2974:44" pos:end="2974:51"><name pos:start="2974:44" pos:end="2974:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="2976:9" pos:end="2976:37">case <expr pos:start="2976:14" pos:end="2976:36"><name pos:start="2976:14" pos:end="2976:36">JAVASOCKOPT_TCP_NODELAY</name></expr>:</case> <block pos:start="2976:39" pos:end="2986:9">{<block_content pos:start="2977:13" pos:end="2985:53">
            <if_stmt pos:start="2977:13" pos:end="2979:13"><if pos:start="2977:13" pos:end="2979:13">if <condition pos:start="2977:16" pos:end="2977:54">(<expr pos:start="2977:17" pos:end="2977:53"><operator pos:start="2977:17" pos:end="2977:17">(</operator><name pos:start="2977:18" pos:end="2977:25">anOption</name> <operator pos:start="2977:27" pos:end="2977:28">&gt;&gt;</operator> <literal type="number" pos:start="2977:30" pos:end="2977:31">16</literal><operator pos:start="2977:32" pos:end="2977:32">)</operator> <operator pos:start="2977:34" pos:end="2977:34">&amp;</operator> <name pos:start="2977:36" pos:end="2977:53">BROKEN_TCP_NODELAY</name></expr>)</condition> <block pos:start="2977:56" pos:end="2979:13">{<block_content pos:start="2978:17" pos:end="2978:28">
                <return pos:start="2978:17" pos:end="2978:28">return <expr pos:start="2978:24" pos:end="2978:27"><name pos:start="2978:24" pos:end="2978:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2980:13" pos:end="2980:87"><expr pos:start="2980:13" pos:end="2980:86"><name pos:start="2980:13" pos:end="2980:18">result</name> <operator pos:start="2980:20" pos:end="2980:20">=</operator> <call pos:start="2980:22" pos:end="2980:86"><name pos:start="2980:22" pos:end="2980:31">getsockopt</name><argument_list pos:start="2980:32" pos:end="2980:86">(<argument pos:start="2980:33" pos:end="2980:38"><expr pos:start="2980:33" pos:end="2980:38"><name pos:start="2980:33" pos:end="2980:38">handle</name></expr></argument>, <argument pos:start="2980:41" pos:end="2980:51"><expr pos:start="2980:41" pos:end="2980:51"><name pos:start="2980:41" pos:end="2980:51">IPPROTO_TCP</name></expr></argument>, <argument pos:start="2980:54" pos:end="2980:64"><expr pos:start="2980:54" pos:end="2980:64"><name pos:start="2980:54" pos:end="2980:64">TCP_NODELAY</name></expr></argument>, <argument pos:start="2980:67" pos:end="2980:75"><expr pos:start="2980:67" pos:end="2980:75"><operator pos:start="2980:67" pos:end="2980:67">&amp;</operator><name pos:start="2980:68" pos:end="2980:75">intValue</name></expr></argument>, <argument pos:start="2980:78" pos:end="2980:85"><expr pos:start="2980:78" pos:end="2980:85"><operator pos:start="2980:78" pos:end="2980:78">&amp;</operator><name pos:start="2980:79" pos:end="2980:85">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2981:13" pos:end="2984:13"><if pos:start="2981:13" pos:end="2984:13">if <condition pos:start="2981:16" pos:end="2981:28">(<expr pos:start="2981:17" pos:end="2981:27"><literal type="number" pos:start="2981:17" pos:end="2981:17">0</literal> <operator pos:start="2981:19" pos:end="2981:20">!=</operator> <name pos:start="2981:22" pos:end="2981:27">result</name></expr>)</condition> <block pos:start="2981:30" pos:end="2984:13">{<block_content pos:start="2982:17" pos:end="2983:28">
                <expr_stmt pos:start="2982:17" pos:end="2982:63"><expr pos:start="2982:17" pos:end="2982:62"><call pos:start="2982:17" pos:end="2982:62"><name pos:start="2982:17" pos:end="2982:36">throwSocketException</name><argument_list pos:start="2982:37" pos:end="2982:62">(<argument pos:start="2982:38" pos:end="2982:40"><expr pos:start="2982:38" pos:end="2982:40"><name pos:start="2982:38" pos:end="2982:40">env</name></expr></argument>, <argument pos:start="2982:43" pos:end="2982:61"><expr pos:start="2982:43" pos:end="2982:61"><call pos:start="2982:43" pos:end="2982:61"><name pos:start="2982:43" pos:end="2982:54">convertError</name><argument_list pos:start="2982:55" pos:end="2982:61">(<argument pos:start="2982:56" pos:end="2982:60"><expr pos:start="2982:56" pos:end="2982:60"><name pos:start="2982:56" pos:end="2982:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2983:17" pos:end="2983:28">return <expr pos:start="2983:24" pos:end="2983:27"><name pos:start="2983:24" pos:end="2983:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="2985:13" pos:end="2985:53">return <expr pos:start="2985:20" pos:end="2985:52"><call pos:start="2985:20" pos:end="2985:52"><name pos:start="2985:20" pos:end="2985:37">newJavaLangBoolean</name><argument_list pos:start="2985:38" pos:end="2985:52">(<argument pos:start="2985:39" pos:end="2985:41"><expr pos:start="2985:39" pos:end="2985:41"><name pos:start="2985:39" pos:end="2985:41">env</name></expr></argument>, <argument pos:start="2985:44" pos:end="2985:51"><expr pos:start="2985:44" pos:end="2985:51"><name pos:start="2985:44" pos:end="2985:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="2987:9" pos:end="2987:35">case <expr pos:start="2987:14" pos:end="2987:34"><name pos:start="2987:14" pos:end="2987:34">JAVASOCKOPT_MCAST_TTL</name></expr>:</case> <block pos:start="2987:37" pos:end="2997:9">{<block_content pos:start="2988:13" pos:end="2996:67">
            <if_stmt pos:start="2988:13" pos:end="2990:13"><if pos:start="2988:13" pos:end="2990:13">if <condition pos:start="2988:16" pos:end="2988:56">(<expr pos:start="2988:17" pos:end="2988:55"><operator pos:start="2988:17" pos:end="2988:17">(</operator><name pos:start="2988:18" pos:end="2988:25">anOption</name> <operator pos:start="2988:27" pos:end="2988:28">&gt;&gt;</operator> <literal type="number" pos:start="2988:30" pos:end="2988:31">16</literal><operator pos:start="2988:32" pos:end="2988:32">)</operator> <operator pos:start="2988:34" pos:end="2988:34">&amp;</operator> <name pos:start="2988:36" pos:end="2988:55">BROKEN_MULTICAST_TTL</name></expr>)</condition> <block pos:start="2988:58" pos:end="2990:13">{<block_content pos:start="2989:17" pos:end="2989:47">
                <return pos:start="2989:17" pos:end="2989:47">return <expr pos:start="2989:24" pos:end="2989:46"><call pos:start="2989:24" pos:end="2989:46"><name pos:start="2989:24" pos:end="2989:38">newJavaLangByte</name><argument_list pos:start="2989:39" pos:end="2989:46">(<argument pos:start="2989:40" pos:end="2989:42"><expr pos:start="2989:40" pos:end="2989:42"><name pos:start="2989:40" pos:end="2989:42">env</name></expr></argument>, <argument pos:start="2989:45" pos:end="2989:45"><expr pos:start="2989:45" pos:end="2989:45"><literal type="number" pos:start="2989:45" pos:end="2989:45">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2991:13" pos:end="2991:93"><expr pos:start="2991:13" pos:end="2991:92"><name pos:start="2991:13" pos:end="2991:18">result</name> <operator pos:start="2991:20" pos:end="2991:20">=</operator> <call pos:start="2991:22" pos:end="2991:92"><name pos:start="2991:22" pos:end="2991:31">getsockopt</name><argument_list pos:start="2991:32" pos:end="2991:92">(<argument pos:start="2991:33" pos:end="2991:38"><expr pos:start="2991:33" pos:end="2991:38"><name pos:start="2991:33" pos:end="2991:38">handle</name></expr></argument>, <argument pos:start="2991:41" pos:end="2991:50"><expr pos:start="2991:41" pos:end="2991:50"><name pos:start="2991:41" pos:end="2991:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="2991:53" pos:end="2991:68"><expr pos:start="2991:53" pos:end="2991:68"><name pos:start="2991:53" pos:end="2991:68">IP_MULTICAST_TTL</name></expr></argument>, <argument pos:start="2991:71" pos:end="2991:80"><expr pos:start="2991:71" pos:end="2991:80"><operator pos:start="2991:71" pos:end="2991:71">&amp;</operator><name pos:start="2991:72" pos:end="2991:80">byteValue</name></expr></argument>, <argument pos:start="2991:83" pos:end="2991:91"><expr pos:start="2991:83" pos:end="2991:91"><operator pos:start="2991:83" pos:end="2991:83">&amp;</operator><name pos:start="2991:84" pos:end="2991:91">byteSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2992:13" pos:end="2995:13"><if pos:start="2992:13" pos:end="2995:13">if <condition pos:start="2992:16" pos:end="2992:28">(<expr pos:start="2992:17" pos:end="2992:27"><literal type="number" pos:start="2992:17" pos:end="2992:17">0</literal> <operator pos:start="2992:19" pos:end="2992:20">!=</operator> <name pos:start="2992:22" pos:end="2992:27">result</name></expr>)</condition> <block pos:start="2992:30" pos:end="2995:13">{<block_content pos:start="2993:17" pos:end="2994:28">
                <expr_stmt pos:start="2993:17" pos:end="2993:63"><expr pos:start="2993:17" pos:end="2993:62"><call pos:start="2993:17" pos:end="2993:62"><name pos:start="2993:17" pos:end="2993:36">throwSocketException</name><argument_list pos:start="2993:37" pos:end="2993:62">(<argument pos:start="2993:38" pos:end="2993:40"><expr pos:start="2993:38" pos:end="2993:40"><name pos:start="2993:38" pos:end="2993:40">env</name></expr></argument>, <argument pos:start="2993:43" pos:end="2993:61"><expr pos:start="2993:43" pos:end="2993:61"><call pos:start="2993:43" pos:end="2993:61"><name pos:start="2993:43" pos:end="2993:54">convertError</name><argument_list pos:start="2993:55" pos:end="2993:61">(<argument pos:start="2993:56" pos:end="2993:60"><expr pos:start="2993:56" pos:end="2993:60"><name pos:start="2993:56" pos:end="2993:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2994:17" pos:end="2994:28">return <expr pos:start="2994:24" pos:end="2994:27"><name pos:start="2994:24" pos:end="2994:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="2996:13" pos:end="2996:67">return <expr pos:start="2996:20" pos:end="2996:66"><call pos:start="2996:20" pos:end="2996:66"><name pos:start="2996:20" pos:end="2996:34">newJavaLangByte</name><argument_list pos:start="2996:35" pos:end="2996:66">(<argument pos:start="2996:36" pos:end="2996:38"><expr pos:start="2996:36" pos:end="2996:38"><name pos:start="2996:36" pos:end="2996:38">env</name></expr></argument>, <argument pos:start="2996:41" pos:end="2996:65"><expr pos:start="2996:41" pos:end="2996:65"><operator pos:start="2996:41" pos:end="2996:41">(</operator><name pos:start="2996:42" pos:end="2996:46">jbyte</name><operator pos:start="2996:47" pos:end="2996:47">)</operator><operator pos:start="2996:48" pos:end="2996:48">(</operator><name pos:start="2996:49" pos:end="2996:57">byteValue</name> <operator pos:start="2996:59" pos:end="2996:59">&amp;</operator> <literal type="number" pos:start="2996:61" pos:end="2996:64">0xFF</literal><operator pos:start="2996:65" pos:end="2996:65">)</operator></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="2998:9" pos:end="2998:41">case <expr pos:start="2998:14" pos:end="2998:40"><name pos:start="2998:14" pos:end="2998:40">JAVASOCKOPT_MCAST_INTERFACE</name></expr>:</case> <block pos:start="2998:43" pos:end="3008:9">{<block_content pos:start="2999:13" pos:end="3007:67">
            <if_stmt pos:start="2999:13" pos:end="3001:13"><if pos:start="2999:13" pos:end="3001:13">if <condition pos:start="2999:16" pos:end="2999:55">(<expr pos:start="2999:17" pos:end="2999:54"><operator pos:start="2999:17" pos:end="2999:17">(</operator><name pos:start="2999:18" pos:end="2999:25">anOption</name> <operator pos:start="2999:27" pos:end="2999:28">&gt;&gt;</operator> <literal type="number" pos:start="2999:30" pos:end="2999:31">16</literal><operator pos:start="2999:32" pos:end="2999:32">)</operator> <operator pos:start="2999:34" pos:end="2999:34">&amp;</operator> <name pos:start="2999:36" pos:end="2999:54">BROKEN_MULTICAST_IF</name></expr>)</condition> <block pos:start="2999:57" pos:end="3001:13">{<block_content pos:start="3000:17" pos:end="3000:28">
                <return pos:start="3000:17" pos:end="3000:28">return <expr pos:start="3000:24" pos:end="3000:27"><name pos:start="3000:24" pos:end="3000:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3002:13" pos:end="3002:90"><expr pos:start="3002:13" pos:end="3002:89"><name pos:start="3002:13" pos:end="3002:18">result</name> <operator pos:start="3002:20" pos:end="3002:20">=</operator> <call pos:start="3002:22" pos:end="3002:89"><name pos:start="3002:22" pos:end="3002:31">getsockopt</name><argument_list pos:start="3002:32" pos:end="3002:89">(<argument pos:start="3002:33" pos:end="3002:38"><expr pos:start="3002:33" pos:end="3002:38"><name pos:start="3002:33" pos:end="3002:38">handle</name></expr></argument>, <argument pos:start="3002:41" pos:end="3002:50"><expr pos:start="3002:41" pos:end="3002:50"><name pos:start="3002:41" pos:end="3002:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3002:53" pos:end="3002:67"><expr pos:start="3002:53" pos:end="3002:67"><name pos:start="3002:53" pos:end="3002:67">IP_MULTICAST_IF</name></expr></argument>, <argument pos:start="3002:70" pos:end="3002:77"><expr pos:start="3002:70" pos:end="3002:77"><operator pos:start="3002:70" pos:end="3002:70">&amp;</operator><name pos:start="3002:71" pos:end="3002:77">sockVal</name></expr></argument>, <argument pos:start="3002:80" pos:end="3002:88"><expr pos:start="3002:80" pos:end="3002:88"><operator pos:start="3002:80" pos:end="3002:80">&amp;</operator><name pos:start="3002:81" pos:end="3002:88">sockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3003:13" pos:end="3006:13"><if pos:start="3003:13" pos:end="3006:13">if <condition pos:start="3003:16" pos:end="3003:28">(<expr pos:start="3003:17" pos:end="3003:27"><literal type="number" pos:start="3003:17" pos:end="3003:17">0</literal> <operator pos:start="3003:19" pos:end="3003:20">!=</operator> <name pos:start="3003:22" pos:end="3003:27">result</name></expr>)</condition> <block pos:start="3003:30" pos:end="3006:13">{<block_content pos:start="3004:17" pos:end="3005:28">
                <expr_stmt pos:start="3004:17" pos:end="3004:63"><expr pos:start="3004:17" pos:end="3004:62"><call pos:start="3004:17" pos:end="3004:62"><name pos:start="3004:17" pos:end="3004:36">throwSocketException</name><argument_list pos:start="3004:37" pos:end="3004:62">(<argument pos:start="3004:38" pos:end="3004:40"><expr pos:start="3004:38" pos:end="3004:40"><name pos:start="3004:38" pos:end="3004:40">env</name></expr></argument>, <argument pos:start="3004:43" pos:end="3004:61"><expr pos:start="3004:43" pos:end="3004:61"><call pos:start="3004:43" pos:end="3004:61"><name pos:start="3004:43" pos:end="3004:54">convertError</name><argument_list pos:start="3004:55" pos:end="3004:61">(<argument pos:start="3004:56" pos:end="3004:60"><expr pos:start="3004:56" pos:end="3004:60"><name pos:start="3004:56" pos:end="3004:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3005:17" pos:end="3005:28">return <expr pos:start="3005:24" pos:end="3005:27"><name pos:start="3005:24" pos:end="3005:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3007:13" pos:end="3007:67">return <expr pos:start="3007:20" pos:end="3007:66"><call pos:start="3007:20" pos:end="3007:66"><name pos:start="3007:20" pos:end="3007:40">structInToInetAddress</name><argument_list pos:start="3007:41" pos:end="3007:66">(<argument pos:start="3007:42" pos:end="3007:44"><expr pos:start="3007:42" pos:end="3007:44"><name pos:start="3007:42" pos:end="3007:44">env</name></expr></argument>, <argument pos:start="3007:47" pos:end="3007:65"><expr pos:start="3007:47" pos:end="3007:65"><operator pos:start="3007:47" pos:end="3007:47">&amp;</operator><operator pos:start="3007:48" pos:end="3007:48">(</operator><name pos:start="3007:49" pos:end="3007:64"><name pos:start="3007:49" pos:end="3007:55">sockVal</name><operator pos:start="3007:56" pos:end="3007:56">.</operator><name pos:start="3007:57" pos:end="3007:64">sin_addr</name></name><operator pos:start="3007:65" pos:end="3007:65">)</operator></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3009:9" pos:end="3009:35">case <expr pos:start="3009:14" pos:end="3009:34"><name pos:start="3009:14" pos:end="3009:34">JAVASOCKOPT_SO_SNDBUF</name></expr>:</case> <block pos:start="3009:37" pos:end="3016:9">{<block_content pos:start="3010:13" pos:end="3015:53">
            <expr_stmt pos:start="3010:13" pos:end="3010:84"><expr pos:start="3010:13" pos:end="3010:83"><name pos:start="3010:13" pos:end="3010:18">result</name> <operator pos:start="3010:20" pos:end="3010:20">=</operator> <call pos:start="3010:22" pos:end="3010:83"><name pos:start="3010:22" pos:end="3010:31">getsockopt</name><argument_list pos:start="3010:32" pos:end="3010:83">(<argument pos:start="3010:33" pos:end="3010:38"><expr pos:start="3010:33" pos:end="3010:38"><name pos:start="3010:33" pos:end="3010:38">handle</name></expr></argument>, <argument pos:start="3010:41" pos:end="3010:50"><expr pos:start="3010:41" pos:end="3010:50"><name pos:start="3010:41" pos:end="3010:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3010:53" pos:end="3010:61"><expr pos:start="3010:53" pos:end="3010:61"><name pos:start="3010:53" pos:end="3010:61">SO_SNDBUF</name></expr></argument>, <argument pos:start="3010:64" pos:end="3010:72"><expr pos:start="3010:64" pos:end="3010:72"><operator pos:start="3010:64" pos:end="3010:64">&amp;</operator><name pos:start="3010:65" pos:end="3010:72">intValue</name></expr></argument>, <argument pos:start="3010:75" pos:end="3010:82"><expr pos:start="3010:75" pos:end="3010:82"><operator pos:start="3010:75" pos:end="3010:75">&amp;</operator><name pos:start="3010:76" pos:end="3010:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3011:13" pos:end="3014:13"><if pos:start="3011:13" pos:end="3014:13">if <condition pos:start="3011:16" pos:end="3011:28">(<expr pos:start="3011:17" pos:end="3011:27"><literal type="number" pos:start="3011:17" pos:end="3011:17">0</literal> <operator pos:start="3011:19" pos:end="3011:20">!=</operator> <name pos:start="3011:22" pos:end="3011:27">result</name></expr>)</condition> <block pos:start="3011:30" pos:end="3014:13">{<block_content pos:start="3012:17" pos:end="3013:28">
                <expr_stmt pos:start="3012:17" pos:end="3012:63"><expr pos:start="3012:17" pos:end="3012:62"><call pos:start="3012:17" pos:end="3012:62"><name pos:start="3012:17" pos:end="3012:36">throwSocketException</name><argument_list pos:start="3012:37" pos:end="3012:62">(<argument pos:start="3012:38" pos:end="3012:40"><expr pos:start="3012:38" pos:end="3012:40"><name pos:start="3012:38" pos:end="3012:40">env</name></expr></argument>, <argument pos:start="3012:43" pos:end="3012:61"><expr pos:start="3012:43" pos:end="3012:61"><call pos:start="3012:43" pos:end="3012:61"><name pos:start="3012:43" pos:end="3012:54">convertError</name><argument_list pos:start="3012:55" pos:end="3012:61">(<argument pos:start="3012:56" pos:end="3012:60"><expr pos:start="3012:56" pos:end="3012:60"><name pos:start="3012:56" pos:end="3012:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3013:17" pos:end="3013:28">return <expr pos:start="3013:24" pos:end="3013:27"><name pos:start="3013:24" pos:end="3013:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3015:13" pos:end="3015:53">return <expr pos:start="3015:20" pos:end="3015:52"><call pos:start="3015:20" pos:end="3015:52"><name pos:start="3015:20" pos:end="3015:37">newJavaLangInteger</name><argument_list pos:start="3015:38" pos:end="3015:52">(<argument pos:start="3015:39" pos:end="3015:41"><expr pos:start="3015:39" pos:end="3015:41"><name pos:start="3015:39" pos:end="3015:41">env</name></expr></argument>, <argument pos:start="3015:44" pos:end="3015:51"><expr pos:start="3015:44" pos:end="3015:51"><name pos:start="3015:44" pos:end="3015:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3017:9" pos:end="3017:35">case <expr pos:start="3017:14" pos:end="3017:34"><name pos:start="3017:14" pos:end="3017:34">JAVASOCKOPT_SO_RCVBUF</name></expr>:</case> <block pos:start="3017:37" pos:end="3024:9">{<block_content pos:start="3018:13" pos:end="3023:53">
            <expr_stmt pos:start="3018:13" pos:end="3018:84"><expr pos:start="3018:13" pos:end="3018:83"><name pos:start="3018:13" pos:end="3018:18">result</name> <operator pos:start="3018:20" pos:end="3018:20">=</operator> <call pos:start="3018:22" pos:end="3018:83"><name pos:start="3018:22" pos:end="3018:31">getsockopt</name><argument_list pos:start="3018:32" pos:end="3018:83">(<argument pos:start="3018:33" pos:end="3018:38"><expr pos:start="3018:33" pos:end="3018:38"><name pos:start="3018:33" pos:end="3018:38">handle</name></expr></argument>, <argument pos:start="3018:41" pos:end="3018:50"><expr pos:start="3018:41" pos:end="3018:50"><name pos:start="3018:41" pos:end="3018:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3018:53" pos:end="3018:61"><expr pos:start="3018:53" pos:end="3018:61"><name pos:start="3018:53" pos:end="3018:61">SO_RCVBUF</name></expr></argument>, <argument pos:start="3018:64" pos:end="3018:72"><expr pos:start="3018:64" pos:end="3018:72"><operator pos:start="3018:64" pos:end="3018:64">&amp;</operator><name pos:start="3018:65" pos:end="3018:72">intValue</name></expr></argument>, <argument pos:start="3018:75" pos:end="3018:82"><expr pos:start="3018:75" pos:end="3018:82"><operator pos:start="3018:75" pos:end="3018:75">&amp;</operator><name pos:start="3018:76" pos:end="3018:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3019:13" pos:end="3022:13"><if pos:start="3019:13" pos:end="3022:13">if <condition pos:start="3019:16" pos:end="3019:28">(<expr pos:start="3019:17" pos:end="3019:27"><literal type="number" pos:start="3019:17" pos:end="3019:17">0</literal> <operator pos:start="3019:19" pos:end="3019:20">!=</operator> <name pos:start="3019:22" pos:end="3019:27">result</name></expr>)</condition> <block pos:start="3019:30" pos:end="3022:13">{<block_content pos:start="3020:17" pos:end="3021:28">
                <expr_stmt pos:start="3020:17" pos:end="3020:63"><expr pos:start="3020:17" pos:end="3020:62"><call pos:start="3020:17" pos:end="3020:62"><name pos:start="3020:17" pos:end="3020:36">throwSocketException</name><argument_list pos:start="3020:37" pos:end="3020:62">(<argument pos:start="3020:38" pos:end="3020:40"><expr pos:start="3020:38" pos:end="3020:40"><name pos:start="3020:38" pos:end="3020:40">env</name></expr></argument>, <argument pos:start="3020:43" pos:end="3020:61"><expr pos:start="3020:43" pos:end="3020:61"><call pos:start="3020:43" pos:end="3020:61"><name pos:start="3020:43" pos:end="3020:54">convertError</name><argument_list pos:start="3020:55" pos:end="3020:61">(<argument pos:start="3020:56" pos:end="3020:60"><expr pos:start="3020:56" pos:end="3020:60"><name pos:start="3020:56" pos:end="3020:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3021:17" pos:end="3021:28">return <expr pos:start="3021:24" pos:end="3021:27"><name pos:start="3021:24" pos:end="3021:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3023:13" pos:end="3023:53">return <expr pos:start="3023:20" pos:end="3023:52"><call pos:start="3023:20" pos:end="3023:52"><name pos:start="3023:20" pos:end="3023:37">newJavaLangInteger</name><argument_list pos:start="3023:38" pos:end="3023:52">(<argument pos:start="3023:39" pos:end="3023:41"><expr pos:start="3023:39" pos:end="3023:41"><name pos:start="3023:39" pos:end="3023:41">env</name></expr></argument>, <argument pos:start="3023:44" pos:end="3023:51"><expr pos:start="3023:44" pos:end="3023:51"><name pos:start="3023:44" pos:end="3023:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3025:9" pos:end="3025:38">case <expr pos:start="3025:14" pos:end="3025:37"><name pos:start="3025:14" pos:end="3025:37">JAVASOCKOPT_SO_BROADCAST</name></expr>:</case> <block pos:start="3025:40" pos:end="3032:9">{<block_content pos:start="3026:13" pos:end="3031:53">
            <expr_stmt pos:start="3026:13" pos:end="3026:87"><expr pos:start="3026:13" pos:end="3026:86"><name pos:start="3026:13" pos:end="3026:18">result</name> <operator pos:start="3026:20" pos:end="3026:20">=</operator> <call pos:start="3026:22" pos:end="3026:86"><name pos:start="3026:22" pos:end="3026:31">getsockopt</name><argument_list pos:start="3026:32" pos:end="3026:86">(<argument pos:start="3026:33" pos:end="3026:38"><expr pos:start="3026:33" pos:end="3026:38"><name pos:start="3026:33" pos:end="3026:38">handle</name></expr></argument>, <argument pos:start="3026:41" pos:end="3026:50"><expr pos:start="3026:41" pos:end="3026:50"><name pos:start="3026:41" pos:end="3026:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3026:53" pos:end="3026:64"><expr pos:start="3026:53" pos:end="3026:64"><name pos:start="3026:53" pos:end="3026:64">SO_BROADCAST</name></expr></argument>, <argument pos:start="3026:67" pos:end="3026:75"><expr pos:start="3026:67" pos:end="3026:75"><operator pos:start="3026:67" pos:end="3026:67">&amp;</operator><name pos:start="3026:68" pos:end="3026:75">intValue</name></expr></argument>, <argument pos:start="3026:78" pos:end="3026:85"><expr pos:start="3026:78" pos:end="3026:85"><operator pos:start="3026:78" pos:end="3026:78">&amp;</operator><name pos:start="3026:79" pos:end="3026:85">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3027:13" pos:end="3030:13"><if pos:start="3027:13" pos:end="3030:13">if <condition pos:start="3027:16" pos:end="3027:28">(<expr pos:start="3027:17" pos:end="3027:27"><literal type="number" pos:start="3027:17" pos:end="3027:17">0</literal> <operator pos:start="3027:19" pos:end="3027:20">!=</operator> <name pos:start="3027:22" pos:end="3027:27">result</name></expr>)</condition> <block pos:start="3027:30" pos:end="3030:13">{<block_content pos:start="3028:17" pos:end="3029:28">
                <expr_stmt pos:start="3028:17" pos:end="3028:63"><expr pos:start="3028:17" pos:end="3028:62"><call pos:start="3028:17" pos:end="3028:62"><name pos:start="3028:17" pos:end="3028:36">throwSocketException</name><argument_list pos:start="3028:37" pos:end="3028:62">(<argument pos:start="3028:38" pos:end="3028:40"><expr pos:start="3028:38" pos:end="3028:40"><name pos:start="3028:38" pos:end="3028:40">env</name></expr></argument>, <argument pos:start="3028:43" pos:end="3028:61"><expr pos:start="3028:43" pos:end="3028:61"><call pos:start="3028:43" pos:end="3028:61"><name pos:start="3028:43" pos:end="3028:54">convertError</name><argument_list pos:start="3028:55" pos:end="3028:61">(<argument pos:start="3028:56" pos:end="3028:60"><expr pos:start="3028:56" pos:end="3028:60"><name pos:start="3028:56" pos:end="3028:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3029:17" pos:end="3029:28">return <expr pos:start="3029:24" pos:end="3029:27"><name pos:start="3029:24" pos:end="3029:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3031:13" pos:end="3031:53">return <expr pos:start="3031:20" pos:end="3031:52"><call pos:start="3031:20" pos:end="3031:52"><name pos:start="3031:20" pos:end="3031:37">newJavaLangBoolean</name><argument_list pos:start="3031:38" pos:end="3031:52">(<argument pos:start="3031:39" pos:end="3031:41"><expr pos:start="3031:39" pos:end="3031:41"><name pos:start="3031:39" pos:end="3031:41">env</name></expr></argument>, <argument pos:start="3031:44" pos:end="3031:51"><expr pos:start="3031:44" pos:end="3031:51"><name pos:start="3031:44" pos:end="3031:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3033:9" pos:end="3033:38">case <expr pos:start="3033:14" pos:end="3033:37"><name pos:start="3033:14" pos:end="3033:37">JAVASOCKOPT_SO_REUSEADDR</name></expr>:</case> <block pos:start="3033:40" pos:end="3040:9">{<block_content pos:start="3034:13" pos:end="3039:53">
            <expr_stmt pos:start="3034:13" pos:end="3034:87"><expr pos:start="3034:13" pos:end="3034:86"><name pos:start="3034:13" pos:end="3034:18">result</name> <operator pos:start="3034:20" pos:end="3034:20">=</operator> <call pos:start="3034:22" pos:end="3034:86"><name pos:start="3034:22" pos:end="3034:31">getsockopt</name><argument_list pos:start="3034:32" pos:end="3034:86">(<argument pos:start="3034:33" pos:end="3034:38"><expr pos:start="3034:33" pos:end="3034:38"><name pos:start="3034:33" pos:end="3034:38">handle</name></expr></argument>, <argument pos:start="3034:41" pos:end="3034:50"><expr pos:start="3034:41" pos:end="3034:50"><name pos:start="3034:41" pos:end="3034:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3034:53" pos:end="3034:64"><expr pos:start="3034:53" pos:end="3034:64"><name pos:start="3034:53" pos:end="3034:64">SO_REUSEADDR</name></expr></argument>, <argument pos:start="3034:67" pos:end="3034:75"><expr pos:start="3034:67" pos:end="3034:75"><operator pos:start="3034:67" pos:end="3034:67">&amp;</operator><name pos:start="3034:68" pos:end="3034:75">intValue</name></expr></argument>, <argument pos:start="3034:78" pos:end="3034:85"><expr pos:start="3034:78" pos:end="3034:85"><operator pos:start="3034:78" pos:end="3034:78">&amp;</operator><name pos:start="3034:79" pos:end="3034:85">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3035:13" pos:end="3038:13"><if pos:start="3035:13" pos:end="3038:13">if <condition pos:start="3035:16" pos:end="3035:28">(<expr pos:start="3035:17" pos:end="3035:27"><literal type="number" pos:start="3035:17" pos:end="3035:17">0</literal> <operator pos:start="3035:19" pos:end="3035:20">!=</operator> <name pos:start="3035:22" pos:end="3035:27">result</name></expr>)</condition> <block pos:start="3035:30" pos:end="3038:13">{<block_content pos:start="3036:17" pos:end="3037:28">
                <expr_stmt pos:start="3036:17" pos:end="3036:63"><expr pos:start="3036:17" pos:end="3036:62"><call pos:start="3036:17" pos:end="3036:62"><name pos:start="3036:17" pos:end="3036:36">throwSocketException</name><argument_list pos:start="3036:37" pos:end="3036:62">(<argument pos:start="3036:38" pos:end="3036:40"><expr pos:start="3036:38" pos:end="3036:40"><name pos:start="3036:38" pos:end="3036:40">env</name></expr></argument>, <argument pos:start="3036:43" pos:end="3036:61"><expr pos:start="3036:43" pos:end="3036:61"><call pos:start="3036:43" pos:end="3036:61"><name pos:start="3036:43" pos:end="3036:54">convertError</name><argument_list pos:start="3036:55" pos:end="3036:61">(<argument pos:start="3036:56" pos:end="3036:60"><expr pos:start="3036:56" pos:end="3036:60"><name pos:start="3036:56" pos:end="3036:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3037:17" pos:end="3037:28">return <expr pos:start="3037:24" pos:end="3037:27"><name pos:start="3037:24" pos:end="3037:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3039:13" pos:end="3039:53">return <expr pos:start="3039:20" pos:end="3039:52"><call pos:start="3039:20" pos:end="3039:52"><name pos:start="3039:20" pos:end="3039:37">newJavaLangBoolean</name><argument_list pos:start="3039:38" pos:end="3039:52">(<argument pos:start="3039:39" pos:end="3039:41"><expr pos:start="3039:39" pos:end="3039:41"><name pos:start="3039:39" pos:end="3039:41">env</name></expr></argument>, <argument pos:start="3039:44" pos:end="3039:51"><expr pos:start="3039:44" pos:end="3039:51"><name pos:start="3039:44" pos:end="3039:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3041:9" pos:end="3041:38">case <expr pos:start="3041:14" pos:end="3041:37"><name pos:start="3041:14" pos:end="3041:37">JAVASOCKOPT_SO_KEEPALIVE</name></expr>:</case> <block pos:start="3041:40" pos:end="3048:9">{<block_content pos:start="3042:13" pos:end="3047:53">
            <expr_stmt pos:start="3042:13" pos:end="3042:87"><expr pos:start="3042:13" pos:end="3042:86"><name pos:start="3042:13" pos:end="3042:18">result</name> <operator pos:start="3042:20" pos:end="3042:20">=</operator> <call pos:start="3042:22" pos:end="3042:86"><name pos:start="3042:22" pos:end="3042:31">getsockopt</name><argument_list pos:start="3042:32" pos:end="3042:86">(<argument pos:start="3042:33" pos:end="3042:38"><expr pos:start="3042:33" pos:end="3042:38"><name pos:start="3042:33" pos:end="3042:38">handle</name></expr></argument>, <argument pos:start="3042:41" pos:end="3042:50"><expr pos:start="3042:41" pos:end="3042:50"><name pos:start="3042:41" pos:end="3042:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3042:53" pos:end="3042:64"><expr pos:start="3042:53" pos:end="3042:64"><name pos:start="3042:53" pos:end="3042:64">SO_KEEPALIVE</name></expr></argument>, <argument pos:start="3042:67" pos:end="3042:75"><expr pos:start="3042:67" pos:end="3042:75"><operator pos:start="3042:67" pos:end="3042:67">&amp;</operator><name pos:start="3042:68" pos:end="3042:75">intValue</name></expr></argument>, <argument pos:start="3042:78" pos:end="3042:85"><expr pos:start="3042:78" pos:end="3042:85"><operator pos:start="3042:78" pos:end="3042:78">&amp;</operator><name pos:start="3042:79" pos:end="3042:85">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3043:13" pos:end="3046:13"><if pos:start="3043:13" pos:end="3046:13">if <condition pos:start="3043:16" pos:end="3043:28">(<expr pos:start="3043:17" pos:end="3043:27"><literal type="number" pos:start="3043:17" pos:end="3043:17">0</literal> <operator pos:start="3043:19" pos:end="3043:20">!=</operator> <name pos:start="3043:22" pos:end="3043:27">result</name></expr>)</condition> <block pos:start="3043:30" pos:end="3046:13">{<block_content pos:start="3044:17" pos:end="3045:28">
                <expr_stmt pos:start="3044:17" pos:end="3044:63"><expr pos:start="3044:17" pos:end="3044:62"><call pos:start="3044:17" pos:end="3044:62"><name pos:start="3044:17" pos:end="3044:36">throwSocketException</name><argument_list pos:start="3044:37" pos:end="3044:62">(<argument pos:start="3044:38" pos:end="3044:40"><expr pos:start="3044:38" pos:end="3044:40"><name pos:start="3044:38" pos:end="3044:40">env</name></expr></argument>, <argument pos:start="3044:43" pos:end="3044:61"><expr pos:start="3044:43" pos:end="3044:61"><call pos:start="3044:43" pos:end="3044:61"><name pos:start="3044:43" pos:end="3044:54">convertError</name><argument_list pos:start="3044:55" pos:end="3044:61">(<argument pos:start="3044:56" pos:end="3044:60"><expr pos:start="3044:56" pos:end="3044:60"><name pos:start="3044:56" pos:end="3044:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3045:17" pos:end="3045:28">return <expr pos:start="3045:24" pos:end="3045:27"><name pos:start="3045:24" pos:end="3045:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3047:13" pos:end="3047:53">return <expr pos:start="3047:20" pos:end="3047:52"><call pos:start="3047:20" pos:end="3047:52"><name pos:start="3047:20" pos:end="3047:37">newJavaLangBoolean</name><argument_list pos:start="3047:38" pos:end="3047:52">(<argument pos:start="3047:39" pos:end="3047:41"><expr pos:start="3047:39" pos:end="3047:41"><name pos:start="3047:39" pos:end="3047:41">env</name></expr></argument>, <argument pos:start="3047:44" pos:end="3047:51"><expr pos:start="3047:44" pos:end="3047:51"><name pos:start="3047:44" pos:end="3047:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3049:9" pos:end="3049:38">case <expr pos:start="3049:14" pos:end="3049:37"><name pos:start="3049:14" pos:end="3049:37">JAVASOCKOPT_SO_OOBINLINE</name></expr>:</case> <block pos:start="3049:40" pos:end="3056:9">{<block_content pos:start="3050:13" pos:end="3055:53">
            <expr_stmt pos:start="3050:13" pos:end="3050:87"><expr pos:start="3050:13" pos:end="3050:86"><name pos:start="3050:13" pos:end="3050:18">result</name> <operator pos:start="3050:20" pos:end="3050:20">=</operator> <call pos:start="3050:22" pos:end="3050:86"><name pos:start="3050:22" pos:end="3050:31">getsockopt</name><argument_list pos:start="3050:32" pos:end="3050:86">(<argument pos:start="3050:33" pos:end="3050:38"><expr pos:start="3050:33" pos:end="3050:38"><name pos:start="3050:33" pos:end="3050:38">handle</name></expr></argument>, <argument pos:start="3050:41" pos:end="3050:50"><expr pos:start="3050:41" pos:end="3050:50"><name pos:start="3050:41" pos:end="3050:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3050:53" pos:end="3050:64"><expr pos:start="3050:53" pos:end="3050:64"><name pos:start="3050:53" pos:end="3050:64">SO_OOBINLINE</name></expr></argument>, <argument pos:start="3050:67" pos:end="3050:75"><expr pos:start="3050:67" pos:end="3050:75"><operator pos:start="3050:67" pos:end="3050:67">&amp;</operator><name pos:start="3050:68" pos:end="3050:75">intValue</name></expr></argument>, <argument pos:start="3050:78" pos:end="3050:85"><expr pos:start="3050:78" pos:end="3050:85"><operator pos:start="3050:78" pos:end="3050:78">&amp;</operator><name pos:start="3050:79" pos:end="3050:85">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3051:13" pos:end="3054:13"><if pos:start="3051:13" pos:end="3054:13">if <condition pos:start="3051:16" pos:end="3051:28">(<expr pos:start="3051:17" pos:end="3051:27"><literal type="number" pos:start="3051:17" pos:end="3051:17">0</literal> <operator pos:start="3051:19" pos:end="3051:20">!=</operator> <name pos:start="3051:22" pos:end="3051:27">result</name></expr>)</condition> <block pos:start="3051:30" pos:end="3054:13">{<block_content pos:start="3052:17" pos:end="3053:28">
                <expr_stmt pos:start="3052:17" pos:end="3052:63"><expr pos:start="3052:17" pos:end="3052:62"><call pos:start="3052:17" pos:end="3052:62"><name pos:start="3052:17" pos:end="3052:36">throwSocketException</name><argument_list pos:start="3052:37" pos:end="3052:62">(<argument pos:start="3052:38" pos:end="3052:40"><expr pos:start="3052:38" pos:end="3052:40"><name pos:start="3052:38" pos:end="3052:40">env</name></expr></argument>, <argument pos:start="3052:43" pos:end="3052:61"><expr pos:start="3052:43" pos:end="3052:61"><call pos:start="3052:43" pos:end="3052:61"><name pos:start="3052:43" pos:end="3052:54">convertError</name><argument_list pos:start="3052:55" pos:end="3052:61">(<argument pos:start="3052:56" pos:end="3052:60"><expr pos:start="3052:56" pos:end="3052:60"><name pos:start="3052:56" pos:end="3052:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3053:17" pos:end="3053:28">return <expr pos:start="3053:24" pos:end="3053:27"><name pos:start="3053:24" pos:end="3053:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3055:13" pos:end="3055:53">return <expr pos:start="3055:20" pos:end="3055:52"><call pos:start="3055:20" pos:end="3055:52"><name pos:start="3055:20" pos:end="3055:37">newJavaLangBoolean</name><argument_list pos:start="3055:38" pos:end="3055:52">(<argument pos:start="3055:39" pos:end="3055:41"><expr pos:start="3055:39" pos:end="3055:41"><name pos:start="3055:39" pos:end="3055:41">env</name></expr></argument>, <argument pos:start="3055:44" pos:end="3055:51"><expr pos:start="3055:44" pos:end="3055:51"><name pos:start="3055:44" pos:end="3055:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3057:9" pos:end="3057:43">case <expr pos:start="3057:14" pos:end="3057:42"><name pos:start="3057:14" pos:end="3057:42">JAVASOCKOPT_IP_MULTICAST_LOOP</name></expr>:</case> <block pos:start="3057:45" pos:end="3064:9">{<block_content pos:start="3058:13" pos:end="3063:53">
            <expr_stmt pos:start="3058:13" pos:end="3058:92"><expr pos:start="3058:13" pos:end="3058:91"><name pos:start="3058:13" pos:end="3058:18">result</name> <operator pos:start="3058:20" pos:end="3058:20">=</operator> <call pos:start="3058:22" pos:end="3058:91"><name pos:start="3058:22" pos:end="3058:31">getsockopt</name><argument_list pos:start="3058:32" pos:end="3058:91">(<argument pos:start="3058:33" pos:end="3058:38"><expr pos:start="3058:33" pos:end="3058:38"><name pos:start="3058:33" pos:end="3058:38">handle</name></expr></argument>, <argument pos:start="3058:41" pos:end="3058:50"><expr pos:start="3058:41" pos:end="3058:50"><name pos:start="3058:41" pos:end="3058:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3058:53" pos:end="3058:69"><expr pos:start="3058:53" pos:end="3058:69"><name pos:start="3058:53" pos:end="3058:69">IP_MULTICAST_LOOP</name></expr></argument>, <argument pos:start="3058:72" pos:end="3058:80"><expr pos:start="3058:72" pos:end="3058:80"><operator pos:start="3058:72" pos:end="3058:72">&amp;</operator><name pos:start="3058:73" pos:end="3058:80">intValue</name></expr></argument>, <argument pos:start="3058:83" pos:end="3058:90"><expr pos:start="3058:83" pos:end="3058:90"><operator pos:start="3058:83" pos:end="3058:83">&amp;</operator><name pos:start="3058:84" pos:end="3058:90">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3059:13" pos:end="3062:13"><if pos:start="3059:13" pos:end="3062:13">if <condition pos:start="3059:16" pos:end="3059:28">(<expr pos:start="3059:17" pos:end="3059:27"><literal type="number" pos:start="3059:17" pos:end="3059:17">0</literal> <operator pos:start="3059:19" pos:end="3059:20">!=</operator> <name pos:start="3059:22" pos:end="3059:27">result</name></expr>)</condition> <block pos:start="3059:30" pos:end="3062:13">{<block_content pos:start="3060:17" pos:end="3061:28">
                <expr_stmt pos:start="3060:17" pos:end="3060:63"><expr pos:start="3060:17" pos:end="3060:62"><call pos:start="3060:17" pos:end="3060:62"><name pos:start="3060:17" pos:end="3060:36">throwSocketException</name><argument_list pos:start="3060:37" pos:end="3060:62">(<argument pos:start="3060:38" pos:end="3060:40"><expr pos:start="3060:38" pos:end="3060:40"><name pos:start="3060:38" pos:end="3060:40">env</name></expr></argument>, <argument pos:start="3060:43" pos:end="3060:61"><expr pos:start="3060:43" pos:end="3060:61"><call pos:start="3060:43" pos:end="3060:61"><name pos:start="3060:43" pos:end="3060:54">convertError</name><argument_list pos:start="3060:55" pos:end="3060:61">(<argument pos:start="3060:56" pos:end="3060:60"><expr pos:start="3060:56" pos:end="3060:60"><name pos:start="3060:56" pos:end="3060:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3061:17" pos:end="3061:28">return <expr pos:start="3061:24" pos:end="3061:27"><name pos:start="3061:24" pos:end="3061:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3063:13" pos:end="3063:53">return <expr pos:start="3063:20" pos:end="3063:52"><call pos:start="3063:20" pos:end="3063:52"><name pos:start="3063:20" pos:end="3063:37">newJavaLangBoolean</name><argument_list pos:start="3063:38" pos:end="3063:52">(<argument pos:start="3063:39" pos:end="3063:41"><expr pos:start="3063:39" pos:end="3063:41"><name pos:start="3063:39" pos:end="3063:41">env</name></expr></argument>, <argument pos:start="3063:44" pos:end="3063:51"><expr pos:start="3063:44" pos:end="3063:51"><name pos:start="3063:44" pos:end="3063:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3065:9" pos:end="3065:32">case <expr pos:start="3065:14" pos:end="3065:31"><name pos:start="3065:14" pos:end="3065:31">JAVASOCKOPT_IP_TOS</name></expr>:</case> <block pos:start="3065:34" pos:end="3072:9">{<block_content pos:start="3066:13" pos:end="3071:53">
            <expr_stmt pos:start="3066:13" pos:end="3066:81"><expr pos:start="3066:13" pos:end="3066:80"><name pos:start="3066:13" pos:end="3066:18">result</name> <operator pos:start="3066:20" pos:end="3066:20">=</operator> <call pos:start="3066:22" pos:end="3066:80"><name pos:start="3066:22" pos:end="3066:31">getsockopt</name><argument_list pos:start="3066:32" pos:end="3066:80">(<argument pos:start="3066:33" pos:end="3066:38"><expr pos:start="3066:33" pos:end="3066:38"><name pos:start="3066:33" pos:end="3066:38">handle</name></expr></argument>, <argument pos:start="3066:41" pos:end="3066:50"><expr pos:start="3066:41" pos:end="3066:50"><name pos:start="3066:41" pos:end="3066:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3066:53" pos:end="3066:58"><expr pos:start="3066:53" pos:end="3066:58"><name pos:start="3066:53" pos:end="3066:58">IP_TOS</name></expr></argument>, <argument pos:start="3066:61" pos:end="3066:69"><expr pos:start="3066:61" pos:end="3066:69"><operator pos:start="3066:61" pos:end="3066:61">&amp;</operator><name pos:start="3066:62" pos:end="3066:69">intValue</name></expr></argument>, <argument pos:start="3066:72" pos:end="3066:79"><expr pos:start="3066:72" pos:end="3066:79"><operator pos:start="3066:72" pos:end="3066:72">&amp;</operator><name pos:start="3066:73" pos:end="3066:79">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3067:13" pos:end="3070:13"><if pos:start="3067:13" pos:end="3070:13">if <condition pos:start="3067:16" pos:end="3067:28">(<expr pos:start="3067:17" pos:end="3067:27"><literal type="number" pos:start="3067:17" pos:end="3067:17">0</literal> <operator pos:start="3067:19" pos:end="3067:20">!=</operator> <name pos:start="3067:22" pos:end="3067:27">result</name></expr>)</condition> <block pos:start="3067:30" pos:end="3070:13">{<block_content pos:start="3068:17" pos:end="3069:28">
                <expr_stmt pos:start="3068:17" pos:end="3068:63"><expr pos:start="3068:17" pos:end="3068:62"><call pos:start="3068:17" pos:end="3068:62"><name pos:start="3068:17" pos:end="3068:36">throwSocketException</name><argument_list pos:start="3068:37" pos:end="3068:62">(<argument pos:start="3068:38" pos:end="3068:40"><expr pos:start="3068:38" pos:end="3068:40"><name pos:start="3068:38" pos:end="3068:40">env</name></expr></argument>, <argument pos:start="3068:43" pos:end="3068:61"><expr pos:start="3068:43" pos:end="3068:61"><call pos:start="3068:43" pos:end="3068:61"><name pos:start="3068:43" pos:end="3068:54">convertError</name><argument_list pos:start="3068:55" pos:end="3068:61">(<argument pos:start="3068:56" pos:end="3068:60"><expr pos:start="3068:56" pos:end="3068:60"><name pos:start="3068:56" pos:end="3068:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3069:17" pos:end="3069:28">return <expr pos:start="3069:24" pos:end="3069:27"><name pos:start="3069:24" pos:end="3069:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3071:13" pos:end="3071:53">return <expr pos:start="3071:20" pos:end="3071:52"><call pos:start="3071:20" pos:end="3071:52"><name pos:start="3071:20" pos:end="3071:37">newJavaLangInteger</name><argument_list pos:start="3071:38" pos:end="3071:52">(<argument pos:start="3071:39" pos:end="3071:41"><expr pos:start="3071:39" pos:end="3071:41"><name pos:start="3071:39" pos:end="3071:41">env</name></expr></argument>, <argument pos:start="3071:44" pos:end="3071:51"><expr pos:start="3071:44" pos:end="3071:51"><name pos:start="3071:44" pos:end="3071:51">intValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case pos:start="3073:9" pos:end="3073:39">case <expr pos:start="3073:14" pos:end="3073:38"><name pos:start="3073:14" pos:end="3073:38">JAVASOCKOPT_SO_RCVTIMEOUT</name></expr>:</case> <block pos:start="3073:41" pos:end="3082:9">{<block_content pos:start="3074:13" pos:end="3081:89">
            <decl_stmt pos:start="3074:13" pos:end="3074:35"><decl pos:start="3074:13" pos:end="3074:34"><type pos:start="3074:13" pos:end="3074:26"><name pos:start="3074:13" pos:end="3074:26"><name pos:start="3074:13" pos:end="3074:18">struct</name> <name pos:start="3074:20" pos:end="3074:26">timeval</name></name></type> <name pos:start="3074:28" pos:end="3074:34">timeout</name></decl>;</decl_stmt>
            <decl_stmt pos:start="3075:13" pos:end="3075:45"><decl pos:start="3075:13" pos:end="3075:44"><type pos:start="3075:13" pos:end="3075:21"><name pos:start="3075:13" pos:end="3075:21">socklen_t</name></type> <name pos:start="3075:23" pos:end="3075:26">size</name> <init pos:start="3075:28" pos:end="3075:44">= <expr pos:start="3075:30" pos:end="3075:44"><sizeof pos:start="3075:30" pos:end="3075:44">sizeof<argument_list pos:start="3075:36" pos:end="3075:44">(<argument pos:start="3075:37" pos:end="3075:43"><expr pos:start="3075:37" pos:end="3075:43"><name pos:start="3075:37" pos:end="3075:43">timeout</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3076:13" pos:end="3076:82"><expr pos:start="3076:13" pos:end="3076:81"><name pos:start="3076:13" pos:end="3076:18">result</name> <operator pos:start="3076:20" pos:end="3076:20">=</operator> <call pos:start="3076:22" pos:end="3076:81"><name pos:start="3076:22" pos:end="3076:31">getsockopt</name><argument_list pos:start="3076:32" pos:end="3076:81">(<argument pos:start="3076:33" pos:end="3076:38"><expr pos:start="3076:33" pos:end="3076:38"><name pos:start="3076:33" pos:end="3076:38">handle</name></expr></argument>, <argument pos:start="3076:41" pos:end="3076:50"><expr pos:start="3076:41" pos:end="3076:50"><name pos:start="3076:41" pos:end="3076:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3076:53" pos:end="3076:63"><expr pos:start="3076:53" pos:end="3076:63"><name pos:start="3076:53" pos:end="3076:63">SO_RCVTIMEO</name></expr></argument>, <argument pos:start="3076:66" pos:end="3076:73"><expr pos:start="3076:66" pos:end="3076:73"><operator pos:start="3076:66" pos:end="3076:66">&amp;</operator><name pos:start="3076:67" pos:end="3076:73">timeout</name></expr></argument>, <argument pos:start="3076:76" pos:end="3076:80"><expr pos:start="3076:76" pos:end="3076:80"><operator pos:start="3076:76" pos:end="3076:76">&amp;</operator><name pos:start="3076:77" pos:end="3076:80">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3077:13" pos:end="3080:13"><if pos:start="3077:13" pos:end="3080:13">if <condition pos:start="3077:16" pos:end="3077:28">(<expr pos:start="3077:17" pos:end="3077:27"><literal type="number" pos:start="3077:17" pos:end="3077:17">0</literal> <operator pos:start="3077:19" pos:end="3077:20">!=</operator> <name pos:start="3077:22" pos:end="3077:27">result</name></expr>)</condition> <block pos:start="3077:30" pos:end="3080:13">{<block_content pos:start="3078:17" pos:end="3079:28">
                <expr_stmt pos:start="3078:17" pos:end="3078:63"><expr pos:start="3078:17" pos:end="3078:62"><call pos:start="3078:17" pos:end="3078:62"><name pos:start="3078:17" pos:end="3078:36">throwSocketException</name><argument_list pos:start="3078:37" pos:end="3078:62">(<argument pos:start="3078:38" pos:end="3078:40"><expr pos:start="3078:38" pos:end="3078:40"><name pos:start="3078:38" pos:end="3078:40">env</name></expr></argument>, <argument pos:start="3078:43" pos:end="3078:61"><expr pos:start="3078:43" pos:end="3078:61"><call pos:start="3078:43" pos:end="3078:61"><name pos:start="3078:43" pos:end="3078:54">convertError</name><argument_list pos:start="3078:55" pos:end="3078:61">(<argument pos:start="3078:56" pos:end="3078:60"><expr pos:start="3078:56" pos:end="3078:60"><name pos:start="3078:56" pos:end="3078:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3079:17" pos:end="3079:28">return <expr pos:start="3079:24" pos:end="3079:27"><name pos:start="3079:24" pos:end="3079:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="3081:13" pos:end="3081:89">return <expr pos:start="3081:20" pos:end="3081:88"><call pos:start="3081:20" pos:end="3081:88"><name pos:start="3081:20" pos:end="3081:37">newJavaLangInteger</name><argument_list pos:start="3081:38" pos:end="3081:88">(<argument pos:start="3081:39" pos:end="3081:41"><expr pos:start="3081:39" pos:end="3081:41"><name pos:start="3081:39" pos:end="3081:41">env</name></expr></argument>, <argument pos:start="3081:44" pos:end="3081:87"><expr pos:start="3081:44" pos:end="3081:87"><name pos:start="3081:44" pos:end="3081:57"><name pos:start="3081:44" pos:end="3081:50">timeout</name><operator pos:start="3081:51" pos:end="3081:51">.</operator><name pos:start="3081:52" pos:end="3081:57">tv_sec</name></name> <operator pos:start="3081:59" pos:end="3081:59">*</operator> <literal type="number" pos:start="3081:61" pos:end="3081:66">1000</literal> <operator pos:start="3081:66" pos:end="3081:66">+</operator> <name pos:start="3081:68" pos:end="3081:82"><name pos:start="3081:68" pos:end="3081:74">timeout</name><operator pos:start="3081:75" pos:end="3081:75">.</operator><name pos:start="3081:76" pos:end="3081:82">tv_usec</name></name><operator pos:start="3081:83" pos:end="3081:83">/</operator><literal type="number" pos:start="3081:84" pos:end="3081:87">1000</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <default pos:start="3083:9" pos:end="3083:16">default:</default> <block pos:start="3083:18" pos:end="3086:9">{<block_content pos:start="3084:13" pos:end="3085:24">
            <expr_stmt pos:start="3084:13" pos:end="3084:57"><expr pos:start="3084:13" pos:end="3084:56"><call pos:start="3084:13" pos:end="3084:56"><name pos:start="3084:13" pos:end="3084:32">throwSocketException</name><argument_list pos:start="3084:33" pos:end="3084:56">(<argument pos:start="3084:34" pos:end="3084:36"><expr pos:start="3084:34" pos:end="3084:36"><name pos:start="3084:34" pos:end="3084:36">env</name></expr></argument>, <argument pos:start="3084:39" pos:end="3084:55"><expr pos:start="3084:39" pos:end="3084:55"><name pos:start="3084:39" pos:end="3084:55">SOCKERR_OPTUNSUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3085:13" pos:end="3085:24">return <expr pos:start="3085:20" pos:end="3085:23"><name pos:start="3085:20" pos:end="3085:23">NULL</name></expr>;</return>
        </block_content>}</block>
    </block_content>}</block></switch>

</block_content>}</block></function></extern>

<extern pos:start="3091:1" pos:end="3285:1">extern <literal type="string" pos:start="3091:8" pos:end="3091:10">"C"</literal> <function pos:start="3091:12" pos:end="3285:1"><type pos:start="3091:12" pos:end="3091:15"><name pos:start="3091:12" pos:end="3091:15">void</name></type> <name pos:start="3091:17" pos:end="3091:78">Java_org_sipdroid_net_impl_OSNetworkSystem_setSocketOptionImpl</name><parameter_list pos:start="3091:79" pos:end="3092:62">(<parameter pos:start="3091:80" pos:end="3091:90"><decl pos:start="3091:80" pos:end="3091:90"><type pos:start="3091:80" pos:end="3091:90"><name pos:start="3091:80" pos:end="3091:85">JNIEnv</name><modifier pos:start="3091:86" pos:end="3091:86">*</modifier></type> <name pos:start="3091:88" pos:end="3091:90">env</name></decl></parameter>, <parameter pos:start="3091:93" pos:end="3091:104"><decl pos:start="3091:93" pos:end="3091:104"><type pos:start="3091:93" pos:end="3091:104"><name pos:start="3091:93" pos:end="3091:98">jclass</name></type> <name pos:start="3091:100" pos:end="3091:104">clazz</name></decl></parameter>,
        <parameter pos:start="3092:9" pos:end="3092:30"><decl pos:start="3092:9" pos:end="3092:30"><type pos:start="3092:9" pos:end="3092:30"><name pos:start="3092:9" pos:end="3092:15">jobject</name></type> <name pos:start="3092:17" pos:end="3092:30">fileDescriptor</name></decl></parameter>, <parameter pos:start="3092:33" pos:end="3092:45"><decl pos:start="3092:33" pos:end="3092:45"><type pos:start="3092:33" pos:end="3092:45"><name pos:start="3092:33" pos:end="3092:36">jint</name></type> <name pos:start="3092:38" pos:end="3092:45">anOption</name></decl></parameter>, <parameter pos:start="3092:48" pos:end="3092:61"><decl pos:start="3092:48" pos:end="3092:61"><type pos:start="3092:48" pos:end="3092:61"><name pos:start="3092:48" pos:end="3092:54">jobject</name></type> <name pos:start="3092:56" pos:end="3092:61">optVal</name></decl></parameter>)</parameter_list> <block pos:start="3092:64" pos:end="3285:1">{<block_content pos:start="3095:5" pos:end="3284:5">
    <comment type="line" pos:start="3093:5" pos:end="3093:41">// LOGD("ENTER setSocketOptionImpl");</comment>

    <decl_stmt pos:start="3095:5" pos:end="3095:23"><decl pos:start="3095:5" pos:end="3095:14"><type pos:start="3095:5" pos:end="3095:7"><name pos:start="3095:5" pos:end="3095:7">int</name></type> <name pos:start="3095:9" pos:end="3095:14">handle</name></decl>, <decl pos:start="3095:17" pos:end="3095:22"><type ref="prev" pos:start="3095:5" pos:end="3095:7"/><name pos:start="3095:17" pos:end="3095:22">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3096:5" pos:end="3096:38"><decl pos:start="3096:5" pos:end="3096:14"><type pos:start="3096:5" pos:end="3096:7"><name pos:start="3096:5" pos:end="3096:7">int</name></type> <name pos:start="3096:9" pos:end="3096:14">intVal</name></decl>, <decl pos:start="3096:17" pos:end="3096:37"><type ref="prev" pos:start="3096:5" pos:end="3096:7"/><name pos:start="3096:17" pos:end="3096:23">intSize</name> <init pos:start="3096:25" pos:end="3096:37">= <expr pos:start="3096:27" pos:end="3096:37"><sizeof pos:start="3096:27" pos:end="3096:37">sizeof<argument_list pos:start="3096:33" pos:end="3096:37">(<argument pos:start="3096:34" pos:end="3096:36"><expr pos:start="3096:34" pos:end="3096:36"><name pos:start="3096:34" pos:end="3096:36">int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3097:5" pos:end="3097:60"><decl pos:start="3097:5" pos:end="3097:25"><type pos:start="3097:5" pos:end="3097:17"><name pos:start="3097:5" pos:end="3097:12">unsigned</name> <name pos:start="3097:14" pos:end="3097:17">char</name></type> <name pos:start="3097:19" pos:end="3097:25">byteVal</name></decl>, <decl pos:start="3097:28" pos:end="3097:59"><type ref="prev" pos:start="3097:5" pos:end="3097:17"/><name pos:start="3097:28" pos:end="3097:35">byteSize</name> <init pos:start="3097:37" pos:end="3097:59">= <expr pos:start="3097:39" pos:end="3097:59">sizeof<operator pos:start="3097:45" pos:end="3097:45">(</operator><name pos:start="3097:46" pos:end="3097:53">unsigned</name> <name pos:start="3097:55" pos:end="3097:58">char</name><operator pos:start="3097:59" pos:end="3097:59">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3098:5" pos:end="3098:31"><decl pos:start="3098:5" pos:end="3098:30"><type pos:start="3098:5" pos:end="3098:22"><name pos:start="3098:5" pos:end="3098:22"><name pos:start="3098:5" pos:end="3098:10">struct</name> <name pos:start="3098:12" pos:end="3098:22">sockaddr_in</name></name></type> <name pos:start="3098:24" pos:end="3098:30">sockVal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3099:5" pos:end="3099:35"><decl pos:start="3099:5" pos:end="3099:34"><type pos:start="3099:5" pos:end="3099:7"><name pos:start="3099:5" pos:end="3099:7">int</name></type> <name pos:start="3099:9" pos:end="3099:16">sockSize</name> <init pos:start="3099:18" pos:end="3099:34">= <expr pos:start="3099:20" pos:end="3099:34"><sizeof pos:start="3099:20" pos:end="3099:34">sizeof<argument_list pos:start="3099:26" pos:end="3099:34">(<argument pos:start="3099:27" pos:end="3099:33"><expr pos:start="3099:27" pos:end="3099:33"><name pos:start="3099:27" pos:end="3099:33">sockVal</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="3101:5" pos:end="3117:5"><if pos:start="3101:5" pos:end="3103:5">if <condition pos:start="3101:8" pos:end="3101:63">(<expr pos:start="3101:9" pos:end="3101:62"><call pos:start="3101:9" pos:end="3101:62"><name pos:start="3101:9" pos:end="3101:25"><name pos:start="3101:9" pos:end="3101:11">env</name><operator pos:start="3101:12" pos:end="3101:13">-&gt;</operator><name pos:start="3101:14" pos:end="3101:25">IsInstanceOf</name></name><argument_list pos:start="3101:26" pos:end="3101:62">(<argument pos:start="3101:27" pos:end="3101:32"><expr pos:start="3101:27" pos:end="3101:32"><name pos:start="3101:27" pos:end="3101:32">optVal</name></expr></argument>, <argument pos:start="3101:35" pos:end="3101:61"><expr pos:start="3101:35" pos:end="3101:61"><name pos:start="3101:35" pos:end="3101:61"><name pos:start="3101:35" pos:end="3101:47">gCachedFields</name><operator pos:start="3101:48" pos:end="3101:48">.</operator><name pos:start="3101:49" pos:end="3101:61">integer_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3101:65" pos:end="3103:5">{<block_content pos:start="3102:9" pos:end="3102:83">
        <expr_stmt pos:start="3102:9" pos:end="3102:83"><expr pos:start="3102:9" pos:end="3102:82"><name pos:start="3102:9" pos:end="3102:14">intVal</name> <operator pos:start="3102:16" pos:end="3102:16">=</operator> <operator pos:start="3102:18" pos:end="3102:18">(</operator><name pos:start="3102:19" pos:end="3102:21">int</name><operator pos:start="3102:22" pos:end="3102:22">)</operator> <call pos:start="3102:24" pos:end="3102:82"><name pos:start="3102:24" pos:end="3102:39"><name pos:start="3102:24" pos:end="3102:26">env</name><operator pos:start="3102:27" pos:end="3102:28">-&gt;</operator><name pos:start="3102:29" pos:end="3102:39">GetIntField</name></name><argument_list pos:start="3102:40" pos:end="3102:82">(<argument pos:start="3102:41" pos:end="3102:46"><expr pos:start="3102:41" pos:end="3102:46"><name pos:start="3102:41" pos:end="3102:46">optVal</name></expr></argument>, <argument pos:start="3102:49" pos:end="3102:81"><expr pos:start="3102:49" pos:end="3102:81"><name pos:start="3102:49" pos:end="3102:81"><name pos:start="3102:49" pos:end="3102:61">gCachedFields</name><operator pos:start="3102:62" pos:end="3102:62">.</operator><name pos:start="3102:63" pos:end="3102:81">integer_class_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3103:7" pos:end="3105:5">else if <condition pos:start="3103:15" pos:end="3103:70">(<expr pos:start="3103:16" pos:end="3103:69"><call pos:start="3103:16" pos:end="3103:69"><name pos:start="3103:16" pos:end="3103:32"><name pos:start="3103:16" pos:end="3103:18">env</name><operator pos:start="3103:19" pos:end="3103:20">-&gt;</operator><name pos:start="3103:21" pos:end="3103:32">IsInstanceOf</name></name><argument_list pos:start="3103:33" pos:end="3103:69">(<argument pos:start="3103:34" pos:end="3103:39"><expr pos:start="3103:34" pos:end="3103:39"><name pos:start="3103:34" pos:end="3103:39">optVal</name></expr></argument>, <argument pos:start="3103:42" pos:end="3103:68"><expr pos:start="3103:42" pos:end="3103:68"><name pos:start="3103:42" pos:end="3103:68"><name pos:start="3103:42" pos:end="3103:54">gCachedFields</name><operator pos:start="3103:55" pos:end="3103:55">.</operator><name pos:start="3103:56" pos:end="3103:68">boolean_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3103:72" pos:end="3105:5">{<block_content pos:start="3104:9" pos:end="3104:87">
        <expr_stmt pos:start="3104:9" pos:end="3104:87"><expr pos:start="3104:9" pos:end="3104:86"><name pos:start="3104:9" pos:end="3104:14">intVal</name> <operator pos:start="3104:16" pos:end="3104:16">=</operator> <operator pos:start="3104:18" pos:end="3104:18">(</operator><name pos:start="3104:19" pos:end="3104:21">int</name><operator pos:start="3104:22" pos:end="3104:22">)</operator> <call pos:start="3104:24" pos:end="3104:86"><name pos:start="3104:24" pos:end="3104:43"><name pos:start="3104:24" pos:end="3104:26">env</name><operator pos:start="3104:27" pos:end="3104:28">-&gt;</operator><name pos:start="3104:29" pos:end="3104:43">GetBooleanField</name></name><argument_list pos:start="3104:44" pos:end="3104:86">(<argument pos:start="3104:45" pos:end="3104:50"><expr pos:start="3104:45" pos:end="3104:50"><name pos:start="3104:45" pos:end="3104:50">optVal</name></expr></argument>, <argument pos:start="3104:53" pos:end="3104:85"><expr pos:start="3104:53" pos:end="3104:85"><name pos:start="3104:53" pos:end="3104:85"><name pos:start="3104:53" pos:end="3104:65">gCachedFields</name><operator pos:start="3104:66" pos:end="3104:66">.</operator><name pos:start="3104:67" pos:end="3104:85">boolean_class_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3105:7" pos:end="3107:5">else if <condition pos:start="3105:15" pos:end="3105:67">(<expr pos:start="3105:16" pos:end="3105:66"><call pos:start="3105:16" pos:end="3105:66"><name pos:start="3105:16" pos:end="3105:32"><name pos:start="3105:16" pos:end="3105:18">env</name><operator pos:start="3105:19" pos:end="3105:20">-&gt;</operator><name pos:start="3105:21" pos:end="3105:32">IsInstanceOf</name></name><argument_list pos:start="3105:33" pos:end="3105:66">(<argument pos:start="3105:34" pos:end="3105:39"><expr pos:start="3105:34" pos:end="3105:39"><name pos:start="3105:34" pos:end="3105:39">optVal</name></expr></argument>, <argument pos:start="3105:42" pos:end="3105:65"><expr pos:start="3105:42" pos:end="3105:65"><name pos:start="3105:42" pos:end="3105:65"><name pos:start="3105:42" pos:end="3105:54">gCachedFields</name><operator pos:start="3105:55" pos:end="3105:55">.</operator><name pos:start="3105:56" pos:end="3105:65">byte_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3105:69" pos:end="3107:5">{<block_content pos:start="3106:9" pos:end="3106:82">
        <expr_stmt pos:start="3106:9" pos:end="3106:82"><expr pos:start="3106:9" pos:end="3106:81"><name pos:start="3106:9" pos:end="3106:15">byteVal</name> <operator pos:start="3106:17" pos:end="3106:17">=</operator> <operator pos:start="3106:19" pos:end="3106:19">(</operator><name pos:start="3106:20" pos:end="3106:22">int</name><operator pos:start="3106:23" pos:end="3106:23">)</operator> <call pos:start="3106:25" pos:end="3106:81"><name pos:start="3106:25" pos:end="3106:41"><name pos:start="3106:25" pos:end="3106:27">env</name><operator pos:start="3106:28" pos:end="3106:29">-&gt;</operator><name pos:start="3106:30" pos:end="3106:41">GetByteField</name></name><argument_list pos:start="3106:42" pos:end="3106:81">(<argument pos:start="3106:43" pos:end="3106:48"><expr pos:start="3106:43" pos:end="3106:48"><name pos:start="3106:43" pos:end="3106:48">optVal</name></expr></argument>, <argument pos:start="3106:51" pos:end="3106:80"><expr pos:start="3106:51" pos:end="3106:80"><name pos:start="3106:51" pos:end="3106:80"><name pos:start="3106:51" pos:end="3106:63">gCachedFields</name><operator pos:start="3106:64" pos:end="3106:64">.</operator><name pos:start="3106:65" pos:end="3106:80">byte_class_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3107:7" pos:end="3112:5">else if <condition pos:start="3107:15" pos:end="3107:68">(<expr pos:start="3107:16" pos:end="3107:67"><call pos:start="3107:16" pos:end="3107:67"><name pos:start="3107:16" pos:end="3107:32"><name pos:start="3107:16" pos:end="3107:18">env</name><operator pos:start="3107:19" pos:end="3107:20">-&gt;</operator><name pos:start="3107:21" pos:end="3107:32">IsInstanceOf</name></name><argument_list pos:start="3107:33" pos:end="3107:67">(<argument pos:start="3107:34" pos:end="3107:39"><expr pos:start="3107:34" pos:end="3107:39"><name pos:start="3107:34" pos:end="3107:39">optVal</name></expr></argument>, <argument pos:start="3107:42" pos:end="3107:66"><expr pos:start="3107:42" pos:end="3107:66"><name pos:start="3107:42" pos:end="3107:66"><name pos:start="3107:42" pos:end="3107:54">gCachedFields</name><operator pos:start="3107:55" pos:end="3107:55">.</operator><name pos:start="3107:56" pos:end="3107:66">iaddr_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3107:70" pos:end="3112:5">{<block_content pos:start="3108:9" pos:end="3111:9">
        <if_stmt pos:start="3108:9" pos:end="3111:9"><if pos:start="3108:9" pos:end="3111:9">if <condition pos:start="3108:12" pos:end="3108:69">(<expr pos:start="3108:13" pos:end="3108:68"><call pos:start="3108:13" pos:end="3108:64"><name pos:start="3108:13" pos:end="3108:38">inetAddressToSocketAddress</name><argument_list pos:start="3108:39" pos:end="3108:64">(<argument pos:start="3108:40" pos:end="3108:42"><expr pos:start="3108:40" pos:end="3108:42"><name pos:start="3108:40" pos:end="3108:42">env</name></expr></argument>, <argument pos:start="3108:45" pos:end="3108:50"><expr pos:start="3108:45" pos:end="3108:50"><name pos:start="3108:45" pos:end="3108:50">optVal</name></expr></argument>, <argument pos:start="3108:53" pos:end="3108:53"><expr pos:start="3108:53" pos:end="3108:53"><literal type="number" pos:start="3108:53" pos:end="3108:53">0</literal></expr></argument>, <argument pos:start="3108:56" pos:end="3108:63"><expr pos:start="3108:56" pos:end="3108:63"><operator pos:start="3108:56" pos:end="3108:56">&amp;</operator><name pos:start="3108:57" pos:end="3108:63">sockVal</name></expr></argument>)</argument_list></call> <operator pos:start="3108:66" pos:end="3108:66">&lt;</operator> <literal type="number" pos:start="3108:68" pos:end="3108:68">0</literal></expr>)</condition> <block pos:start="3108:71" pos:end="3111:9">{<block_content pos:start="3109:13" pos:end="3110:19">
            <expr_stmt pos:start="3109:13" pos:end="3109:57"><expr pos:start="3109:13" pos:end="3109:56"><call pos:start="3109:13" pos:end="3109:56"><name pos:start="3109:13" pos:end="3109:32">throwSocketException</name><argument_list pos:start="3109:33" pos:end="3109:56">(<argument pos:start="3109:34" pos:end="3109:36"><expr pos:start="3109:34" pos:end="3109:36"><name pos:start="3109:34" pos:end="3109:36">env</name></expr></argument>, <argument pos:start="3109:39" pos:end="3109:55"><expr pos:start="3109:39" pos:end="3109:55"><name pos:start="3109:39" pos:end="3109:55">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3110:13" pos:end="3110:19">return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3112:7" pos:end="3114:5">else if <condition pos:start="3112:15" pos:end="3112:76">(<expr pos:start="3112:16" pos:end="3112:75"><call pos:start="3112:16" pos:end="3112:75"><name pos:start="3112:16" pos:end="3112:32"><name pos:start="3112:16" pos:end="3112:18">env</name><operator pos:start="3112:19" pos:end="3112:20">-&gt;</operator><name pos:start="3112:21" pos:end="3112:32">IsInstanceOf</name></name><argument_list pos:start="3112:33" pos:end="3112:75">(<argument pos:start="3112:34" pos:end="3112:39"><expr pos:start="3112:34" pos:end="3112:39"><name pos:start="3112:34" pos:end="3112:39">optVal</name></expr></argument>, <argument pos:start="3112:42" pos:end="3112:74"><expr pos:start="3112:42" pos:end="3112:74"><name pos:start="3112:42" pos:end="3112:74"><name pos:start="3112:42" pos:end="3112:54">gCachedFields</name><operator pos:start="3112:55" pos:end="3112:55">.</operator><name pos:start="3112:56" pos:end="3112:74">genericipmreq_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3112:78" pos:end="3114:5">{<block_content>
        <comment type="line" pos:start="3113:9" pos:end="3113:36">// we'll use optVal directly</comment>
    </block_content>}</block></if> <else pos:start="3114:7" pos:end="3117:5">else <block pos:start="3114:12" pos:end="3117:5">{<block_content pos:start="3115:9" pos:end="3116:15">
        <expr_stmt pos:start="3115:9" pos:end="3115:53"><expr pos:start="3115:9" pos:end="3115:52"><call pos:start="3115:9" pos:end="3115:52"><name pos:start="3115:9" pos:end="3115:28">throwSocketException</name><argument_list pos:start="3115:29" pos:end="3115:52">(<argument pos:start="3115:30" pos:end="3115:32"><expr pos:start="3115:30" pos:end="3115:32"><name pos:start="3115:30" pos:end="3115:32">env</name></expr></argument>, <argument pos:start="3115:35" pos:end="3115:51"><expr pos:start="3115:35" pos:end="3115:51"><name pos:start="3115:35" pos:end="3115:51">SOCKERR_OPTUNSUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3116:9" pos:end="3116:15">return;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="3119:5" pos:end="3119:61"><expr pos:start="3119:5" pos:end="3119:60"><name pos:start="3119:5" pos:end="3119:10">handle</name> <operator pos:start="3119:12" pos:end="3119:12">=</operator> <call pos:start="3119:14" pos:end="3119:60"><name pos:start="3119:14" pos:end="3119:39">jniGetFDFromFileDescriptor</name><argument_list pos:start="3119:40" pos:end="3119:60">(<argument pos:start="3119:41" pos:end="3119:43"><expr pos:start="3119:41" pos:end="3119:43"><name pos:start="3119:41" pos:end="3119:43">env</name></expr></argument>, <argument pos:start="3119:46" pos:end="3119:59"><expr pos:start="3119:46" pos:end="3119:59"><name pos:start="3119:46" pos:end="3119:59">fileDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3120:5" pos:end="3123:5"><if pos:start="3120:5" pos:end="3123:5">if <condition pos:start="3120:8" pos:end="3120:36">(<expr pos:start="3120:9" pos:end="3120:35"><name pos:start="3120:9" pos:end="3120:14">handle</name> <operator pos:start="3120:16" pos:end="3120:17">==</operator> <literal type="number" pos:start="3120:19" pos:end="3120:19">0</literal> <operator pos:start="3120:21" pos:end="3120:22">||</operator> <name pos:start="3120:24" pos:end="3120:29">handle</name> <operator pos:start="3120:31" pos:end="3120:32">==</operator> <operator pos:start="3120:34" pos:end="3120:34">-</operator><literal type="number" pos:start="3120:35" pos:end="3120:35">1</literal></expr>)</condition> <block pos:start="3120:38" pos:end="3123:5">{<block_content pos:start="3121:9" pos:end="3122:15">
        <expr_stmt pos:start="3121:9" pos:end="3121:53"><expr pos:start="3121:9" pos:end="3121:52"><call pos:start="3121:9" pos:end="3121:52"><name pos:start="3121:9" pos:end="3121:28">throwSocketException</name><argument_list pos:start="3121:29" pos:end="3121:52">(<argument pos:start="3121:30" pos:end="3121:32"><expr pos:start="3121:30" pos:end="3121:32"><name pos:start="3121:30" pos:end="3121:32">env</name></expr></argument>, <argument pos:start="3121:35" pos:end="3121:51"><expr pos:start="3121:35" pos:end="3121:51"><name pos:start="3121:35" pos:end="3121:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3122:9" pos:end="3122:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <switch pos:start="3125:5" pos:end="3284:5">switch <condition pos:start="3125:12" pos:end="3125:36">(<expr pos:start="3125:13" pos:end="3125:35"><operator pos:start="3125:13" pos:end="3125:13">(</operator><name pos:start="3125:14" pos:end="3125:16">int</name><operator pos:start="3125:17" pos:end="3125:17">)</operator> <name pos:start="3125:19" pos:end="3125:26">anOption</name> <operator pos:start="3125:28" pos:end="3125:28">&amp;</operator> <literal type="number" pos:start="3125:30" pos:end="3125:35">0xffff</literal></expr>)</condition> <block pos:start="3125:38" pos:end="3284:5">{<block_content pos:start="3126:9" pos:end="3283:9">
        <case pos:start="3126:9" pos:end="3126:35">case <expr pos:start="3126:14" pos:end="3126:34"><name pos:start="3126:14" pos:end="3126:34">JAVASOCKOPT_SO_LINGER</name></expr>:</case> <block pos:start="3126:37" pos:end="3137:9">{<block_content pos:start="3127:13" pos:end="3136:18">
            <decl_stmt pos:start="3127:13" pos:end="3127:32"><decl pos:start="3127:13" pos:end="3127:31"><type pos:start="3127:13" pos:end="3127:25"><name pos:start="3127:13" pos:end="3127:25"><name pos:start="3127:13" pos:end="3127:18">struct</name> <name pos:start="3127:20" pos:end="3127:25">linger</name></name></type> <name pos:start="3127:27" pos:end="3127:31">lingr</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3128:13" pos:end="3128:47"><expr pos:start="3128:13" pos:end="3128:46"><name pos:start="3128:13" pos:end="3128:25"><name pos:start="3128:13" pos:end="3128:17">lingr</name><operator pos:start="3128:18" pos:end="3128:18">.</operator><name pos:start="3128:19" pos:end="3128:25">l_onoff</name></name> <operator pos:start="3128:27" pos:end="3128:27">=</operator> <ternary pos:start="3128:29" pos:end="3128:46"><condition pos:start="3128:29" pos:end="3128:40"><expr pos:start="3128:29" pos:end="3128:38"><name pos:start="3128:29" pos:end="3128:34">intVal</name> <operator pos:start="3128:36" pos:end="3128:36">&gt;</operator> <literal type="number" pos:start="3128:38" pos:end="3128:38">0</literal></expr> ?</condition><then pos:start="3128:42" pos:end="3128:42"> <expr pos:start="3128:42" pos:end="3128:42"><literal type="number" pos:start="3128:42" pos:end="3128:42">1</literal></expr> </then><else pos:start="3128:44" pos:end="3128:46">: <expr pos:start="3128:46" pos:end="3128:46"><literal type="number" pos:start="3128:46" pos:end="3128:46">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt pos:start="3129:13" pos:end="3129:36"><expr pos:start="3129:13" pos:end="3129:35"><name pos:start="3129:13" pos:end="3129:26"><name pos:start="3129:13" pos:end="3129:17">lingr</name><operator pos:start="3129:18" pos:end="3129:18">.</operator><name pos:start="3129:19" pos:end="3129:26">l_linger</name></name> <operator pos:start="3129:28" pos:end="3129:28">=</operator> <name pos:start="3129:30" pos:end="3129:35">intVal</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3130:13" pos:end="3131:43"><expr pos:start="3130:13" pos:end="3131:42"><name pos:start="3130:13" pos:end="3130:18">result</name> <operator pos:start="3130:20" pos:end="3130:20">=</operator> <call pos:start="3130:22" pos:end="3131:42"><name pos:start="3130:22" pos:end="3130:31">setsockopt</name><argument_list pos:start="3130:32" pos:end="3131:42">(<argument pos:start="3130:33" pos:end="3130:38"><expr pos:start="3130:33" pos:end="3130:38"><name pos:start="3130:33" pos:end="3130:38">handle</name></expr></argument>, <argument pos:start="3130:41" pos:end="3130:50"><expr pos:start="3130:41" pos:end="3130:50"><name pos:start="3130:41" pos:end="3130:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3130:53" pos:end="3130:61"><expr pos:start="3130:53" pos:end="3130:61"><name pos:start="3130:53" pos:end="3130:61">SO_LINGER</name></expr></argument>, <argument pos:start="3130:64" pos:end="3130:69"><expr pos:start="3130:64" pos:end="3130:69"><operator pos:start="3130:64" pos:end="3130:64">&amp;</operator><name pos:start="3130:65" pos:end="3130:69">lingr</name></expr></argument>,
                    <argument pos:start="3131:21" pos:end="3131:41"><expr pos:start="3131:21" pos:end="3131:41"><sizeof pos:start="3131:21" pos:end="3131:41">sizeof<argument_list pos:start="3131:27" pos:end="3131:41">(<argument pos:start="3131:28" pos:end="3131:40"><expr pos:start="3131:28" pos:end="3131:40">struct <name pos:start="3131:35" pos:end="3131:40">linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3132:13" pos:end="3135:13"><if pos:start="3132:13" pos:end="3135:13">if <condition pos:start="3132:16" pos:end="3132:28">(<expr pos:start="3132:17" pos:end="3132:27"><literal type="number" pos:start="3132:17" pos:end="3132:17">0</literal> <operator pos:start="3132:19" pos:end="3132:20">!=</operator> <name pos:start="3132:22" pos:end="3132:27">result</name></expr>)</condition> <block pos:start="3132:30" pos:end="3135:13">{<block_content pos:start="3133:17" pos:end="3134:23">
                <expr_stmt pos:start="3133:17" pos:end="3133:63"><expr pos:start="3133:17" pos:end="3133:62"><call pos:start="3133:17" pos:end="3133:62"><name pos:start="3133:17" pos:end="3133:36">throwSocketException</name><argument_list pos:start="3133:37" pos:end="3133:62">(<argument pos:start="3133:38" pos:end="3133:40"><expr pos:start="3133:38" pos:end="3133:40"><name pos:start="3133:38" pos:end="3133:40">env</name></expr></argument>, <argument pos:start="3133:43" pos:end="3133:61"><expr pos:start="3133:43" pos:end="3133:61"><call pos:start="3133:43" pos:end="3133:61"><name pos:start="3133:43" pos:end="3133:54">convertError</name><argument_list pos:start="3133:55" pos:end="3133:61">(<argument pos:start="3133:56" pos:end="3133:60"><expr pos:start="3133:56" pos:end="3133:60"><name pos:start="3133:56" pos:end="3133:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3134:17" pos:end="3134:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3136:13" pos:end="3136:18">break;</break>
        </block_content>}</block>

        <case pos:start="3139:9" pos:end="3139:37">case <expr pos:start="3139:14" pos:end="3139:36"><name pos:start="3139:14" pos:end="3139:36">JAVASOCKOPT_TCP_NODELAY</name></expr>:</case> <block pos:start="3139:39" pos:end="3149:9">{<block_content pos:start="3140:13" pos:end="3148:18">
            <if_stmt pos:start="3140:13" pos:end="3142:13"><if pos:start="3140:13" pos:end="3142:13">if <condition pos:start="3140:16" pos:end="3140:54">(<expr pos:start="3140:17" pos:end="3140:53"><operator pos:start="3140:17" pos:end="3140:17">(</operator><name pos:start="3140:18" pos:end="3140:25">anOption</name> <operator pos:start="3140:27" pos:end="3140:28">&gt;&gt;</operator> <literal type="number" pos:start="3140:30" pos:end="3140:31">16</literal><operator pos:start="3140:32" pos:end="3140:32">)</operator> <operator pos:start="3140:34" pos:end="3140:34">&amp;</operator> <name pos:start="3140:36" pos:end="3140:53">BROKEN_TCP_NODELAY</name></expr>)</condition> <block pos:start="3140:56" pos:end="3142:13">{<block_content pos:start="3141:17" pos:end="3141:23">
                <return pos:start="3141:17" pos:end="3141:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3143:13" pos:end="3143:84"><expr pos:start="3143:13" pos:end="3143:83"><name pos:start="3143:13" pos:end="3143:18">result</name> <operator pos:start="3143:20" pos:end="3143:20">=</operator> <call pos:start="3143:22" pos:end="3143:83"><name pos:start="3143:22" pos:end="3143:31">setsockopt</name><argument_list pos:start="3143:32" pos:end="3143:83">(<argument pos:start="3143:33" pos:end="3143:38"><expr pos:start="3143:33" pos:end="3143:38"><name pos:start="3143:33" pos:end="3143:38">handle</name></expr></argument>, <argument pos:start="3143:41" pos:end="3143:51"><expr pos:start="3143:41" pos:end="3143:51"><name pos:start="3143:41" pos:end="3143:51">IPPROTO_TCP</name></expr></argument>, <argument pos:start="3143:54" pos:end="3143:64"><expr pos:start="3143:54" pos:end="3143:64"><name pos:start="3143:54" pos:end="3143:64">TCP_NODELAY</name></expr></argument>, <argument pos:start="3143:67" pos:end="3143:73"><expr pos:start="3143:67" pos:end="3143:73"><operator pos:start="3143:67" pos:end="3143:67">&amp;</operator><name pos:start="3143:68" pos:end="3143:73">intVal</name></expr></argument>, <argument pos:start="3143:76" pos:end="3143:82"><expr pos:start="3143:76" pos:end="3143:82"><name pos:start="3143:76" pos:end="3143:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3144:13" pos:end="3147:13"><if pos:start="3144:13" pos:end="3147:13">if <condition pos:start="3144:16" pos:end="3144:28">(<expr pos:start="3144:17" pos:end="3144:27"><literal type="number" pos:start="3144:17" pos:end="3144:17">0</literal> <operator pos:start="3144:19" pos:end="3144:20">!=</operator> <name pos:start="3144:22" pos:end="3144:27">result</name></expr>)</condition> <block pos:start="3144:30" pos:end="3147:13">{<block_content pos:start="3145:17" pos:end="3146:23">
                <expr_stmt pos:start="3145:17" pos:end="3145:63"><expr pos:start="3145:17" pos:end="3145:62"><call pos:start="3145:17" pos:end="3145:62"><name pos:start="3145:17" pos:end="3145:36">throwSocketException</name><argument_list pos:start="3145:37" pos:end="3145:62">(<argument pos:start="3145:38" pos:end="3145:40"><expr pos:start="3145:38" pos:end="3145:40"><name pos:start="3145:38" pos:end="3145:40">env</name></expr></argument>, <argument pos:start="3145:43" pos:end="3145:61"><expr pos:start="3145:43" pos:end="3145:61"><call pos:start="3145:43" pos:end="3145:61"><name pos:start="3145:43" pos:end="3145:54">convertError</name><argument_list pos:start="3145:55" pos:end="3145:61">(<argument pos:start="3145:56" pos:end="3145:60"><expr pos:start="3145:56" pos:end="3145:60"><name pos:start="3145:56" pos:end="3145:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3146:17" pos:end="3146:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3148:13" pos:end="3148:18">break;</break>
        </block_content>}</block>

      <case pos:start="3151:7" pos:end="3151:33">case <expr pos:start="3151:12" pos:end="3151:32"><name pos:start="3151:12" pos:end="3151:32">JAVASOCKOPT_MCAST_TTL</name></expr>:</case> <block pos:start="3151:35" pos:end="3161:9">{<block_content pos:start="3152:13" pos:end="3160:18">
            <if_stmt pos:start="3152:13" pos:end="3154:13"><if pos:start="3152:13" pos:end="3154:13">if <condition pos:start="3152:16" pos:end="3152:56">(<expr pos:start="3152:17" pos:end="3152:55"><operator pos:start="3152:17" pos:end="3152:17">(</operator><name pos:start="3152:18" pos:end="3152:25">anOption</name> <operator pos:start="3152:27" pos:end="3152:28">&gt;&gt;</operator> <literal type="number" pos:start="3152:30" pos:end="3152:31">16</literal><operator pos:start="3152:32" pos:end="3152:32">)</operator> <operator pos:start="3152:34" pos:end="3152:34">&amp;</operator> <name pos:start="3152:36" pos:end="3152:55">BROKEN_MULTICAST_TTL</name></expr>)</condition> <block pos:start="3152:58" pos:end="3154:13">{<block_content pos:start="3153:17" pos:end="3153:23">
                <return pos:start="3153:17" pos:end="3153:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3155:13" pos:end="3155:90"><expr pos:start="3155:13" pos:end="3155:89"><name pos:start="3155:13" pos:end="3155:18">result</name> <operator pos:start="3155:20" pos:end="3155:20">=</operator> <call pos:start="3155:22" pos:end="3155:89"><name pos:start="3155:22" pos:end="3155:31">setsockopt</name><argument_list pos:start="3155:32" pos:end="3155:89">(<argument pos:start="3155:33" pos:end="3155:38"><expr pos:start="3155:33" pos:end="3155:38"><name pos:start="3155:33" pos:end="3155:38">handle</name></expr></argument>, <argument pos:start="3155:41" pos:end="3155:50"><expr pos:start="3155:41" pos:end="3155:50"><name pos:start="3155:41" pos:end="3155:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3155:53" pos:end="3155:68"><expr pos:start="3155:53" pos:end="3155:68"><name pos:start="3155:53" pos:end="3155:68">IP_MULTICAST_TTL</name></expr></argument>, <argument pos:start="3155:71" pos:end="3155:78"><expr pos:start="3155:71" pos:end="3155:78"><operator pos:start="3155:71" pos:end="3155:71">&amp;</operator><name pos:start="3155:72" pos:end="3155:78">byteVal</name></expr></argument>, <argument pos:start="3155:81" pos:end="3155:88"><expr pos:start="3155:81" pos:end="3155:88"><name pos:start="3155:81" pos:end="3155:88">byteSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3156:13" pos:end="3159:13"><if pos:start="3156:13" pos:end="3159:13">if <condition pos:start="3156:16" pos:end="3156:28">(<expr pos:start="3156:17" pos:end="3156:27"><literal type="number" pos:start="3156:17" pos:end="3156:17">0</literal> <operator pos:start="3156:19" pos:end="3156:20">!=</operator> <name pos:start="3156:22" pos:end="3156:27">result</name></expr>)</condition> <block pos:start="3156:30" pos:end="3159:13">{<block_content pos:start="3157:17" pos:end="3158:23">
                <expr_stmt pos:start="3157:17" pos:end="3157:63"><expr pos:start="3157:17" pos:end="3157:62"><call pos:start="3157:17" pos:end="3157:62"><name pos:start="3157:17" pos:end="3157:36">throwSocketException</name><argument_list pos:start="3157:37" pos:end="3157:62">(<argument pos:start="3157:38" pos:end="3157:40"><expr pos:start="3157:38" pos:end="3157:40"><name pos:start="3157:38" pos:end="3157:40">env</name></expr></argument>, <argument pos:start="3157:43" pos:end="3157:61"><expr pos:start="3157:43" pos:end="3157:61"><call pos:start="3157:43" pos:end="3157:61"><name pos:start="3157:43" pos:end="3157:54">convertError</name><argument_list pos:start="3157:55" pos:end="3157:61">(<argument pos:start="3157:56" pos:end="3157:60"><expr pos:start="3157:56" pos:end="3157:60"><name pos:start="3157:56" pos:end="3157:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3158:17" pos:end="3158:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3160:13" pos:end="3160:18">break;</break>
        </block_content>}</block>

        <case pos:start="3163:9" pos:end="3163:46">case <expr pos:start="3163:14" pos:end="3163:45"><name pos:start="3163:14" pos:end="3163:45">JAVASOCKOPT_MCAST_ADD_MEMBERSHIP</name></expr>:</case> <block pos:start="3163:48" pos:end="3167:9">{<block_content pos:start="3164:13" pos:end="3166:19">
            <expr_stmt pos:start="3164:13" pos:end="3165:79"><expr pos:start="3164:13" pos:end="3165:78"><call pos:start="3164:13" pos:end="3165:78"><name pos:start="3164:13" pos:end="3164:34">mcastAddDropMembership</name><argument_list pos:start="3164:35" pos:end="3165:78">(<argument pos:start="3164:36" pos:end="3164:38"><expr pos:start="3164:36" pos:end="3164:38"><name pos:start="3164:36" pos:end="3164:38">env</name></expr></argument>, <argument pos:start="3164:41" pos:end="3164:46"><expr pos:start="3164:41" pos:end="3164:46"><name pos:start="3164:41" pos:end="3164:46">handle</name></expr></argument>, <argument pos:start="3164:49" pos:end="3164:54"><expr pos:start="3164:49" pos:end="3164:54"><name pos:start="3164:49" pos:end="3164:54">optVal</name></expr></argument>,
                    <argument pos:start="3165:21" pos:end="3165:58"><expr pos:start="3165:21" pos:end="3165:58"><operator pos:start="3165:21" pos:end="3165:21">(</operator><name pos:start="3165:22" pos:end="3165:29">anOption</name> <operator pos:start="3165:31" pos:end="3165:32">&gt;&gt;</operator> <literal type="number" pos:start="3165:34" pos:end="3165:35">16</literal><operator pos:start="3165:36" pos:end="3165:36">)</operator> <operator pos:start="3165:38" pos:end="3165:38">&amp;</operator> <name pos:start="3165:40" pos:end="3165:58">BROKEN_MULTICAST_IF</name></expr></argument>, <argument pos:start="3165:61" pos:end="3165:77"><expr pos:start="3165:61" pos:end="3165:77"><name pos:start="3165:61" pos:end="3165:77">IP_ADD_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3166:13" pos:end="3166:19">return;</return>
        </block_content>}</block>

        <case pos:start="3169:9" pos:end="3169:47">case <expr pos:start="3169:14" pos:end="3169:46"><name pos:start="3169:14" pos:end="3169:46">JAVASOCKOPT_MCAST_DROP_MEMBERSHIP</name></expr>:</case> <block pos:start="3169:49" pos:end="3173:9">{<block_content pos:start="3170:13" pos:end="3172:19">
            <expr_stmt pos:start="3170:13" pos:end="3171:80"><expr pos:start="3170:13" pos:end="3171:79"><call pos:start="3170:13" pos:end="3171:79"><name pos:start="3170:13" pos:end="3170:34">mcastAddDropMembership</name><argument_list pos:start="3170:35" pos:end="3171:79">(<argument pos:start="3170:36" pos:end="3170:38"><expr pos:start="3170:36" pos:end="3170:38"><name pos:start="3170:36" pos:end="3170:38">env</name></expr></argument>, <argument pos:start="3170:41" pos:end="3170:46"><expr pos:start="3170:41" pos:end="3170:46"><name pos:start="3170:41" pos:end="3170:46">handle</name></expr></argument>, <argument pos:start="3170:49" pos:end="3170:54"><expr pos:start="3170:49" pos:end="3170:54"><name pos:start="3170:49" pos:end="3170:54">optVal</name></expr></argument>,
                    <argument pos:start="3171:21" pos:end="3171:58"><expr pos:start="3171:21" pos:end="3171:58"><operator pos:start="3171:21" pos:end="3171:21">(</operator><name pos:start="3171:22" pos:end="3171:29">anOption</name> <operator pos:start="3171:31" pos:end="3171:32">&gt;&gt;</operator> <literal type="number" pos:start="3171:34" pos:end="3171:35">16</literal><operator pos:start="3171:36" pos:end="3171:36">)</operator> <operator pos:start="3171:38" pos:end="3171:38">&amp;</operator> <name pos:start="3171:40" pos:end="3171:58">BROKEN_MULTICAST_IF</name></expr></argument>, <argument pos:start="3171:61" pos:end="3171:78"><expr pos:start="3171:61" pos:end="3171:78"><name pos:start="3171:61" pos:end="3171:78">IP_DROP_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3172:13" pos:end="3172:19">return;</return>
        </block_content>}</block>

        <case pos:start="3175:9" pos:end="3175:41">case <expr pos:start="3175:14" pos:end="3175:40"><name pos:start="3175:14" pos:end="3175:40">JAVASOCKOPT_MCAST_INTERFACE</name></expr>:</case> <block pos:start="3175:43" pos:end="3185:9">{<block_content pos:start="3176:13" pos:end="3184:18">
            <if_stmt pos:start="3176:13" pos:end="3178:13"><if pos:start="3176:13" pos:end="3178:13">if <condition pos:start="3176:16" pos:end="3176:55">(<expr pos:start="3176:17" pos:end="3176:54"><operator pos:start="3176:17" pos:end="3176:17">(</operator><name pos:start="3176:18" pos:end="3176:25">anOption</name> <operator pos:start="3176:27" pos:end="3176:28">&gt;&gt;</operator> <literal type="number" pos:start="3176:30" pos:end="3176:31">16</literal><operator pos:start="3176:32" pos:end="3176:32">)</operator> <operator pos:start="3176:34" pos:end="3176:34">&amp;</operator> <name pos:start="3176:36" pos:end="3176:54">BROKEN_MULTICAST_IF</name></expr>)</condition> <block pos:start="3176:57" pos:end="3178:13">{<block_content pos:start="3177:17" pos:end="3177:23">
                <return pos:start="3177:17" pos:end="3177:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3179:13" pos:end="3179:89"><expr pos:start="3179:13" pos:end="3179:88"><name pos:start="3179:13" pos:end="3179:18">result</name> <operator pos:start="3179:20" pos:end="3179:20">=</operator> <call pos:start="3179:22" pos:end="3179:88"><name pos:start="3179:22" pos:end="3179:31">setsockopt</name><argument_list pos:start="3179:32" pos:end="3179:88">(<argument pos:start="3179:33" pos:end="3179:38"><expr pos:start="3179:33" pos:end="3179:38"><name pos:start="3179:33" pos:end="3179:38">handle</name></expr></argument>, <argument pos:start="3179:41" pos:end="3179:50"><expr pos:start="3179:41" pos:end="3179:50"><name pos:start="3179:41" pos:end="3179:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3179:53" pos:end="3179:67"><expr pos:start="3179:53" pos:end="3179:67"><name pos:start="3179:53" pos:end="3179:67">IP_MULTICAST_IF</name></expr></argument>, <argument pos:start="3179:70" pos:end="3179:77"><expr pos:start="3179:70" pos:end="3179:77"><operator pos:start="3179:70" pos:end="3179:70">&amp;</operator><name pos:start="3179:71" pos:end="3179:77">sockVal</name></expr></argument>, <argument pos:start="3179:80" pos:end="3179:87"><expr pos:start="3179:80" pos:end="3179:87"><name pos:start="3179:80" pos:end="3179:87">sockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3180:13" pos:end="3183:13"><if pos:start="3180:13" pos:end="3183:13">if <condition pos:start="3180:16" pos:end="3180:28">(<expr pos:start="3180:17" pos:end="3180:27"><literal type="number" pos:start="3180:17" pos:end="3180:17">0</literal> <operator pos:start="3180:19" pos:end="3180:20">!=</operator> <name pos:start="3180:22" pos:end="3180:27">result</name></expr>)</condition> <block pos:start="3180:30" pos:end="3183:13">{<block_content pos:start="3181:17" pos:end="3182:23">
                <expr_stmt pos:start="3181:17" pos:end="3181:63"><expr pos:start="3181:17" pos:end="3181:62"><call pos:start="3181:17" pos:end="3181:62"><name pos:start="3181:17" pos:end="3181:36">throwSocketException</name><argument_list pos:start="3181:37" pos:end="3181:62">(<argument pos:start="3181:38" pos:end="3181:40"><expr pos:start="3181:38" pos:end="3181:40"><name pos:start="3181:38" pos:end="3181:40">env</name></expr></argument>, <argument pos:start="3181:43" pos:end="3181:61"><expr pos:start="3181:43" pos:end="3181:61"><call pos:start="3181:43" pos:end="3181:61"><name pos:start="3181:43" pos:end="3181:54">convertError</name><argument_list pos:start="3181:55" pos:end="3181:61">(<argument pos:start="3181:56" pos:end="3181:60"><expr pos:start="3181:56" pos:end="3181:60"><name pos:start="3181:56" pos:end="3181:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3182:17" pos:end="3182:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3184:13" pos:end="3184:18">break;</break>
        </block_content>}</block>

        <case pos:start="3187:9" pos:end="3187:35">case <expr pos:start="3187:14" pos:end="3187:34"><name pos:start="3187:14" pos:end="3187:34">JAVASOCKOPT_SO_SNDBUF</name></expr>:</case> <block pos:start="3187:37" pos:end="3194:9">{<block_content pos:start="3188:13" pos:end="3193:18">
            <expr_stmt pos:start="3188:13" pos:end="3188:81"><expr pos:start="3188:13" pos:end="3188:80"><name pos:start="3188:13" pos:end="3188:18">result</name> <operator pos:start="3188:20" pos:end="3188:20">=</operator> <call pos:start="3188:22" pos:end="3188:80"><name pos:start="3188:22" pos:end="3188:31">setsockopt</name><argument_list pos:start="3188:32" pos:end="3188:80">(<argument pos:start="3188:33" pos:end="3188:38"><expr pos:start="3188:33" pos:end="3188:38"><name pos:start="3188:33" pos:end="3188:38">handle</name></expr></argument>, <argument pos:start="3188:41" pos:end="3188:50"><expr pos:start="3188:41" pos:end="3188:50"><name pos:start="3188:41" pos:end="3188:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3188:53" pos:end="3188:61"><expr pos:start="3188:53" pos:end="3188:61"><name pos:start="3188:53" pos:end="3188:61">SO_SNDBUF</name></expr></argument>, <argument pos:start="3188:64" pos:end="3188:70"><expr pos:start="3188:64" pos:end="3188:70"><operator pos:start="3188:64" pos:end="3188:64">&amp;</operator><name pos:start="3188:65" pos:end="3188:70">intVal</name></expr></argument>, <argument pos:start="3188:73" pos:end="3188:79"><expr pos:start="3188:73" pos:end="3188:79"><name pos:start="3188:73" pos:end="3188:79">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3189:13" pos:end="3192:13"><if pos:start="3189:13" pos:end="3192:13">if <condition pos:start="3189:16" pos:end="3189:28">(<expr pos:start="3189:17" pos:end="3189:27"><literal type="number" pos:start="3189:17" pos:end="3189:17">0</literal> <operator pos:start="3189:19" pos:end="3189:20">!=</operator> <name pos:start="3189:22" pos:end="3189:27">result</name></expr>)</condition> <block pos:start="3189:30" pos:end="3192:13">{<block_content pos:start="3190:17" pos:end="3191:23">
                <expr_stmt pos:start="3190:17" pos:end="3190:63"><expr pos:start="3190:17" pos:end="3190:62"><call pos:start="3190:17" pos:end="3190:62"><name pos:start="3190:17" pos:end="3190:36">throwSocketException</name><argument_list pos:start="3190:37" pos:end="3190:62">(<argument pos:start="3190:38" pos:end="3190:40"><expr pos:start="3190:38" pos:end="3190:40"><name pos:start="3190:38" pos:end="3190:40">env</name></expr></argument>, <argument pos:start="3190:43" pos:end="3190:61"><expr pos:start="3190:43" pos:end="3190:61"><call pos:start="3190:43" pos:end="3190:61"><name pos:start="3190:43" pos:end="3190:54">convertError</name><argument_list pos:start="3190:55" pos:end="3190:61">(<argument pos:start="3190:56" pos:end="3190:60"><expr pos:start="3190:56" pos:end="3190:60"><name pos:start="3190:56" pos:end="3190:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3191:17" pos:end="3191:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3193:13" pos:end="3193:18">break;</break>
        </block_content>}</block>

        <case pos:start="3196:9" pos:end="3196:35">case <expr pos:start="3196:14" pos:end="3196:34"><name pos:start="3196:14" pos:end="3196:34">JAVASOCKOPT_SO_RCVBUF</name></expr>:</case> <block pos:start="3196:37" pos:end="3203:9">{<block_content pos:start="3197:13" pos:end="3202:18">
            <expr_stmt pos:start="3197:13" pos:end="3197:81"><expr pos:start="3197:13" pos:end="3197:80"><name pos:start="3197:13" pos:end="3197:18">result</name> <operator pos:start="3197:20" pos:end="3197:20">=</operator> <call pos:start="3197:22" pos:end="3197:80"><name pos:start="3197:22" pos:end="3197:31">setsockopt</name><argument_list pos:start="3197:32" pos:end="3197:80">(<argument pos:start="3197:33" pos:end="3197:38"><expr pos:start="3197:33" pos:end="3197:38"><name pos:start="3197:33" pos:end="3197:38">handle</name></expr></argument>, <argument pos:start="3197:41" pos:end="3197:50"><expr pos:start="3197:41" pos:end="3197:50"><name pos:start="3197:41" pos:end="3197:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3197:53" pos:end="3197:61"><expr pos:start="3197:53" pos:end="3197:61"><name pos:start="3197:53" pos:end="3197:61">SO_RCVBUF</name></expr></argument>, <argument pos:start="3197:64" pos:end="3197:70"><expr pos:start="3197:64" pos:end="3197:70"><operator pos:start="3197:64" pos:end="3197:64">&amp;</operator><name pos:start="3197:65" pos:end="3197:70">intVal</name></expr></argument>, <argument pos:start="3197:73" pos:end="3197:79"><expr pos:start="3197:73" pos:end="3197:79"><name pos:start="3197:73" pos:end="3197:79">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3198:13" pos:end="3201:13"><if pos:start="3198:13" pos:end="3201:13">if <condition pos:start="3198:16" pos:end="3198:28">(<expr pos:start="3198:17" pos:end="3198:27"><literal type="number" pos:start="3198:17" pos:end="3198:17">0</literal> <operator pos:start="3198:19" pos:end="3198:20">!=</operator> <name pos:start="3198:22" pos:end="3198:27">result</name></expr>)</condition> <block pos:start="3198:30" pos:end="3201:13">{<block_content pos:start="3199:17" pos:end="3200:23">
                <expr_stmt pos:start="3199:17" pos:end="3199:63"><expr pos:start="3199:17" pos:end="3199:62"><call pos:start="3199:17" pos:end="3199:62"><name pos:start="3199:17" pos:end="3199:36">throwSocketException</name><argument_list pos:start="3199:37" pos:end="3199:62">(<argument pos:start="3199:38" pos:end="3199:40"><expr pos:start="3199:38" pos:end="3199:40"><name pos:start="3199:38" pos:end="3199:40">env</name></expr></argument>, <argument pos:start="3199:43" pos:end="3199:61"><expr pos:start="3199:43" pos:end="3199:61"><call pos:start="3199:43" pos:end="3199:61"><name pos:start="3199:43" pos:end="3199:54">convertError</name><argument_list pos:start="3199:55" pos:end="3199:61">(<argument pos:start="3199:56" pos:end="3199:60"><expr pos:start="3199:56" pos:end="3199:60"><name pos:start="3199:56" pos:end="3199:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3200:17" pos:end="3200:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3202:13" pos:end="3202:18">break;</break>
        </block_content>}</block>

        <case pos:start="3205:9" pos:end="3205:38">case <expr pos:start="3205:14" pos:end="3205:37"><name pos:start="3205:14" pos:end="3205:37">JAVASOCKOPT_SO_BROADCAST</name></expr>:</case> <block pos:start="3205:40" pos:end="3212:9">{<block_content pos:start="3206:13" pos:end="3211:18">
            <expr_stmt pos:start="3206:13" pos:end="3206:84"><expr pos:start="3206:13" pos:end="3206:83"><name pos:start="3206:13" pos:end="3206:18">result</name> <operator pos:start="3206:20" pos:end="3206:20">=</operator> <call pos:start="3206:22" pos:end="3206:83"><name pos:start="3206:22" pos:end="3206:31">setsockopt</name><argument_list pos:start="3206:32" pos:end="3206:83">(<argument pos:start="3206:33" pos:end="3206:38"><expr pos:start="3206:33" pos:end="3206:38"><name pos:start="3206:33" pos:end="3206:38">handle</name></expr></argument>, <argument pos:start="3206:41" pos:end="3206:50"><expr pos:start="3206:41" pos:end="3206:50"><name pos:start="3206:41" pos:end="3206:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3206:53" pos:end="3206:64"><expr pos:start="3206:53" pos:end="3206:64"><name pos:start="3206:53" pos:end="3206:64">SO_BROADCAST</name></expr></argument>, <argument pos:start="3206:67" pos:end="3206:73"><expr pos:start="3206:67" pos:end="3206:73"><operator pos:start="3206:67" pos:end="3206:67">&amp;</operator><name pos:start="3206:68" pos:end="3206:73">intVal</name></expr></argument>, <argument pos:start="3206:76" pos:end="3206:82"><expr pos:start="3206:76" pos:end="3206:82"><name pos:start="3206:76" pos:end="3206:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3207:13" pos:end="3210:13"><if pos:start="3207:13" pos:end="3210:13">if <condition pos:start="3207:16" pos:end="3207:28">(<expr pos:start="3207:17" pos:end="3207:27"><literal type="number" pos:start="3207:17" pos:end="3207:17">0</literal> <operator pos:start="3207:19" pos:end="3207:20">!=</operator> <name pos:start="3207:22" pos:end="3207:27">result</name></expr>)</condition> <block pos:start="3207:30" pos:end="3210:13">{<block_content pos:start="3208:17" pos:end="3209:23">
                <expr_stmt pos:start="3208:17" pos:end="3208:63"><expr pos:start="3208:17" pos:end="3208:62"><call pos:start="3208:17" pos:end="3208:62"><name pos:start="3208:17" pos:end="3208:36">throwSocketException</name><argument_list pos:start="3208:37" pos:end="3208:62">(<argument pos:start="3208:38" pos:end="3208:40"><expr pos:start="3208:38" pos:end="3208:40"><name pos:start="3208:38" pos:end="3208:40">env</name></expr></argument>, <argument pos:start="3208:43" pos:end="3208:61"><expr pos:start="3208:43" pos:end="3208:61"><call pos:start="3208:43" pos:end="3208:61"><name pos:start="3208:43" pos:end="3208:54">convertError</name><argument_list pos:start="3208:55" pos:end="3208:61">(<argument pos:start="3208:56" pos:end="3208:60"><expr pos:start="3208:56" pos:end="3208:60"><name pos:start="3208:56" pos:end="3208:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3209:17" pos:end="3209:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3211:13" pos:end="3211:18">break;</break>
        </block_content>}</block>

        <case pos:start="3214:9" pos:end="3214:38">case <expr pos:start="3214:14" pos:end="3214:37"><name pos:start="3214:14" pos:end="3214:37">JAVASOCKOPT_SO_REUSEADDR</name></expr>:</case> <block pos:start="3214:40" pos:end="3221:9">{<block_content pos:start="3215:13" pos:end="3220:18">
            <expr_stmt pos:start="3215:13" pos:end="3215:84"><expr pos:start="3215:13" pos:end="3215:83"><name pos:start="3215:13" pos:end="3215:18">result</name> <operator pos:start="3215:20" pos:end="3215:20">=</operator> <call pos:start="3215:22" pos:end="3215:83"><name pos:start="3215:22" pos:end="3215:31">setsockopt</name><argument_list pos:start="3215:32" pos:end="3215:83">(<argument pos:start="3215:33" pos:end="3215:38"><expr pos:start="3215:33" pos:end="3215:38"><name pos:start="3215:33" pos:end="3215:38">handle</name></expr></argument>, <argument pos:start="3215:41" pos:end="3215:50"><expr pos:start="3215:41" pos:end="3215:50"><name pos:start="3215:41" pos:end="3215:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3215:53" pos:end="3215:64"><expr pos:start="3215:53" pos:end="3215:64"><name pos:start="3215:53" pos:end="3215:64">SO_REUSEADDR</name></expr></argument>, <argument pos:start="3215:67" pos:end="3215:73"><expr pos:start="3215:67" pos:end="3215:73"><operator pos:start="3215:67" pos:end="3215:67">&amp;</operator><name pos:start="3215:68" pos:end="3215:73">intVal</name></expr></argument>, <argument pos:start="3215:76" pos:end="3215:82"><expr pos:start="3215:76" pos:end="3215:82"><name pos:start="3215:76" pos:end="3215:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3216:13" pos:end="3219:13"><if pos:start="3216:13" pos:end="3219:13">if <condition pos:start="3216:16" pos:end="3216:28">(<expr pos:start="3216:17" pos:end="3216:27"><literal type="number" pos:start="3216:17" pos:end="3216:17">0</literal> <operator pos:start="3216:19" pos:end="3216:20">!=</operator> <name pos:start="3216:22" pos:end="3216:27">result</name></expr>)</condition> <block pos:start="3216:30" pos:end="3219:13">{<block_content pos:start="3217:17" pos:end="3218:23">
                <expr_stmt pos:start="3217:17" pos:end="3217:63"><expr pos:start="3217:17" pos:end="3217:62"><call pos:start="3217:17" pos:end="3217:62"><name pos:start="3217:17" pos:end="3217:36">throwSocketException</name><argument_list pos:start="3217:37" pos:end="3217:62">(<argument pos:start="3217:38" pos:end="3217:40"><expr pos:start="3217:38" pos:end="3217:40"><name pos:start="3217:38" pos:end="3217:40">env</name></expr></argument>, <argument pos:start="3217:43" pos:end="3217:61"><expr pos:start="3217:43" pos:end="3217:61"><call pos:start="3217:43" pos:end="3217:61"><name pos:start="3217:43" pos:end="3217:54">convertError</name><argument_list pos:start="3217:55" pos:end="3217:61">(<argument pos:start="3217:56" pos:end="3217:60"><expr pos:start="3217:56" pos:end="3217:60"><name pos:start="3217:56" pos:end="3217:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3218:17" pos:end="3218:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3220:13" pos:end="3220:18">break;</break>
        </block_content>}</block>
        <case pos:start="3222:9" pos:end="3222:38">case <expr pos:start="3222:14" pos:end="3222:37"><name pos:start="3222:14" pos:end="3222:37">JAVASOCKOPT_SO_KEEPALIVE</name></expr>:</case> <block pos:start="3222:40" pos:end="3229:9">{<block_content pos:start="3223:13" pos:end="3228:18">
            <expr_stmt pos:start="3223:13" pos:end="3223:84"><expr pos:start="3223:13" pos:end="3223:83"><name pos:start="3223:13" pos:end="3223:18">result</name> <operator pos:start="3223:20" pos:end="3223:20">=</operator> <call pos:start="3223:22" pos:end="3223:83"><name pos:start="3223:22" pos:end="3223:31">setsockopt</name><argument_list pos:start="3223:32" pos:end="3223:83">(<argument pos:start="3223:33" pos:end="3223:38"><expr pos:start="3223:33" pos:end="3223:38"><name pos:start="3223:33" pos:end="3223:38">handle</name></expr></argument>, <argument pos:start="3223:41" pos:end="3223:50"><expr pos:start="3223:41" pos:end="3223:50"><name pos:start="3223:41" pos:end="3223:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3223:53" pos:end="3223:64"><expr pos:start="3223:53" pos:end="3223:64"><name pos:start="3223:53" pos:end="3223:64">SO_KEEPALIVE</name></expr></argument>, <argument pos:start="3223:67" pos:end="3223:73"><expr pos:start="3223:67" pos:end="3223:73"><operator pos:start="3223:67" pos:end="3223:67">&amp;</operator><name pos:start="3223:68" pos:end="3223:73">intVal</name></expr></argument>, <argument pos:start="3223:76" pos:end="3223:82"><expr pos:start="3223:76" pos:end="3223:82"><name pos:start="3223:76" pos:end="3223:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3224:13" pos:end="3227:13"><if pos:start="3224:13" pos:end="3227:13">if <condition pos:start="3224:16" pos:end="3224:28">(<expr pos:start="3224:17" pos:end="3224:27"><literal type="number" pos:start="3224:17" pos:end="3224:17">0</literal> <operator pos:start="3224:19" pos:end="3224:20">!=</operator> <name pos:start="3224:22" pos:end="3224:27">result</name></expr>)</condition> <block pos:start="3224:30" pos:end="3227:13">{<block_content pos:start="3225:17" pos:end="3226:23">
                <expr_stmt pos:start="3225:17" pos:end="3225:63"><expr pos:start="3225:17" pos:end="3225:62"><call pos:start="3225:17" pos:end="3225:62"><name pos:start="3225:17" pos:end="3225:36">throwSocketException</name><argument_list pos:start="3225:37" pos:end="3225:62">(<argument pos:start="3225:38" pos:end="3225:40"><expr pos:start="3225:38" pos:end="3225:40"><name pos:start="3225:38" pos:end="3225:40">env</name></expr></argument>, <argument pos:start="3225:43" pos:end="3225:61"><expr pos:start="3225:43" pos:end="3225:61"><call pos:start="3225:43" pos:end="3225:61"><name pos:start="3225:43" pos:end="3225:54">convertError</name><argument_list pos:start="3225:55" pos:end="3225:61">(<argument pos:start="3225:56" pos:end="3225:60"><expr pos:start="3225:56" pos:end="3225:60"><name pos:start="3225:56" pos:end="3225:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3226:17" pos:end="3226:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3228:13" pos:end="3228:18">break;</break>
        </block_content>}</block>

        <case pos:start="3231:9" pos:end="3231:38">case <expr pos:start="3231:14" pos:end="3231:37"><name pos:start="3231:14" pos:end="3231:37">JAVASOCKOPT_SO_OOBINLINE</name></expr>:</case> <block pos:start="3231:40" pos:end="3238:9">{<block_content pos:start="3232:13" pos:end="3237:18">
            <expr_stmt pos:start="3232:13" pos:end="3232:84"><expr pos:start="3232:13" pos:end="3232:83"><name pos:start="3232:13" pos:end="3232:18">result</name> <operator pos:start="3232:20" pos:end="3232:20">=</operator> <call pos:start="3232:22" pos:end="3232:83"><name pos:start="3232:22" pos:end="3232:31">setsockopt</name><argument_list pos:start="3232:32" pos:end="3232:83">(<argument pos:start="3232:33" pos:end="3232:38"><expr pos:start="3232:33" pos:end="3232:38"><name pos:start="3232:33" pos:end="3232:38">handle</name></expr></argument>, <argument pos:start="3232:41" pos:end="3232:50"><expr pos:start="3232:41" pos:end="3232:50"><name pos:start="3232:41" pos:end="3232:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3232:53" pos:end="3232:64"><expr pos:start="3232:53" pos:end="3232:64"><name pos:start="3232:53" pos:end="3232:64">SO_OOBINLINE</name></expr></argument>, <argument pos:start="3232:67" pos:end="3232:73"><expr pos:start="3232:67" pos:end="3232:73"><operator pos:start="3232:67" pos:end="3232:67">&amp;</operator><name pos:start="3232:68" pos:end="3232:73">intVal</name></expr></argument>, <argument pos:start="3232:76" pos:end="3232:82"><expr pos:start="3232:76" pos:end="3232:82"><name pos:start="3232:76" pos:end="3232:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3233:13" pos:end="3236:13"><if pos:start="3233:13" pos:end="3236:13">if <condition pos:start="3233:16" pos:end="3233:28">(<expr pos:start="3233:17" pos:end="3233:27"><literal type="number" pos:start="3233:17" pos:end="3233:17">0</literal> <operator pos:start="3233:19" pos:end="3233:20">!=</operator> <name pos:start="3233:22" pos:end="3233:27">result</name></expr>)</condition> <block pos:start="3233:30" pos:end="3236:13">{<block_content pos:start="3234:17" pos:end="3235:23">
                <expr_stmt pos:start="3234:17" pos:end="3234:63"><expr pos:start="3234:17" pos:end="3234:62"><call pos:start="3234:17" pos:end="3234:62"><name pos:start="3234:17" pos:end="3234:36">throwSocketException</name><argument_list pos:start="3234:37" pos:end="3234:62">(<argument pos:start="3234:38" pos:end="3234:40"><expr pos:start="3234:38" pos:end="3234:40"><name pos:start="3234:38" pos:end="3234:40">env</name></expr></argument>, <argument pos:start="3234:43" pos:end="3234:61"><expr pos:start="3234:43" pos:end="3234:61"><call pos:start="3234:43" pos:end="3234:61"><name pos:start="3234:43" pos:end="3234:54">convertError</name><argument_list pos:start="3234:55" pos:end="3234:61">(<argument pos:start="3234:56" pos:end="3234:60"><expr pos:start="3234:56" pos:end="3234:60"><name pos:start="3234:56" pos:end="3234:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3235:17" pos:end="3235:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3237:13" pos:end="3237:18">break;</break>
        </block_content>}</block>

        <case pos:start="3240:9" pos:end="3240:43">case <expr pos:start="3240:14" pos:end="3240:42"><name pos:start="3240:14" pos:end="3240:42">JAVASOCKOPT_IP_MULTICAST_LOOP</name></expr>:</case> <block pos:start="3240:45" pos:end="3247:9">{<block_content pos:start="3241:13" pos:end="3246:18">
            <expr_stmt pos:start="3241:13" pos:end="3241:89"><expr pos:start="3241:13" pos:end="3241:88"><name pos:start="3241:13" pos:end="3241:18">result</name> <operator pos:start="3241:20" pos:end="3241:20">=</operator> <call pos:start="3241:22" pos:end="3241:88"><name pos:start="3241:22" pos:end="3241:31">setsockopt</name><argument_list pos:start="3241:32" pos:end="3241:88">(<argument pos:start="3241:33" pos:end="3241:38"><expr pos:start="3241:33" pos:end="3241:38"><name pos:start="3241:33" pos:end="3241:38">handle</name></expr></argument>, <argument pos:start="3241:41" pos:end="3241:50"><expr pos:start="3241:41" pos:end="3241:50"><name pos:start="3241:41" pos:end="3241:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3241:53" pos:end="3241:69"><expr pos:start="3241:53" pos:end="3241:69"><name pos:start="3241:53" pos:end="3241:69">IP_MULTICAST_LOOP</name></expr></argument>, <argument pos:start="3241:72" pos:end="3241:78"><expr pos:start="3241:72" pos:end="3241:78"><operator pos:start="3241:72" pos:end="3241:72">&amp;</operator><name pos:start="3241:73" pos:end="3241:78">intVal</name></expr></argument>, <argument pos:start="3241:81" pos:end="3241:87"><expr pos:start="3241:81" pos:end="3241:87"><name pos:start="3241:81" pos:end="3241:87">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3242:13" pos:end="3245:13"><if pos:start="3242:13" pos:end="3245:13">if <condition pos:start="3242:16" pos:end="3242:28">(<expr pos:start="3242:17" pos:end="3242:27"><literal type="number" pos:start="3242:17" pos:end="3242:17">0</literal> <operator pos:start="3242:19" pos:end="3242:20">!=</operator> <name pos:start="3242:22" pos:end="3242:27">result</name></expr>)</condition> <block pos:start="3242:30" pos:end="3245:13">{<block_content pos:start="3243:17" pos:end="3244:23">
                <expr_stmt pos:start="3243:17" pos:end="3243:63"><expr pos:start="3243:17" pos:end="3243:62"><call pos:start="3243:17" pos:end="3243:62"><name pos:start="3243:17" pos:end="3243:36">throwSocketException</name><argument_list pos:start="3243:37" pos:end="3243:62">(<argument pos:start="3243:38" pos:end="3243:40"><expr pos:start="3243:38" pos:end="3243:40"><name pos:start="3243:38" pos:end="3243:40">env</name></expr></argument>, <argument pos:start="3243:43" pos:end="3243:61"><expr pos:start="3243:43" pos:end="3243:61"><call pos:start="3243:43" pos:end="3243:61"><name pos:start="3243:43" pos:end="3243:54">convertError</name><argument_list pos:start="3243:55" pos:end="3243:61">(<argument pos:start="3243:56" pos:end="3243:60"><expr pos:start="3243:56" pos:end="3243:60"><name pos:start="3243:56" pos:end="3243:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3244:17" pos:end="3244:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3246:13" pos:end="3246:18">break;</break>
        </block_content>}</block>

        <case pos:start="3249:9" pos:end="3249:32">case <expr pos:start="3249:14" pos:end="3249:31"><name pos:start="3249:14" pos:end="3249:31">JAVASOCKOPT_IP_TOS</name></expr>:</case> <block pos:start="3249:34" pos:end="3256:9">{<block_content pos:start="3250:13" pos:end="3255:18">
            <expr_stmt pos:start="3250:13" pos:end="3250:78"><expr pos:start="3250:13" pos:end="3250:77"><name pos:start="3250:13" pos:end="3250:18">result</name> <operator pos:start="3250:20" pos:end="3250:20">=</operator> <call pos:start="3250:22" pos:end="3250:77"><name pos:start="3250:22" pos:end="3250:31">setsockopt</name><argument_list pos:start="3250:32" pos:end="3250:77">(<argument pos:start="3250:33" pos:end="3250:38"><expr pos:start="3250:33" pos:end="3250:38"><name pos:start="3250:33" pos:end="3250:38">handle</name></expr></argument>, <argument pos:start="3250:41" pos:end="3250:50"><expr pos:start="3250:41" pos:end="3250:50"><name pos:start="3250:41" pos:end="3250:50">IPPROTO_IP</name></expr></argument>, <argument pos:start="3250:53" pos:end="3250:58"><expr pos:start="3250:53" pos:end="3250:58"><name pos:start="3250:53" pos:end="3250:58">IP_TOS</name></expr></argument>, <argument pos:start="3250:61" pos:end="3250:67"><expr pos:start="3250:61" pos:end="3250:67"><operator pos:start="3250:61" pos:end="3250:61">&amp;</operator><name pos:start="3250:62" pos:end="3250:67">intVal</name></expr></argument>, <argument pos:start="3250:70" pos:end="3250:76"><expr pos:start="3250:70" pos:end="3250:76"><name pos:start="3250:70" pos:end="3250:76">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3251:13" pos:end="3254:13"><if pos:start="3251:13" pos:end="3254:13">if <condition pos:start="3251:16" pos:end="3251:28">(<expr pos:start="3251:17" pos:end="3251:27"><literal type="number" pos:start="3251:17" pos:end="3251:17">0</literal> <operator pos:start="3251:19" pos:end="3251:20">!=</operator> <name pos:start="3251:22" pos:end="3251:27">result</name></expr>)</condition> <block pos:start="3251:30" pos:end="3254:13">{<block_content pos:start="3252:17" pos:end="3253:23">
                <expr_stmt pos:start="3252:17" pos:end="3252:63"><expr pos:start="3252:17" pos:end="3252:62"><call pos:start="3252:17" pos:end="3252:62"><name pos:start="3252:17" pos:end="3252:36">throwSocketException</name><argument_list pos:start="3252:37" pos:end="3252:62">(<argument pos:start="3252:38" pos:end="3252:40"><expr pos:start="3252:38" pos:end="3252:40"><name pos:start="3252:38" pos:end="3252:40">env</name></expr></argument>, <argument pos:start="3252:43" pos:end="3252:61"><expr pos:start="3252:43" pos:end="3252:61"><call pos:start="3252:43" pos:end="3252:61"><name pos:start="3252:43" pos:end="3252:54">convertError</name><argument_list pos:start="3252:55" pos:end="3252:61">(<argument pos:start="3252:56" pos:end="3252:60"><expr pos:start="3252:56" pos:end="3252:60"><name pos:start="3252:56" pos:end="3252:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3253:17" pos:end="3253:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3255:13" pos:end="3255:18">break;</break>
        </block_content>}</block>

        <case pos:start="3258:9" pos:end="3258:49">case <expr pos:start="3258:14" pos:end="3258:48"><name pos:start="3258:14" pos:end="3258:48">JAVASOCKOPT_REUSEADDR_AND_REUSEPORT</name></expr>:</case> <block pos:start="3258:51" pos:end="3266:9">{<block_content pos:start="3260:13" pos:end="3265:18">
            <comment type="line" pos:start="3259:13" pos:end="3259:66">// SO_REUSEPORT doesn't need to get set on this System</comment>
            <expr_stmt pos:start="3260:13" pos:end="3260:84"><expr pos:start="3260:13" pos:end="3260:83"><name pos:start="3260:13" pos:end="3260:18">result</name> <operator pos:start="3260:20" pos:end="3260:20">=</operator> <call pos:start="3260:22" pos:end="3260:83"><name pos:start="3260:22" pos:end="3260:31">setsockopt</name><argument_list pos:start="3260:32" pos:end="3260:83">(<argument pos:start="3260:33" pos:end="3260:38"><expr pos:start="3260:33" pos:end="3260:38"><name pos:start="3260:33" pos:end="3260:38">handle</name></expr></argument>, <argument pos:start="3260:41" pos:end="3260:50"><expr pos:start="3260:41" pos:end="3260:50"><name pos:start="3260:41" pos:end="3260:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3260:53" pos:end="3260:64"><expr pos:start="3260:53" pos:end="3260:64"><name pos:start="3260:53" pos:end="3260:64">SO_REUSEADDR</name></expr></argument>, <argument pos:start="3260:67" pos:end="3260:73"><expr pos:start="3260:67" pos:end="3260:73"><operator pos:start="3260:67" pos:end="3260:67">&amp;</operator><name pos:start="3260:68" pos:end="3260:73">intVal</name></expr></argument>, <argument pos:start="3260:76" pos:end="3260:82"><expr pos:start="3260:76" pos:end="3260:82"><name pos:start="3260:76" pos:end="3260:82">intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3261:13" pos:end="3264:13"><if pos:start="3261:13" pos:end="3264:13">if <condition pos:start="3261:16" pos:end="3261:28">(<expr pos:start="3261:17" pos:end="3261:27"><literal type="number" pos:start="3261:17" pos:end="3261:17">0</literal> <operator pos:start="3261:19" pos:end="3261:20">!=</operator> <name pos:start="3261:22" pos:end="3261:27">result</name></expr>)</condition> <block pos:start="3261:30" pos:end="3264:13">{<block_content pos:start="3262:17" pos:end="3263:23">
                <expr_stmt pos:start="3262:17" pos:end="3262:63"><expr pos:start="3262:17" pos:end="3262:62"><call pos:start="3262:17" pos:end="3262:62"><name pos:start="3262:17" pos:end="3262:36">throwSocketException</name><argument_list pos:start="3262:37" pos:end="3262:62">(<argument pos:start="3262:38" pos:end="3262:40"><expr pos:start="3262:38" pos:end="3262:40"><name pos:start="3262:38" pos:end="3262:40">env</name></expr></argument>, <argument pos:start="3262:43" pos:end="3262:61"><expr pos:start="3262:43" pos:end="3262:61"><call pos:start="3262:43" pos:end="3262:61"><name pos:start="3262:43" pos:end="3262:54">convertError</name><argument_list pos:start="3262:55" pos:end="3262:61">(<argument pos:start="3262:56" pos:end="3262:60"><expr pos:start="3262:56" pos:end="3262:60"><name pos:start="3262:56" pos:end="3262:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3263:17" pos:end="3263:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3265:13" pos:end="3265:18">break;</break>
        </block_content>}</block>

        <case pos:start="3268:9" pos:end="3268:39">case <expr pos:start="3268:14" pos:end="3268:38"><name pos:start="3268:14" pos:end="3268:38">JAVASOCKOPT_SO_RCVTIMEOUT</name></expr>:</case> <block pos:start="3268:41" pos:end="3279:9">{<block_content pos:start="3269:13" pos:end="3278:18">
            <decl_stmt pos:start="3269:13" pos:end="3269:35"><decl pos:start="3269:13" pos:end="3269:34"><type pos:start="3269:13" pos:end="3269:26"><name pos:start="3269:13" pos:end="3269:26"><name pos:start="3269:13" pos:end="3269:18">struct</name> <name pos:start="3269:20" pos:end="3269:26">timeval</name></name></type> <name pos:start="3269:28" pos:end="3269:34">timeout</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3270:13" pos:end="3270:43"><expr pos:start="3270:13" pos:end="3270:42"><name pos:start="3270:13" pos:end="3270:26"><name pos:start="3270:13" pos:end="3270:19">timeout</name><operator pos:start="3270:20" pos:end="3270:20">.</operator><name pos:start="3270:21" pos:end="3270:26">tv_sec</name></name> <operator pos:start="3270:28" pos:end="3270:28">=</operator> <name pos:start="3270:30" pos:end="3270:35">intVal</name> <operator pos:start="3270:37" pos:end="3270:37">/</operator> <literal type="number" pos:start="3270:39" pos:end="3270:42">1000</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3271:13" pos:end="3271:53"><expr pos:start="3271:13" pos:end="3271:52"><name pos:start="3271:13" pos:end="3271:27"><name pos:start="3271:13" pos:end="3271:19">timeout</name><operator pos:start="3271:20" pos:end="3271:20">.</operator><name pos:start="3271:21" pos:end="3271:27">tv_usec</name></name> <operator pos:start="3271:29" pos:end="3271:29">=</operator> <operator pos:start="3271:31" pos:end="3271:31">(</operator><name pos:start="3271:32" pos:end="3271:37">intVal</name> <operator pos:start="3271:39" pos:end="3271:39">%</operator> <literal type="number" pos:start="3271:41" pos:end="3271:44">1000</literal><operator pos:start="3271:45" pos:end="3271:45">)</operator> <operator pos:start="3271:47" pos:end="3271:47">*</operator> <literal type="number" pos:start="3271:49" pos:end="3271:52">1000</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3272:13" pos:end="3273:44"><expr pos:start="3272:13" pos:end="3273:43"><name pos:start="3272:13" pos:end="3272:18">result</name> <operator pos:start="3272:20" pos:end="3272:20">=</operator> <call pos:start="3272:22" pos:end="3273:43"><name pos:start="3272:22" pos:end="3272:31">setsockopt</name><argument_list pos:start="3272:32" pos:end="3273:43">(<argument pos:start="3272:33" pos:end="3272:38"><expr pos:start="3272:33" pos:end="3272:38"><name pos:start="3272:33" pos:end="3272:38">handle</name></expr></argument>, <argument pos:start="3272:41" pos:end="3272:50"><expr pos:start="3272:41" pos:end="3272:50"><name pos:start="3272:41" pos:end="3272:50">SOL_SOCKET</name></expr></argument>, <argument pos:start="3272:53" pos:end="3272:63"><expr pos:start="3272:53" pos:end="3272:63"><name pos:start="3272:53" pos:end="3272:63">SO_RCVTIMEO</name></expr></argument>, <argument pos:start="3272:66" pos:end="3272:73"><expr pos:start="3272:66" pos:end="3272:73"><operator pos:start="3272:66" pos:end="3272:66">&amp;</operator><name pos:start="3272:67" pos:end="3272:73">timeout</name></expr></argument>,
                    <argument pos:start="3273:21" pos:end="3273:42"><expr pos:start="3273:21" pos:end="3273:42"><sizeof pos:start="3273:21" pos:end="3273:42">sizeof<argument_list pos:start="3273:27" pos:end="3273:42">(<argument pos:start="3273:28" pos:end="3273:41"><expr pos:start="3273:28" pos:end="3273:41">struct <name pos:start="3273:35" pos:end="3273:41">timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3274:13" pos:end="3277:13"><if pos:start="3274:13" pos:end="3277:13">if <condition pos:start="3274:16" pos:end="3274:28">(<expr pos:start="3274:17" pos:end="3274:27"><literal type="number" pos:start="3274:17" pos:end="3274:17">0</literal> <operator pos:start="3274:19" pos:end="3274:20">!=</operator> <name pos:start="3274:22" pos:end="3274:27">result</name></expr>)</condition> <block pos:start="3274:30" pos:end="3277:13">{<block_content pos:start="3275:17" pos:end="3276:23">
                <expr_stmt pos:start="3275:17" pos:end="3275:63"><expr pos:start="3275:17" pos:end="3275:62"><call pos:start="3275:17" pos:end="3275:62"><name pos:start="3275:17" pos:end="3275:36">throwSocketException</name><argument_list pos:start="3275:37" pos:end="3275:62">(<argument pos:start="3275:38" pos:end="3275:40"><expr pos:start="3275:38" pos:end="3275:40"><name pos:start="3275:38" pos:end="3275:40">env</name></expr></argument>, <argument pos:start="3275:43" pos:end="3275:61"><expr pos:start="3275:43" pos:end="3275:61"><call pos:start="3275:43" pos:end="3275:61"><name pos:start="3275:43" pos:end="3275:54">convertError</name><argument_list pos:start="3275:55" pos:end="3275:61">(<argument pos:start="3275:56" pos:end="3275:60"><expr pos:start="3275:56" pos:end="3275:60"><name pos:start="3275:56" pos:end="3275:60">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3276:17" pos:end="3276:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="3278:13" pos:end="3278:18">break;</break>
        </block_content>}</block>

        <default pos:start="3281:9" pos:end="3281:16">default:</default> <block pos:start="3281:18" pos:end="3283:9">{<block_content pos:start="3282:13" pos:end="3282:57">
            <expr_stmt pos:start="3282:13" pos:end="3282:57"><expr pos:start="3282:13" pos:end="3282:56"><call pos:start="3282:13" pos:end="3282:56"><name pos:start="3282:13" pos:end="3282:32">throwSocketException</name><argument_list pos:start="3282:33" pos:end="3282:56">(<argument pos:start="3282:34" pos:end="3282:36"><expr pos:start="3282:34" pos:end="3282:36"><name pos:start="3282:34" pos:end="3282:36">env</name></expr></argument>, <argument pos:start="3282:39" pos:end="3282:55"><expr pos:start="3282:39" pos:end="3282:55"><name pos:start="3282:39" pos:end="3282:55">SOCKERR_OPTUNSUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></switch>
</block_content>}</block></function></extern>

<extern pos:start="3287:1" pos:end="3292:1">extern <literal type="string" pos:start="3287:8" pos:end="3287:10">"C"</literal> <function pos:start="3287:12" pos:end="3292:1"><type pos:start="3287:12" pos:end="3287:15"><name pos:start="3287:12" pos:end="3287:15">jint</name></type> <name pos:start="3287:17" pos:end="3287:77">Java_org_sipdroid_net_impl_OSNetworkSystem_getSocketFlagsImpl</name><parameter_list pos:start="3287:78" pos:end="3287:104">(<parameter pos:start="3287:79" pos:end="3287:89"><decl pos:start="3287:79" pos:end="3287:89"><type pos:start="3287:79" pos:end="3287:89"><name pos:start="3287:79" pos:end="3287:84">JNIEnv</name><modifier pos:start="3287:85" pos:end="3287:85">*</modifier></type> <name pos:start="3287:87" pos:end="3287:89">env</name></decl></parameter>, <parameter pos:start="3287:92" pos:end="3287:103"><decl pos:start="3287:92" pos:end="3287:103"><type pos:start="3287:92" pos:end="3287:103"><name pos:start="3287:92" pos:end="3287:97">jclass</name></type> <name pos:start="3287:99" pos:end="3287:103">clazz</name></decl></parameter>)</parameter_list> <block pos:start="3287:106" pos:end="3292:1">{<block_content pos:start="3291:5" pos:end="3291:13">
    <comment type="line" pos:start="3288:5" pos:end="3288:40">// LOGD("ENTER getSocketFlagsImpl");</comment>

    <comment type="line" pos:start="3290:5" pos:end="3290:33">// Not implemented by harmony</comment>
    <return pos:start="3291:5" pos:end="3291:13">return <expr pos:start="3291:12" pos:end="3291:12"><literal type="number" pos:start="3291:12" pos:end="3291:12">0</literal></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="3294:1" pos:end="3310:1">extern <literal type="string" pos:start="3294:8" pos:end="3294:10">"C"</literal> <function pos:start="3294:12" pos:end="3310:1"><type pos:start="3294:12" pos:end="3294:15"><name pos:start="3294:12" pos:end="3294:15">void</name></type> <name pos:start="3294:17" pos:end="3294:74">Java_org_sipdroid_net_impl_OSNetworkSystem_socketCloseImpl</name><parameter_list pos:start="3294:75" pos:end="3295:31">(<parameter pos:start="3294:76" pos:end="3294:86"><decl pos:start="3294:76" pos:end="3294:86"><type pos:start="3294:76" pos:end="3294:86"><name pos:start="3294:76" pos:end="3294:81">JNIEnv</name><modifier pos:start="3294:82" pos:end="3294:82">*</modifier></type> <name pos:start="3294:84" pos:end="3294:86">env</name></decl></parameter>, <parameter pos:start="3294:89" pos:end="3294:100"><decl pos:start="3294:89" pos:end="3294:100"><type pos:start="3294:89" pos:end="3294:100"><name pos:start="3294:89" pos:end="3294:94">jclass</name></type> <name pos:start="3294:96" pos:end="3294:100">clazz</name></decl></parameter>,
        <parameter pos:start="3295:9" pos:end="3295:30"><decl pos:start="3295:9" pos:end="3295:30"><type pos:start="3295:9" pos:end="3295:30"><name pos:start="3295:9" pos:end="3295:15">jobject</name></type> <name pos:start="3295:17" pos:end="3295:30">fileDescriptor</name></decl></parameter>)</parameter_list> <block pos:start="3295:33" pos:end="3310:1">{<block_content pos:start="3298:5" pos:end="3309:18">
    <comment type="line" pos:start="3296:5" pos:end="3296:37">// LOGD("ENTER socketCloseImpl");</comment>

    <decl_stmt pos:start="3298:5" pos:end="3298:65"><decl pos:start="3298:5" pos:end="3298:64"><type pos:start="3298:5" pos:end="3298:7"><name pos:start="3298:5" pos:end="3298:7">int</name></type> <name pos:start="3298:9" pos:end="3298:14">handle</name> <init pos:start="3298:16" pos:end="3298:64">= <expr pos:start="3298:18" pos:end="3298:64"><call pos:start="3298:18" pos:end="3298:64"><name pos:start="3298:18" pos:end="3298:43">jniGetFDFromFileDescriptor</name><argument_list pos:start="3298:44" pos:end="3298:64">(<argument pos:start="3298:45" pos:end="3298:47"><expr pos:start="3298:45" pos:end="3298:47"><name pos:start="3298:45" pos:end="3298:47">env</name></expr></argument>, <argument pos:start="3298:50" pos:end="3298:63"><expr pos:start="3298:50" pos:end="3298:63"><name pos:start="3298:50" pos:end="3298:63">fileDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="3300:5" pos:end="3303:5"><if pos:start="3300:5" pos:end="3303:5">if <condition pos:start="3300:8" pos:end="3300:36">(<expr pos:start="3300:9" pos:end="3300:35"><name pos:start="3300:9" pos:end="3300:14">handle</name> <operator pos:start="3300:16" pos:end="3300:17">==</operator> <literal type="number" pos:start="3300:19" pos:end="3300:19">0</literal> <operator pos:start="3300:21" pos:end="3300:22">||</operator> <name pos:start="3300:24" pos:end="3300:29">handle</name> <operator pos:start="3300:31" pos:end="3300:32">==</operator> <operator pos:start="3300:34" pos:end="3300:34">-</operator><literal type="number" pos:start="3300:35" pos:end="3300:35">1</literal></expr>)</condition> <block pos:start="3300:38" pos:end="3303:5">{<block_content pos:start="3301:9" pos:end="3302:15">
        <expr_stmt pos:start="3301:9" pos:end="3301:53"><expr pos:start="3301:9" pos:end="3301:52"><call pos:start="3301:9" pos:end="3301:52"><name pos:start="3301:9" pos:end="3301:28">throwSocketException</name><argument_list pos:start="3301:29" pos:end="3301:52">(<argument pos:start="3301:30" pos:end="3301:32"><expr pos:start="3301:30" pos:end="3301:32"><name pos:start="3301:30" pos:end="3301:32">env</name></expr></argument>, <argument pos:start="3301:35" pos:end="3301:51"><expr pos:start="3301:35" pos:end="3301:51"><name pos:start="3301:35" pos:end="3301:51">SOCKERR_BADSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3302:9" pos:end="3302:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="3305:5" pos:end="3305:49"><expr pos:start="3305:5" pos:end="3305:48"><call pos:start="3305:5" pos:end="3305:48"><name pos:start="3305:5" pos:end="3305:20">log_socket_close</name><argument_list pos:start="3305:21" pos:end="3305:48">(<argument pos:start="3305:22" pos:end="3305:27"><expr pos:start="3305:22" pos:end="3305:27"><name pos:start="3305:22" pos:end="3305:27">handle</name></expr></argument>, <argument pos:start="3305:30" pos:end="3305:47"><expr pos:start="3305:30" pos:end="3305:47"><name pos:start="3305:30" pos:end="3305:47">SOCKET_CLOSE_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3307:5" pos:end="3307:54"><expr pos:start="3307:5" pos:end="3307:53"><call pos:start="3307:5" pos:end="3307:53"><name pos:start="3307:5" pos:end="3307:28">jniSetFileDescriptorOfFD</name><argument_list pos:start="3307:29" pos:end="3307:53">(<argument pos:start="3307:30" pos:end="3307:32"><expr pos:start="3307:30" pos:end="3307:32"><name pos:start="3307:30" pos:end="3307:32">env</name></expr></argument>, <argument pos:start="3307:35" pos:end="3307:48"><expr pos:start="3307:35" pos:end="3307:48"><name pos:start="3307:35" pos:end="3307:48">fileDescriptor</name></expr></argument>, <argument pos:start="3307:51" pos:end="3307:52"><expr pos:start="3307:51" pos:end="3307:52"><operator pos:start="3307:51" pos:end="3307:51">-</operator><literal type="number" pos:start="3307:52" pos:end="3307:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3309:5" pos:end="3309:18"><expr pos:start="3309:5" pos:end="3309:17"><call pos:start="3309:5" pos:end="3309:17"><name pos:start="3309:5" pos:end="3309:9">close</name><argument_list pos:start="3309:10" pos:end="3309:17">(<argument pos:start="3309:11" pos:end="3309:16"><expr pos:start="3309:11" pos:end="3309:16"><name pos:start="3309:11" pos:end="3309:16">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></extern>

<extern pos:start="3312:1" pos:end="3336:1">extern <literal type="string" pos:start="3312:8" pos:end="3312:10">"C"</literal> <function pos:start="3312:12" pos:end="3336:1"><type pos:start="3312:12" pos:end="3312:18"><name pos:start="3312:12" pos:end="3312:18">jobject</name></type> <name pos:start="3312:20" pos:end="3312:79">Java_org_sipdroid_net_impl_OSNetworkSystem_getHostByAddrImpl</name><parameter_list pos:start="3312:80" pos:end="3313:27">(<parameter pos:start="3312:81" pos:end="3312:91"><decl pos:start="3312:81" pos:end="3312:91"><type pos:start="3312:81" pos:end="3312:91"><name pos:start="3312:81" pos:end="3312:86">JNIEnv</name><modifier pos:start="3312:87" pos:end="3312:87">*</modifier></type> <name pos:start="3312:89" pos:end="3312:91">env</name></decl></parameter>, <parameter pos:start="3312:94" pos:end="3312:105"><decl pos:start="3312:94" pos:end="3312:105"><type pos:start="3312:94" pos:end="3312:105"><name pos:start="3312:94" pos:end="3312:99">jclass</name></type> <name pos:start="3312:101" pos:end="3312:105">clazz</name></decl></parameter>,
        <parameter pos:start="3313:9" pos:end="3313:26"><decl pos:start="3313:9" pos:end="3313:26"><type pos:start="3313:9" pos:end="3313:26"><name pos:start="3313:9" pos:end="3313:18">jbyteArray</name></type> <name pos:start="3313:20" pos:end="3313:26">addrStr</name></decl></parameter>)</parameter_list> <block pos:start="3313:29" pos:end="3336:1">{<block_content pos:start="3316:5" pos:end="3335:18">
    <comment type="line" pos:start="3314:5" pos:end="3314:39">// LOGD("ENTER getHostByAddrImpl");</comment>

    <if_stmt pos:start="3316:5" pos:end="3319:5"><if pos:start="3316:5" pos:end="3319:5">if <condition pos:start="3316:8" pos:end="3316:24">(<expr pos:start="3316:9" pos:end="3316:23"><name pos:start="3316:9" pos:end="3316:15">addrStr</name> <operator pos:start="3316:17" pos:end="3316:18">==</operator> <name pos:start="3316:20" pos:end="3316:23">NULL</name></expr>)</condition> <block pos:start="3316:26" pos:end="3319:5">{<block_content pos:start="3317:9" pos:end="3318:25">
        <expr_stmt pos:start="3317:9" pos:end="3317:39"><expr pos:start="3317:9" pos:end="3317:38"><call pos:start="3317:9" pos:end="3317:38"><name pos:start="3317:9" pos:end="3317:33">throwNullPointerException</name><argument_list pos:start="3317:34" pos:end="3317:38">(<argument pos:start="3317:35" pos:end="3317:37"><expr pos:start="3317:35" pos:end="3317:37"><name pos:start="3317:35" pos:end="3317:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3318:9" pos:end="3318:25">return <expr pos:start="3318:16" pos:end="3318:24"><name pos:start="3318:16" pos:end="3318:24">JNI_FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="3321:5" pos:end="3321:63"><decl pos:start="3321:5" pos:end="3321:62"><type pos:start="3321:5" pos:end="3321:11"><name pos:start="3321:5" pos:end="3321:11">jstring</name></type> <name pos:start="3321:13" pos:end="3321:19">address</name> <init pos:start="3321:21" pos:end="3321:62">= <expr pos:start="3321:23" pos:end="3321:62"><operator pos:start="3321:23" pos:end="3321:23">(</operator><name pos:start="3321:24" pos:end="3321:30">jstring</name><operator pos:start="3321:31" pos:end="3321:31">)</operator><call pos:start="3321:32" pos:end="3321:62"><name pos:start="3321:32" pos:end="3321:48">newJavaLangString</name><argument_list pos:start="3321:49" pos:end="3321:62">(<argument pos:start="3321:50" pos:end="3321:52"><expr pos:start="3321:50" pos:end="3321:52"><name pos:start="3321:50" pos:end="3321:52">env</name></expr></argument>, <argument pos:start="3321:55" pos:end="3321:61"><expr pos:start="3321:55" pos:end="3321:61"><name pos:start="3321:55" pos:end="3321:61">addrStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3322:5" pos:end="3322:19"><decl pos:start="3322:5" pos:end="3322:18"><type pos:start="3322:5" pos:end="3322:11"><name pos:start="3322:5" pos:end="3322:11">jstring</name></type> <name pos:start="3322:13" pos:end="3322:18">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3323:5" pos:end="3323:61"><decl pos:start="3323:5" pos:end="3323:60"><type pos:start="3323:5" pos:end="3323:15"><specifier pos:start="3323:5" pos:end="3323:9">const</specifier> <name pos:start="3323:11" pos:end="3323:14">char</name><modifier pos:start="3323:15" pos:end="3323:15">*</modifier></type> <name pos:start="3323:17" pos:end="3323:20">addr</name> <init pos:start="3323:22" pos:end="3323:60">= <expr pos:start="3323:24" pos:end="3323:60"><call pos:start="3323:24" pos:end="3323:60"><name pos:start="3323:24" pos:end="3323:45"><name pos:start="3323:24" pos:end="3323:26">env</name><operator pos:start="3323:27" pos:end="3323:28">-&gt;</operator><name pos:start="3323:29" pos:end="3323:45">GetStringUTFChars</name></name><argument_list pos:start="3323:46" pos:end="3323:60">(<argument pos:start="3323:47" pos:end="3323:53"><expr pos:start="3323:47" pos:end="3323:53"><name pos:start="3323:47" pos:end="3323:53">address</name></expr></argument>, <argument pos:start="3323:56" pos:end="3323:59"><expr pos:start="3323:56" pos:end="3323:59"><name pos:start="3323:56" pos:end="3323:59">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="3325:5" pos:end="3325:69"><decl pos:start="3325:5" pos:end="3325:68"><type pos:start="3325:5" pos:end="3325:19"><name pos:start="3325:5" pos:end="3325:18"><name pos:start="3325:5" pos:end="3325:10">struct</name> <name pos:start="3325:12" pos:end="3325:18">hostent</name></name><modifier pos:start="3325:19" pos:end="3325:19">*</modifier></type> <name pos:start="3325:21" pos:end="3325:23">ent</name> <init pos:start="3325:25" pos:end="3325:68">= <expr pos:start="3325:27" pos:end="3325:68"><call pos:start="3325:27" pos:end="3325:68"><name pos:start="3325:27" pos:end="3325:39">gethostbyaddr</name><argument_list pos:start="3325:40" pos:end="3325:68">(<argument pos:start="3325:41" pos:end="3325:44"><expr pos:start="3325:41" pos:end="3325:44"><name pos:start="3325:41" pos:end="3325:44">addr</name></expr></argument>, <argument pos:start="3325:47" pos:end="3325:58"><expr pos:start="3325:47" pos:end="3325:58"><call pos:start="3325:47" pos:end="3325:58"><name pos:start="3325:47" pos:end="3325:52">strlen</name><argument_list pos:start="3325:53" pos:end="3325:58">(<argument pos:start="3325:54" pos:end="3325:57"><expr pos:start="3325:54" pos:end="3325:57"><name pos:start="3325:54" pos:end="3325:57">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3325:61" pos:end="3325:67"><expr pos:start="3325:61" pos:end="3325:67"><name pos:start="3325:61" pos:end="3325:67">AF_INET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="3327:5" pos:end="3331:5"><if pos:start="3327:5" pos:end="3329:5">if <condition pos:start="3327:8" pos:end="3327:44">(<expr pos:start="3327:9" pos:end="3327:43"><name pos:start="3327:9" pos:end="3327:11">ent</name> <operator pos:start="3327:13" pos:end="3327:14">!=</operator> <name pos:start="3327:16" pos:end="3327:19">NULL</name>  <operator pos:start="3327:22" pos:end="3327:23">&amp;&amp;</operator> <name pos:start="3327:25" pos:end="3327:35"><name pos:start="3327:25" pos:end="3327:27">ent</name><operator pos:start="3327:28" pos:end="3327:29">-&gt;</operator><name pos:start="3327:30" pos:end="3327:35">h_name</name></name> <operator pos:start="3327:37" pos:end="3327:38">!=</operator> <name pos:start="3327:40" pos:end="3327:43">NULL</name></expr>)</condition> <block pos:start="3327:46" pos:end="3329:5">{<block_content pos:start="3328:9" pos:end="3328:48">
        <expr_stmt pos:start="3328:9" pos:end="3328:48"><expr pos:start="3328:9" pos:end="3328:47"><name pos:start="3328:9" pos:end="3328:14">result</name> <operator pos:start="3328:16" pos:end="3328:16">=</operator> <call pos:start="3328:18" pos:end="3328:47"><name pos:start="3328:18" pos:end="3328:34"><name pos:start="3328:18" pos:end="3328:20">env</name><operator pos:start="3328:21" pos:end="3328:22">-&gt;</operator><name pos:start="3328:23" pos:end="3328:34">NewStringUTF</name></name><argument_list pos:start="3328:35" pos:end="3328:47">(<argument pos:start="3328:36" pos:end="3328:46"><expr pos:start="3328:36" pos:end="3328:46"><name pos:start="3328:36" pos:end="3328:46"><name pos:start="3328:36" pos:end="3328:38">ent</name><operator pos:start="3328:39" pos:end="3328:40">-&gt;</operator><name pos:start="3328:41" pos:end="3328:46">h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="3329:7" pos:end="3331:5">else <block pos:start="3329:12" pos:end="3331:5">{<block_content pos:start="3330:9" pos:end="3330:22">
        <expr_stmt pos:start="3330:9" pos:end="3330:22"><expr pos:start="3330:9" pos:end="3330:21"><name pos:start="3330:9" pos:end="3330:14">result</name> <operator pos:start="3330:16" pos:end="3330:16">=</operator> <name pos:start="3330:18" pos:end="3330:21">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="3333:5" pos:end="3333:46"><expr pos:start="3333:5" pos:end="3333:45"><call pos:start="3333:5" pos:end="3333:45"><name pos:start="3333:5" pos:end="3333:30"><name pos:start="3333:5" pos:end="3333:7">env</name><operator pos:start="3333:8" pos:end="3333:9">-&gt;</operator><name pos:start="3333:10" pos:end="3333:30">ReleaseStringUTFChars</name></name><argument_list pos:start="3333:31" pos:end="3333:45">(<argument pos:start="3333:32" pos:end="3333:38"><expr pos:start="3333:32" pos:end="3333:38"><name pos:start="3333:32" pos:end="3333:38">address</name></expr></argument>, <argument pos:start="3333:41" pos:end="3333:44"><expr pos:start="3333:41" pos:end="3333:44"><name pos:start="3333:41" pos:end="3333:44">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="3335:5" pos:end="3335:18">return <expr pos:start="3335:12" pos:end="3335:17"><name pos:start="3335:12" pos:end="3335:17">result</name></expr>;</return>
</block_content>}</block></function></extern>

<extern pos:start="3338:1" pos:end="3392:1">extern <literal type="string" pos:start="3338:8" pos:end="3338:10">"C"</literal> <function pos:start="3338:12" pos:end="3392:1"><type pos:start="3338:12" pos:end="3338:18"><name pos:start="3338:12" pos:end="3338:18">jobject</name></type> <name pos:start="3338:20" pos:end="3338:79">Java_org_sipdroid_net_impl_OSNetworkSystem_getHostByNameImpl</name><parameter_list pos:start="3338:80" pos:end="3339:54">(<parameter pos:start="3338:81" pos:end="3338:91"><decl pos:start="3338:81" pos:end="3338:91"><type pos:start="3338:81" pos:end="3338:91"><name pos:start="3338:81" pos:end="3338:86">JNIEnv</name><modifier pos:start="3338:87" pos:end="3338:87">*</modifier></type> <name pos:start="3338:89" pos:end="3338:91">env</name></decl></parameter>, <parameter pos:start="3338:94" pos:end="3338:105"><decl pos:start="3338:94" pos:end="3338:105"><type pos:start="3338:94" pos:end="3338:105"><name pos:start="3338:94" pos:end="3338:99">jclass</name></type> <name pos:start="3338:101" pos:end="3338:105">clazz</name></decl></parameter>,
        <parameter pos:start="3339:9" pos:end="3339:23"><decl pos:start="3339:9" pos:end="3339:23"><type pos:start="3339:9" pos:end="3339:23"><name pos:start="3339:9" pos:end="3339:15">jstring</name></type> <name pos:start="3339:17" pos:end="3339:23">nameStr</name></decl></parameter>, <parameter pos:start="3339:26" pos:end="3339:53"><decl pos:start="3339:26" pos:end="3339:53"><type pos:start="3339:26" pos:end="3339:53"><name pos:start="3339:26" pos:end="3339:33">jboolean</name></type> <name pos:start="3339:35" pos:end="3339:53">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <block pos:start="3339:56" pos:end="3392:1">{<block_content pos:start="3342:5" pos:end="3391:5">
    <comment type="line" pos:start="3340:5" pos:end="3340:39">// LOGD("ENTER getHostByNameImpl");</comment>

    <if_stmt pos:start="3342:5" pos:end="3345:5"><if pos:start="3342:5" pos:end="3345:5">if <condition pos:start="3342:8" pos:end="3342:24">(<expr pos:start="3342:9" pos:end="3342:23"><name pos:start="3342:9" pos:end="3342:15">nameStr</name> <operator pos:start="3342:17" pos:end="3342:18">==</operator> <name pos:start="3342:20" pos:end="3342:23">NULL</name></expr>)</condition> <block pos:start="3342:26" pos:end="3345:5">{<block_content pos:start="3343:9" pos:end="3344:20">
        <expr_stmt pos:start="3343:9" pos:end="3343:39"><expr pos:start="3343:9" pos:end="3343:38"><call pos:start="3343:9" pos:end="3343:38"><name pos:start="3343:9" pos:end="3343:33">throwNullPointerException</name><argument_list pos:start="3343:34" pos:end="3343:38">(<argument pos:start="3343:35" pos:end="3343:37"><expr pos:start="3343:35" pos:end="3343:37"><name pos:start="3343:35" pos:end="3343:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3344:9" pos:end="3344:20">return <expr pos:start="3344:16" pos:end="3344:19"><name pos:start="3344:16" pos:end="3344:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="3347:5" pos:end="3347:61"><decl pos:start="3347:5" pos:end="3347:60"><type pos:start="3347:5" pos:end="3347:15"><specifier pos:start="3347:5" pos:end="3347:9">const</specifier> <name pos:start="3347:11" pos:end="3347:14">char</name><modifier pos:start="3347:15" pos:end="3347:15">*</modifier></type> <name pos:start="3347:17" pos:end="3347:20">name</name> <init pos:start="3347:22" pos:end="3347:60">= <expr pos:start="3347:24" pos:end="3347:60"><call pos:start="3347:24" pos:end="3347:60"><name pos:start="3347:24" pos:end="3347:45"><name pos:start="3347:24" pos:end="3347:26">env</name><operator pos:start="3347:27" pos:end="3347:28">-&gt;</operator><name pos:start="3347:29" pos:end="3347:45">GetStringUTFChars</name></name><argument_list pos:start="3347:46" pos:end="3347:60">(<argument pos:start="3347:47" pos:end="3347:53"><expr pos:start="3347:47" pos:end="3347:53"><name pos:start="3347:47" pos:end="3347:53">nameStr</name></expr></argument>, <argument pos:start="3347:56" pos:end="3347:59"><expr pos:start="3347:56" pos:end="3347:59"><name pos:start="3347:56" pos:end="3347:59">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="3349:5" pos:end="3391:5"><if pos:start="3349:5" pos:end="3375:5">if <condition pos:start="3349:8" pos:end="3349:25">(<expr pos:start="3349:9" pos:end="3349:24"><name pos:start="3349:9" pos:end="3349:24">useAdbNetworking</name></expr>)</condition> <block pos:start="3349:27" pos:end="3375:5">{<block_content pos:start="3351:9" pos:end="3374:9">

        <union pos:start="3351:9" pos:end="3354:18">union <block pos:start="3351:15" pos:end="3354:9">{<public type="default" pos:start="3352:13" pos:end="3353:23">
            <decl_stmt pos:start="3352:13" pos:end="3352:29"><decl pos:start="3352:13" pos:end="3352:28"><type pos:start="3352:13" pos:end="3352:26"><name pos:start="3352:13" pos:end="3352:26"><name pos:start="3352:13" pos:end="3352:18">struct</name> <name pos:start="3352:20" pos:end="3352:26">in_addr</name></name></type> <name pos:start="3352:28" pos:end="3352:28">a</name></decl>;</decl_stmt>
            <decl_stmt pos:start="3353:13" pos:end="3353:23"><decl pos:start="3353:13" pos:end="3353:22"><type pos:start="3353:13" pos:end="3353:17"><name pos:start="3353:13" pos:end="3353:17">jbyte</name></type> <name pos:start="3353:19" pos:end="3353:22"><name pos:start="3353:19" pos:end="3353:19">j</name><index pos:start="3353:20" pos:end="3353:22">[<expr pos:start="3353:21" pos:end="3353:21"><literal type="number" pos:start="3353:21" pos:end="3353:21">4</literal></expr>]</index></name></decl>;</decl_stmt>
        </public>}</block> <decl pos:start="3354:11" pos:end="3354:17"><name pos:start="3354:11" pos:end="3354:17">outaddr</name></decl>;</union>

        <comment type="line" pos:start="3356:9" pos:end="3356:61">// LOGD("ADB networking: +gethostbyname '%s'", name);</comment>
        <decl_stmt pos:start="3357:9" pos:end="3357:16"><decl pos:start="3357:9" pos:end="3357:15"><type pos:start="3357:9" pos:end="3357:11"><name pos:start="3357:9" pos:end="3357:11">int</name></type> <name pos:start="3357:13" pos:end="3357:15">err</name></decl>;</decl_stmt>
        <expr_stmt pos:start="3358:9" pos:end="3358:63"><expr pos:start="3358:9" pos:end="3358:62"><name pos:start="3358:9" pos:end="3358:11">err</name> <operator pos:start="3358:13" pos:end="3358:13">=</operator> <call pos:start="3358:15" pos:end="3358:62"><name pos:start="3358:15" pos:end="3358:42">adb_networking_gethostbyname</name><argument_list pos:start="3358:43" pos:end="3358:62">(<argument pos:start="3358:44" pos:end="3358:47"><expr pos:start="3358:44" pos:end="3358:47"><name pos:start="3358:44" pos:end="3358:47">name</name></expr></argument>, <argument pos:start="3358:50" pos:end="3358:61"><expr pos:start="3358:50" pos:end="3358:61"><operator pos:start="3358:50" pos:end="3358:50">&amp;</operator><operator pos:start="3358:51" pos:end="3358:51">(</operator><name pos:start="3358:52" pos:end="3358:60"><name pos:start="3358:52" pos:end="3358:58">outaddr</name><operator pos:start="3358:59" pos:end="3358:59">.</operator><name pos:start="3358:60" pos:end="3358:60">a</name></name><operator pos:start="3358:61" pos:end="3358:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3360:9" pos:end="3367:0"><expr pos:start="3360:9" pos:end="3360:49"><call pos:start="3360:9" pos:end="3360:49"><name pos:start="3360:9" pos:end="3360:34"><name pos:start="3360:9" pos:end="3360:11">env</name><operator pos:start="3360:12" pos:end="3360:13">-&gt;</operator><name pos:start="3360:14" pos:end="3360:34">ReleaseStringUTFChars</name></name><argument_list pos:start="3360:35" pos:end="3360:49">(<argument pos:start="3360:36" pos:end="3360:42"><expr pos:start="3360:36" pos:end="3360:42"><name pos:start="3360:36" pos:end="3360:42">nameStr</name></expr></argument>, <argument pos:start="3360:45" pos:end="3360:48"><expr pos:start="3360:45" pos:end="3360:48"><name pos:start="3360:45" pos:end="3360:48">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="3361:1" pos:end="3361:5">#<cpp:directive pos:start="3361:2" pos:end="3361:3">if</cpp:directive> <expr pos:start="3361:5" pos:end="3361:5"><literal type="number" pos:start="3361:5" pos:end="3361:5">0</literal></expr></cpp:if>
        LOGD("ADB networking: -gethostbyname err %d addr 0x%08x %u.%u.%u.%u",
                err, (unsigned int)outaddr.a.s_addr,
                outaddr.j[0],outaddr.j[1],
                outaddr.j[2],outaddr.j[3]);
<cpp:endif pos:start="3366:1" pos:end="3366:6">#<cpp:directive pos:start="3366:2" pos:end="3366:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="3368:9" pos:end="3374:9"><if pos:start="3368:9" pos:end="3370:9">if <condition pos:start="3368:12" pos:end="3368:20">(<expr pos:start="3368:13" pos:end="3368:19"><name pos:start="3368:13" pos:end="3368:15">err</name> <operator pos:start="3368:17" pos:end="3368:17">&lt;</operator> <literal type="number" pos:start="3368:19" pos:end="3368:19">0</literal></expr>)</condition> <block pos:start="3368:22" pos:end="3370:9">{<block_content pos:start="3369:13" pos:end="3369:24">
            <return pos:start="3369:13" pos:end="3369:24">return <expr pos:start="3369:20" pos:end="3369:23"><name pos:start="3369:20" pos:end="3369:23">NULL</name></expr>;</return>
        </block_content>}</block></if> <else pos:start="3370:11" pos:end="3374:9">else <block pos:start="3370:16" pos:end="3374:9">{<block_content pos:start="3371:13" pos:end="3373:24">
            <decl_stmt pos:start="3371:13" pos:end="3371:51"><decl pos:start="3371:13" pos:end="3371:50"><type pos:start="3371:13" pos:end="3371:22"><name pos:start="3371:13" pos:end="3371:22">jbyteArray</name></type> <name pos:start="3371:24" pos:end="3371:27">addr</name> <init pos:start="3371:29" pos:end="3371:50">= <expr pos:start="3371:31" pos:end="3371:50"><call pos:start="3371:31" pos:end="3371:50"><name pos:start="3371:31" pos:end="3371:47"><name pos:start="3371:31" pos:end="3371:33">env</name><operator pos:start="3371:34" pos:end="3371:35">-&gt;</operator><name pos:start="3371:36" pos:end="3371:47">NewByteArray</name></name><argument_list pos:start="3371:48" pos:end="3371:50">(<argument pos:start="3371:49" pos:end="3371:49"><expr pos:start="3371:49" pos:end="3371:49"><literal type="number" pos:start="3371:49" pos:end="3371:49">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3372:13" pos:end="3372:59"><expr pos:start="3372:13" pos:end="3372:58"><call pos:start="3372:13" pos:end="3372:58"><name pos:start="3372:13" pos:end="3372:35"><name pos:start="3372:13" pos:end="3372:15">env</name><operator pos:start="3372:16" pos:end="3372:17">-&gt;</operator><name pos:start="3372:18" pos:end="3372:35">SetByteArrayRegion</name></name><argument_list pos:start="3372:36" pos:end="3372:58">(<argument pos:start="3372:37" pos:end="3372:40"><expr pos:start="3372:37" pos:end="3372:40"><name pos:start="3372:37" pos:end="3372:40">addr</name></expr></argument>, <argument pos:start="3372:43" pos:end="3372:43"><expr pos:start="3372:43" pos:end="3372:43"><literal type="number" pos:start="3372:43" pos:end="3372:43">0</literal></expr></argument>, <argument pos:start="3372:46" pos:end="3372:46"><expr pos:start="3372:46" pos:end="3372:46"><literal type="number" pos:start="3372:46" pos:end="3372:46">4</literal></expr></argument>, <argument pos:start="3372:49" pos:end="3372:57"><expr pos:start="3372:49" pos:end="3372:57"><name pos:start="3372:49" pos:end="3372:57"><name pos:start="3372:49" pos:end="3372:55">outaddr</name><operator pos:start="3372:56" pos:end="3372:56">.</operator><name pos:start="3372:57" pos:end="3372:57">j</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3373:13" pos:end="3373:24">return <expr pos:start="3373:20" pos:end="3373:23"><name pos:start="3373:20" pos:end="3373:23">addr</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="3375:7" pos:end="3391:5">else <block pos:start="3375:12" pos:end="3391:5">{<block_content pos:start="3378:9" pos:end="3390:9">

        <comment type="line" pos:start="3377:9" pos:end="3377:42">// normal case...no adb networking</comment>
        <decl_stmt pos:start="3378:9" pos:end="3378:50"><decl pos:start="3378:9" pos:end="3378:49"><type pos:start="3378:9" pos:end="3378:23"><name pos:start="3378:9" pos:end="3378:22"><name pos:start="3378:9" pos:end="3378:14">struct</name> <name pos:start="3378:16" pos:end="3378:22">hostent</name></name><modifier pos:start="3378:23" pos:end="3378:23">*</modifier></type> <name pos:start="3378:25" pos:end="3378:27">ent</name> <init pos:start="3378:29" pos:end="3378:49">= <expr pos:start="3378:31" pos:end="3378:49"><call pos:start="3378:31" pos:end="3378:49"><name pos:start="3378:31" pos:end="3378:43">gethostbyname</name><argument_list pos:start="3378:44" pos:end="3378:49">(<argument pos:start="3378:45" pos:end="3378:48"><expr pos:start="3378:45" pos:end="3378:48"><name pos:start="3378:45" pos:end="3378:48">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="3380:9" pos:end="3380:50"><expr pos:start="3380:9" pos:end="3380:49"><call pos:start="3380:9" pos:end="3380:49"><name pos:start="3380:9" pos:end="3380:34"><name pos:start="3380:9" pos:end="3380:11">env</name><operator pos:start="3380:12" pos:end="3380:13">-&gt;</operator><name pos:start="3380:14" pos:end="3380:34">ReleaseStringUTFChars</name></name><argument_list pos:start="3380:35" pos:end="3380:49">(<argument pos:start="3380:36" pos:end="3380:42"><expr pos:start="3380:36" pos:end="3380:42"><name pos:start="3380:36" pos:end="3380:42">nameStr</name></expr></argument>, <argument pos:start="3380:45" pos:end="3380:48"><expr pos:start="3380:45" pos:end="3380:48"><name pos:start="3380:45" pos:end="3380:48">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3382:9" pos:end="3390:9"><if pos:start="3382:9" pos:end="3388:9">if <condition pos:start="3382:12" pos:end="3382:46">(<expr pos:start="3382:13" pos:end="3382:45"><name pos:start="3382:13" pos:end="3382:15">ent</name> <operator pos:start="3382:17" pos:end="3382:18">!=</operator> <name pos:start="3382:20" pos:end="3382:23">NULL</name>  <operator pos:start="3382:26" pos:end="3382:27">&amp;&amp;</operator> <name pos:start="3382:29" pos:end="3382:41"><name pos:start="3382:29" pos:end="3382:31">ent</name><operator pos:start="3382:32" pos:end="3382:33">-&gt;</operator><name pos:start="3382:34" pos:end="3382:41">h_length</name></name> <operator pos:start="3382:43" pos:end="3382:43">&gt;</operator> <literal type="number" pos:start="3382:45" pos:end="3382:45">0</literal></expr>)</condition> <block pos:start="3382:48" pos:end="3388:9">{<block_content pos:start="3383:13" pos:end="3387:24">
            <decl_stmt pos:start="3383:13" pos:end="3383:51"><decl pos:start="3383:13" pos:end="3383:50"><type pos:start="3383:13" pos:end="3383:22"><name pos:start="3383:13" pos:end="3383:22">jbyteArray</name></type> <name pos:start="3383:24" pos:end="3383:27">addr</name> <init pos:start="3383:29" pos:end="3383:50">= <expr pos:start="3383:31" pos:end="3383:50"><call pos:start="3383:31" pos:end="3383:50"><name pos:start="3383:31" pos:end="3383:47"><name pos:start="3383:31" pos:end="3383:33">env</name><operator pos:start="3383:34" pos:end="3383:35">-&gt;</operator><name pos:start="3383:36" pos:end="3383:47">NewByteArray</name></name><argument_list pos:start="3383:48" pos:end="3383:50">(<argument pos:start="3383:49" pos:end="3383:49"><expr pos:start="3383:49" pos:end="3383:49"><literal type="number" pos:start="3383:49" pos:end="3383:49">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3384:13" pos:end="3384:23"><decl pos:start="3384:13" pos:end="3384:22"><type pos:start="3384:13" pos:end="3384:17"><name pos:start="3384:13" pos:end="3384:17">jbyte</name></type> <name pos:start="3384:19" pos:end="3384:22"><name pos:start="3384:19" pos:end="3384:19">v</name><index pos:start="3384:20" pos:end="3384:22">[<expr pos:start="3384:21" pos:end="3384:21"><literal type="number" pos:start="3384:21" pos:end="3384:21">4</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt pos:start="3385:13" pos:end="3385:38"><expr pos:start="3385:13" pos:end="3385:37"><call pos:start="3385:13" pos:end="3385:37"><name pos:start="3385:13" pos:end="3385:18">memcpy</name><argument_list pos:start="3385:19" pos:end="3385:37">(<argument pos:start="3385:20" pos:end="3385:20"><expr pos:start="3385:20" pos:end="3385:20"><name pos:start="3385:20" pos:end="3385:20">v</name></expr></argument>, <argument pos:start="3385:23" pos:end="3385:33"><expr pos:start="3385:23" pos:end="3385:33"><name pos:start="3385:23" pos:end="3385:33"><name pos:start="3385:23" pos:end="3385:25">ent</name><operator pos:start="3385:26" pos:end="3385:27">-&gt;</operator><name pos:start="3385:28" pos:end="3385:33">h_addr</name></name></expr></argument>, <argument pos:start="3385:36" pos:end="3385:36"><expr pos:start="3385:36" pos:end="3385:36"><literal type="number" pos:start="3385:36" pos:end="3385:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3386:13" pos:end="3386:51"><expr pos:start="3386:13" pos:end="3386:50"><call pos:start="3386:13" pos:end="3386:50"><name pos:start="3386:13" pos:end="3386:35"><name pos:start="3386:13" pos:end="3386:15">env</name><operator pos:start="3386:16" pos:end="3386:17">-&gt;</operator><name pos:start="3386:18" pos:end="3386:35">SetByteArrayRegion</name></name><argument_list pos:start="3386:36" pos:end="3386:50">(<argument pos:start="3386:37" pos:end="3386:40"><expr pos:start="3386:37" pos:end="3386:40"><name pos:start="3386:37" pos:end="3386:40">addr</name></expr></argument>, <argument pos:start="3386:43" pos:end="3386:43"><expr pos:start="3386:43" pos:end="3386:43"><literal type="number" pos:start="3386:43" pos:end="3386:43">0</literal></expr></argument>, <argument pos:start="3386:46" pos:end="3386:46"><expr pos:start="3386:46" pos:end="3386:46"><literal type="number" pos:start="3386:46" pos:end="3386:46">4</literal></expr></argument>, <argument pos:start="3386:49" pos:end="3386:49"><expr pos:start="3386:49" pos:end="3386:49"><name pos:start="3386:49" pos:end="3386:49">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3387:13" pos:end="3387:24">return <expr pos:start="3387:20" pos:end="3387:23"><name pos:start="3387:20" pos:end="3387:23">addr</name></expr>;</return>
        </block_content>}</block></if> <else pos:start="3388:11" pos:end="3390:9">else <block pos:start="3388:16" pos:end="3390:9">{<block_content pos:start="3389:13" pos:end="3389:24">
            <return pos:start="3389:13" pos:end="3389:24">return <expr pos:start="3389:20" pos:end="3389:23"><name pos:start="3389:20" pos:end="3389:23">NULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></extern>

<extern pos:start="3394:1" pos:end="3399:1">extern <literal type="string" pos:start="3394:8" pos:end="3394:10">"C"</literal> <function pos:start="3394:12" pos:end="3399:1"><type pos:start="3394:12" pos:end="3394:15"><name pos:start="3394:12" pos:end="3394:15">void</name></type> <name pos:start="3394:17" pos:end="3394:77">Java_org_sipdroid_net_impl_OSNetworkSystem_setInetAddressImpl</name><parameter_list pos:start="3394:78" pos:end="3395:43">(<parameter pos:start="3394:79" pos:end="3394:89"><decl pos:start="3394:79" pos:end="3394:89"><type pos:start="3394:79" pos:end="3394:89"><name pos:start="3394:79" pos:end="3394:84">JNIEnv</name><modifier pos:start="3394:85" pos:end="3394:85">*</modifier></type> <name pos:start="3394:87" pos:end="3394:89">env</name></decl></parameter>, <parameter pos:start="3394:92" pos:end="3394:102"><decl pos:start="3394:92" pos:end="3394:102"><type pos:start="3394:92" pos:end="3394:102"><name pos:start="3394:92" pos:end="3394:98">jobject</name></type> <name pos:start="3394:100" pos:end="3394:102">obj</name></decl></parameter>,
        <parameter pos:start="3395:9" pos:end="3395:22"><decl pos:start="3395:9" pos:end="3395:22"><type pos:start="3395:9" pos:end="3395:22"><name pos:start="3395:9" pos:end="3395:15">jobject</name></type> <name pos:start="3395:17" pos:end="3395:22">sender</name></decl></parameter>, <parameter pos:start="3395:25" pos:end="3395:42"><decl pos:start="3395:25" pos:end="3395:42"><type pos:start="3395:25" pos:end="3395:42"><name pos:start="3395:25" pos:end="3395:34">jbyteArray</name></type> <name pos:start="3395:36" pos:end="3395:42">address</name></decl></parameter>)</parameter_list> <block pos:start="3395:45" pos:end="3399:1">{<block_content pos:start="3398:5" pos:end="3398:72">
    <comment type="line" pos:start="3396:5" pos:end="3396:40">// LOGD("ENTER setInetAddressImpl");</comment>

    <expr_stmt pos:start="3398:5" pos:end="3398:72"><expr pos:start="3398:5" pos:end="3398:71"><call pos:start="3398:5" pos:end="3398:71"><name pos:start="3398:5" pos:end="3398:23"><name pos:start="3398:5" pos:end="3398:7">env</name><operator pos:start="3398:8" pos:end="3398:9">-&gt;</operator><name pos:start="3398:10" pos:end="3398:23">SetObjectField</name></name><argument_list pos:start="3398:24" pos:end="3398:71">(<argument pos:start="3398:25" pos:end="3398:30"><expr pos:start="3398:25" pos:end="3398:30"><name pos:start="3398:25" pos:end="3398:30">sender</name></expr></argument>, <argument pos:start="3398:33" pos:end="3398:61"><expr pos:start="3398:33" pos:end="3398:61"><name pos:start="3398:33" pos:end="3398:61"><name pos:start="3398:33" pos:end="3398:45">gCachedFields</name><operator pos:start="3398:46" pos:end="3398:46">.</operator><name pos:start="3398:47" pos:end="3398:61">iaddr_ipaddress</name></name></expr></argument>, <argument pos:start="3398:64" pos:end="3398:70"><expr pos:start="3398:64" pos:end="3398:70"><name pos:start="3398:64" pos:end="3398:70">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></extern>

<comment type="block" pos:start="3401:1" pos:end="3670:2">/*
extern "C" jobject Java_org_sipdroid_net_impl_OSNetworkSystem_inheritedChannelImpl(JNIEnv* env, jobject obj) {
    // LOGD("ENTER inheritedChannelImpl");

    int socket = 0;
    int opt;
    socklen_t length = sizeof(opt);
    int socket_type;
    struct sockaddr_in local_addr;
    struct sockaddr_in remote_addr;
    jclass channel_class, socketaddr_class, serverSocket_class, socketImpl_class;
    jobject channel_object = NULL, socketaddr_object, serverSocket_object;
    jobject fd_object, addr_object, localAddr_object, socketImpl_object;
    jfieldID port_field, socketaddr_field, bound_field, fd_field;
    jfieldID serverSocket_field, socketImpl_field, addr_field, localAddr_field;
    jmethodID channel_new;
    jbyteArray addr_array;
    struct sockaddr_in *sock;
    jbyte * address;
    jbyte * localAddr;
    jboolean jtrue = JNI_TRUE;

    if (0 != getsockopt(socket, SOL_SOCKET, SO_TYPE, &amp;opt, &amp;length)) {
        return NULL;
    }
    if (SOCK_STREAM !=opt &amp;&amp; SOCK_DGRAM !=opt) {
        return NULL;
    }
    socket_type = opt;

    length  = sizeof(struct sockaddr);
    if (0 != getsockname(socket, (struct sockaddr *)&amp;local_addr, &amp;length)) {
        return NULL;
    } else {
        if (AF_INET != local_addr.sin_family || length != sizeof(struct sockaddr)) {
            return NULL;
        }
        localAddr = (jbyte*) malloc(sizeof(jbyte)*4);
        if (NULL == localAddr) {
            return NULL;
        }
        memcpy (localAddr, &amp;(local_addr.sin_addr.s_addr), 4);
    }
    if (0 != getpeername(socket, (struct sockaddr *)&amp;remote_addr, &amp;length)) {
        remote_addr.sin_port = 0;
        remote_addr.sin_addr.s_addr = 0;
        address = (jbyte*) malloc(sizeof(jbyte)*4);
        bzero(address, sizeof(jbyte)*4);
    } else {
        if (AF_INET != remote_addr.sin_family
                || length != sizeof(struct sockaddr)) {
            return NULL;
        }
        address = (jbyte*) malloc(sizeof(jbyte)*4);
        memcpy (address, &amp;(remote_addr.sin_addr.s_addr), 4);
    }

    // analysis end, begin pack to java
    if (SOCK_STREAM == opt) {
        if (remote_addr.sin_port!=0) {
            //socket
            channel_class = env-&gt;FindClass(
                    "org/apache/harmony/nio/internal/SocketChannelImpl");
            if (NULL == channel_class) {
                goto clean;
            }

            channel_new = env-&gt;GetMethodID(channel_class, "&lt;init&gt;", "()V");
            if (NULL == channel_new) {
                goto clean;
            }
            channel_object = env-&gt;NewObject(channel_class, channel_new);
            if (NULL == channel_object) {
                goto clean;
            }
            // new and set FileDescript

            fd_field = env-&gt;GetFieldID(channel_class, "fd",
                    "java/io/FielDescriptor");
            fd_object = env-&gt;GetObjectField(channel_object, fd_field);
            if (NULL == fd_object) {
                goto clean;
            }

            jniSetFileDescriptorOfFD(env, fd_object, socket);

            // local port
            port_field = env-&gt;GetFieldID(channel_class, "localPort", "I");
            env-&gt;SetIntField(channel_object, port_field,
                    ntohs(local_addr.sin_port));

            // new and set remote addr
            addr_object = env-&gt;NewObject(gCachedFields.iaddr_class,
                    gCachedFields.iaddr_class_init);
            if (NULL == addr_object) {
                goto clean;
            }
            socketaddr_class = env-&gt;FindClass("java/net/InetSocketAddress");
            socketaddr_field = env-&gt;GetFieldID(channel_class, "connectAddress",
                    "Ljava/net/InetSocketAddress;");
            socketaddr_object = env-&gt;GetObjectField(channel_object,
                    socketaddr_field);
            if (NULL == socketaddr_object) {
                goto clean;
            }
            addr_field = env-&gt;GetFieldID(socketaddr_class, "addr",
                    "Ljava/net/InetAddress;");
            env-&gt;SetObjectField(socketaddr_object, addr_field, addr_object);
            addr_array = env-&gt;NewByteArray((jsize)4);
            env-&gt;SetByteArrayRegion(addr_array, (jsize)0, (jsize)4, address);
            env-&gt;SetObjectField(addr_object, gCachedFields.iaddr_ipaddress,
                     addr_array);

            // localAddr
            socketaddr_class = env-&gt;FindClass("java/net/InetSocketAddress");
            socketaddr_field = env-&gt;GetFieldID(channel_class, "connectAddress",
                     "Ljava/net/InetSocketAddress;");
            socketaddr_object = env-&gt;GetObjectField(channel_object,
                     socketaddr_field);

            localAddr_field = env-&gt;GetFieldID(channel_class, "localAddress",
                     "Ljava/net/InetAddress;");
            localAddr_object = env-&gt;NewObject(gCachedFields.iaddr_class,
                     gCachedFields.iaddr_class_init);
            jfieldID socketaddr_field = env-&gt;GetFieldID(channel_class,
                     "connectAddress", "Ljava/net/InetSocketAddress;");
            jobject socketaddr_object = env-&gt;GetObjectField(channel_object,
                     socketaddr_field);
            env-&gt;SetObjectField(socketaddr_object, localAddr_field,
                     localAddr_object);
            if (NULL == localAddr_object) {
                goto clean;
            }
            addr_array = env-&gt;NewByteArray((jsize)4);
            env-&gt;SetByteArrayRegion(addr_array, (jsize)0, (jsize)4, localAddr);
            env-&gt;SetObjectField(localAddr_object, gCachedFields.iaddr_ipaddress,
                    addr_array);


            // set port
            port_field = env-&gt;GetFieldID(socketaddr_class, "port", "I");
            env-&gt;SetIntField(socketaddr_object, port_field,
                    ntohs(remote_addr.sin_port));

            // set bound
            if (0 != local_addr.sin_port) {
                bound_field = env-&gt;GetFieldID(channel_class, "isBound", "Z");
                env-&gt;SetBooleanField(channel_object, bound_field, jtrue);
            }

        } else {
            //serverSocket
            channel_class = env-&gt;FindClass(
                    "org/apache/harmony/nio/internal/ServerSocketChannelImpl");
            if (NULL == channel_class) {
                goto clean;
            }

            channel_new = env-&gt;GetMethodID(channel_class, "&lt;init&gt;", "()V");
            if (NULL == channel_new) {
                goto clean;
            }
            channel_object = env-&gt;NewObject(channel_class, channel_new);
            if (NULL == channel_object) {
                goto clean;
            }

            serverSocket_field = env-&gt;GetFieldID(channel_class, "socket",
                    "Ljava/net/ServerSocket;");
            serverSocket_class = env-&gt;FindClass("Ljava/net/ServerSocket;");
            serverSocket_object = env-&gt;GetObjectField(channel_object,
                    serverSocket_field);
            // set bound
            if (0 != local_addr.sin_port) {
                bound_field = env-&gt;GetFieldID(channel_class, "isBound", "Z");
                env-&gt;SetBooleanField(channel_object, bound_field, jtrue);
                bound_field = env-&gt;GetFieldID(serverSocket_class, "isBound", "Z");
                env-&gt;SetBooleanField(serverSocket_object, bound_field, jtrue);
            }
            // localAddr
            socketImpl_class = env-&gt;FindClass("java/net/SocketImpl");
            socketImpl_field = env-&gt;GetFieldID(channel_class, "impl",
                    "Ljava/net/SocketImpl;");
            socketImpl_object =  env-&gt;GetObjectField(channel_object,
                    socketImpl_field);
            if (NULL == socketImpl_object) {
                 goto clean;
            }

            localAddr_field = env-&gt;GetFieldID(channel_class, "localAddress",
                    "Ljava/net/InetAddress;");
            localAddr_object = env-&gt;NewObject(gCachedFields.iaddr_class,
                    gCachedFields.iaddr_class_init);
            if (NULL == localAddr_object) {
                 goto clean;
            }
            env-&gt;SetObjectField(socketImpl_object, localAddr_field,
                    localAddr_object);
            addr_array = env-&gt;NewByteArray((jsize)4);
            env-&gt;SetByteArrayRegion(addr_array, (jsize)0, (jsize)4, localAddr);
            env-&gt;SetObjectField(localAddr_object,
                    gCachedFields.iaddr_ipaddress, addr_array);

            // set port
            port_field = env-&gt;GetFieldID(socketImpl_class, "localport", "I");
            env-&gt;SetIntField(socketImpl_object, port_field,
                    ntohs(local_addr.sin_port));
        }
    } else {
        //Datagram Socket
        // new DatagramChannel
        channel_class = env-&gt;FindClass(
                "org/apache/harmony/nio/internal/DatagramChannelImpl");
        if (NULL == channel_class) {
            goto clean;
        }

        channel_new = env-&gt;GetMethodID(channel_class, "&lt;init&gt;", "()V");
        if (NULL == channel_new) {
            goto clean;
        }
        channel_object = env-&gt;NewObject(channel_class, channel_new);
        if (NULL == channel_object) {
            goto clean;
        }

        // new and set FileDescript
        fd_field = env-&gt;GetFieldID(channel_class, "fd", "java/io/FileDescriptor");
        fd_object = env-&gt;GetObjectField(channel_object, fd_field);
        if (NULL == fd_object) {
            goto clean;
        }

        jniSetFileDescriptorOfFD(env, fd_object, socket);

        port_field = env-&gt;GetFieldID(channel_class, "localPort", "I");
        env-&gt;SetIntField(channel_object, port_field, ntohs(local_addr.sin_port));

        // new and set remote addr
        addr_object = env-&gt;NewObject(gCachedFields.iaddr_class,
                gCachedFields.iaddr_class_init);
        if (NULL == addr_object) {
            goto clean;
        }
        socketaddr_class = env-&gt;FindClass("java/net/InetSocketAddress");
        socketaddr_field = env-&gt;GetFieldID(channel_class, "connectAddress",
                "Ljava/net/InetSocketAddress;");
        socketaddr_object = env-&gt;GetObjectField(channel_object, socketaddr_field);
        if (NULL == socketaddr_object) {
            goto clean;
        }
        addr_field = env-&gt;GetFieldID(socketaddr_class, "addr",
                "Ljava/net/InetAddress;");
        env-&gt;SetObjectField(socketaddr_object, addr_field, addr_object);
        addr_array = env-&gt;NewByteArray((jsize)4);
        env-&gt;SetByteArrayRegion(addr_array, (jsize)0, (jsize)4, address);
        env-&gt;SetObjectField(addr_object, gCachedFields.iaddr_ipaddress, addr_array);

        // set bound
        if (0 != local_addr.sin_port) {
            bound_field = env-&gt;GetFieldID(channel_class, "isBound", "Z");
            env-&gt;SetBooleanField(channel_object, bound_field, jtrue);
        }
    }
clean:
    free(address);
    free(localAddr);
    return channel_object;
}
*/</comment>
</unit>

<unit revision="1.0.0" language="Java" filename="C:/Users/elbon/Documents/GitHub/sipmin/OSNetworkSystem.java" pos:tabs="8" hash="402f06429b2662e2d28089ba3bc61aa2a56bb2cc"><comment type="block" pos:start="1:1" pos:end="19:3">/*
 * Copyright (C) 2009 The Sipdroid Open Source Project
 * 
 * This file is part of Sipdroid (http://www.sipdroid.org)
 * 
 * Sipdroid is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this source code; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */</comment>

<comment type="line" pos:start="21:1" pos:end="21:21">// BEGIN android-note</comment>
<comment type="line" pos:start="22:1" pos:end="22:71">// address length was changed from long to int for performance reasons.</comment>
<comment type="line" pos:start="23:1" pos:end="23:19">// END android-note</comment>

<package pos:start="25:1" pos:end="25:30">package <name pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:11">org</name><operator pos:start="25:12" pos:end="25:12">.</operator><name pos:start="25:13" pos:end="25:20">sipdroid</name><operator pos:start="25:21" pos:end="25:21">.</operator><name pos:start="25:22" pos:end="25:24">net</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:29">impl</name></name>;</package>

<import pos:start="27:1" pos:end="27:30">import <name pos:start="27:8" pos:end="27:29"><name pos:start="27:8" pos:end="27:11">java</name><operator pos:start="27:12" pos:end="27:12">.</operator><name pos:start="27:13" pos:end="27:14">io</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:29">FileDescriptor</name></name>;</import>
<import pos:start="28:1" pos:end="28:27">import <name pos:start="28:8" pos:end="28:26"><name pos:start="28:8" pos:end="28:11">java</name><operator pos:start="28:12" pos:end="28:12">.</operator><name pos:start="28:13" pos:end="28:14">io</name><operator pos:start="28:15" pos:end="28:15">.</operator><name pos:start="28:16" pos:end="28:26">IOException</name></name>;</import>
<import pos:start="29:1" pos:end="29:31">import <name pos:start="29:8" pos:end="29:30"><name pos:start="29:8" pos:end="29:11">java</name><operator pos:start="29:12" pos:end="29:12">.</operator><name pos:start="29:13" pos:end="29:15">net</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:30">DatagramPacket</name></name>;</import>
<import pos:start="30:1" pos:end="30:28">import <name pos:start="30:8" pos:end="30:27"><name pos:start="30:8" pos:end="30:11">java</name><operator pos:start="30:12" pos:end="30:12">.</operator><name pos:start="30:13" pos:end="30:15">net</name><operator pos:start="30:16" pos:end="30:16">.</operator><name pos:start="30:17" pos:end="30:27">InetAddress</name></name>;</import>
<import pos:start="31:1" pos:end="31:32">import <name pos:start="31:8" pos:end="31:31"><name pos:start="31:8" pos:end="31:11">java</name><operator pos:start="31:12" pos:end="31:12">.</operator><name pos:start="31:13" pos:end="31:15">net</name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:31">SocketException</name></name>;</import>
<import pos:start="32:1" pos:end="32:27">import <name pos:start="32:8" pos:end="32:26"><name pos:start="32:8" pos:end="32:11">java</name><operator pos:start="32:12" pos:end="32:12">.</operator><name pos:start="32:13" pos:end="32:15">net</name><operator pos:start="32:16" pos:end="32:16">.</operator><name pos:start="32:17" pos:end="32:26">SocketImpl</name></name>;</import>
<import pos:start="33:1" pos:end="33:37">import <name pos:start="33:8" pos:end="33:36"><name pos:start="33:8" pos:end="33:11">java</name><operator pos:start="33:12" pos:end="33:12">.</operator><name pos:start="33:13" pos:end="33:15">net</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:36">UnknownHostException</name></name>;</import>
<import pos:start="34:1" pos:end="34:33">import <name pos:start="34:8" pos:end="34:32"><name pos:start="34:8" pos:end="34:11">java</name><operator pos:start="34:12" pos:end="34:12">.</operator><name pos:start="34:13" pos:end="34:15">nio</name><operator pos:start="34:16" pos:end="34:16">.</operator><name pos:start="34:17" pos:end="34:24">channels</name><operator pos:start="34:25" pos:end="34:25">.</operator><name pos:start="34:26" pos:end="34:32">Channel</name></name>;</import>
<comment type="line" pos:start="35:1" pos:end="35:24">// BEGIN android-removed</comment>
<comment type="line" pos:start="36:1" pos:end="36:46">// import java.nio.channels.SelectableChannel;</comment>
<comment type="line" pos:start="37:1" pos:end="37:22">// END android-removed</comment>
<comment type="block" pos:start="38:1" pos:end="43:3">/*
 * 
 * This Class is used for native code wrap, the implement class of
 * INetworkSystem.
 * 
 */</comment>
<class pos:start="44:1" pos:end="748:1"><specifier pos:start="44:1" pos:end="44:6">public</specifier> <specifier pos:start="44:8" pos:end="44:12">final</specifier> class <name pos:start="44:20" pos:end="44:34">OSNetworkSystem</name> <block pos:start="44:36" pos:end="748:1">{

    <comment type="line" pos:start="46:5" pos:end="46:59">// ----------------------------------------------------</comment>
    <comment type="line" pos:start="47:5" pos:end="47:22">// Class Variables</comment>
    <comment type="line" pos:start="48:5" pos:end="48:59">// ----------------------------------------------------</comment>

    <decl_stmt pos:start="50:5" pos:end="50:61"><decl pos:start="50:5" pos:end="50:60"><type pos:start="50:5" pos:end="50:28"><specifier pos:start="50:5" pos:end="50:11">private</specifier> <specifier pos:start="50:13" pos:end="50:18">static</specifier> <specifier pos:start="50:20" pos:end="50:24">final</specifier> <name pos:start="50:26" pos:end="50:28">int</name></type> <name pos:start="50:30" pos:end="50:53">ERRORCODE_SOCKET_TIMEOUT</name> <init pos:start="50:55" pos:end="50:60">= <expr pos:start="50:57" pos:end="50:60"><operator pos:start="50:57" pos:end="50:57">-</operator><literal type="number" pos:start="50:58" pos:end="50:60">209</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="52:5" pos:end="52:63"><decl pos:start="52:5" pos:end="52:62"><type pos:start="52:5" pos:end="52:34"><specifier pos:start="52:5" pos:end="52:11">private</specifier> <specifier pos:start="52:13" pos:end="52:18">static</specifier> <name pos:start="52:20" pos:end="52:34">OSNetworkSystem</name></type> <name pos:start="52:36" pos:end="52:38">ref</name> <init pos:start="52:40" pos:end="52:62">= <expr pos:start="52:42" pos:end="52:62"><operator pos:start="52:42" pos:end="52:44">new</operator> <call pos:start="52:46" pos:end="52:62"><name pos:start="52:46" pos:end="52:60">OSNetworkSystem</name><argument_list pos:start="52:61" pos:end="52:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt pos:start="54:5" pos:end="54:52"><decl pos:start="54:5" pos:end="54:51"><type pos:start="54:5" pos:end="54:28"><specifier pos:start="54:5" pos:end="54:11">private</specifier> <specifier pos:start="54:13" pos:end="54:18">static</specifier> <specifier pos:start="54:20" pos:end="54:24">final</specifier> <name pos:start="54:26" pos:end="54:28">int</name></type> <name pos:start="54:30" pos:end="54:47">INETADDR_REACHABLE</name> <init pos:start="54:49" pos:end="54:51">= <expr pos:start="54:51" pos:end="54:51"><literal type="number" pos:start="54:51" pos:end="54:51">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt pos:start="56:5" pos:end="56:51"><decl pos:start="56:5" pos:end="56:50"><type pos:start="56:5" pos:end="56:26"><specifier pos:start="56:5" pos:end="56:11">private</specifier> <specifier pos:start="56:13" pos:end="56:18">static</specifier> <name pos:start="56:20" pos:end="56:26">boolean</name></type> <name pos:start="56:28" pos:end="56:42">isNetworkInited</name> <init pos:start="56:44" pos:end="56:50">= <expr pos:start="56:46" pos:end="56:50"><literal type="boolean" pos:start="56:46" pos:end="56:50">false</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="line" pos:start="58:5" pos:end="58:59">// ----------------------------------------------------</comment>
    <comment type="line" pos:start="59:5" pos:end="59:24">// Class Constructor</comment>
    <comment type="line" pos:start="60:5" pos:end="60:59">// ----------------------------------------------------</comment>

    <comment type="line" pos:start="62:5" pos:end="62:31">// can not be instantiated.</comment>
    <constructor pos:start="63:5" pos:end="65:5"><specifier pos:start="63:5" pos:end="63:11">private</specifier> <name pos:start="63:13" pos:end="63:27">OSNetworkSystem</name><parameter_list pos:start="63:28" pos:end="63:29">()</parameter_list> <block pos:start="63:31" pos:end="65:5">{<block_content pos:start="64:9" pos:end="64:16">
        <expr_stmt pos:start="64:9" pos:end="64:16"><expr pos:start="64:9" pos:end="64:15"><call pos:start="64:9" pos:end="64:15"><name pos:start="64:9" pos:end="64:13">super</name><argument_list pos:start="64:14" pos:end="64:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" pos:start="67:5" pos:end="69:7">/*
     * @return a static ref of this class
     */</comment>
    <function pos:start="70:5" pos:end="72:5"><type pos:start="70:5" pos:end="70:33"><specifier pos:start="70:5" pos:end="70:10">public</specifier> <specifier pos:start="70:12" pos:end="70:17">static</specifier> <name pos:start="70:19" pos:end="70:33">OSNetworkSystem</name></type> <name pos:start="70:35" pos:end="70:52">getOSNetworkSystem</name><parameter_list pos:start="70:53" pos:end="70:54">()</parameter_list> <block pos:start="70:56" pos:end="72:5">{<block_content pos:start="71:9" pos:end="71:19">
        <return pos:start="71:9" pos:end="71:19">return <expr pos:start="71:16" pos:end="71:18"><name pos:start="71:16" pos:end="71:18">ref</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" pos:start="74:5" pos:end="74:38">// Useing when cache set/get is OK</comment>
    <comment type="line" pos:start="75:5" pos:end="75:63">// public static native void oneTimeInitializationDatagram(</comment>
    <comment type="line" pos:start="76:5" pos:end="76:33">// boolean jcl_IPv6_support);</comment>
    <comment type="line" pos:start="77:5" pos:end="77:6">//</comment>
    <comment type="line" pos:start="78:5" pos:end="78:61">// public static native void oneTimeInitializationSocket(</comment>
    <comment type="line" pos:start="79:5" pos:end="79:33">// boolean jcl_IPv6_support);</comment>

    <comment type="line" pos:start="81:5" pos:end="81:57">// --------------------------------------------------</comment>
    <comment type="line" pos:start="82:5" pos:end="82:40">// java codes that wrap native codes</comment>
    <comment type="line" pos:start="83:5" pos:end="83:57">// --------------------------------------------------</comment>

    <function pos:start="85:5" pos:end="88:5"><type pos:start="85:5" pos:end="85:15"><specifier pos:start="85:5" pos:end="85:10">public</specifier> <name pos:start="85:12" pos:end="85:15">void</name></type> <name pos:start="85:17" pos:end="85:28">createSocket</name><parameter_list pos:start="85:29" pos:end="85:72">(<parameter pos:start="85:30" pos:end="85:46"><decl pos:start="85:30" pos:end="85:46"><type pos:start="85:30" pos:end="85:46"><name pos:start="85:30" pos:end="85:43">FileDescriptor</name></type> <name pos:start="85:45" pos:end="85:46">fd</name></decl></parameter>, <parameter pos:start="85:49" pos:end="85:71"><decl pos:start="85:49" pos:end="85:71"><type pos:start="85:49" pos:end="85:71"><name pos:start="85:49" pos:end="85:55">boolean</name></type> <name pos:start="85:57" pos:end="85:71">preferIPv4Stack</name></decl></parameter>)</parameter_list>
            <throws pos:start="86:13" pos:end="86:30">throws <argument pos:start="86:20" pos:end="86:30"><expr pos:start="86:20" pos:end="86:30"><name pos:start="86:20" pos:end="86:30">IOException</name></expr></argument></throws> <block pos:start="86:32" pos:end="88:5">{<block_content pos:start="87:9" pos:end="87:46">
        <expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><call pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:24">createSocketImpl</name><argument_list pos:start="87:25" pos:end="87:45">(<argument pos:start="87:26" pos:end="87:27"><expr pos:start="87:26" pos:end="87:27"><name pos:start="87:26" pos:end="87:27">fd</name></expr></argument>, <argument pos:start="87:30" pos:end="87:44"><expr pos:start="87:30" pos:end="87:44"><name pos:start="87:30" pos:end="87:44">preferIPv4Stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="90:5" pos:end="93:5"><type pos:start="90:5" pos:end="90:15"><specifier pos:start="90:5" pos:end="90:10">public</specifier> <name pos:start="90:12" pos:end="90:15">void</name></type> <name pos:start="90:17" pos:end="90:36">createDatagramSocket</name><parameter_list pos:start="90:37" pos:end="90:80">(<parameter pos:start="90:38" pos:end="90:54"><decl pos:start="90:38" pos:end="90:54"><type pos:start="90:38" pos:end="90:54"><name pos:start="90:38" pos:end="90:51">FileDescriptor</name></type> <name pos:start="90:53" pos:end="90:54">fd</name></decl></parameter>, <parameter pos:start="90:57" pos:end="90:79"><decl pos:start="90:57" pos:end="90:79"><type pos:start="90:57" pos:end="90:79"><name pos:start="90:57" pos:end="90:63">boolean</name></type> <name pos:start="90:65" pos:end="90:79">preferIPv4Stack</name></decl></parameter>)</parameter_list>
            <throws pos:start="91:13" pos:end="91:34">throws <argument pos:start="91:20" pos:end="91:34"><expr pos:start="91:20" pos:end="91:34"><name pos:start="91:20" pos:end="91:34">SocketException</name></expr></argument></throws> <block pos:start="91:36" pos:end="93:5">{<block_content pos:start="92:9" pos:end="92:54">
        <expr_stmt pos:start="92:9" pos:end="92:54"><expr pos:start="92:9" pos:end="92:53"><call pos:start="92:9" pos:end="92:53"><name pos:start="92:9" pos:end="92:32">createDatagramSocketImpl</name><argument_list pos:start="92:33" pos:end="92:53">(<argument pos:start="92:34" pos:end="92:35"><expr pos:start="92:34" pos:end="92:35"><name pos:start="92:34" pos:end="92:35">fd</name></expr></argument>, <argument pos:start="92:38" pos:end="92:52"><expr pos:start="92:38" pos:end="92:52"><name pos:start="92:38" pos:end="92:52">preferIPv4Stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="95:5" pos:end="98:5"><type pos:start="95:5" pos:end="95:14"><specifier pos:start="95:5" pos:end="95:10">public</specifier> <name pos:start="95:12" pos:end="95:14">int</name></type> <name pos:start="95:16" pos:end="95:19">read</name><parameter_list pos:start="95:20" pos:end="96:24">(<parameter pos:start="95:21" pos:end="95:38"><decl pos:start="95:21" pos:end="95:38"><type pos:start="95:21" pos:end="95:38"><name pos:start="95:21" pos:end="95:34">FileDescriptor</name></type> <name pos:start="95:36" pos:end="95:38">aFD</name></decl></parameter>, <parameter pos:start="95:41" pos:end="95:51"><decl pos:start="95:41" pos:end="95:51"><type pos:start="95:41" pos:end="95:51"><name pos:start="95:41" pos:end="95:46"><name pos:start="95:41" pos:end="95:44">byte</name><index pos:start="95:45" pos:end="95:46">[]</index></name></type> <name pos:start="95:48" pos:end="95:51">data</name></decl></parameter>, <parameter pos:start="95:54" pos:end="95:63"><decl pos:start="95:54" pos:end="95:63"><type pos:start="95:54" pos:end="95:63"><name pos:start="95:54" pos:end="95:56">int</name></type> <name pos:start="95:58" pos:end="95:63">offset</name></decl></parameter>, <parameter pos:start="95:66" pos:end="95:74"><decl pos:start="95:66" pos:end="95:74"><type pos:start="95:66" pos:end="95:74"><name pos:start="95:66" pos:end="95:68">int</name></type> <name pos:start="95:70" pos:end="95:74">count</name></decl></parameter>,
            <parameter pos:start="96:13" pos:end="96:23"><decl pos:start="96:13" pos:end="96:23"><type pos:start="96:13" pos:end="96:23"><name pos:start="96:13" pos:end="96:15">int</name></type> <name pos:start="96:17" pos:end="96:23">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="96:26" pos:end="96:43">throws <argument pos:start="96:33" pos:end="96:43"><expr pos:start="96:33" pos:end="96:43"><name pos:start="96:33" pos:end="96:43">IOException</name></expr></argument></throws> <block pos:start="96:45" pos:end="98:5">{<block_content pos:start="97:9" pos:end="97:65">
        <return pos:start="97:9" pos:end="97:65">return <expr pos:start="97:16" pos:end="97:64"><call pos:start="97:16" pos:end="97:64"><name pos:start="97:16" pos:end="97:29">readSocketImpl</name><argument_list pos:start="97:30" pos:end="97:64">(<argument pos:start="97:31" pos:end="97:33"><expr pos:start="97:31" pos:end="97:33"><name pos:start="97:31" pos:end="97:33">aFD</name></expr></argument>, <argument pos:start="97:36" pos:end="97:39"><expr pos:start="97:36" pos:end="97:39"><name pos:start="97:36" pos:end="97:39">data</name></expr></argument>, <argument pos:start="97:42" pos:end="97:47"><expr pos:start="97:42" pos:end="97:47"><name pos:start="97:42" pos:end="97:47">offset</name></expr></argument>, <argument pos:start="97:50" pos:end="97:54"><expr pos:start="97:50" pos:end="97:54"><name pos:start="97:50" pos:end="97:54">count</name></expr></argument>, <argument pos:start="97:57" pos:end="97:63"><expr pos:start="97:57" pos:end="97:63"><name pos:start="97:57" pos:end="97:63">timeout</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="100:5" pos:end="103:5"><type pos:start="100:5" pos:end="100:14"><specifier pos:start="100:5" pos:end="100:10">public</specifier> <name pos:start="100:12" pos:end="100:14">int</name></type> <name pos:start="100:16" pos:end="100:25">readDirect</name><parameter_list pos:start="100:26" pos:end="101:24">(<parameter pos:start="100:27" pos:end="100:44"><decl pos:start="100:27" pos:end="100:44"><type pos:start="100:27" pos:end="100:44"><name pos:start="100:27" pos:end="100:40">FileDescriptor</name></type> <name pos:start="100:42" pos:end="100:44">aFD</name></decl></parameter>, <parameter pos:start="100:47" pos:end="100:57"><decl pos:start="100:47" pos:end="100:57"><type pos:start="100:47" pos:end="100:57"><name pos:start="100:47" pos:end="100:49">int</name></type> <name pos:start="100:51" pos:end="100:57">address</name></decl></parameter>, <parameter pos:start="100:60" pos:end="100:69"><decl pos:start="100:60" pos:end="100:69"><type pos:start="100:60" pos:end="100:69"><name pos:start="100:60" pos:end="100:62">int</name></type> <name pos:start="100:64" pos:end="100:69">offset</name></decl></parameter>, <parameter pos:start="100:72" pos:end="100:80"><decl pos:start="100:72" pos:end="100:80"><type pos:start="100:72" pos:end="100:80"><name pos:start="100:72" pos:end="100:74">int</name></type> <name pos:start="100:76" pos:end="100:80">count</name></decl></parameter>,
            <parameter pos:start="101:13" pos:end="101:23"><decl pos:start="101:13" pos:end="101:23"><type pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:15">int</name></type> <name pos:start="101:17" pos:end="101:23">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="101:26" pos:end="101:43">throws <argument pos:start="101:33" pos:end="101:43"><expr pos:start="101:33" pos:end="101:43"><name pos:start="101:33" pos:end="101:43">IOException</name></expr></argument></throws> <block pos:start="101:45" pos:end="103:5">{<block_content pos:start="102:9" pos:end="102:74">
        <return pos:start="102:9" pos:end="102:74">return <expr pos:start="102:16" pos:end="102:73"><call pos:start="102:16" pos:end="102:73"><name pos:start="102:16" pos:end="102:35">readSocketDirectImpl</name><argument_list pos:start="102:36" pos:end="102:73">(<argument pos:start="102:37" pos:end="102:39"><expr pos:start="102:37" pos:end="102:39"><name pos:start="102:37" pos:end="102:39">aFD</name></expr></argument>, <argument pos:start="102:42" pos:end="102:48"><expr pos:start="102:42" pos:end="102:48"><name pos:start="102:42" pos:end="102:48">address</name></expr></argument>, <argument pos:start="102:51" pos:end="102:56"><expr pos:start="102:51" pos:end="102:56"><name pos:start="102:51" pos:end="102:56">offset</name></expr></argument>, <argument pos:start="102:59" pos:end="102:63"><expr pos:start="102:59" pos:end="102:63"><name pos:start="102:59" pos:end="102:63">count</name></expr></argument>, <argument pos:start="102:66" pos:end="102:72"><expr pos:start="102:66" pos:end="102:72"><name pos:start="102:66" pos:end="102:72">timeout</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="105:5" pos:end="108:5"><type pos:start="105:5" pos:end="105:14"><specifier pos:start="105:5" pos:end="105:10">public</specifier> <name pos:start="105:12" pos:end="105:14">int</name></type> <name pos:start="105:16" pos:end="105:20">write</name><parameter_list pos:start="105:21" pos:end="105:76">(<parameter pos:start="105:22" pos:end="105:39"><decl pos:start="105:22" pos:end="105:39"><type pos:start="105:22" pos:end="105:39"><name pos:start="105:22" pos:end="105:35">FileDescriptor</name></type> <name pos:start="105:37" pos:end="105:39">aFD</name></decl></parameter>, <parameter pos:start="105:42" pos:end="105:52"><decl pos:start="105:42" pos:end="105:52"><type pos:start="105:42" pos:end="105:52"><name pos:start="105:42" pos:end="105:47"><name pos:start="105:42" pos:end="105:45">byte</name><index pos:start="105:46" pos:end="105:47">[]</index></name></type> <name pos:start="105:49" pos:end="105:52">data</name></decl></parameter>, <parameter pos:start="105:55" pos:end="105:64"><decl pos:start="105:55" pos:end="105:64"><type pos:start="105:55" pos:end="105:64"><name pos:start="105:55" pos:end="105:57">int</name></type> <name pos:start="105:59" pos:end="105:64">offset</name></decl></parameter>, <parameter pos:start="105:67" pos:end="105:75"><decl pos:start="105:67" pos:end="105:75"><type pos:start="105:67" pos:end="105:75"><name pos:start="105:67" pos:end="105:69">int</name></type> <name pos:start="105:71" pos:end="105:75">count</name></decl></parameter>)</parameter_list>
            <throws pos:start="106:13" pos:end="106:30">throws <argument pos:start="106:20" pos:end="106:30"><expr pos:start="106:20" pos:end="106:30"><name pos:start="106:20" pos:end="106:30">IOException</name></expr></argument></throws> <block pos:start="106:32" pos:end="108:5">{<block_content pos:start="107:9" pos:end="107:57">
        <return pos:start="107:9" pos:end="107:57">return <expr pos:start="107:16" pos:end="107:56"><call pos:start="107:16" pos:end="107:56"><name pos:start="107:16" pos:end="107:30">writeSocketImpl</name><argument_list pos:start="107:31" pos:end="107:56">(<argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">aFD</name></expr></argument>, <argument pos:start="107:37" pos:end="107:40"><expr pos:start="107:37" pos:end="107:40"><name pos:start="107:37" pos:end="107:40">data</name></expr></argument>, <argument pos:start="107:43" pos:end="107:48"><expr pos:start="107:43" pos:end="107:48"><name pos:start="107:43" pos:end="107:48">offset</name></expr></argument>, <argument pos:start="107:51" pos:end="107:55"><expr pos:start="107:51" pos:end="107:55"><name pos:start="107:51" pos:end="107:55">count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="110:5" pos:end="113:5"><type pos:start="110:5" pos:end="110:14"><specifier pos:start="110:5" pos:end="110:10">public</specifier> <name pos:start="110:12" pos:end="110:14">int</name></type> <name pos:start="110:16" pos:end="110:26">writeDirect</name><parameter_list pos:start="110:27" pos:end="111:22">(<parameter pos:start="110:28" pos:end="110:45"><decl pos:start="110:28" pos:end="110:45"><type pos:start="110:28" pos:end="110:45"><name pos:start="110:28" pos:end="110:41">FileDescriptor</name></type> <name pos:start="110:43" pos:end="110:45">aFD</name></decl></parameter>, <parameter pos:start="110:48" pos:end="110:58"><decl pos:start="110:48" pos:end="110:58"><type pos:start="110:48" pos:end="110:58"><name pos:start="110:48" pos:end="110:50">int</name></type> <name pos:start="110:52" pos:end="110:58">address</name></decl></parameter>, <parameter pos:start="110:61" pos:end="110:70"><decl pos:start="110:61" pos:end="110:70"><type pos:start="110:61" pos:end="110:70"><name pos:start="110:61" pos:end="110:63">int</name></type> <name pos:start="110:65" pos:end="110:70">offset</name></decl></parameter>,
            <parameter pos:start="111:13" pos:end="111:21"><decl pos:start="111:13" pos:end="111:21"><type pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:21">count</name></decl></parameter>)</parameter_list> <throws pos:start="111:24" pos:end="111:41">throws <argument pos:start="111:31" pos:end="111:41"><expr pos:start="111:31" pos:end="111:41"><name pos:start="111:31" pos:end="111:41">IOException</name></expr></argument></throws> <block pos:start="111:43" pos:end="113:5">{<block_content pos:start="112:9" pos:end="112:66">
        <return pos:start="112:9" pos:end="112:66">return <expr pos:start="112:16" pos:end="112:65"><call pos:start="112:16" pos:end="112:65"><name pos:start="112:16" pos:end="112:36">writeSocketDirectImpl</name><argument_list pos:start="112:37" pos:end="112:65">(<argument pos:start="112:38" pos:end="112:40"><expr pos:start="112:38" pos:end="112:40"><name pos:start="112:38" pos:end="112:40">aFD</name></expr></argument>, <argument pos:start="112:43" pos:end="112:49"><expr pos:start="112:43" pos:end="112:49"><name pos:start="112:43" pos:end="112:49">address</name></expr></argument>, <argument pos:start="112:52" pos:end="112:57"><expr pos:start="112:52" pos:end="112:57"><name pos:start="112:52" pos:end="112:57">offset</name></expr></argument>, <argument pos:start="112:60" pos:end="112:64"><expr pos:start="112:60" pos:end="112:64"><name pos:start="112:60" pos:end="112:64">count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="115:5" pos:end="118:5"><type pos:start="115:5" pos:end="115:15"><specifier pos:start="115:5" pos:end="115:10">public</specifier> <name pos:start="115:12" pos:end="115:15">void</name></type> <name pos:start="115:17" pos:end="115:30">setNonBlocking</name><parameter_list pos:start="115:31" pos:end="115:65">(<parameter pos:start="115:32" pos:end="115:49"><decl pos:start="115:32" pos:end="115:49"><type pos:start="115:32" pos:end="115:49"><name pos:start="115:32" pos:end="115:45">FileDescriptor</name></type> <name pos:start="115:47" pos:end="115:49">aFD</name></decl></parameter>, <parameter pos:start="115:52" pos:end="115:64"><decl pos:start="115:52" pos:end="115:64"><type pos:start="115:52" pos:end="115:64"><name pos:start="115:52" pos:end="115:58">boolean</name></type> <name pos:start="115:60" pos:end="115:64">block</name></decl></parameter>)</parameter_list>
            <throws pos:start="116:13" pos:end="116:30">throws <argument pos:start="116:20" pos:end="116:30"><expr pos:start="116:20" pos:end="116:30"><name pos:start="116:20" pos:end="116:30">IOException</name></expr></argument></throws> <block pos:start="116:32" pos:end="118:5">{<block_content pos:start="117:9" pos:end="117:39">
        <expr_stmt pos:start="117:9" pos:end="117:39"><expr pos:start="117:9" pos:end="117:38"><call pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:26">setNonBlockingImpl</name><argument_list pos:start="117:27" pos:end="117:38">(<argument pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">aFD</name></expr></argument>, <argument pos:start="117:33" pos:end="117:37"><expr pos:start="117:33" pos:end="117:37"><name pos:start="117:33" pos:end="117:37">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="120:5" pos:end="123:5"><type pos:start="120:5" pos:end="120:15"><specifier pos:start="120:5" pos:end="120:10">public</specifier> <name pos:start="120:12" pos:end="120:15">void</name></type> <name pos:start="120:17" pos:end="120:31">connectDatagram</name><parameter_list pos:start="120:32" pos:end="121:36">(<parameter pos:start="120:33" pos:end="120:50"><decl pos:start="120:33" pos:end="120:50"><type pos:start="120:33" pos:end="120:50"><name pos:start="120:33" pos:end="120:46">FileDescriptor</name></type> <name pos:start="120:48" pos:end="120:50">aFD</name></decl></parameter>, <parameter pos:start="120:53" pos:end="120:60"><decl pos:start="120:53" pos:end="120:60"><type pos:start="120:53" pos:end="120:60"><name pos:start="120:53" pos:end="120:55">int</name></type> <name pos:start="120:57" pos:end="120:60">port</name></decl></parameter>, <parameter pos:start="120:63" pos:end="120:78"><decl pos:start="120:63" pos:end="120:78"><type pos:start="120:63" pos:end="120:78"><name pos:start="120:63" pos:end="120:65">int</name></type> <name pos:start="120:67" pos:end="120:78">trafficClass</name></decl></parameter>,
            <parameter pos:start="121:13" pos:end="121:35"><decl pos:start="121:13" pos:end="121:35"><type pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:23">InetAddress</name></type> <name pos:start="121:25" pos:end="121:35">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="121:38" pos:end="121:59">throws <argument pos:start="121:45" pos:end="121:59"><expr pos:start="121:45" pos:end="121:59"><name pos:start="121:45" pos:end="121:59">SocketException</name></expr></argument></throws> <block pos:start="121:61" pos:end="123:5">{<block_content pos:start="122:9" pos:end="122:67">
        <expr_stmt pos:start="122:9" pos:end="122:67"><expr pos:start="122:9" pos:end="122:66"><call pos:start="122:9" pos:end="122:66"><name pos:start="122:9" pos:end="122:28">connectDatagramImpl2</name><argument_list pos:start="122:29" pos:end="122:66">(<argument pos:start="122:30" pos:end="122:32"><expr pos:start="122:30" pos:end="122:32"><name pos:start="122:30" pos:end="122:32">aFD</name></expr></argument>, <argument pos:start="122:35" pos:end="122:38"><expr pos:start="122:35" pos:end="122:38"><name pos:start="122:35" pos:end="122:38">port</name></expr></argument>, <argument pos:start="122:41" pos:end="122:52"><expr pos:start="122:41" pos:end="122:52"><name pos:start="122:41" pos:end="122:52">trafficClass</name></expr></argument>, <argument pos:start="122:55" pos:end="122:65"><expr pos:start="122:55" pos:end="122:65"><name pos:start="122:55" pos:end="122:65">inetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="125:5" pos:end="128:5"><type pos:start="125:5" pos:end="125:14"><specifier pos:start="125:5" pos:end="125:10">public</specifier> <name pos:start="125:12" pos:end="125:14">int</name></type> <name pos:start="125:16" pos:end="125:22">connect</name><parameter_list pos:start="125:23" pos:end="126:46">(<parameter pos:start="125:24" pos:end="125:41"><decl pos:start="125:24" pos:end="125:41"><type pos:start="125:24" pos:end="125:41"><name pos:start="125:24" pos:end="125:37">FileDescriptor</name></type> <name pos:start="125:39" pos:end="125:41">aFD</name></decl></parameter>, <parameter pos:start="125:44" pos:end="125:59"><decl pos:start="125:44" pos:end="125:59"><type pos:start="125:44" pos:end="125:59"><name pos:start="125:44" pos:end="125:46">int</name></type> <name pos:start="125:48" pos:end="125:59">trafficClass</name></decl></parameter>,
            <parameter pos:start="126:13" pos:end="126:35"><decl pos:start="126:13" pos:end="126:35"><type pos:start="126:13" pos:end="126:35"><name pos:start="126:13" pos:end="126:23">InetAddress</name></type> <name pos:start="126:25" pos:end="126:35">inetAddress</name></decl></parameter>, <parameter pos:start="126:38" pos:end="126:45"><decl pos:start="126:38" pos:end="126:45"><type pos:start="126:38" pos:end="126:45"><name pos:start="126:38" pos:end="126:40">int</name></type> <name pos:start="126:42" pos:end="126:45">port</name></decl></parameter>)</parameter_list>  <throws pos:start="126:49" pos:end="126:66">throws <argument pos:start="126:56" pos:end="126:66"><expr pos:start="126:56" pos:end="126:66"><name pos:start="126:56" pos:end="126:66">IOException</name></expr></argument></throws><block pos:start="126:67" pos:end="128:5">{<block_content pos:start="127:9" pos:end="127:71">
        <return pos:start="127:9" pos:end="127:71">return <expr pos:start="127:16" pos:end="127:70"><call pos:start="127:16" pos:end="127:70"><name pos:start="127:16" pos:end="127:32">connectSocketImpl</name><argument_list pos:start="127:33" pos:end="127:70">(<argument pos:start="127:34" pos:end="127:36"><expr pos:start="127:34" pos:end="127:36"><name pos:start="127:34" pos:end="127:36">aFD</name></expr></argument>, <argument pos:start="127:39" pos:end="127:50"><expr pos:start="127:39" pos:end="127:50"><name pos:start="127:39" pos:end="127:50">trafficClass</name></expr></argument>, <argument pos:start="127:53" pos:end="127:63"><expr pos:start="127:53" pos:end="127:63"><name pos:start="127:53" pos:end="127:63">inetAddress</name></expr></argument>, <argument pos:start="127:66" pos:end="127:69"><expr pos:start="127:66" pos:end="127:69"><name pos:start="127:66" pos:end="127:69">port</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" pos:start="130:5" pos:end="130:28">// BEGIN android-changed</comment>
    <function pos:start="131:5" pos:end="136:5"><type pos:start="131:5" pos:end="131:14"><specifier pos:start="131:5" pos:end="131:10">public</specifier> <name pos:start="131:12" pos:end="131:14">int</name></type> <name pos:start="131:16" pos:end="131:33">connectWithTimeout</name><parameter_list pos:start="131:34" pos:end="133:27">(<parameter pos:start="131:35" pos:end="131:52"><decl pos:start="131:35" pos:end="131:52"><type pos:start="131:35" pos:end="131:52"><name pos:start="131:35" pos:end="131:48">FileDescriptor</name></type> <name pos:start="131:50" pos:end="131:52">aFD</name></decl></parameter>, <parameter pos:start="131:55" pos:end="131:65"><decl pos:start="131:55" pos:end="131:65"><type pos:start="131:55" pos:end="131:65"><name pos:start="131:55" pos:end="131:57">int</name></type> <name pos:start="131:59" pos:end="131:65">timeout</name></decl></parameter>,
            <parameter pos:start="132:13" pos:end="132:28"><decl pos:start="132:13" pos:end="132:28"><type pos:start="132:13" pos:end="132:28"><name pos:start="132:13" pos:end="132:15">int</name></type> <name pos:start="132:17" pos:end="132:28">trafficClass</name></decl></parameter>, <parameter pos:start="132:31" pos:end="132:53"><decl pos:start="132:31" pos:end="132:53"><type pos:start="132:31" pos:end="132:53"><name pos:start="132:31" pos:end="132:41">InetAddress</name></type> <name pos:start="132:43" pos:end="132:53">inetAddress</name></decl></parameter>, <parameter pos:start="132:56" pos:end="132:63"><decl pos:start="132:56" pos:end="132:63"><type pos:start="132:56" pos:end="132:63"><name pos:start="132:56" pos:end="132:58">int</name></type> <name pos:start="132:60" pos:end="132:63">port</name></decl></parameter>, <parameter pos:start="132:66" pos:end="132:73"><decl pos:start="132:66" pos:end="132:73"><type pos:start="132:66" pos:end="132:73"><name pos:start="132:66" pos:end="132:68">int</name></type> <name pos:start="132:70" pos:end="132:73">step</name></decl></parameter>,
            <parameter pos:start="133:13" pos:end="133:26"><decl pos:start="133:13" pos:end="133:26"><type pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:18"><name pos:start="133:13" pos:end="133:16">byte</name><index pos:start="133:17" pos:end="133:18">[]</index></name></type> <name pos:start="133:20" pos:end="133:26">context</name></decl></parameter>)</parameter_list>  <throws pos:start="133:30" pos:end="133:47">throws <argument pos:start="133:37" pos:end="133:47"><expr pos:start="133:37" pos:end="133:47"><name pos:start="133:37" pos:end="133:47">IOException</name></expr></argument></throws><block pos:start="133:48" pos:end="136:5">{<block_content pos:start="134:9" pos:end="135:50">
        <return pos:start="134:9" pos:end="135:50">return <expr pos:start="134:16" pos:end="135:49"><call pos:start="134:16" pos:end="135:49"><name pos:start="134:16" pos:end="134:43">connectWithTimeoutSocketImpl</name><argument_list pos:start="134:44" pos:end="135:49">(<argument pos:start="134:45" pos:end="134:47"><expr pos:start="134:45" pos:end="134:47"><name pos:start="134:45" pos:end="134:47">aFD</name></expr></argument>, <argument pos:start="134:50" pos:end="134:56"><expr pos:start="134:50" pos:end="134:56"><name pos:start="134:50" pos:end="134:56">timeout</name></expr></argument>, <argument pos:start="134:59" pos:end="134:70"><expr pos:start="134:59" pos:end="134:70"><name pos:start="134:59" pos:end="134:70">trafficClass</name></expr></argument>,
                <argument pos:start="135:17" pos:end="135:27"><expr pos:start="135:17" pos:end="135:27"><name pos:start="135:17" pos:end="135:27">inetAddress</name></expr></argument>, <argument pos:start="135:30" pos:end="135:33"><expr pos:start="135:30" pos:end="135:33"><name pos:start="135:30" pos:end="135:33">port</name></expr></argument>, <argument pos:start="135:36" pos:end="135:39"><expr pos:start="135:36" pos:end="135:39"><name pos:start="135:36" pos:end="135:39">step</name></expr></argument>, <argument pos:start="135:42" pos:end="135:48"><expr pos:start="135:42" pos:end="135:48"><name pos:start="135:42" pos:end="135:48">context</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="line" pos:start="137:5" pos:end="137:26">// END android-changed</comment>

    <function pos:start="139:5" pos:end="144:5"><type pos:start="139:5" pos:end="139:15"><specifier pos:start="139:5" pos:end="139:10">public</specifier> <name pos:start="139:12" pos:end="139:15">void</name></type> <name pos:start="139:17" pos:end="139:46">connectStreamWithTimeoutSocket</name><parameter_list pos:start="139:47" pos:end="140:67">(<parameter pos:start="139:48" pos:end="139:65"><decl pos:start="139:48" pos:end="139:65"><type pos:start="139:48" pos:end="139:65"><name pos:start="139:48" pos:end="139:61">FileDescriptor</name></type> <name pos:start="139:63" pos:end="139:65">aFD</name></decl></parameter>, <parameter pos:start="139:68" pos:end="139:76"><decl pos:start="139:68" pos:end="139:76"><type pos:start="139:68" pos:end="139:76"><name pos:start="139:68" pos:end="139:70">int</name></type> <name pos:start="139:72" pos:end="139:76">aport</name></decl></parameter>,
            <parameter pos:start="140:13" pos:end="140:23"><decl pos:start="140:13" pos:end="140:23"><type pos:start="140:13" pos:end="140:23"><name pos:start="140:13" pos:end="140:15">int</name></type> <name pos:start="140:17" pos:end="140:23">timeout</name></decl></parameter>, <parameter pos:start="140:26" pos:end="140:41"><decl pos:start="140:26" pos:end="140:41"><type pos:start="140:26" pos:end="140:41"><name pos:start="140:26" pos:end="140:28">int</name></type> <name pos:start="140:30" pos:end="140:41">trafficClass</name></decl></parameter>, <parameter pos:start="140:44" pos:end="140:66"><decl pos:start="140:44" pos:end="140:66"><type pos:start="140:44" pos:end="140:66"><name pos:start="140:44" pos:end="140:54">InetAddress</name></type> <name pos:start="140:56" pos:end="140:66">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="141:13" pos:end="141:30">throws <argument pos:start="141:20" pos:end="141:30"><expr pos:start="141:20" pos:end="141:30"><name pos:start="141:20" pos:end="141:30">IOException</name></expr></argument></throws> <block pos:start="141:32" pos:end="144:5">{<block_content pos:start="142:9" pos:end="143:29">
        <expr_stmt pos:start="142:9" pos:end="143:29"><expr pos:start="142:9" pos:end="143:28"><call pos:start="142:9" pos:end="143:28"><name pos:start="142:9" pos:end="142:42">connectStreamWithTimeoutSocketImpl</name><argument_list pos:start="142:43" pos:end="143:28">(<argument pos:start="142:44" pos:end="142:46"><expr pos:start="142:44" pos:end="142:46"><name pos:start="142:44" pos:end="142:46">aFD</name></expr></argument>, <argument pos:start="142:49" pos:end="142:53"><expr pos:start="142:49" pos:end="142:53"><name pos:start="142:49" pos:end="142:53">aport</name></expr></argument>, <argument pos:start="142:56" pos:end="142:62"><expr pos:start="142:56" pos:end="142:62"><name pos:start="142:56" pos:end="142:62">timeout</name></expr></argument>, <argument pos:start="142:65" pos:end="142:76"><expr pos:start="142:65" pos:end="142:76"><name pos:start="142:65" pos:end="142:76">trafficClass</name></expr></argument>,
                <argument pos:start="143:17" pos:end="143:27"><expr pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:27">inetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="146:5" pos:end="149:5"><type pos:start="146:5" pos:end="146:15"><specifier pos:start="146:5" pos:end="146:10">public</specifier> <name pos:start="146:12" pos:end="146:15">void</name></type> <name pos:start="146:17" pos:end="146:20">bind</name><parameter_list pos:start="146:21" pos:end="146:75">(<parameter pos:start="146:22" pos:end="146:39"><decl pos:start="146:22" pos:end="146:39"><type pos:start="146:22" pos:end="146:39"><name pos:start="146:22" pos:end="146:35">FileDescriptor</name></type> <name pos:start="146:37" pos:end="146:39">aFD</name></decl></parameter>, <parameter pos:start="146:42" pos:end="146:49"><decl pos:start="146:42" pos:end="146:49"><type pos:start="146:42" pos:end="146:49"><name pos:start="146:42" pos:end="146:44">int</name></type> <name pos:start="146:46" pos:end="146:49">port</name></decl></parameter>, <parameter pos:start="146:52" pos:end="146:74"><decl pos:start="146:52" pos:end="146:74"><type pos:start="146:52" pos:end="146:74"><name pos:start="146:52" pos:end="146:62">InetAddress</name></type> <name pos:start="146:64" pos:end="146:74">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="147:13" pos:end="147:34">throws <argument pos:start="147:20" pos:end="147:34"><expr pos:start="147:20" pos:end="147:34"><name pos:start="147:20" pos:end="147:34">SocketException</name></expr></argument></throws> <block pos:start="147:36" pos:end="149:5">{<block_content pos:start="148:9" pos:end="148:47">
        <expr_stmt pos:start="148:9" pos:end="148:47"><expr pos:start="148:9" pos:end="148:46"><call pos:start="148:9" pos:end="148:46"><name pos:start="148:9" pos:end="148:22">socketBindImpl</name><argument_list pos:start="148:23" pos:end="148:46">(<argument pos:start="148:24" pos:end="148:26"><expr pos:start="148:24" pos:end="148:26"><name pos:start="148:24" pos:end="148:26">aFD</name></expr></argument>, <argument pos:start="148:29" pos:end="148:32"><expr pos:start="148:29" pos:end="148:32"><name pos:start="148:29" pos:end="148:32">port</name></expr></argument>, <argument pos:start="148:35" pos:end="148:45"><expr pos:start="148:35" pos:end="148:45"><name pos:start="148:35" pos:end="148:45">inetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="151:5" pos:end="154:5"><type pos:start="151:5" pos:end="151:18"><specifier pos:start="151:5" pos:end="151:10">public</specifier> <name pos:start="151:12" pos:end="151:18">boolean</name></type> <name pos:start="151:20" pos:end="151:24">bind2</name><parameter_list pos:start="151:25" pos:end="152:36">(<parameter pos:start="151:26" pos:end="151:43"><decl pos:start="151:26" pos:end="151:43"><type pos:start="151:26" pos:end="151:43"><name pos:start="151:26" pos:end="151:39">FileDescriptor</name></type> <name pos:start="151:41" pos:end="151:43">aFD</name></decl></parameter>, <parameter pos:start="151:46" pos:end="151:53"><decl pos:start="151:46" pos:end="151:53"><type pos:start="151:46" pos:end="151:53"><name pos:start="151:46" pos:end="151:48">int</name></type> <name pos:start="151:50" pos:end="151:53">port</name></decl></parameter>, <parameter pos:start="151:56" pos:end="151:75"><decl pos:start="151:56" pos:end="151:75"><type pos:start="151:56" pos:end="151:75"><name pos:start="151:56" pos:end="151:62">boolean</name></type> <name pos:start="151:64" pos:end="151:75">bindToDevice</name></decl></parameter>,
            <parameter pos:start="152:13" pos:end="152:35"><decl pos:start="152:13" pos:end="152:35"><type pos:start="152:13" pos:end="152:35"><name pos:start="152:13" pos:end="152:23">InetAddress</name></type> <name pos:start="152:25" pos:end="152:35">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="152:38" pos:end="152:59">throws <argument pos:start="152:45" pos:end="152:59"><expr pos:start="152:45" pos:end="152:59"><name pos:start="152:45" pos:end="152:59">SocketException</name></expr></argument></throws> <block pos:start="152:61" pos:end="154:5">{<block_content pos:start="153:9" pos:end="153:69">
        <return pos:start="153:9" pos:end="153:69">return <expr pos:start="153:16" pos:end="153:68"><call pos:start="153:16" pos:end="153:68"><name pos:start="153:16" pos:end="153:30">socketBindImpl2</name><argument_list pos:start="153:31" pos:end="153:68">(<argument pos:start="153:32" pos:end="153:34"><expr pos:start="153:32" pos:end="153:34"><name pos:start="153:32" pos:end="153:34">aFD</name></expr></argument>, <argument pos:start="153:37" pos:end="153:40"><expr pos:start="153:37" pos:end="153:40"><name pos:start="153:37" pos:end="153:40">port</name></expr></argument>, <argument pos:start="153:43" pos:end="153:54"><expr pos:start="153:43" pos:end="153:54"><name pos:start="153:43" pos:end="153:54">bindToDevice</name></expr></argument>, <argument pos:start="153:57" pos:end="153:67"><expr pos:start="153:57" pos:end="153:67"><name pos:start="153:57" pos:end="153:67">inetAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="156:5" pos:end="159:5"><type pos:start="156:5" pos:end="156:15"><specifier pos:start="156:5" pos:end="156:10">public</specifier> <name pos:start="156:12" pos:end="156:15">void</name></type> <name pos:start="156:17" pos:end="156:22">accept</name><parameter_list pos:start="156:23" pos:end="157:52">(<parameter pos:start="156:24" pos:end="156:46"><decl pos:start="156:24" pos:end="156:46"><type pos:start="156:24" pos:end="156:46"><name pos:start="156:24" pos:end="156:37">FileDescriptor</name></type> <name pos:start="156:39" pos:end="156:46">fdServer</name></decl></parameter>, <parameter pos:start="156:49" pos:end="156:68"><decl pos:start="156:49" pos:end="156:68"><type pos:start="156:49" pos:end="156:68"><name pos:start="156:49" pos:end="156:58">SocketImpl</name></type> <name pos:start="156:60" pos:end="156:68">newSocket</name></decl></parameter>,
            <parameter pos:start="157:13" pos:end="157:38"><decl pos:start="157:13" pos:end="157:38"><type pos:start="157:13" pos:end="157:38"><name pos:start="157:13" pos:end="157:26">FileDescriptor</name></type> <name pos:start="157:28" pos:end="157:38">fdnewSocket</name></decl></parameter>, <parameter pos:start="157:41" pos:end="157:51"><decl pos:start="157:41" pos:end="157:51"><type pos:start="157:41" pos:end="157:51"><name pos:start="157:41" pos:end="157:43">int</name></type> <name pos:start="157:45" pos:end="157:51">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="157:54" pos:end="157:71">throws <argument pos:start="157:61" pos:end="157:71"><expr pos:start="157:61" pos:end="157:71"><name pos:start="157:61" pos:end="157:71">IOException</name></expr></argument></throws> <block pos:start="157:73" pos:end="159:5">{<block_content pos:start="158:9" pos:end="158:68">
        <expr_stmt pos:start="158:9" pos:end="158:68"><expr pos:start="158:9" pos:end="158:67"><call pos:start="158:9" pos:end="158:67"><name pos:start="158:9" pos:end="158:24">acceptSocketImpl</name><argument_list pos:start="158:25" pos:end="158:67">(<argument pos:start="158:26" pos:end="158:33"><expr pos:start="158:26" pos:end="158:33"><name pos:start="158:26" pos:end="158:33">fdServer</name></expr></argument>, <argument pos:start="158:36" pos:end="158:44"><expr pos:start="158:36" pos:end="158:44"><name pos:start="158:36" pos:end="158:44">newSocket</name></expr></argument>, <argument pos:start="158:47" pos:end="158:57"><expr pos:start="158:47" pos:end="158:57"><name pos:start="158:47" pos:end="158:57">fdnewSocket</name></expr></argument>, <argument pos:start="158:60" pos:end="158:66"><expr pos:start="158:60" pos:end="158:66"><name pos:start="158:60" pos:end="158:66">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="161:5" pos:end="166:5"><type pos:start="161:5" pos:end="161:14"><specifier pos:start="161:5" pos:end="161:10">public</specifier> <name pos:start="161:12" pos:end="161:14">int</name></type> <name pos:start="161:16" pos:end="161:27">sendDatagram</name><parameter_list pos:start="161:28" pos:end="163:36">(<parameter pos:start="161:29" pos:end="161:45"><decl pos:start="161:29" pos:end="161:45"><type pos:start="161:29" pos:end="161:45"><name pos:start="161:29" pos:end="161:42">FileDescriptor</name></type> <name pos:start="161:44" pos:end="161:45">fd</name></decl></parameter>, <parameter pos:start="161:48" pos:end="161:58"><decl pos:start="161:48" pos:end="161:58"><type pos:start="161:48" pos:end="161:58"><name pos:start="161:48" pos:end="161:53"><name pos:start="161:48" pos:end="161:51">byte</name><index pos:start="161:52" pos:end="161:53">[]</index></name></type> <name pos:start="161:55" pos:end="161:58">data</name></decl></parameter>, <parameter pos:start="161:61" pos:end="161:70"><decl pos:start="161:61" pos:end="161:70"><type pos:start="161:61" pos:end="161:70"><name pos:start="161:61" pos:end="161:63">int</name></type> <name pos:start="161:65" pos:end="161:70">offset</name></decl></parameter>,
            <parameter pos:start="162:13" pos:end="162:22"><decl pos:start="162:13" pos:end="162:22"><type pos:start="162:13" pos:end="162:22"><name pos:start="162:13" pos:end="162:15">int</name></type> <name pos:start="162:17" pos:end="162:22">length</name></decl></parameter>, <parameter pos:start="162:25" pos:end="162:32"><decl pos:start="162:25" pos:end="162:32"><type pos:start="162:25" pos:end="162:32"><name pos:start="162:25" pos:end="162:27">int</name></type> <name pos:start="162:29" pos:end="162:32">port</name></decl></parameter>, <parameter pos:start="162:35" pos:end="162:54"><decl pos:start="162:35" pos:end="162:54"><type pos:start="162:35" pos:end="162:54"><name pos:start="162:35" pos:end="162:41">boolean</name></type> <name pos:start="162:43" pos:end="162:54">bindToDevice</name></decl></parameter>, <parameter pos:start="162:57" pos:end="162:72"><decl pos:start="162:57" pos:end="162:72"><type pos:start="162:57" pos:end="162:72"><name pos:start="162:57" pos:end="162:59">int</name></type> <name pos:start="162:61" pos:end="162:72">trafficClass</name></decl></parameter>,
            <parameter pos:start="163:13" pos:end="163:35"><decl pos:start="163:13" pos:end="163:35"><type pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:23">InetAddress</name></type> <name pos:start="163:25" pos:end="163:35">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="163:38" pos:end="163:55">throws <argument pos:start="163:45" pos:end="163:55"><expr pos:start="163:45" pos:end="163:55"><name pos:start="163:45" pos:end="163:55">IOException</name></expr></argument></throws> <block pos:start="163:57" pos:end="166:5">{<block_content pos:start="164:9" pos:end="165:43">
        <return pos:start="164:9" pos:end="165:43">return <expr pos:start="164:16" pos:end="165:42"><call pos:start="164:16" pos:end="165:42"><name pos:start="164:16" pos:end="164:31">sendDatagramImpl</name><argument_list pos:start="164:32" pos:end="165:42">(<argument pos:start="164:33" pos:end="164:34"><expr pos:start="164:33" pos:end="164:34"><name pos:start="164:33" pos:end="164:34">fd</name></expr></argument>, <argument pos:start="164:37" pos:end="164:40"><expr pos:start="164:37" pos:end="164:40"><name pos:start="164:37" pos:end="164:40">data</name></expr></argument>, <argument pos:start="164:43" pos:end="164:48"><expr pos:start="164:43" pos:end="164:48"><name pos:start="164:43" pos:end="164:48">offset</name></expr></argument>, <argument pos:start="164:51" pos:end="164:56"><expr pos:start="164:51" pos:end="164:56"><name pos:start="164:51" pos:end="164:56">length</name></expr></argument>, <argument pos:start="164:59" pos:end="164:62"><expr pos:start="164:59" pos:end="164:62"><name pos:start="164:59" pos:end="164:62">port</name></expr></argument>, <argument pos:start="164:65" pos:end="164:76"><expr pos:start="164:65" pos:end="164:76"><name pos:start="164:65" pos:end="164:76">bindToDevice</name></expr></argument>,
                <argument pos:start="165:17" pos:end="165:28"><expr pos:start="165:17" pos:end="165:28"><name pos:start="165:17" pos:end="165:28">trafficClass</name></expr></argument>, <argument pos:start="165:31" pos:end="165:41"><expr pos:start="165:31" pos:end="165:41"><name pos:start="165:31" pos:end="165:41">inetAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="168:5" pos:end="173:5"><type pos:start="168:5" pos:end="168:14"><specifier pos:start="168:5" pos:end="168:10">public</specifier> <name pos:start="168:12" pos:end="168:14">int</name></type> <name pos:start="168:16" pos:end="168:33">sendDatagramDirect</name><parameter_list pos:start="168:34" pos:end="170:36">(<parameter pos:start="168:35" pos:end="168:51"><decl pos:start="168:35" pos:end="168:51"><type pos:start="168:35" pos:end="168:51"><name pos:start="168:35" pos:end="168:48">FileDescriptor</name></type> <name pos:start="168:50" pos:end="168:51">fd</name></decl></parameter>, <parameter pos:start="168:54" pos:end="168:64"><decl pos:start="168:54" pos:end="168:64"><type pos:start="168:54" pos:end="168:64"><name pos:start="168:54" pos:end="168:56">int</name></type> <name pos:start="168:58" pos:end="168:64">address</name></decl></parameter>, <parameter pos:start="168:67" pos:end="168:76"><decl pos:start="168:67" pos:end="168:76"><type pos:start="168:67" pos:end="168:76"><name pos:start="168:67" pos:end="168:69">int</name></type> <name pos:start="168:71" pos:end="168:76">offset</name></decl></parameter>,
            <parameter pos:start="169:13" pos:end="169:22"><decl pos:start="169:13" pos:end="169:22"><type pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:15">int</name></type> <name pos:start="169:17" pos:end="169:22">length</name></decl></parameter>, <parameter pos:start="169:25" pos:end="169:32"><decl pos:start="169:25" pos:end="169:32"><type pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:27">int</name></type> <name pos:start="169:29" pos:end="169:32">port</name></decl></parameter>, <parameter pos:start="169:35" pos:end="169:54"><decl pos:start="169:35" pos:end="169:54"><type pos:start="169:35" pos:end="169:54"><name pos:start="169:35" pos:end="169:41">boolean</name></type> <name pos:start="169:43" pos:end="169:54">bindToDevice</name></decl></parameter>, <parameter pos:start="169:57" pos:end="169:72"><decl pos:start="169:57" pos:end="169:72"><type pos:start="169:57" pos:end="169:72"><name pos:start="169:57" pos:end="169:59">int</name></type> <name pos:start="169:61" pos:end="169:72">trafficClass</name></decl></parameter>,
            <parameter pos:start="170:13" pos:end="170:35"><decl pos:start="170:13" pos:end="170:35"><type pos:start="170:13" pos:end="170:35"><name pos:start="170:13" pos:end="170:23">InetAddress</name></type> <name pos:start="170:25" pos:end="170:35">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="170:38" pos:end="170:55">throws <argument pos:start="170:45" pos:end="170:55"><expr pos:start="170:45" pos:end="170:55"><name pos:start="170:45" pos:end="170:55">IOException</name></expr></argument></throws> <block pos:start="170:57" pos:end="173:5">{<block_content pos:start="171:9" pos:end="172:43">
        <return pos:start="171:9" pos:end="172:43">return <expr pos:start="171:16" pos:end="172:42"><call pos:start="171:16" pos:end="172:42"><name pos:start="171:16" pos:end="171:37">sendDatagramDirectImpl</name><argument_list pos:start="171:38" pos:end="172:42">(<argument pos:start="171:39" pos:end="171:40"><expr pos:start="171:39" pos:end="171:40"><name pos:start="171:39" pos:end="171:40">fd</name></expr></argument>, <argument pos:start="171:43" pos:end="171:49"><expr pos:start="171:43" pos:end="171:49"><name pos:start="171:43" pos:end="171:49">address</name></expr></argument>, <argument pos:start="171:52" pos:end="171:57"><expr pos:start="171:52" pos:end="171:57"><name pos:start="171:52" pos:end="171:57">offset</name></expr></argument>, <argument pos:start="171:60" pos:end="171:65"><expr pos:start="171:60" pos:end="171:65"><name pos:start="171:60" pos:end="171:65">length</name></expr></argument>, <argument pos:start="171:68" pos:end="171:71"><expr pos:start="171:68" pos:end="171:71"><name pos:start="171:68" pos:end="171:71">port</name></expr></argument>, <argument pos:start="171:74" pos:end="171:85"><expr pos:start="171:74" pos:end="171:85"><name pos:start="171:74" pos:end="171:85">bindToDevice</name></expr></argument>,
                <argument pos:start="172:17" pos:end="172:28"><expr pos:start="172:17" pos:end="172:28"><name pos:start="172:17" pos:end="172:28">trafficClass</name></expr></argument>, <argument pos:start="172:31" pos:end="172:41"><expr pos:start="172:31" pos:end="172:41"><name pos:start="172:31" pos:end="172:41">inetAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="175:5" pos:end="178:5"><type pos:start="175:5" pos:end="175:14"><specifier pos:start="175:5" pos:end="175:10">public</specifier> <name pos:start="175:12" pos:end="175:14">int</name></type> <name pos:start="175:16" pos:end="175:28">sendDatagram2</name><parameter_list pos:start="175:29" pos:end="176:58">(<parameter pos:start="175:30" pos:end="175:46"><decl pos:start="175:30" pos:end="175:46"><type pos:start="175:30" pos:end="175:46"><name pos:start="175:30" pos:end="175:43">FileDescriptor</name></type> <name pos:start="175:45" pos:end="175:46">fd</name></decl></parameter>, <parameter pos:start="175:49" pos:end="175:59"><decl pos:start="175:49" pos:end="175:59"><type pos:start="175:49" pos:end="175:59"><name pos:start="175:49" pos:end="175:54"><name pos:start="175:49" pos:end="175:52">byte</name><index pos:start="175:53" pos:end="175:54">[]</index></name></type> <name pos:start="175:56" pos:end="175:59">data</name></decl></parameter>, <parameter pos:start="175:62" pos:end="175:71"><decl pos:start="175:62" pos:end="175:71"><type pos:start="175:62" pos:end="175:71"><name pos:start="175:62" pos:end="175:64">int</name></type> <name pos:start="175:66" pos:end="175:71">offset</name></decl></parameter>,
            <parameter pos:start="176:13" pos:end="176:22"><decl pos:start="176:13" pos:end="176:22"><type pos:start="176:13" pos:end="176:22"><name pos:start="176:13" pos:end="176:15">int</name></type> <name pos:start="176:17" pos:end="176:22">length</name></decl></parameter>, <parameter pos:start="176:25" pos:end="176:32"><decl pos:start="176:25" pos:end="176:32"><type pos:start="176:25" pos:end="176:32"><name pos:start="176:25" pos:end="176:27">int</name></type> <name pos:start="176:29" pos:end="176:32">port</name></decl></parameter>, <parameter pos:start="176:35" pos:end="176:57"><decl pos:start="176:35" pos:end="176:57"><type pos:start="176:35" pos:end="176:57"><name pos:start="176:35" pos:end="176:45">InetAddress</name></type> <name pos:start="176:47" pos:end="176:57">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="176:60" pos:end="176:77">throws <argument pos:start="176:67" pos:end="176:77"><expr pos:start="176:67" pos:end="176:77"><name pos:start="176:67" pos:end="176:77">IOException</name></expr></argument></throws> <block pos:start="176:79" pos:end="178:5">{<block_content pos:start="177:9" pos:end="177:78">
        <return pos:start="177:9" pos:end="177:78">return <expr pos:start="177:16" pos:end="177:77"><call pos:start="177:16" pos:end="177:77"><name pos:start="177:16" pos:end="177:32">sendDatagramImpl2</name><argument_list pos:start="177:33" pos:end="177:77">(<argument pos:start="177:34" pos:end="177:35"><expr pos:start="177:34" pos:end="177:35"><name pos:start="177:34" pos:end="177:35">fd</name></expr></argument>, <argument pos:start="177:38" pos:end="177:41"><expr pos:start="177:38" pos:end="177:41"><name pos:start="177:38" pos:end="177:41">data</name></expr></argument>, <argument pos:start="177:44" pos:end="177:49"><expr pos:start="177:44" pos:end="177:49"><name pos:start="177:44" pos:end="177:49">offset</name></expr></argument>, <argument pos:start="177:52" pos:end="177:57"><expr pos:start="177:52" pos:end="177:57"><name pos:start="177:52" pos:end="177:57">length</name></expr></argument>, <argument pos:start="177:60" pos:end="177:63"><expr pos:start="177:60" pos:end="177:63"><name pos:start="177:60" pos:end="177:63">port</name></expr></argument>, <argument pos:start="177:66" pos:end="177:76"><expr pos:start="177:66" pos:end="177:76"><name pos:start="177:66" pos:end="177:76">inetAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="180:5" pos:end="185:5"><type pos:start="180:5" pos:end="180:14"><specifier pos:start="180:5" pos:end="180:10">public</specifier> <name pos:start="180:12" pos:end="180:14">int</name></type> <name pos:start="180:16" pos:end="180:30">receiveDatagram</name><parameter_list pos:start="180:31" pos:end="182:25">(<parameter pos:start="180:32" pos:end="180:49"><decl pos:start="180:32" pos:end="180:49"><type pos:start="180:32" pos:end="180:49"><name pos:start="180:32" pos:end="180:45">FileDescriptor</name></type> <name pos:start="180:47" pos:end="180:49">aFD</name></decl></parameter>, <parameter pos:start="180:52" pos:end="180:72"><decl pos:start="180:52" pos:end="180:72"><type pos:start="180:52" pos:end="180:72"><name pos:start="180:52" pos:end="180:65">DatagramPacket</name></type> <name pos:start="180:67" pos:end="180:72">packet</name></decl></parameter>,
            <parameter pos:start="181:13" pos:end="181:23"><decl pos:start="181:13" pos:end="181:23"><type pos:start="181:13" pos:end="181:23"><name pos:start="181:13" pos:end="181:18"><name pos:start="181:13" pos:end="181:16">byte</name><index pos:start="181:17" pos:end="181:18">[]</index></name></type> <name pos:start="181:20" pos:end="181:23">data</name></decl></parameter>, <parameter pos:start="181:26" pos:end="181:35"><decl pos:start="181:26" pos:end="181:35"><type pos:start="181:26" pos:end="181:35"><name pos:start="181:26" pos:end="181:28">int</name></type> <name pos:start="181:30" pos:end="181:35">offset</name></decl></parameter>, <parameter pos:start="181:38" pos:end="181:47"><decl pos:start="181:38" pos:end="181:47"><type pos:start="181:38" pos:end="181:47"><name pos:start="181:38" pos:end="181:40">int</name></type> <name pos:start="181:42" pos:end="181:47">length</name></decl></parameter>, <parameter pos:start="181:50" pos:end="181:67"><decl pos:start="181:50" pos:end="181:67"><type pos:start="181:50" pos:end="181:67"><name pos:start="181:50" pos:end="181:52">int</name></type> <name pos:start="181:54" pos:end="181:67">receiveTimeout</name></decl></parameter>,
            <parameter pos:start="182:13" pos:end="182:24"><decl pos:start="182:13" pos:end="182:24"><type pos:start="182:13" pos:end="182:24"><name pos:start="182:13" pos:end="182:19">boolean</name></type> <name pos:start="182:21" pos:end="182:24">peek</name></decl></parameter>)</parameter_list> <throws pos:start="182:27" pos:end="182:44">throws <argument pos:start="182:34" pos:end="182:44"><expr pos:start="182:34" pos:end="182:44"><name pos:start="182:34" pos:end="182:44">IOException</name></expr></argument></throws> <block pos:start="182:46" pos:end="185:5">{<block_content pos:start="183:9" pos:end="184:38">
        <return pos:start="183:9" pos:end="184:38">return <expr pos:start="183:16" pos:end="184:37"><call pos:start="183:16" pos:end="184:37"><name pos:start="183:16" pos:end="183:34">receiveDatagramImpl</name><argument_list pos:start="183:35" pos:end="184:37">(<argument pos:start="183:36" pos:end="183:38"><expr pos:start="183:36" pos:end="183:38"><name pos:start="183:36" pos:end="183:38">aFD</name></expr></argument>, <argument pos:start="183:41" pos:end="183:46"><expr pos:start="183:41" pos:end="183:46"><name pos:start="183:41" pos:end="183:46">packet</name></expr></argument>, <argument pos:start="183:49" pos:end="183:52"><expr pos:start="183:49" pos:end="183:52"><name pos:start="183:49" pos:end="183:52">data</name></expr></argument>, <argument pos:start="183:55" pos:end="183:60"><expr pos:start="183:55" pos:end="183:60"><name pos:start="183:55" pos:end="183:60">offset</name></expr></argument>, <argument pos:start="183:63" pos:end="183:68"><expr pos:start="183:63" pos:end="183:68"><name pos:start="183:63" pos:end="183:68">length</name></expr></argument>,
                <argument pos:start="184:17" pos:end="184:30"><expr pos:start="184:17" pos:end="184:30"><name pos:start="184:17" pos:end="184:30">receiveTimeout</name></expr></argument>, <argument pos:start="184:33" pos:end="184:36"><expr pos:start="184:33" pos:end="184:36"><name pos:start="184:33" pos:end="184:36">peek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="187:5" pos:end="192:5"><type pos:start="187:5" pos:end="187:14"><specifier pos:start="187:5" pos:end="187:10">public</specifier> <name pos:start="187:12" pos:end="187:14">int</name></type> <name pos:start="187:16" pos:end="187:36">receiveDatagramDirect</name><parameter_list pos:start="187:37" pos:end="189:25">(<parameter pos:start="187:38" pos:end="187:55"><decl pos:start="187:38" pos:end="187:55"><type pos:start="187:38" pos:end="187:55"><name pos:start="187:38" pos:end="187:51">FileDescriptor</name></type> <name pos:start="187:53" pos:end="187:55">aFD</name></decl></parameter>, <parameter pos:start="187:58" pos:end="187:78"><decl pos:start="187:58" pos:end="187:78"><type pos:start="187:58" pos:end="187:78"><name pos:start="187:58" pos:end="187:71">DatagramPacket</name></type> <name pos:start="187:73" pos:end="187:78">packet</name></decl></parameter>,
            <parameter pos:start="188:13" pos:end="188:23"><decl pos:start="188:13" pos:end="188:23"><type pos:start="188:13" pos:end="188:23"><name pos:start="188:13" pos:end="188:15">int</name></type> <name pos:start="188:17" pos:end="188:23">address</name></decl></parameter>, <parameter pos:start="188:26" pos:end="188:35"><decl pos:start="188:26" pos:end="188:35"><type pos:start="188:26" pos:end="188:35"><name pos:start="188:26" pos:end="188:28">int</name></type> <name pos:start="188:30" pos:end="188:35">offset</name></decl></parameter>, <parameter pos:start="188:38" pos:end="188:47"><decl pos:start="188:38" pos:end="188:47"><type pos:start="188:38" pos:end="188:47"><name pos:start="188:38" pos:end="188:40">int</name></type> <name pos:start="188:42" pos:end="188:47">length</name></decl></parameter>, <parameter pos:start="188:50" pos:end="188:67"><decl pos:start="188:50" pos:end="188:67"><type pos:start="188:50" pos:end="188:67"><name pos:start="188:50" pos:end="188:52">int</name></type> <name pos:start="188:54" pos:end="188:67">receiveTimeout</name></decl></parameter>,
            <parameter pos:start="189:13" pos:end="189:24"><decl pos:start="189:13" pos:end="189:24"><type pos:start="189:13" pos:end="189:24"><name pos:start="189:13" pos:end="189:19">boolean</name></type> <name pos:start="189:21" pos:end="189:24">peek</name></decl></parameter>)</parameter_list> <throws pos:start="189:27" pos:end="189:44">throws <argument pos:start="189:34" pos:end="189:44"><expr pos:start="189:34" pos:end="189:44"><name pos:start="189:34" pos:end="189:44">IOException</name></expr></argument></throws> <block pos:start="189:46" pos:end="192:5">{<block_content pos:start="190:9" pos:end="191:38">
        <return pos:start="190:9" pos:end="191:38">return <expr pos:start="190:16" pos:end="191:37"><call pos:start="190:16" pos:end="191:37"><name pos:start="190:16" pos:end="190:40">receiveDatagramDirectImpl</name><argument_list pos:start="190:41" pos:end="191:37">(<argument pos:start="190:42" pos:end="190:44"><expr pos:start="190:42" pos:end="190:44"><name pos:start="190:42" pos:end="190:44">aFD</name></expr></argument>, <argument pos:start="190:47" pos:end="190:52"><expr pos:start="190:47" pos:end="190:52"><name pos:start="190:47" pos:end="190:52">packet</name></expr></argument>, <argument pos:start="190:55" pos:end="190:61"><expr pos:start="190:55" pos:end="190:61"><name pos:start="190:55" pos:end="190:61">address</name></expr></argument>, <argument pos:start="190:64" pos:end="190:69"><expr pos:start="190:64" pos:end="190:69"><name pos:start="190:64" pos:end="190:69">offset</name></expr></argument>, <argument pos:start="190:72" pos:end="190:77"><expr pos:start="190:72" pos:end="190:77"><name pos:start="190:72" pos:end="190:77">length</name></expr></argument>,
                <argument pos:start="191:17" pos:end="191:30"><expr pos:start="191:17" pos:end="191:30"><name pos:start="191:17" pos:end="191:30">receiveTimeout</name></expr></argument>, <argument pos:start="191:33" pos:end="191:36"><expr pos:start="191:33" pos:end="191:36"><name pos:start="191:33" pos:end="191:36">peek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="194:5" pos:end="199:5"><type pos:start="194:5" pos:end="194:14"><specifier pos:start="194:5" pos:end="194:10">public</specifier> <name pos:start="194:12" pos:end="194:14">int</name></type> <name pos:start="194:16" pos:end="194:36">recvConnectedDatagram</name><parameter_list pos:start="194:37" pos:end="196:25">(<parameter pos:start="194:38" pos:end="194:55"><decl pos:start="194:38" pos:end="194:55"><type pos:start="194:38" pos:end="194:55"><name pos:start="194:38" pos:end="194:51">FileDescriptor</name></type> <name pos:start="194:53" pos:end="194:55">aFD</name></decl></parameter>, <parameter pos:start="194:58" pos:end="194:78"><decl pos:start="194:58" pos:end="194:78"><type pos:start="194:58" pos:end="194:78"><name pos:start="194:58" pos:end="194:71">DatagramPacket</name></type> <name pos:start="194:73" pos:end="194:78">packet</name></decl></parameter>,
            <parameter pos:start="195:13" pos:end="195:23"><decl pos:start="195:13" pos:end="195:23"><type pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:18"><name pos:start="195:13" pos:end="195:16">byte</name><index pos:start="195:17" pos:end="195:18">[]</index></name></type> <name pos:start="195:20" pos:end="195:23">data</name></decl></parameter>, <parameter pos:start="195:26" pos:end="195:35"><decl pos:start="195:26" pos:end="195:35"><type pos:start="195:26" pos:end="195:35"><name pos:start="195:26" pos:end="195:28">int</name></type> <name pos:start="195:30" pos:end="195:35">offset</name></decl></parameter>, <parameter pos:start="195:38" pos:end="195:47"><decl pos:start="195:38" pos:end="195:47"><type pos:start="195:38" pos:end="195:47"><name pos:start="195:38" pos:end="195:40">int</name></type> <name pos:start="195:42" pos:end="195:47">length</name></decl></parameter>, <parameter pos:start="195:50" pos:end="195:67"><decl pos:start="195:50" pos:end="195:67"><type pos:start="195:50" pos:end="195:67"><name pos:start="195:50" pos:end="195:52">int</name></type> <name pos:start="195:54" pos:end="195:67">receiveTimeout</name></decl></parameter>,
            <parameter pos:start="196:13" pos:end="196:24"><decl pos:start="196:13" pos:end="196:24"><type pos:start="196:13" pos:end="196:24"><name pos:start="196:13" pos:end="196:19">boolean</name></type> <name pos:start="196:21" pos:end="196:24">peek</name></decl></parameter>)</parameter_list> <throws pos:start="196:27" pos:end="196:44">throws <argument pos:start="196:34" pos:end="196:44"><expr pos:start="196:34" pos:end="196:44"><name pos:start="196:34" pos:end="196:44">IOException</name></expr></argument></throws> <block pos:start="196:46" pos:end="199:5">{<block_content pos:start="197:9" pos:end="198:38">
        <return pos:start="197:9" pos:end="198:38">return <expr pos:start="197:16" pos:end="198:37"><call pos:start="197:16" pos:end="198:37"><name pos:start="197:16" pos:end="197:40">recvConnectedDatagramImpl</name><argument_list pos:start="197:41" pos:end="198:37">(<argument pos:start="197:42" pos:end="197:44"><expr pos:start="197:42" pos:end="197:44"><name pos:start="197:42" pos:end="197:44">aFD</name></expr></argument>, <argument pos:start="197:47" pos:end="197:52"><expr pos:start="197:47" pos:end="197:52"><name pos:start="197:47" pos:end="197:52">packet</name></expr></argument>, <argument pos:start="197:55" pos:end="197:58"><expr pos:start="197:55" pos:end="197:58"><name pos:start="197:55" pos:end="197:58">data</name></expr></argument>, <argument pos:start="197:61" pos:end="197:66"><expr pos:start="197:61" pos:end="197:66"><name pos:start="197:61" pos:end="197:66">offset</name></expr></argument>, <argument pos:start="197:69" pos:end="197:74"><expr pos:start="197:69" pos:end="197:74"><name pos:start="197:69" pos:end="197:74">length</name></expr></argument>,
                <argument pos:start="198:17" pos:end="198:30"><expr pos:start="198:17" pos:end="198:30"><name pos:start="198:17" pos:end="198:30">receiveTimeout</name></expr></argument>, <argument pos:start="198:33" pos:end="198:36"><expr pos:start="198:33" pos:end="198:36"><name pos:start="198:33" pos:end="198:36">peek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="201:5" pos:end="205:5"><type pos:start="201:5" pos:end="201:14"><specifier pos:start="201:5" pos:end="201:10">public</specifier> <name pos:start="201:12" pos:end="201:14">int</name></type> <name pos:start="201:16" pos:end="201:42">recvConnectedDatagramDirect</name><parameter_list pos:start="201:43" pos:end="202:70">(<parameter pos:start="201:44" pos:end="201:61"><decl pos:start="201:44" pos:end="201:61"><type pos:start="201:44" pos:end="201:61"><name pos:start="201:44" pos:end="201:57">FileDescriptor</name></type> <name pos:start="201:59" pos:end="201:61">aFD</name></decl></parameter>, <parameter pos:start="201:64" pos:end="201:84"><decl pos:start="201:64" pos:end="201:84"><type pos:start="201:64" pos:end="201:84"><name pos:start="201:64" pos:end="201:77">DatagramPacket</name></type> <name pos:start="201:79" pos:end="201:84">packet</name></decl></parameter>, <parameter pos:start="201:87" pos:end="201:97"><decl pos:start="201:87" pos:end="201:97"><type pos:start="201:87" pos:end="201:97"><name pos:start="201:87" pos:end="201:89">int</name></type> <name pos:start="201:91" pos:end="201:97">address</name></decl></parameter>,
             <parameter pos:start="202:14" pos:end="202:23"><decl pos:start="202:14" pos:end="202:23"><type pos:start="202:14" pos:end="202:23"><name pos:start="202:14" pos:end="202:16">int</name></type> <name pos:start="202:18" pos:end="202:23">offset</name></decl></parameter>, <parameter pos:start="202:26" pos:end="202:35"><decl pos:start="202:26" pos:end="202:35"><type pos:start="202:26" pos:end="202:35"><name pos:start="202:26" pos:end="202:28">int</name></type> <name pos:start="202:30" pos:end="202:35">length</name></decl></parameter>, <parameter pos:start="202:38" pos:end="202:55"><decl pos:start="202:38" pos:end="202:55"><type pos:start="202:38" pos:end="202:55"><name pos:start="202:38" pos:end="202:40">int</name></type> <name pos:start="202:42" pos:end="202:55">receiveTimeout</name></decl></parameter>, <parameter pos:start="202:58" pos:end="202:69"><decl pos:start="202:58" pos:end="202:69"><type pos:start="202:58" pos:end="202:69"><name pos:start="202:58" pos:end="202:64">boolean</name></type> <name pos:start="202:66" pos:end="202:69">peek</name></decl></parameter>)</parameter_list>
            <throws pos:start="203:13" pos:end="203:30">throws <argument pos:start="203:20" pos:end="203:30"><expr pos:start="203:20" pos:end="203:30"><name pos:start="203:20" pos:end="203:30">IOException</name></expr></argument></throws> <block pos:start="203:32" pos:end="205:5">{<block_content pos:start="204:9" pos:end="204:107">
        <return pos:start="204:9" pos:end="204:107">return <expr pos:start="204:16" pos:end="204:106"><call pos:start="204:16" pos:end="204:106"><name pos:start="204:16" pos:end="204:46">recvConnectedDatagramDirectImpl</name><argument_list pos:start="204:47" pos:end="204:106">(<argument pos:start="204:48" pos:end="204:50"><expr pos:start="204:48" pos:end="204:50"><name pos:start="204:48" pos:end="204:50">aFD</name></expr></argument>, <argument pos:start="204:53" pos:end="204:58"><expr pos:start="204:53" pos:end="204:58"><name pos:start="204:53" pos:end="204:58">packet</name></expr></argument>, <argument pos:start="204:61" pos:end="204:67"><expr pos:start="204:61" pos:end="204:67"><name pos:start="204:61" pos:end="204:67">address</name></expr></argument>, <argument pos:start="204:70" pos:end="204:75"><expr pos:start="204:70" pos:end="204:75"><name pos:start="204:70" pos:end="204:75">offset</name></expr></argument>, <argument pos:start="204:78" pos:end="204:83"><expr pos:start="204:78" pos:end="204:83"><name pos:start="204:78" pos:end="204:83">length</name></expr></argument>, <argument pos:start="204:86" pos:end="204:99"><expr pos:start="204:86" pos:end="204:99"><name pos:start="204:86" pos:end="204:99">receiveTimeout</name></expr></argument>, <argument pos:start="204:102" pos:end="204:105"><expr pos:start="204:102" pos:end="204:105"><name pos:start="204:102" pos:end="204:105">peek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="207:5" pos:end="210:5"><type pos:start="207:5" pos:end="207:14"><specifier pos:start="207:5" pos:end="207:10">public</specifier> <name pos:start="207:12" pos:end="207:14">int</name></type> <name pos:start="207:16" pos:end="207:27">peekDatagram</name><parameter_list pos:start="207:28" pos:end="208:31">(<parameter pos:start="207:29" pos:end="207:46"><decl pos:start="207:29" pos:end="207:46"><type pos:start="207:29" pos:end="207:46"><name pos:start="207:29" pos:end="207:42">FileDescriptor</name></type> <name pos:start="207:44" pos:end="207:46">aFD</name></decl></parameter>, <parameter pos:start="207:49" pos:end="207:66"><decl pos:start="207:49" pos:end="207:66"><type pos:start="207:49" pos:end="207:66"><name pos:start="207:49" pos:end="207:59">InetAddress</name></type> <name pos:start="207:61" pos:end="207:66">sender</name></decl></parameter>,
            <parameter pos:start="208:13" pos:end="208:30"><decl pos:start="208:13" pos:end="208:30"><type pos:start="208:13" pos:end="208:30"><name pos:start="208:13" pos:end="208:15">int</name></type> <name pos:start="208:17" pos:end="208:30">receiveTimeout</name></decl></parameter>)</parameter_list> <throws pos:start="208:33" pos:end="208:50">throws <argument pos:start="208:40" pos:end="208:50"><expr pos:start="208:40" pos:end="208:50"><name pos:start="208:40" pos:end="208:50">IOException</name></expr></argument></throws> <block pos:start="208:52" pos:end="210:5">{<block_content pos:start="209:9" pos:end="209:61">
        <return pos:start="209:9" pos:end="209:61">return <expr pos:start="209:16" pos:end="209:60"><call pos:start="209:16" pos:end="209:60"><name pos:start="209:16" pos:end="209:31">peekDatagramImpl</name><argument_list pos:start="209:32" pos:end="209:60">(<argument pos:start="209:33" pos:end="209:35"><expr pos:start="209:33" pos:end="209:35"><name pos:start="209:33" pos:end="209:35">aFD</name></expr></argument>, <argument pos:start="209:38" pos:end="209:43"><expr pos:start="209:38" pos:end="209:43"><name pos:start="209:38" pos:end="209:43">sender</name></expr></argument>, <argument pos:start="209:46" pos:end="209:59"><expr pos:start="209:46" pos:end="209:59"><name pos:start="209:46" pos:end="209:59">receiveTimeout</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="212:5" pos:end="215:5"><type pos:start="212:5" pos:end="212:14"><specifier pos:start="212:5" pos:end="212:10">public</specifier> <name pos:start="212:12" pos:end="212:14">int</name></type> <name pos:start="212:16" pos:end="212:36">sendConnectedDatagram</name><parameter_list pos:start="212:37" pos:end="213:57">(<parameter pos:start="212:38" pos:end="212:54"><decl pos:start="212:38" pos:end="212:54"><type pos:start="212:38" pos:end="212:54"><name pos:start="212:38" pos:end="212:51">FileDescriptor</name></type> <name pos:start="212:53" pos:end="212:54">fd</name></decl></parameter>, <parameter pos:start="212:57" pos:end="212:67"><decl pos:start="212:57" pos:end="212:67"><type pos:start="212:57" pos:end="212:67"><name pos:start="212:57" pos:end="212:62"><name pos:start="212:57" pos:end="212:60">byte</name><index pos:start="212:61" pos:end="212:62">[]</index></name></type> <name pos:start="212:64" pos:end="212:67">data</name></decl></parameter>,
            <parameter pos:start="213:13" pos:end="213:22"><decl pos:start="213:13" pos:end="213:22"><type pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:15">int</name></type> <name pos:start="213:17" pos:end="213:22">offset</name></decl></parameter>, <parameter pos:start="213:25" pos:end="213:34"><decl pos:start="213:25" pos:end="213:34"><type pos:start="213:25" pos:end="213:34"><name pos:start="213:25" pos:end="213:27">int</name></type> <name pos:start="213:29" pos:end="213:34">length</name></decl></parameter>, <parameter pos:start="213:37" pos:end="213:56"><decl pos:start="213:37" pos:end="213:56"><type pos:start="213:37" pos:end="213:56"><name pos:start="213:37" pos:end="213:43">boolean</name></type> <name pos:start="213:45" pos:end="213:56">bindToDevice</name></decl></parameter>)</parameter_list> <throws pos:start="213:59" pos:end="213:76">throws <argument pos:start="213:66" pos:end="213:76"><expr pos:start="213:66" pos:end="213:76"><name pos:start="213:66" pos:end="213:76">IOException</name></expr></argument></throws> <block pos:start="213:78" pos:end="215:5">{<block_content pos:start="214:9" pos:end="214:81">
        <return pos:start="214:9" pos:end="214:81">return <expr pos:start="214:16" pos:end="214:80"><call pos:start="214:16" pos:end="214:80"><name pos:start="214:16" pos:end="214:40">sendConnectedDatagramImpl</name><argument_list pos:start="214:41" pos:end="214:80">(<argument pos:start="214:42" pos:end="214:43"><expr pos:start="214:42" pos:end="214:43"><name pos:start="214:42" pos:end="214:43">fd</name></expr></argument>, <argument pos:start="214:46" pos:end="214:49"><expr pos:start="214:46" pos:end="214:49"><name pos:start="214:46" pos:end="214:49">data</name></expr></argument>, <argument pos:start="214:52" pos:end="214:57"><expr pos:start="214:52" pos:end="214:57"><name pos:start="214:52" pos:end="214:57">offset</name></expr></argument>, <argument pos:start="214:60" pos:end="214:65"><expr pos:start="214:60" pos:end="214:65"><name pos:start="214:60" pos:end="214:65">length</name></expr></argument>, <argument pos:start="214:68" pos:end="214:79"><expr pos:start="214:68" pos:end="214:79"><name pos:start="214:68" pos:end="214:79">bindToDevice</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="217:5" pos:end="220:5"><type pos:start="217:5" pos:end="217:14"><specifier pos:start="217:5" pos:end="217:10">public</specifier> <name pos:start="217:12" pos:end="217:14">int</name></type> <name pos:start="217:16" pos:end="217:42">sendConnectedDatagramDirect</name><parameter_list pos:start="217:43" pos:end="218:57">(<parameter pos:start="217:44" pos:end="217:60"><decl pos:start="217:44" pos:end="217:60"><type pos:start="217:44" pos:end="217:60"><name pos:start="217:44" pos:end="217:57">FileDescriptor</name></type> <name pos:start="217:59" pos:end="217:60">fd</name></decl></parameter>, <parameter pos:start="217:63" pos:end="217:73"><decl pos:start="217:63" pos:end="217:73"><type pos:start="217:63" pos:end="217:73"><name pos:start="217:63" pos:end="217:65">int</name></type> <name pos:start="217:67" pos:end="217:73">address</name></decl></parameter>,
            <parameter pos:start="218:13" pos:end="218:22"><decl pos:start="218:13" pos:end="218:22"><type pos:start="218:13" pos:end="218:22"><name pos:start="218:13" pos:end="218:15">int</name></type> <name pos:start="218:17" pos:end="218:22">offset</name></decl></parameter>, <parameter pos:start="218:25" pos:end="218:34"><decl pos:start="218:25" pos:end="218:34"><type pos:start="218:25" pos:end="218:34"><name pos:start="218:25" pos:end="218:27">int</name></type> <name pos:start="218:29" pos:end="218:34">length</name></decl></parameter>, <parameter pos:start="218:37" pos:end="218:56"><decl pos:start="218:37" pos:end="218:56"><type pos:start="218:37" pos:end="218:56"><name pos:start="218:37" pos:end="218:43">boolean</name></type> <name pos:start="218:45" pos:end="218:56">bindToDevice</name></decl></parameter>)</parameter_list> <throws pos:start="218:59" pos:end="218:76">throws <argument pos:start="218:66" pos:end="218:76"><expr pos:start="218:66" pos:end="218:76"><name pos:start="218:66" pos:end="218:76">IOException</name></expr></argument></throws> <block pos:start="218:78" pos:end="220:5">{<block_content pos:start="219:9" pos:end="219:90">
        <return pos:start="219:9" pos:end="219:90">return <expr pos:start="219:16" pos:end="219:89"><call pos:start="219:16" pos:end="219:89"><name pos:start="219:16" pos:end="219:46">sendConnectedDatagramDirectImpl</name><argument_list pos:start="219:47" pos:end="219:89">(<argument pos:start="219:48" pos:end="219:49"><expr pos:start="219:48" pos:end="219:49"><name pos:start="219:48" pos:end="219:49">fd</name></expr></argument>, <argument pos:start="219:52" pos:end="219:58"><expr pos:start="219:52" pos:end="219:58"><name pos:start="219:52" pos:end="219:58">address</name></expr></argument>, <argument pos:start="219:61" pos:end="219:66"><expr pos:start="219:61" pos:end="219:66"><name pos:start="219:61" pos:end="219:66">offset</name></expr></argument>, <argument pos:start="219:69" pos:end="219:74"><expr pos:start="219:69" pos:end="219:74"><name pos:start="219:69" pos:end="219:74">length</name></expr></argument>, <argument pos:start="219:77" pos:end="219:88"><expr pos:start="219:77" pos:end="219:88"><name pos:start="219:77" pos:end="219:88">bindToDevice</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="222:5" pos:end="224:5"><type pos:start="222:5" pos:end="222:15"><specifier pos:start="222:5" pos:end="222:10">public</specifier> <name pos:start="222:12" pos:end="222:15">void</name></type> <name pos:start="222:17" pos:end="222:34">disconnectDatagram</name><parameter_list pos:start="222:35" pos:end="222:54">(<parameter pos:start="222:36" pos:end="222:53"><decl pos:start="222:36" pos:end="222:53"><type pos:start="222:36" pos:end="222:49"><name pos:start="222:36" pos:end="222:49">FileDescriptor</name></type> <name pos:start="222:51" pos:end="222:53">aFD</name></decl></parameter>)</parameter_list> <throws pos:start="222:56" pos:end="222:77">throws <argument pos:start="222:63" pos:end="222:77"><expr pos:start="222:63" pos:end="222:77"><name pos:start="222:63" pos:end="222:77">SocketException</name></expr></argument></throws> <block pos:start="222:79" pos:end="224:5">{<block_content pos:start="223:9" pos:end="223:36">
        <expr_stmt pos:start="223:9" pos:end="223:36"><expr pos:start="223:9" pos:end="223:35"><call pos:start="223:9" pos:end="223:35"><name pos:start="223:9" pos:end="223:30">disconnectDatagramImpl</name><argument_list pos:start="223:31" pos:end="223:35">(<argument pos:start="223:32" pos:end="223:34"><expr pos:start="223:32" pos:end="223:34"><name pos:start="223:32" pos:end="223:34">aFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="226:5" pos:end="229:5"><type pos:start="226:5" pos:end="226:15"><specifier pos:start="226:5" pos:end="226:10">public</specifier> <name pos:start="226:12" pos:end="226:15">void</name></type> <name pos:start="226:17" pos:end="226:37">createMulticastSocket</name><parameter_list pos:start="226:38" pos:end="227:36">(<parameter pos:start="226:39" pos:end="226:56"><decl pos:start="226:39" pos:end="226:56"><type pos:start="226:39" pos:end="226:56"><name pos:start="226:39" pos:end="226:52">FileDescriptor</name></type> <name pos:start="226:54" pos:end="226:56">aFD</name></decl></parameter>,
            <parameter pos:start="227:13" pos:end="227:35"><decl pos:start="227:13" pos:end="227:35"><type pos:start="227:13" pos:end="227:35"><name pos:start="227:13" pos:end="227:19">boolean</name></type> <name pos:start="227:21" pos:end="227:35">preferIPv4Stack</name></decl></parameter>)</parameter_list> <throws pos:start="227:38" pos:end="227:59">throws <argument pos:start="227:45" pos:end="227:59"><expr pos:start="227:45" pos:end="227:59"><name pos:start="227:45" pos:end="227:59">SocketException</name></expr></argument></throws> <block pos:start="227:61" pos:end="229:5">{<block_content pos:start="228:9" pos:end="228:56">
        <expr_stmt pos:start="228:9" pos:end="228:56"><expr pos:start="228:9" pos:end="228:55"><call pos:start="228:9" pos:end="228:55"><name pos:start="228:9" pos:end="228:33">createMulticastSocketImpl</name><argument_list pos:start="228:34" pos:end="228:55">(<argument pos:start="228:35" pos:end="228:37"><expr pos:start="228:35" pos:end="228:37"><name pos:start="228:35" pos:end="228:37">aFD</name></expr></argument>, <argument pos:start="228:40" pos:end="228:54"><expr pos:start="228:40" pos:end="228:54"><name pos:start="228:40" pos:end="228:54">preferIPv4Stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="231:5" pos:end="234:5"><type pos:start="231:5" pos:end="231:15"><specifier pos:start="231:5" pos:end="231:10">public</specifier> <name pos:start="231:12" pos:end="231:15">void</name></type> <name pos:start="231:17" pos:end="231:40">createServerStreamSocket</name><parameter_list pos:start="231:41" pos:end="232:36">(<parameter pos:start="231:42" pos:end="231:59"><decl pos:start="231:42" pos:end="231:59"><type pos:start="231:42" pos:end="231:59"><name pos:start="231:42" pos:end="231:55">FileDescriptor</name></type> <name pos:start="231:57" pos:end="231:59">aFD</name></decl></parameter>,
            <parameter pos:start="232:13" pos:end="232:35"><decl pos:start="232:13" pos:end="232:35"><type pos:start="232:13" pos:end="232:35"><name pos:start="232:13" pos:end="232:19">boolean</name></type> <name pos:start="232:21" pos:end="232:35">preferIPv4Stack</name></decl></parameter>)</parameter_list> <throws pos:start="232:38" pos:end="232:59">throws <argument pos:start="232:45" pos:end="232:59"><expr pos:start="232:45" pos:end="232:59"><name pos:start="232:45" pos:end="232:59">SocketException</name></expr></argument></throws> <block pos:start="232:61" pos:end="234:5">{<block_content pos:start="233:9" pos:end="233:59">
        <expr_stmt pos:start="233:9" pos:end="233:59"><expr pos:start="233:9" pos:end="233:58"><call pos:start="233:9" pos:end="233:58"><name pos:start="233:9" pos:end="233:36">createServerStreamSocketImpl</name><argument_list pos:start="233:37" pos:end="233:58">(<argument pos:start="233:38" pos:end="233:40"><expr pos:start="233:38" pos:end="233:40"><name pos:start="233:38" pos:end="233:40">aFD</name></expr></argument>, <argument pos:start="233:43" pos:end="233:57"><expr pos:start="233:43" pos:end="233:57"><name pos:start="233:43" pos:end="233:57">preferIPv4Stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="236:5" pos:end="239:5"><type pos:start="236:5" pos:end="236:14"><specifier pos:start="236:5" pos:end="236:10">public</specifier> <name pos:start="236:12" pos:end="236:14">int</name></type> <name pos:start="236:16" pos:end="236:28">receiveStream</name><parameter_list pos:start="236:29" pos:end="237:35">(<parameter pos:start="236:30" pos:end="236:47"><decl pos:start="236:30" pos:end="236:47"><type pos:start="236:30" pos:end="236:47"><name pos:start="236:30" pos:end="236:43">FileDescriptor</name></type> <name pos:start="236:45" pos:end="236:47">aFD</name></decl></parameter>, <parameter pos:start="236:50" pos:end="236:60"><decl pos:start="236:50" pos:end="236:60"><type pos:start="236:50" pos:end="236:60"><name pos:start="236:50" pos:end="236:55"><name pos:start="236:50" pos:end="236:53">byte</name><index pos:start="236:54" pos:end="236:55">[]</index></name></type> <name pos:start="236:57" pos:end="236:60">data</name></decl></parameter>, <parameter pos:start="236:63" pos:end="236:72"><decl pos:start="236:63" pos:end="236:72"><type pos:start="236:63" pos:end="236:72"><name pos:start="236:63" pos:end="236:65">int</name></type> <name pos:start="236:67" pos:end="236:72">offset</name></decl></parameter>,
            <parameter pos:start="237:13" pos:end="237:21"><decl pos:start="237:13" pos:end="237:21"><type pos:start="237:13" pos:end="237:21"><name pos:start="237:13" pos:end="237:15">int</name></type> <name pos:start="237:17" pos:end="237:21">count</name></decl></parameter>, <parameter pos:start="237:24" pos:end="237:34"><decl pos:start="237:24" pos:end="237:34"><type pos:start="237:24" pos:end="237:34"><name pos:start="237:24" pos:end="237:26">int</name></type> <name pos:start="237:28" pos:end="237:34">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="237:37" pos:end="237:54">throws <argument pos:start="237:44" pos:end="237:54"><expr pos:start="237:44" pos:end="237:54"><name pos:start="237:44" pos:end="237:54">IOException</name></expr></argument></throws> <block pos:start="237:56" pos:end="239:5">{<block_content pos:start="238:9" pos:end="238:68">
        <return pos:start="238:9" pos:end="238:68">return <expr pos:start="238:16" pos:end="238:67"><call pos:start="238:16" pos:end="238:67"><name pos:start="238:16" pos:end="238:32">receiveStreamImpl</name><argument_list pos:start="238:33" pos:end="238:67">(<argument pos:start="238:34" pos:end="238:36"><expr pos:start="238:34" pos:end="238:36"><name pos:start="238:34" pos:end="238:36">aFD</name></expr></argument>, <argument pos:start="238:39" pos:end="238:42"><expr pos:start="238:39" pos:end="238:42"><name pos:start="238:39" pos:end="238:42">data</name></expr></argument>, <argument pos:start="238:45" pos:end="238:50"><expr pos:start="238:45" pos:end="238:50"><name pos:start="238:45" pos:end="238:50">offset</name></expr></argument>, <argument pos:start="238:53" pos:end="238:57"><expr pos:start="238:53" pos:end="238:57"><name pos:start="238:53" pos:end="238:57">count</name></expr></argument>, <argument pos:start="238:60" pos:end="238:66"><expr pos:start="238:60" pos:end="238:66"><name pos:start="238:60" pos:end="238:66">timeout</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="241:5" pos:end="244:5"><type pos:start="241:5" pos:end="241:14"><specifier pos:start="241:5" pos:end="241:10">public</specifier> <name pos:start="241:12" pos:end="241:14">int</name></type> <name pos:start="241:16" pos:end="241:25">sendStream</name><parameter_list pos:start="241:26" pos:end="241:80">(<parameter pos:start="241:27" pos:end="241:43"><decl pos:start="241:27" pos:end="241:43"><type pos:start="241:27" pos:end="241:43"><name pos:start="241:27" pos:end="241:40">FileDescriptor</name></type> <name pos:start="241:42" pos:end="241:43">fd</name></decl></parameter>, <parameter pos:start="241:46" pos:end="241:56"><decl pos:start="241:46" pos:end="241:56"><type pos:start="241:46" pos:end="241:56"><name pos:start="241:46" pos:end="241:51"><name pos:start="241:46" pos:end="241:49">byte</name><index pos:start="241:50" pos:end="241:51">[]</index></name></type> <name pos:start="241:53" pos:end="241:56">data</name></decl></parameter>, <parameter pos:start="241:59" pos:end="241:68"><decl pos:start="241:59" pos:end="241:68"><type pos:start="241:59" pos:end="241:68"><name pos:start="241:59" pos:end="241:61">int</name></type> <name pos:start="241:63" pos:end="241:68">offset</name></decl></parameter>, <parameter pos:start="241:71" pos:end="241:79"><decl pos:start="241:71" pos:end="241:79"><type pos:start="241:71" pos:end="241:79"><name pos:start="241:71" pos:end="241:73">int</name></type> <name pos:start="241:75" pos:end="241:79">count</name></decl></parameter>)</parameter_list>
            <throws pos:start="242:13" pos:end="242:30">throws <argument pos:start="242:20" pos:end="242:30"><expr pos:start="242:20" pos:end="242:30"><name pos:start="242:20" pos:end="242:30">IOException</name></expr></argument></throws> <block pos:start="242:32" pos:end="244:5">{<block_content pos:start="243:9" pos:end="243:55">
        <return pos:start="243:9" pos:end="243:55">return <expr pos:start="243:16" pos:end="243:54"><call pos:start="243:16" pos:end="243:54"><name pos:start="243:16" pos:end="243:29">sendStreamImpl</name><argument_list pos:start="243:30" pos:end="243:54">(<argument pos:start="243:31" pos:end="243:32"><expr pos:start="243:31" pos:end="243:32"><name pos:start="243:31" pos:end="243:32">fd</name></expr></argument>, <argument pos:start="243:35" pos:end="243:38"><expr pos:start="243:35" pos:end="243:38"><name pos:start="243:35" pos:end="243:38">data</name></expr></argument>, <argument pos:start="243:41" pos:end="243:46"><expr pos:start="243:41" pos:end="243:46"><name pos:start="243:41" pos:end="243:46">offset</name></expr></argument>, <argument pos:start="243:49" pos:end="243:53"><expr pos:start="243:49" pos:end="243:53"><name pos:start="243:49" pos:end="243:53">count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="246:5" pos:end="248:5"><type pos:start="246:5" pos:end="246:15"><specifier pos:start="246:5" pos:end="246:10">public</specifier> <name pos:start="246:12" pos:end="246:15">void</name></type> <name pos:start="246:17" pos:end="246:29">shutdownInput</name><parameter_list pos:start="246:30" pos:end="246:56">(<parameter pos:start="246:31" pos:end="246:55"><decl pos:start="246:31" pos:end="246:55"><type pos:start="246:31" pos:end="246:44"><name pos:start="246:31" pos:end="246:44">FileDescriptor</name></type> <name pos:start="246:46" pos:end="246:55">descriptor</name></decl></parameter>)</parameter_list> <throws pos:start="246:58" pos:end="246:75">throws <argument pos:start="246:65" pos:end="246:75"><expr pos:start="246:65" pos:end="246:75"><name pos:start="246:65" pos:end="246:75">IOException</name></expr></argument></throws> <block pos:start="246:77" pos:end="248:5">{<block_content pos:start="247:9" pos:end="247:38">
        <expr_stmt pos:start="247:9" pos:end="247:38"><expr pos:start="247:9" pos:end="247:37"><call pos:start="247:9" pos:end="247:37"><name pos:start="247:9" pos:end="247:25">shutdownInputImpl</name><argument_list pos:start="247:26" pos:end="247:37">(<argument pos:start="247:27" pos:end="247:36"><expr pos:start="247:27" pos:end="247:36"><name pos:start="247:27" pos:end="247:36">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="250:5" pos:end="252:5"><type pos:start="250:5" pos:end="250:15"><specifier pos:start="250:5" pos:end="250:10">public</specifier> <name pos:start="250:12" pos:end="250:15">void</name></type> <name pos:start="250:17" pos:end="250:30">shutdownOutput</name><parameter_list pos:start="250:31" pos:end="250:57">(<parameter pos:start="250:32" pos:end="250:56"><decl pos:start="250:32" pos:end="250:56"><type pos:start="250:32" pos:end="250:45"><name pos:start="250:32" pos:end="250:45">FileDescriptor</name></type> <name pos:start="250:47" pos:end="250:56">descriptor</name></decl></parameter>)</parameter_list> <throws pos:start="250:59" pos:end="250:76">throws <argument pos:start="250:66" pos:end="250:76"><expr pos:start="250:66" pos:end="250:76"><name pos:start="250:66" pos:end="250:76">IOException</name></expr></argument></throws> <block pos:start="250:78" pos:end="252:5">{<block_content pos:start="251:9" pos:end="251:39">
        <expr_stmt pos:start="251:9" pos:end="251:39"><expr pos:start="251:9" pos:end="251:38"><call pos:start="251:9" pos:end="251:38"><name pos:start="251:9" pos:end="251:26">shutdownOutputImpl</name><argument_list pos:start="251:27" pos:end="251:38">(<argument pos:start="251:28" pos:end="251:37"><expr pos:start="251:28" pos:end="251:37"><name pos:start="251:28" pos:end="251:37">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="254:5" pos:end="256:5"><type pos:start="254:5" pos:end="254:18"><specifier pos:start="254:5" pos:end="254:10">public</specifier> <name pos:start="254:12" pos:end="254:18">boolean</name></type> <name pos:start="254:20" pos:end="254:37">supportsUrgentData</name><parameter_list pos:start="254:38" pos:end="254:56">(<parameter pos:start="254:39" pos:end="254:55"><decl pos:start="254:39" pos:end="254:55"><type pos:start="254:39" pos:end="254:52"><name pos:start="254:39" pos:end="254:52">FileDescriptor</name></type> <name pos:start="254:54" pos:end="254:55">fd</name></decl></parameter>)</parameter_list> <block pos:start="254:58" pos:end="256:5">{<block_content pos:start="255:9" pos:end="255:42">
        <return pos:start="255:9" pos:end="255:42">return <expr pos:start="255:16" pos:end="255:41"><call pos:start="255:16" pos:end="255:41"><name pos:start="255:16" pos:end="255:37">supportsUrgentDataImpl</name><argument_list pos:start="255:38" pos:end="255:41">(<argument pos:start="255:39" pos:end="255:40"><expr pos:start="255:39" pos:end="255:40"><name pos:start="255:39" pos:end="255:40">fd</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="258:5" pos:end="260:5"><type pos:start="258:5" pos:end="258:15"><specifier pos:start="258:5" pos:end="258:10">public</specifier> <name pos:start="258:12" pos:end="258:15">void</name></type> <name pos:start="258:17" pos:end="258:30">sendUrgentData</name><parameter_list pos:start="258:31" pos:end="258:61">(<parameter pos:start="258:32" pos:end="258:48"><decl pos:start="258:32" pos:end="258:48"><type pos:start="258:32" pos:end="258:48"><name pos:start="258:32" pos:end="258:45">FileDescriptor</name></type> <name pos:start="258:47" pos:end="258:48">fd</name></decl></parameter>, <parameter pos:start="258:51" pos:end="258:60"><decl pos:start="258:51" pos:end="258:60"><type pos:start="258:51" pos:end="258:60"><name pos:start="258:51" pos:end="258:54">byte</name></type> <name pos:start="258:56" pos:end="258:60">value</name></decl></parameter>)</parameter_list> <block pos:start="258:63" pos:end="260:5">{<block_content pos:start="259:9" pos:end="259:38">
        <expr_stmt pos:start="259:9" pos:end="259:38"><expr pos:start="259:9" pos:end="259:37"><call pos:start="259:9" pos:end="259:37"><name pos:start="259:9" pos:end="259:26">sendUrgentDataImpl</name><argument_list pos:start="259:27" pos:end="259:37">(<argument pos:start="259:28" pos:end="259:29"><expr pos:start="259:28" pos:end="259:29"><name pos:start="259:28" pos:end="259:29">fd</name></expr></argument>, <argument pos:start="259:32" pos:end="259:36"><expr pos:start="259:32" pos:end="259:36"><name pos:start="259:32" pos:end="259:36">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="262:5" pos:end="264:5"><type pos:start="262:5" pos:end="262:14"><specifier pos:start="262:5" pos:end="262:10">public</specifier> <name pos:start="262:12" pos:end="262:14">int</name></type> <name pos:start="262:16" pos:end="262:30">availableStream</name><parameter_list pos:start="262:31" pos:end="262:50">(<parameter pos:start="262:32" pos:end="262:49"><decl pos:start="262:32" pos:end="262:49"><type pos:start="262:32" pos:end="262:45"><name pos:start="262:32" pos:end="262:45">FileDescriptor</name></type> <name pos:start="262:47" pos:end="262:49">aFD</name></decl></parameter>)</parameter_list> <throws pos:start="262:52" pos:end="262:73">throws <argument pos:start="262:59" pos:end="262:73"><expr pos:start="262:59" pos:end="262:73"><name pos:start="262:59" pos:end="262:73">SocketException</name></expr></argument></throws> <block pos:start="262:75" pos:end="264:5">{<block_content pos:start="263:9" pos:end="263:40">
        <return pos:start="263:9" pos:end="263:40">return <expr pos:start="263:16" pos:end="263:39"><call pos:start="263:16" pos:end="263:39"><name pos:start="263:16" pos:end="263:34">availableStreamImpl</name><argument_list pos:start="263:35" pos:end="263:39">(<argument pos:start="263:36" pos:end="263:38"><expr pos:start="263:36" pos:end="263:38"><name pos:start="263:36" pos:end="263:38">aFD</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" pos:start="266:5" pos:end="266:28">// BEGIN android-removed</comment>
    <comment type="line" pos:start="267:5" pos:end="267:62">// public void acceptStreamSocket(FileDescriptor fdServer,</comment>
    <comment type="line" pos:start="268:5" pos:end="268:77">//         SocketImpl newSocket, FileDescriptor fdnewSocket, int timeout)</comment>
    <comment type="line" pos:start="269:5" pos:end="269:35">//         throws IOException {</comment>
    <comment type="line" pos:start="270:5" pos:end="270:77">//     acceptStreamSocketImpl(fdServer, newSocket, fdnewSocket, timeout);</comment>
    <comment type="line" pos:start="271:5" pos:end="271:8">// }</comment>
    <comment type="line" pos:start="272:5" pos:end="272:7">// </comment>
    <comment type="line" pos:start="273:5" pos:end="273:82">// public void createStreamSocket(FileDescriptor aFD, boolean preferIPv4Stack)</comment>
    <comment type="line" pos:start="274:5" pos:end="274:39">//         throws SocketException {</comment>
    <comment type="line" pos:start="275:5" pos:end="275:56">//     createStreamSocketImpl(aFD, preferIPv4Stack);</comment>
    <comment type="line" pos:start="276:5" pos:end="276:8">// }</comment>
    <comment type="line" pos:start="277:5" pos:end="277:26">// END android-removed</comment>

    <function pos:start="279:5" pos:end="282:5"><type pos:start="279:5" pos:end="279:15"><specifier pos:start="279:5" pos:end="279:10">public</specifier> <name pos:start="279:12" pos:end="279:15">void</name></type> <name pos:start="279:17" pos:end="279:34">listenStreamSocket</name><parameter_list pos:start="279:35" pos:end="279:67">(<parameter pos:start="279:36" pos:end="279:53"><decl pos:start="279:36" pos:end="279:53"><type pos:start="279:36" pos:end="279:53"><name pos:start="279:36" pos:end="279:49">FileDescriptor</name></type> <name pos:start="279:51" pos:end="279:53">aFD</name></decl></parameter>, <parameter pos:start="279:56" pos:end="279:66"><decl pos:start="279:56" pos:end="279:66"><type pos:start="279:56" pos:end="279:66"><name pos:start="279:56" pos:end="279:58">int</name></type> <name pos:start="279:60" pos:end="279:66">backlog</name></decl></parameter>)</parameter_list>
            <throws pos:start="280:13" pos:end="280:34">throws <argument pos:start="280:20" pos:end="280:34"><expr pos:start="280:20" pos:end="280:34"><name pos:start="280:20" pos:end="280:34">SocketException</name></expr></argument></throws> <block pos:start="280:36" pos:end="282:5">{<block_content pos:start="281:9" pos:end="281:45">
        <expr_stmt pos:start="281:9" pos:end="281:45"><expr pos:start="281:9" pos:end="281:44"><call pos:start="281:9" pos:end="281:44"><name pos:start="281:9" pos:end="281:30">listenStreamSocketImpl</name><argument_list pos:start="281:31" pos:end="281:44">(<argument pos:start="281:32" pos:end="281:34"><expr pos:start="281:32" pos:end="281:34"><name pos:start="281:32" pos:end="281:34">aFD</name></expr></argument>, <argument pos:start="281:37" pos:end="281:43"><expr pos:start="281:37" pos:end="281:43"><name pos:start="281:37" pos:end="281:43">backlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="line" pos:start="284:5" pos:end="284:28">// BEGIN android-removed</comment>
    <comment type="line" pos:start="285:5" pos:end="285:63">// public boolean isReachableByICMP(final InetAddress dest,</comment>
    <comment type="line" pos:start="286:5" pos:end="286:70">//         InetAddress source, final int ttl, final int timeout) {</comment>
    <comment type="line" pos:start="287:5" pos:end="287:80">//     return INETADDR_REACHABLE == isReachableByICMPImpl(dest, source, ttl,</comment>
    <comment type="line" pos:start="288:5" pos:end="288:28">//             timeout);</comment>
    <comment type="line" pos:start="289:5" pos:end="289:8">// }</comment>
    <comment type="line" pos:start="290:5" pos:end="290:26">// END android-removed</comment>

    <comment type="block" pos:start="292:5" pos:end="302:7">/*
     * 
     * @param 
     *      readChannels all channels interested in read and accept 
     * @param
     *      writeChannels all channels interested in write and connect 
     * @param timeout
     *      timeout in millis @return a set of channels that are ready for operation
     * @throws 
     *      SocketException @return int array, each int approve one of the     * channel if OK
     */</comment>

    <function pos:start="304:5" pos:end="327:5"><type pos:start="304:5" pos:end="304:16"><specifier pos:start="304:5" pos:end="304:10">public</specifier> <name pos:start="304:12" pos:end="304:16"><name pos:start="304:12" pos:end="304:14">int</name><index pos:start="304:15" pos:end="304:16">[]</index></name></type> <name pos:start="304:18" pos:end="304:23">select</name><parameter_list pos:start="304:24" pos:end="305:52">(<parameter pos:start="304:25" pos:end="304:48"><decl pos:start="304:25" pos:end="304:48"><type pos:start="304:25" pos:end="304:48"><name pos:start="304:25" pos:end="304:40"><name pos:start="304:25" pos:end="304:38">FileDescriptor</name><index pos:start="304:39" pos:end="304:40">[]</index></name></type> <name pos:start="304:42" pos:end="304:48">readFDs</name></decl></parameter>,
            <parameter pos:start="305:13" pos:end="305:37"><decl pos:start="305:13" pos:end="305:37"><type pos:start="305:13" pos:end="305:37"><name pos:start="305:13" pos:end="305:28"><name pos:start="305:13" pos:end="305:26">FileDescriptor</name><index pos:start="305:27" pos:end="305:28">[]</index></name></type> <name pos:start="305:30" pos:end="305:37">writeFDs</name></decl></parameter>, <parameter pos:start="305:40" pos:end="305:51"><decl pos:start="305:40" pos:end="305:51"><type pos:start="305:40" pos:end="305:51"><name pos:start="305:40" pos:end="305:43">long</name></type> <name pos:start="305:45" pos:end="305:51">timeout</name></decl></parameter>)</parameter_list>
            <throws pos:start="306:13" pos:end="306:34">throws <argument pos:start="306:20" pos:end="306:34"><expr pos:start="306:20" pos:end="306:34"><name pos:start="306:20" pos:end="306:34">SocketException</name></expr></argument></throws> <block pos:start="306:36" pos:end="327:5">{<block_content pos:start="307:9" pos:end="325:36">
        <decl_stmt pos:start="307:9" pos:end="307:39"><decl pos:start="307:9" pos:end="307:38"><type pos:start="307:9" pos:end="307:11"><name pos:start="307:9" pos:end="307:11">int</name></type> <name pos:start="307:13" pos:end="307:21">countRead</name> <init pos:start="307:23" pos:end="307:38">= <expr pos:start="307:25" pos:end="307:38"><name pos:start="307:25" pos:end="307:38"><name pos:start="307:25" pos:end="307:31">readFDs</name><operator pos:start="307:32" pos:end="307:32">.</operator><name pos:start="307:33" pos:end="307:38">length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="308:9" pos:end="308:41"><decl pos:start="308:9" pos:end="308:40"><type pos:start="308:9" pos:end="308:11"><name pos:start="308:9" pos:end="308:11">int</name></type> <name pos:start="308:13" pos:end="308:22">countWrite</name> <init pos:start="308:24" pos:end="308:40">= <expr pos:start="308:26" pos:end="308:40"><name pos:start="308:26" pos:end="308:40"><name pos:start="308:26" pos:end="308:33">writeFDs</name><operator pos:start="308:34" pos:end="308:34">.</operator><name pos:start="308:35" pos:end="308:40">length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="309:9" pos:end="309:23"><decl pos:start="309:9" pos:end="309:22"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:18">result</name> <init pos:start="309:20" pos:end="309:22">= <expr pos:start="309:22" pos:end="309:22"><literal type="number" pos:start="309:22" pos:end="309:22">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="310:9" pos:end="312:9"><if pos:start="310:9" pos:end="312:9">if <condition pos:start="310:12" pos:end="310:40">(<expr pos:start="310:13" pos:end="310:39"><literal type="number" pos:start="310:13" pos:end="310:13">0</literal> <operator pos:start="310:15" pos:end="310:16">==</operator> <name pos:start="310:18" pos:end="310:26">countRead</name> <operator pos:start="310:28" pos:end="310:28">+</operator> <name pos:start="310:30" pos:end="310:39">countWrite</name></expr>)</condition> <block pos:start="310:42" pos:end="312:9">{<block_content pos:start="311:13" pos:end="311:32">
            <return pos:start="311:13" pos:end="311:32">return <expr pos:start="311:20" pos:end="311:31"><operator pos:start="311:20" pos:end="311:20">(</operator><operator pos:start="311:21" pos:end="311:23">new</operator> <name pos:start="311:25" pos:end="311:30"><name pos:start="311:25" pos:end="311:27">int</name><index pos:start="311:28" pos:end="311:30">[<expr pos:start="311:29" pos:end="311:29"><literal type="number" pos:start="311:29" pos:end="311:29">0</literal></expr>]</index></name><operator pos:start="311:31" pos:end="311:31">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt pos:start="313:9" pos:end="313:54"><decl pos:start="313:9" pos:end="313:53"><type pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:11">int</name><index pos:start="313:12" pos:end="313:13">[]</index></name></type> <name pos:start="313:15" pos:end="313:19">flags</name> <init pos:start="313:21" pos:end="313:53">= <expr pos:start="313:23" pos:end="313:53"><operator pos:start="313:23" pos:end="313:25">new</operator> <name pos:start="313:27" pos:end="313:53"><name pos:start="313:27" pos:end="313:29">int</name><index pos:start="313:30" pos:end="313:53">[<expr pos:start="313:31" pos:end="313:52"><name pos:start="313:31" pos:end="313:39">countRead</name> <operator pos:start="313:41" pos:end="313:41">+</operator> <name pos:start="313:43" pos:end="313:52">countWrite</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="315:9" pos:end="315:35">// handle timeout in native</comment>
        <expr_stmt pos:start="316:9" pos:end="317:25"><expr pos:start="316:9" pos:end="317:24"><name pos:start="316:9" pos:end="316:14">result</name> <operator pos:start="316:16" pos:end="316:16">=</operator> <call pos:start="316:18" pos:end="317:24"><name pos:start="316:18" pos:end="316:27">selectImpl</name><argument_list pos:start="316:28" pos:end="317:24">(<argument pos:start="316:29" pos:end="316:35"><expr pos:start="316:29" pos:end="316:35"><name pos:start="316:29" pos:end="316:35">readFDs</name></expr></argument>, <argument pos:start="316:38" pos:end="316:45"><expr pos:start="316:38" pos:end="316:45"><name pos:start="316:38" pos:end="316:45">writeFDs</name></expr></argument>, <argument pos:start="316:48" pos:end="316:56"><expr pos:start="316:48" pos:end="316:56"><name pos:start="316:48" pos:end="316:56">countRead</name></expr></argument>, <argument pos:start="316:59" pos:end="316:68"><expr pos:start="316:59" pos:end="316:68"><name pos:start="316:59" pos:end="316:68">countWrite</name></expr></argument>, <argument pos:start="316:71" pos:end="316:75"><expr pos:start="316:71" pos:end="316:75"><name pos:start="316:71" pos:end="316:75">flags</name></expr></argument>,
                <argument pos:start="317:17" pos:end="317:23"><expr pos:start="317:17" pos:end="317:23"><name pos:start="317:17" pos:end="317:23">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="321:9"><if pos:start="319:9" pos:end="321:9">if <condition pos:start="319:12" pos:end="319:24">(<expr pos:start="319:13" pos:end="319:23"><literal type="number" pos:start="319:13" pos:end="319:13">0</literal> <operator pos:start="319:15" pos:end="319:16">&lt;=</operator> <name pos:start="319:18" pos:end="319:23">result</name></expr>)</condition> <block pos:start="319:26" pos:end="321:9">{<block_content pos:start="320:13" pos:end="320:25">
            <return pos:start="320:13" pos:end="320:25">return <expr pos:start="320:20" pos:end="320:24"><name pos:start="320:20" pos:end="320:24">flags</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="322:9" pos:end="324:9"><if pos:start="322:9" pos:end="324:9">if <condition pos:start="322:12" pos:end="322:47">(<expr pos:start="322:13" pos:end="322:46"><name pos:start="322:13" pos:end="322:36">ERRORCODE_SOCKET_TIMEOUT</name> <operator pos:start="322:38" pos:end="322:39">==</operator> <name pos:start="322:41" pos:end="322:46">result</name></expr>)</condition> <block pos:start="322:49" pos:end="324:9">{<block_content pos:start="323:13" pos:end="323:30">
            <return pos:start="323:13" pos:end="323:30">return <expr pos:start="323:20" pos:end="323:29"><operator pos:start="323:20" pos:end="323:22">new</operator> <name pos:start="323:24" pos:end="323:29"><name pos:start="323:24" pos:end="323:26">int</name><index pos:start="323:27" pos:end="323:29">[<expr pos:start="323:28" pos:end="323:28"><literal type="number" pos:start="323:28" pos:end="323:28">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw pos:start="325:9" pos:end="325:36">throw <expr pos:start="325:15" pos:end="325:35"><operator pos:start="325:15" pos:end="325:17">new</operator> <call pos:start="325:19" pos:end="325:35"><name pos:start="325:19" pos:end="325:33">SocketException</name><argument_list pos:start="325:34" pos:end="325:35">()</argument_list></call></expr>;</throw>

    </block_content>}</block></function>

    <function pos:start="329:5" pos:end="332:5"><type pos:start="329:5" pos:end="329:22"><specifier pos:start="329:5" pos:end="329:10">public</specifier> <name pos:start="329:12" pos:end="329:22">InetAddress</name></type> <name pos:start="329:24" pos:end="329:44">getSocketLocalAddress</name><parameter_list pos:start="329:45" pos:end="330:40">(<parameter pos:start="329:46" pos:end="329:63"><decl pos:start="329:46" pos:end="329:63"><type pos:start="329:46" pos:end="329:63"><name pos:start="329:46" pos:end="329:59">FileDescriptor</name></type> <name pos:start="329:61" pos:end="329:63">aFD</name></decl></parameter>,
            <parameter pos:start="330:13" pos:end="330:39"><decl pos:start="330:13" pos:end="330:39"><type pos:start="330:13" pos:end="330:39"><name pos:start="330:13" pos:end="330:19">boolean</name></type> <name pos:start="330:21" pos:end="330:39">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <block pos:start="330:42" pos:end="332:5">{<block_content pos:start="331:9" pos:end="331:67">
        <return pos:start="331:9" pos:end="331:67">return <expr pos:start="331:16" pos:end="331:66"><call pos:start="331:16" pos:end="331:66"><name pos:start="331:16" pos:end="331:40">getSocketLocalAddressImpl</name><argument_list pos:start="331:41" pos:end="331:66">(<argument pos:start="331:42" pos:end="331:44"><expr pos:start="331:42" pos:end="331:44"><name pos:start="331:42" pos:end="331:44">aFD</name></expr></argument>, <argument pos:start="331:47" pos:end="331:65"><expr pos:start="331:47" pos:end="331:65"><name pos:start="331:47" pos:end="331:65">preferIPv6Addresses</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="334:5" pos:end="340:7">/*
     * Query the IP stack for the local port to which this socket is bound.
     * 
     * @param aFD the socket descriptor @param preferIPv6Addresses address
     * preference for nodes that support both IPv4 and IPv6 @return int the
     * local port to which the socket is bound
     */</comment>
    <function pos:start="341:5" pos:end="344:5"><type pos:start="341:5" pos:end="341:14"><specifier pos:start="341:5" pos:end="341:10">public</specifier> <name pos:start="341:12" pos:end="341:14">int</name></type> <name pos:start="341:16" pos:end="341:33">getSocketLocalPort</name><parameter_list pos:start="341:34" pos:end="342:40">(<parameter pos:start="341:35" pos:end="341:52"><decl pos:start="341:35" pos:end="341:52"><type pos:start="341:35" pos:end="341:52"><name pos:start="341:35" pos:end="341:48">FileDescriptor</name></type> <name pos:start="341:50" pos:end="341:52">aFD</name></decl></parameter>,
            <parameter pos:start="342:13" pos:end="342:39"><decl pos:start="342:13" pos:end="342:39"><type pos:start="342:13" pos:end="342:39"><name pos:start="342:13" pos:end="342:19">boolean</name></type> <name pos:start="342:21" pos:end="342:39">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <block pos:start="342:42" pos:end="344:5">{<block_content pos:start="343:9" pos:end="343:64">
        <return pos:start="343:9" pos:end="343:64">return <expr pos:start="343:16" pos:end="343:63"><call pos:start="343:16" pos:end="343:63"><name pos:start="343:16" pos:end="343:37">getSocketLocalPortImpl</name><argument_list pos:start="343:38" pos:end="343:63">(<argument pos:start="343:39" pos:end="343:41"><expr pos:start="343:39" pos:end="343:41"><name pos:start="343:39" pos:end="343:41">aFD</name></expr></argument>, <argument pos:start="343:44" pos:end="343:62"><expr pos:start="343:44" pos:end="343:62"><name pos:start="343:44" pos:end="343:62">preferIPv6Addresses</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="346:5" pos:end="353:7">/*
     * Query the IP stack for the nominated socket option.
     * 
     * @param aFD the socket descriptor @param opt the socket option type
     * @return the nominated socket option value
     * 
     * @throws SocketException if the option is invalid
     */</comment>
    <function pos:start="354:5" pos:end="357:5"><type pos:start="354:5" pos:end="354:17"><specifier pos:start="354:5" pos:end="354:10">public</specifier> <name pos:start="354:12" pos:end="354:17">Object</name></type> <name pos:start="354:19" pos:end="354:33">getSocketOption</name><parameter_list pos:start="354:34" pos:end="354:62">(<parameter pos:start="354:35" pos:end="354:52"><decl pos:start="354:35" pos:end="354:52"><type pos:start="354:35" pos:end="354:52"><name pos:start="354:35" pos:end="354:48">FileDescriptor</name></type> <name pos:start="354:50" pos:end="354:52">aFD</name></decl></parameter>, <parameter pos:start="354:55" pos:end="354:61"><decl pos:start="354:55" pos:end="354:61"><type pos:start="354:55" pos:end="354:61"><name pos:start="354:55" pos:end="354:57">int</name></type> <name pos:start="354:59" pos:end="354:61">opt</name></decl></parameter>)</parameter_list>
            <throws pos:start="355:13" pos:end="355:34">throws <argument pos:start="355:20" pos:end="355:34"><expr pos:start="355:20" pos:end="355:34"><name pos:start="355:20" pos:end="355:34">SocketException</name></expr></argument></throws> <block pos:start="355:36" pos:end="357:5">{<block_content pos:start="356:9" pos:end="356:45">
        <return pos:start="356:9" pos:end="356:45">return <expr pos:start="356:16" pos:end="356:44"><call pos:start="356:16" pos:end="356:44"><name pos:start="356:16" pos:end="356:34">getSocketOptionImpl</name><argument_list pos:start="356:35" pos:end="356:44">(<argument pos:start="356:36" pos:end="356:38"><expr pos:start="356:36" pos:end="356:38"><name pos:start="356:36" pos:end="356:38">aFD</name></expr></argument>, <argument pos:start="356:41" pos:end="356:43"><expr pos:start="356:41" pos:end="356:43"><name pos:start="356:41" pos:end="356:43">opt</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="359:5" pos:end="366:7">/*
     * Set the nominated socket option in the IP stack.
     * 
     * @param aFD the socket descriptor @param opt the option selector @param
     * optVal the nominated option value
     * 
     * @throws SocketException if the option is invalid or cannot be set
     */</comment>
    <function pos:start="367:5" pos:end="370:5"><type pos:start="367:5" pos:end="367:15"><specifier pos:start="367:5" pos:end="367:10">public</specifier> <name pos:start="367:12" pos:end="367:15">void</name></type> <name pos:start="367:17" pos:end="367:31">setSocketOption</name><parameter_list pos:start="367:32" pos:end="367:75">(<parameter pos:start="367:33" pos:end="367:50"><decl pos:start="367:33" pos:end="367:50"><type pos:start="367:33" pos:end="367:50"><name pos:start="367:33" pos:end="367:46">FileDescriptor</name></type> <name pos:start="367:48" pos:end="367:50">aFD</name></decl></parameter>, <parameter pos:start="367:53" pos:end="367:59"><decl pos:start="367:53" pos:end="367:59"><type pos:start="367:53" pos:end="367:59"><name pos:start="367:53" pos:end="367:55">int</name></type> <name pos:start="367:57" pos:end="367:59">opt</name></decl></parameter>, <parameter pos:start="367:62" pos:end="367:74"><decl pos:start="367:62" pos:end="367:74"><type pos:start="367:62" pos:end="367:74"><name pos:start="367:62" pos:end="367:67">Object</name></type> <name pos:start="367:69" pos:end="367:74">optVal</name></decl></parameter>)</parameter_list>
            <throws pos:start="368:13" pos:end="368:34">throws <argument pos:start="368:20" pos:end="368:34"><expr pos:start="368:20" pos:end="368:34"><name pos:start="368:20" pos:end="368:34">SocketException</name></expr></argument></throws> <block pos:start="368:36" pos:end="370:5">{<block_content pos:start="369:9" pos:end="369:46">
        <expr_stmt pos:start="369:9" pos:end="369:46"><expr pos:start="369:9" pos:end="369:45"><call pos:start="369:9" pos:end="369:45"><name pos:start="369:9" pos:end="369:27">setSocketOptionImpl</name><argument_list pos:start="369:28" pos:end="369:45">(<argument pos:start="369:29" pos:end="369:31"><expr pos:start="369:29" pos:end="369:31"><name pos:start="369:29" pos:end="369:31">aFD</name></expr></argument>, <argument pos:start="369:34" pos:end="369:36"><expr pos:start="369:34" pos:end="369:36"><name pos:start="369:34" pos:end="369:36">opt</name></expr></argument>, <argument pos:start="369:39" pos:end="369:44"><expr pos:start="369:39" pos:end="369:44"><name pos:start="369:39" pos:end="369:44">optVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="372:5" pos:end="374:5"><type pos:start="372:5" pos:end="372:14"><specifier pos:start="372:5" pos:end="372:10">public</specifier> <name pos:start="372:12" pos:end="372:14">int</name></type> <name pos:start="372:16" pos:end="372:29">getSocketFlags</name><parameter_list pos:start="372:30" pos:end="372:31">()</parameter_list> <block pos:start="372:33" pos:end="374:5">{<block_content pos:start="373:9" pos:end="373:36">
        <return pos:start="373:9" pos:end="373:36">return <expr pos:start="373:16" pos:end="373:35"><call pos:start="373:16" pos:end="373:35"><name pos:start="373:16" pos:end="373:33">getSocketFlagsImpl</name><argument_list pos:start="373:34" pos:end="373:35">()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="376:5" pos:end="380:7">/*
     * Close the socket in the IP stack.
     * 
     * @param aFD the socket descriptor
     */</comment>
    <function pos:start="381:5" pos:end="383:5"><type pos:start="381:5" pos:end="381:15"><specifier pos:start="381:5" pos:end="381:10">public</specifier> <name pos:start="381:12" pos:end="381:15">void</name></type> <name pos:start="381:17" pos:end="381:27">socketClose</name><parameter_list pos:start="381:28" pos:end="381:47">(<parameter pos:start="381:29" pos:end="381:46"><decl pos:start="381:29" pos:end="381:46"><type pos:start="381:29" pos:end="381:42"><name pos:start="381:29" pos:end="381:42">FileDescriptor</name></type> <name pos:start="381:44" pos:end="381:46">aFD</name></decl></parameter>)</parameter_list> <throws pos:start="381:49" pos:end="381:66">throws <argument pos:start="381:56" pos:end="381:66"><expr pos:start="381:56" pos:end="381:66"><name pos:start="381:56" pos:end="381:66">IOException</name></expr></argument></throws> <block pos:start="381:68" pos:end="383:5">{<block_content pos:start="382:9" pos:end="382:29">
        <expr_stmt pos:start="382:9" pos:end="382:29"><expr pos:start="382:9" pos:end="382:28"><call pos:start="382:9" pos:end="382:28"><name pos:start="382:9" pos:end="382:23">socketCloseImpl</name><argument_list pos:start="382:24" pos:end="382:28">(<argument pos:start="382:25" pos:end="382:27"><expr pos:start="382:25" pos:end="382:27"><name pos:start="382:25" pos:end="382:27">aFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="385:5" pos:end="387:5"><type pos:start="385:5" pos:end="385:22"><specifier pos:start="385:5" pos:end="385:10">public</specifier> <name pos:start="385:12" pos:end="385:22">InetAddress</name></type> <name pos:start="385:24" pos:end="385:36">getHostByAddr</name><parameter_list pos:start="385:37" pos:end="385:49">(<parameter pos:start="385:38" pos:end="385:48"><decl pos:start="385:38" pos:end="385:48"><type pos:start="385:38" pos:end="385:43"><name pos:start="385:38" pos:end="385:43"><name pos:start="385:38" pos:end="385:41">byte</name><index pos:start="385:42" pos:end="385:43">[]</index></name></type> <name pos:start="385:45" pos:end="385:48">addr</name></decl></parameter>)</parameter_list> <throws pos:start="385:51" pos:end="385:77">throws <argument pos:start="385:58" pos:end="385:77"><expr pos:start="385:58" pos:end="385:77"><name pos:start="385:58" pos:end="385:77">UnknownHostException</name></expr></argument></throws> <block pos:start="385:79" pos:end="387:5">{<block_content pos:start="386:9" pos:end="386:39">
        <return pos:start="386:9" pos:end="386:39">return <expr pos:start="386:16" pos:end="386:38"><call pos:start="386:16" pos:end="386:38"><name pos:start="386:16" pos:end="386:32">getHostByAddrImpl</name><argument_list pos:start="386:33" pos:end="386:38">(<argument pos:start="386:34" pos:end="386:37"><expr pos:start="386:34" pos:end="386:37"><name pos:start="386:34" pos:end="386:37">addr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="389:5" pos:end="392:5"><type pos:start="389:5" pos:end="389:22"><specifier pos:start="389:5" pos:end="389:10">public</specifier> <name pos:start="389:12" pos:end="389:22">InetAddress</name></type> <name pos:start="389:24" pos:end="389:36">getHostByName</name><parameter_list pos:start="389:37" pos:end="389:78">(<parameter pos:start="389:38" pos:end="389:48"><decl pos:start="389:38" pos:end="389:48"><type pos:start="389:38" pos:end="389:48"><name pos:start="389:38" pos:end="389:43">String</name></type> <name pos:start="389:45" pos:end="389:48">addr</name></decl></parameter>, <parameter pos:start="389:51" pos:end="389:77"><decl pos:start="389:51" pos:end="389:77"><type pos:start="389:51" pos:end="389:77"><name pos:start="389:51" pos:end="389:57">boolean</name></type> <name pos:start="389:59" pos:end="389:77">preferIPv6Addresses</name></decl></parameter>)</parameter_list>
            <throws pos:start="390:13" pos:end="390:39">throws <argument pos:start="390:20" pos:end="390:39"><expr pos:start="390:20" pos:end="390:39"><name pos:start="390:20" pos:end="390:39">UnknownHostException</name></expr></argument></throws> <block pos:start="390:41" pos:end="392:5">{<block_content pos:start="391:9" pos:end="391:60">
        <return pos:start="391:9" pos:end="391:60">return <expr pos:start="391:16" pos:end="391:59"><call pos:start="391:16" pos:end="391:59"><name pos:start="391:16" pos:end="391:32">getHostByNameImpl</name><argument_list pos:start="391:33" pos:end="391:59">(<argument pos:start="391:34" pos:end="391:37"><expr pos:start="391:34" pos:end="391:37"><name pos:start="391:34" pos:end="391:37">addr</name></expr></argument>, <argument pos:start="391:40" pos:end="391:58"><expr pos:start="391:40" pos:end="391:58"><name pos:start="391:40" pos:end="391:58">preferIPv6Addresses</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="394:5" pos:end="396:5"><type pos:start="394:5" pos:end="394:15"><specifier pos:start="394:5" pos:end="394:10">public</specifier> <name pos:start="394:12" pos:end="394:15">void</name></type> <name pos:start="394:17" pos:end="394:30">setInetAddress</name><parameter_list pos:start="394:31" pos:end="394:66">(<parameter pos:start="394:32" pos:end="394:49"><decl pos:start="394:32" pos:end="394:49"><type pos:start="394:32" pos:end="394:49"><name pos:start="394:32" pos:end="394:42">InetAddress</name></type> <name pos:start="394:44" pos:end="394:49">sender</name></decl></parameter>, <parameter pos:start="394:52" pos:end="394:65"><decl pos:start="394:52" pos:end="394:65"><type pos:start="394:52" pos:end="394:65"><name pos:start="394:52" pos:end="394:57"><name pos:start="394:52" pos:end="394:55">byte</name><index pos:start="394:56" pos:end="394:57">[]</index></name></type> <name pos:start="394:59" pos:end="394:65">address</name></decl></parameter>)</parameter_list> <block pos:start="394:68" pos:end="396:5">{<block_content pos:start="395:9" pos:end="395:44">
        <expr_stmt pos:start="395:9" pos:end="395:44"><expr pos:start="395:9" pos:end="395:43"><call pos:start="395:9" pos:end="395:43"><name pos:start="395:9" pos:end="395:26">setInetAddressImpl</name><argument_list pos:start="395:27" pos:end="395:43">(<argument pos:start="395:28" pos:end="395:33"><expr pos:start="395:28" pos:end="395:33"><name pos:start="395:28" pos:end="395:33">sender</name></expr></argument>, <argument pos:start="395:36" pos:end="395:42"><expr pos:start="395:36" pos:end="395:42"><name pos:start="395:36" pos:end="395:42">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line" pos:start="398:5" pos:end="398:58">// ---------------------------------------------------</comment>
    <comment type="line" pos:start="399:5" pos:end="399:19">// Native Codes</comment>
    <comment type="line" pos:start="400:5" pos:end="400:58">// ---------------------------------------------------</comment>

    <function_decl pos:start="402:5" pos:end="403:37"><type pos:start="402:5" pos:end="402:22"><specifier pos:start="402:5" pos:end="402:10">static</specifier> <specifier pos:start="402:12" pos:end="402:17">native</specifier> <name pos:start="402:19" pos:end="402:22">void</name></type> <name pos:start="402:24" pos:end="402:39">createSocketImpl</name><parameter_list pos:start="402:40" pos:end="403:36">(<parameter pos:start="402:41" pos:end="402:57"><decl pos:start="402:41" pos:end="402:57"><type pos:start="402:41" pos:end="402:57"><name pos:start="402:41" pos:end="402:54">FileDescriptor</name></type> <name pos:start="402:56" pos:end="402:57">fd</name></decl></parameter>,
            <parameter pos:start="403:13" pos:end="403:35"><decl pos:start="403:13" pos:end="403:35"><type pos:start="403:13" pos:end="403:35"><name pos:start="403:13" pos:end="403:19">boolean</name></type> <name pos:start="403:21" pos:end="403:35">preferIPv4Stack</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" pos:start="405:5" pos:end="412:7">/*
     * Allocate a datagram socket in the IP stack. The socket is associated with
     * the &lt;code&gt;aFD&lt;/code&gt;.
     * 
     * @param aFD the FileDescriptor to associate with the socket @param
     * preferIPv4Stack IP stack preference if underlying platform is V4/V6
     * @exception SocketException upon an allocation error
     */</comment>
    <function_decl pos:start="413:5" pos:end="414:60"><type pos:start="413:5" pos:end="413:22"><specifier pos:start="413:5" pos:end="413:10">static</specifier> <specifier pos:start="413:12" pos:end="413:17">native</specifier> <name pos:start="413:19" pos:end="413:22">void</name></type> <name pos:start="413:24" pos:end="413:47">createDatagramSocketImpl</name><parameter_list pos:start="413:48" pos:end="414:36">(<parameter pos:start="413:49" pos:end="413:66"><decl pos:start="413:49" pos:end="413:66"><type pos:start="413:49" pos:end="413:66"><name pos:start="413:49" pos:end="413:62">FileDescriptor</name></type> <name pos:start="413:64" pos:end="413:66">aFD</name></decl></parameter>,
            <parameter pos:start="414:13" pos:end="414:35"><decl pos:start="414:13" pos:end="414:35"><type pos:start="414:13" pos:end="414:35"><name pos:start="414:13" pos:end="414:19">boolean</name></type> <name pos:start="414:21" pos:end="414:35">preferIPv4Stack</name></decl></parameter>)</parameter_list> <throws pos:start="414:38" pos:end="414:59">throws <argument pos:start="414:45" pos:end="414:59"><expr pos:start="414:45" pos:end="414:59"><name pos:start="414:45" pos:end="414:59">SocketException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="416:5" pos:end="417:67"><type pos:start="416:5" pos:end="416:21"><specifier pos:start="416:5" pos:end="416:10">static</specifier> <specifier pos:start="416:12" pos:end="416:17">native</specifier> <name pos:start="416:19" pos:end="416:21">int</name></type> <name pos:start="416:23" pos:end="416:36">readSocketImpl</name><parameter_list pos:start="416:37" pos:end="417:47">(<parameter pos:start="416:38" pos:end="416:55"><decl pos:start="416:38" pos:end="416:55"><type pos:start="416:38" pos:end="416:55"><name pos:start="416:38" pos:end="416:51">FileDescriptor</name></type> <name pos:start="416:53" pos:end="416:55">aFD</name></decl></parameter>, <parameter pos:start="416:58" pos:end="416:68"><decl pos:start="416:58" pos:end="416:68"><type pos:start="416:58" pos:end="416:68"><name pos:start="416:58" pos:end="416:63"><name pos:start="416:58" pos:end="416:61">byte</name><index pos:start="416:62" pos:end="416:63">[]</index></name></type> <name pos:start="416:65" pos:end="416:68">data</name></decl></parameter>,
            <parameter pos:start="417:13" pos:end="417:22"><decl pos:start="417:13" pos:end="417:22"><type pos:start="417:13" pos:end="417:22"><name pos:start="417:13" pos:end="417:15">int</name></type> <name pos:start="417:17" pos:end="417:22">offset</name></decl></parameter>, <parameter pos:start="417:25" pos:end="417:33"><decl pos:start="417:25" pos:end="417:33"><type pos:start="417:25" pos:end="417:33"><name pos:start="417:25" pos:end="417:27">int</name></type> <name pos:start="417:29" pos:end="417:33">count</name></decl></parameter>, <parameter pos:start="417:36" pos:end="417:46"><decl pos:start="417:36" pos:end="417:46"><type pos:start="417:36" pos:end="417:46"><name pos:start="417:36" pos:end="417:38">int</name></type> <name pos:start="417:40" pos:end="417:46">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="417:49" pos:end="417:66">throws <argument pos:start="417:56" pos:end="417:66"><expr pos:start="417:56" pos:end="417:66"><name pos:start="417:56" pos:end="417:66">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="419:5" pos:end="420:67"><type pos:start="419:5" pos:end="419:21"><specifier pos:start="419:5" pos:end="419:10">static</specifier> <specifier pos:start="419:12" pos:end="419:17">native</specifier> <name pos:start="419:19" pos:end="419:21">int</name></type> <name pos:start="419:23" pos:end="419:42">readSocketDirectImpl</name><parameter_list pos:start="419:43" pos:end="420:47">(<parameter pos:start="419:44" pos:end="419:61"><decl pos:start="419:44" pos:end="419:61"><type pos:start="419:44" pos:end="419:61"><name pos:start="419:44" pos:end="419:57">FileDescriptor</name></type> <name pos:start="419:59" pos:end="419:61">aFD</name></decl></parameter>, <parameter pos:start="419:64" pos:end="419:74"><decl pos:start="419:64" pos:end="419:74"><type pos:start="419:64" pos:end="419:74"><name pos:start="419:64" pos:end="419:66">int</name></type> <name pos:start="419:68" pos:end="419:74">address</name></decl></parameter>,
            <parameter pos:start="420:13" pos:end="420:22"><decl pos:start="420:13" pos:end="420:22"><type pos:start="420:13" pos:end="420:22"><name pos:start="420:13" pos:end="420:15">int</name></type> <name pos:start="420:17" pos:end="420:22">offset</name></decl></parameter>, <parameter pos:start="420:25" pos:end="420:33"><decl pos:start="420:25" pos:end="420:33"><type pos:start="420:25" pos:end="420:33"><name pos:start="420:25" pos:end="420:27">int</name></type> <name pos:start="420:29" pos:end="420:33">count</name></decl></parameter>, <parameter pos:start="420:36" pos:end="420:46"><decl pos:start="420:36" pos:end="420:46"><type pos:start="420:36" pos:end="420:46"><name pos:start="420:36" pos:end="420:38">int</name></type> <name pos:start="420:40" pos:end="420:46">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="420:49" pos:end="420:66">throws <argument pos:start="420:56" pos:end="420:66"><expr pos:start="420:56" pos:end="420:66"><name pos:start="420:56" pos:end="420:66">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="422:5" pos:end="423:54"><type pos:start="422:5" pos:end="422:21"><specifier pos:start="422:5" pos:end="422:10">static</specifier> <specifier pos:start="422:12" pos:end="422:17">native</specifier> <name pos:start="422:19" pos:end="422:21">int</name></type> <name pos:start="422:23" pos:end="422:37">writeSocketImpl</name><parameter_list pos:start="422:38" pos:end="423:34">(<parameter pos:start="422:39" pos:end="422:55"><decl pos:start="422:39" pos:end="422:55"><type pos:start="422:39" pos:end="422:55"><name pos:start="422:39" pos:end="422:52">FileDescriptor</name></type> <name pos:start="422:54" pos:end="422:55">fd</name></decl></parameter>, <parameter pos:start="422:58" pos:end="422:68"><decl pos:start="422:58" pos:end="422:68"><type pos:start="422:58" pos:end="422:68"><name pos:start="422:58" pos:end="422:63"><name pos:start="422:58" pos:end="422:61">byte</name><index pos:start="422:62" pos:end="422:63">[]</index></name></type> <name pos:start="422:65" pos:end="422:68">data</name></decl></parameter>,
            <parameter pos:start="423:13" pos:end="423:22"><decl pos:start="423:13" pos:end="423:22"><type pos:start="423:13" pos:end="423:22"><name pos:start="423:13" pos:end="423:15">int</name></type> <name pos:start="423:17" pos:end="423:22">offset</name></decl></parameter>, <parameter pos:start="423:25" pos:end="423:33"><decl pos:start="423:25" pos:end="423:33"><type pos:start="423:25" pos:end="423:33"><name pos:start="423:25" pos:end="423:27">int</name></type> <name pos:start="423:29" pos:end="423:33">count</name></decl></parameter>)</parameter_list> <throws pos:start="423:36" pos:end="423:53">throws <argument pos:start="423:43" pos:end="423:53"><expr pos:start="423:43" pos:end="423:53"><name pos:start="423:43" pos:end="423:53">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="425:5" pos:end="426:54"><type pos:start="425:5" pos:end="425:21"><specifier pos:start="425:5" pos:end="425:10">static</specifier> <specifier pos:start="425:12" pos:end="425:17">native</specifier> <name pos:start="425:19" pos:end="425:21">int</name></type> <name pos:start="425:23" pos:end="425:43">writeSocketDirectImpl</name><parameter_list pos:start="425:44" pos:end="426:34">(<parameter pos:start="425:45" pos:end="425:61"><decl pos:start="425:45" pos:end="425:61"><type pos:start="425:45" pos:end="425:61"><name pos:start="425:45" pos:end="425:58">FileDescriptor</name></type> <name pos:start="425:60" pos:end="425:61">fd</name></decl></parameter>, <parameter pos:start="425:64" pos:end="425:74"><decl pos:start="425:64" pos:end="425:74"><type pos:start="425:64" pos:end="425:74"><name pos:start="425:64" pos:end="425:66">int</name></type> <name pos:start="425:68" pos:end="425:74">address</name></decl></parameter>,
            <parameter pos:start="426:13" pos:end="426:22"><decl pos:start="426:13" pos:end="426:22"><type pos:start="426:13" pos:end="426:22"><name pos:start="426:13" pos:end="426:15">int</name></type> <name pos:start="426:17" pos:end="426:22">offset</name></decl></parameter>, <parameter pos:start="426:25" pos:end="426:33"><decl pos:start="426:25" pos:end="426:33"><type pos:start="426:25" pos:end="426:33"><name pos:start="426:25" pos:end="426:27">int</name></type> <name pos:start="426:29" pos:end="426:33">count</name></decl></parameter>)</parameter_list> <throws pos:start="426:36" pos:end="426:53">throws <argument pos:start="426:43" pos:end="426:53"><expr pos:start="426:43" pos:end="426:53"><name pos:start="426:43" pos:end="426:53">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="428:5" pos:end="429:27"><type pos:start="428:5" pos:end="428:22"><specifier pos:start="428:5" pos:end="428:10">static</specifier> <specifier pos:start="428:12" pos:end="428:17">native</specifier> <name pos:start="428:19" pos:end="428:22">void</name></type> <name pos:start="428:24" pos:end="428:41">setNonBlockingImpl</name><parameter_list pos:start="428:42" pos:end="429:26">(<parameter pos:start="428:43" pos:end="428:60"><decl pos:start="428:43" pos:end="428:60"><type pos:start="428:43" pos:end="428:60"><name pos:start="428:43" pos:end="428:56">FileDescriptor</name></type> <name pos:start="428:58" pos:end="428:60">aFD</name></decl></parameter>,
            <parameter pos:start="429:13" pos:end="429:25"><decl pos:start="429:13" pos:end="429:25"><type pos:start="429:13" pos:end="429:25"><name pos:start="429:13" pos:end="429:19">boolean</name></type> <name pos:start="429:21" pos:end="429:25">block</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="431:5" pos:end="432:65"><type pos:start="431:5" pos:end="431:21"><specifier pos:start="431:5" pos:end="431:10">static</specifier> <specifier pos:start="431:12" pos:end="431:17">native</specifier> <name pos:start="431:19" pos:end="431:21">int</name></type> <name pos:start="431:23" pos:end="431:39">connectSocketImpl</name><parameter_list pos:start="431:40" pos:end="432:64">(<parameter pos:start="431:41" pos:end="431:58"><decl pos:start="431:41" pos:end="431:58"><type pos:start="431:41" pos:end="431:58"><name pos:start="431:41" pos:end="431:54">FileDescriptor</name></type> <name pos:start="431:56" pos:end="431:58">aFD</name></decl></parameter>,
            <parameter pos:start="432:13" pos:end="432:28"><decl pos:start="432:13" pos:end="432:28"><type pos:start="432:13" pos:end="432:28"><name pos:start="432:13" pos:end="432:15">int</name></type> <name pos:start="432:17" pos:end="432:28">trafficClass</name></decl></parameter>, <parameter pos:start="432:31" pos:end="432:53"><decl pos:start="432:31" pos:end="432:53"><type pos:start="432:31" pos:end="432:53"><name pos:start="432:31" pos:end="432:41">InetAddress</name></type> <name pos:start="432:43" pos:end="432:53">inetAddress</name></decl></parameter>, <parameter pos:start="432:56" pos:end="432:63"><decl pos:start="432:56" pos:end="432:63"><type pos:start="432:56" pos:end="432:63"><name pos:start="432:56" pos:end="432:58">int</name></type> <name pos:start="432:60" pos:end="432:63">port</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line" pos:start="434:5" pos:end="434:28">// BEGIN android-changed</comment>
    <function_decl pos:start="435:5" pos:end="437:70"><type pos:start="435:5" pos:end="435:21"><specifier pos:start="435:5" pos:end="435:10">static</specifier> <specifier pos:start="435:12" pos:end="435:17">native</specifier> <name pos:start="435:19" pos:end="435:21">int</name></type> <name pos:start="435:23" pos:end="435:50">connectWithTimeoutSocketImpl</name><parameter_list pos:start="435:51" pos:end="437:69">(
            <parameter pos:start="436:13" pos:end="436:30"><decl pos:start="436:13" pos:end="436:30"><type pos:start="436:13" pos:end="436:30"><name pos:start="436:13" pos:end="436:26">FileDescriptor</name></type> <name pos:start="436:28" pos:end="436:30">aFD</name></decl></parameter>, <parameter pos:start="436:33" pos:end="436:43"><decl pos:start="436:33" pos:end="436:43"><type pos:start="436:33" pos:end="436:43"><name pos:start="436:33" pos:end="436:35">int</name></type> <name pos:start="436:37" pos:end="436:43">timeout</name></decl></parameter>, <parameter pos:start="436:46" pos:end="436:61"><decl pos:start="436:46" pos:end="436:61"><type pos:start="436:46" pos:end="436:61"><name pos:start="436:46" pos:end="436:48">int</name></type> <name pos:start="436:50" pos:end="436:61">trafficClass</name></decl></parameter>,
            <parameter pos:start="437:13" pos:end="437:32"><decl pos:start="437:13" pos:end="437:32"><type pos:start="437:13" pos:end="437:32"><name pos:start="437:13" pos:end="437:23">InetAddress</name></type> <name pos:start="437:25" pos:end="437:32">hostname</name></decl></parameter>, <parameter pos:start="437:35" pos:end="437:42"><decl pos:start="437:35" pos:end="437:42"><type pos:start="437:35" pos:end="437:42"><name pos:start="437:35" pos:end="437:37">int</name></type> <name pos:start="437:39" pos:end="437:42">port</name></decl></parameter>, <parameter pos:start="437:45" pos:end="437:52"><decl pos:start="437:45" pos:end="437:52"><type pos:start="437:45" pos:end="437:52"><name pos:start="437:45" pos:end="437:47">int</name></type> <name pos:start="437:49" pos:end="437:52">step</name></decl></parameter>, <parameter pos:start="437:55" pos:end="437:68"><decl pos:start="437:55" pos:end="437:68"><type pos:start="437:55" pos:end="437:68"><name pos:start="437:55" pos:end="437:60"><name pos:start="437:55" pos:end="437:58">byte</name><index pos:start="437:59" pos:end="437:60">[]</index></name></type> <name pos:start="437:62" pos:end="437:68">context</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line" pos:start="438:5" pos:end="438:26">// END android-changed</comment>

    <function_decl pos:start="440:5" pos:end="442:31"><type pos:start="440:5" pos:end="440:22"><specifier pos:start="440:5" pos:end="440:10">static</specifier> <specifier pos:start="440:12" pos:end="440:17">native</specifier> <name pos:start="440:19" pos:end="440:22">void</name></type> <name pos:start="440:24" pos:end="440:57">connectStreamWithTimeoutSocketImpl</name><parameter_list pos:start="440:58" pos:end="441:78">(<parameter pos:start="440:59" pos:end="440:76"><decl pos:start="440:59" pos:end="440:76"><type pos:start="440:59" pos:end="440:76"><name pos:start="440:59" pos:end="440:72">FileDescriptor</name></type> <name pos:start="440:74" pos:end="440:76">aFD</name></decl></parameter>,
            <parameter pos:start="441:13" pos:end="441:21"><decl pos:start="441:13" pos:end="441:21"><type pos:start="441:13" pos:end="441:21"><name pos:start="441:13" pos:end="441:15">int</name></type> <name pos:start="441:17" pos:end="441:21">aport</name></decl></parameter>, <parameter pos:start="441:24" pos:end="441:34"><decl pos:start="441:24" pos:end="441:34"><type pos:start="441:24" pos:end="441:34"><name pos:start="441:24" pos:end="441:26">int</name></type> <name pos:start="441:28" pos:end="441:34">timeout</name></decl></parameter>, <parameter pos:start="441:37" pos:end="441:52"><decl pos:start="441:37" pos:end="441:52"><type pos:start="441:37" pos:end="441:52"><name pos:start="441:37" pos:end="441:39">int</name></type> <name pos:start="441:41" pos:end="441:52">trafficClass</name></decl></parameter>, <parameter pos:start="441:55" pos:end="441:77"><decl pos:start="441:55" pos:end="441:77"><type pos:start="441:55" pos:end="441:77"><name pos:start="441:55" pos:end="441:65">InetAddress</name></type> <name pos:start="441:67" pos:end="441:77">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="442:13" pos:end="442:30">throws <argument pos:start="442:20" pos:end="442:30"><expr pos:start="442:20" pos:end="442:30"><name pos:start="442:20" pos:end="442:30">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="444:5" pos:end="445:60"><type pos:start="444:5" pos:end="444:22"><specifier pos:start="444:5" pos:end="444:10">static</specifier> <specifier pos:start="444:12" pos:end="444:17">native</specifier> <name pos:start="444:19" pos:end="444:22">void</name></type> <name pos:start="444:24" pos:end="444:37">socketBindImpl</name><parameter_list pos:start="444:38" pos:end="445:36">(<parameter pos:start="444:39" pos:end="444:56"><decl pos:start="444:39" pos:end="444:56"><type pos:start="444:39" pos:end="444:56"><name pos:start="444:39" pos:end="444:52">FileDescriptor</name></type> <name pos:start="444:54" pos:end="444:56">aFD</name></decl></parameter>, <parameter pos:start="444:59" pos:end="444:66"><decl pos:start="444:59" pos:end="444:66"><type pos:start="444:59" pos:end="444:66"><name pos:start="444:59" pos:end="444:61">int</name></type> <name pos:start="444:63" pos:end="444:66">port</name></decl></parameter>,
            <parameter pos:start="445:13" pos:end="445:35"><decl pos:start="445:13" pos:end="445:35"><type pos:start="445:13" pos:end="445:35"><name pos:start="445:13" pos:end="445:23">InetAddress</name></type> <name pos:start="445:25" pos:end="445:35">inetAddress</name></decl></parameter>)</parameter_list> <throws pos:start="445:38" pos:end="445:59">throws <argument pos:start="445:45" pos:end="445:59"><expr pos:start="445:45" pos:end="445:59"><name pos:start="445:45" pos:end="445:59">SocketException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="447:5" pos:end="448:35"><type pos:start="447:5" pos:end="447:22"><specifier pos:start="447:5" pos:end="447:10">static</specifier> <specifier pos:start="447:12" pos:end="447:17">native</specifier> <name pos:start="447:19" pos:end="447:22">void</name></type> <name pos:start="447:24" pos:end="447:45">listenStreamSocketImpl</name><parameter_list pos:start="447:46" pos:end="447:78">(<parameter pos:start="447:47" pos:end="447:64"><decl pos:start="447:47" pos:end="447:64"><type pos:start="447:47" pos:end="447:64"><name pos:start="447:47" pos:end="447:60">FileDescriptor</name></type> <name pos:start="447:62" pos:end="447:64">aFD</name></decl></parameter>, <parameter pos:start="447:67" pos:end="447:77"><decl pos:start="447:67" pos:end="447:77"><type pos:start="447:67" pos:end="447:77"><name pos:start="447:67" pos:end="447:69">int</name></type> <name pos:start="447:71" pos:end="447:77">backlog</name></decl></parameter>)</parameter_list>
            <throws pos:start="448:13" pos:end="448:34">throws <argument pos:start="448:20" pos:end="448:34"><expr pos:start="448:20" pos:end="448:34"><name pos:start="448:20" pos:end="448:34">SocketException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="450:5" pos:end="451:35"><type pos:start="450:5" pos:end="450:21"><specifier pos:start="450:5" pos:end="450:10">static</specifier> <specifier pos:start="450:12" pos:end="450:17">native</specifier> <name pos:start="450:19" pos:end="450:21">int</name></type> <name pos:start="450:23" pos:end="450:41">availableStreamImpl</name><parameter_list pos:start="450:42" pos:end="450:61">(<parameter pos:start="450:43" pos:end="450:60"><decl pos:start="450:43" pos:end="450:60"><type pos:start="450:43" pos:end="450:56"><name pos:start="450:43" pos:end="450:56">FileDescriptor</name></type> <name pos:start="450:58" pos:end="450:60">aFD</name></decl></parameter>)</parameter_list>
            <throws pos:start="451:13" pos:end="451:34">throws <argument pos:start="451:20" pos:end="451:34"><expr pos:start="451:20" pos:end="451:34"><name pos:start="451:20" pos:end="451:34">SocketException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="453:5" pos:end="455:31"><type pos:start="453:5" pos:end="453:22"><specifier pos:start="453:5" pos:end="453:10">static</specifier> <specifier pos:start="453:12" pos:end="453:17">native</specifier> <name pos:start="453:19" pos:end="453:22">void</name></type> <name pos:start="453:24" pos:end="453:39">acceptSocketImpl</name><parameter_list pos:start="453:40" pos:end="454:74">(<parameter pos:start="453:41" pos:end="453:63"><decl pos:start="453:41" pos:end="453:63"><type pos:start="453:41" pos:end="453:63"><name pos:start="453:41" pos:end="453:54">FileDescriptor</name></type> <name pos:start="453:56" pos:end="453:63">fdServer</name></decl></parameter>,
            <parameter pos:start="454:13" pos:end="454:32"><decl pos:start="454:13" pos:end="454:32"><type pos:start="454:13" pos:end="454:32"><name pos:start="454:13" pos:end="454:22">SocketImpl</name></type> <name pos:start="454:24" pos:end="454:32">newSocket</name></decl></parameter>, <parameter pos:start="454:35" pos:end="454:60"><decl pos:start="454:35" pos:end="454:60"><type pos:start="454:35" pos:end="454:60"><name pos:start="454:35" pos:end="454:48">FileDescriptor</name></type> <name pos:start="454:50" pos:end="454:60">fdnewSocket</name></decl></parameter>, <parameter pos:start="454:63" pos:end="454:73"><decl pos:start="454:63" pos:end="454:73"><type pos:start="454:63" pos:end="454:73"><name pos:start="454:63" pos:end="454:65">int</name></type> <name pos:start="454:67" pos:end="454:73">timeout</name></decl></parameter>)</parameter_list>
            <throws pos:start="455:13" pos:end="455:30">throws <argument pos:start="455:20" pos:end="455:30"><expr pos:start="455:20" pos:end="455:30"><name pos:start="455:20" pos:end="455:30">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="457:5" pos:end="457:68"><type pos:start="457:5" pos:end="457:25"><specifier pos:start="457:5" pos:end="457:10">static</specifier> <specifier pos:start="457:12" pos:end="457:17">native</specifier> <name pos:start="457:19" pos:end="457:25">boolean</name></type> <name pos:start="457:27" pos:end="457:48">supportsUrgentDataImpl</name><parameter_list pos:start="457:49" pos:end="457:67">(<parameter pos:start="457:50" pos:end="457:66"><decl pos:start="457:50" pos:end="457:66"><type pos:start="457:50" pos:end="457:63"><name pos:start="457:50" pos:end="457:63">FileDescriptor</name></type> <name pos:start="457:65" pos:end="457:66">fd</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="459:5" pos:end="459:73"><type pos:start="459:5" pos:end="459:22"><specifier pos:start="459:5" pos:end="459:10">static</specifier> <specifier pos:start="459:12" pos:end="459:17">native</specifier> <name pos:start="459:19" pos:end="459:22">void</name></type> <name pos:start="459:24" pos:end="459:41">sendUrgentDataImpl</name><parameter_list pos:start="459:42" pos:end="459:72">(<parameter pos:start="459:43" pos:end="459:59"><decl pos:start="459:43" pos:end="459:59"><type pos:start="459:43" pos:end="459:59"><name pos:start="459:43" pos:end="459:56">FileDescriptor</name></type> <name pos:start="459:58" pos:end="459:59">fd</name></decl></parameter>, <parameter pos:start="459:62" pos:end="459:71"><decl pos:start="459:62" pos:end="459:71"><type pos:start="459:62" pos:end="459:71"><name pos:start="459:62" pos:end="459:65">byte</name></type> <name pos:start="459:67" pos:end="459:71">value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" pos:start="461:5" pos:end="469:7">/*
     * Connect the socket to a port and address
     * 
     * @param aFD the FileDescriptor to associate with the socket @param port
     * the port to connect to @param trafficClass the traffic Class to be used
     * then the connection is made @param inetAddress address to connect to.
     * 
     * @exception SocketException if the connect fails
     */</comment>
    <function_decl pos:start="470:5" pos:end="472:35"><type pos:start="470:5" pos:end="470:22"><specifier pos:start="470:5" pos:end="470:10">static</specifier> <specifier pos:start="470:12" pos:end="470:17">native</specifier> <name pos:start="470:19" pos:end="470:22">void</name></type> <name pos:start="470:24" pos:end="470:43">connectDatagramImpl2</name><parameter_list pos:start="470:44" pos:end="471:64">(<parameter pos:start="470:45" pos:end="470:62"><decl pos:start="470:45" pos:end="470:62"><type pos:start="470:45" pos:end="470:62"><name pos:start="470:45" pos:end="470:58">FileDescriptor</name></type> <name pos:start="470:60" pos:end="470:62">aFD</name></decl></parameter>,
            <parameter pos:start="471:13" pos:end="471:20"><decl pos:start="471:13" pos:end="471:20"><type pos:start="471:13" pos:end="471:20"><name pos:start="471:13" pos:end="471:15">int</name></type> <name pos:start="471:17" pos:end="471:20">port</name></decl></parameter>, <parameter pos:start="471:23" pos:end="471:38"><decl pos:start="471:23" pos:end="471:38"><type pos:start="471:23" pos:end="471:38"><name pos:start="471:23" pos:end="471:25">int</name></type> <name pos:start="471:27" pos:end="471:38">trafficClass</name></decl></parameter>, <parameter pos:start="471:41" pos:end="471:63"><decl pos:start="471:41" pos:end="471:63"><type pos:start="471:41" pos:end="471:63"><name pos:start="471:41" pos:end="471:51">InetAddress</name></type> <name pos:start="471:53" pos:end="471:63">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="472:13" pos:end="472:34">throws <argument pos:start="472:20" pos:end="472:34"><expr pos:start="472:20" pos:end="472:34"><name pos:start="472:20" pos:end="472:34">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="474:5" pos:end="480:7">/*
     * Disconnect the socket to a port and address
     * 
     * @param aFD the FileDescriptor to associate with the socket
     * 
     * @exception SocketException if the disconnect fails
     */</comment>
    <function_decl pos:start="481:5" pos:end="482:35"><type pos:start="481:5" pos:end="481:22"><specifier pos:start="481:5" pos:end="481:10">static</specifier> <specifier pos:start="481:12" pos:end="481:17">native</specifier> <name pos:start="481:19" pos:end="481:22">void</name></type> <name pos:start="481:24" pos:end="481:45">disconnectDatagramImpl</name><parameter_list pos:start="481:46" pos:end="481:65">(<parameter pos:start="481:47" pos:end="481:64"><decl pos:start="481:47" pos:end="481:64"><type pos:start="481:47" pos:end="481:60"><name pos:start="481:47" pos:end="481:60">FileDescriptor</name></type> <name pos:start="481:62" pos:end="481:64">aFD</name></decl></parameter>)</parameter_list>
            <throws pos:start="482:13" pos:end="482:34">throws <argument pos:start="482:20" pos:end="482:34"><expr pos:start="482:20" pos:end="482:34"><name pos:start="482:20" pos:end="482:34">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="484:5" pos:end="491:7">/*
     * Allocate a datagram socket in the IP stack. The socket is associated with
     * the &lt;code&gt;aFD&lt;/code&gt;.
     * 
     * @param aFD the FileDescriptor to associate with the socket @param
     * preferIPv4Stack IP stack preference if underlying platform is V4/V6
     * @exception SocketException upon an allocation error
     */</comment>

    <comment type="block" pos:start="493:5" pos:end="500:7">/*
     * Bind the socket to the port/localhost in the IP stack.
     * 
     * @param aFD the socket descriptor @param port the option selector @param
     * bindToDevice bind the socket to the specified interface @param
     * inetAddress address to connect to. @return if bind successful @exception
     * SocketException thrown if bind operation fails
     */</comment>
    <function_decl pos:start="501:5" pos:end="503:35"><type pos:start="501:5" pos:end="501:25"><specifier pos:start="501:5" pos:end="501:10">static</specifier> <specifier pos:start="501:12" pos:end="501:17">native</specifier> <name pos:start="501:19" pos:end="501:25">boolean</name></type> <name pos:start="501:27" pos:end="501:41">socketBindImpl2</name><parameter_list pos:start="501:42" pos:end="502:68">(<parameter pos:start="501:43" pos:end="501:60"><decl pos:start="501:43" pos:end="501:60"><type pos:start="501:43" pos:end="501:60"><name pos:start="501:43" pos:end="501:56">FileDescriptor</name></type> <name pos:start="501:58" pos:end="501:60">aFD</name></decl></parameter>,
            <parameter pos:start="502:13" pos:end="502:20"><decl pos:start="502:13" pos:end="502:20"><type pos:start="502:13" pos:end="502:20"><name pos:start="502:13" pos:end="502:15">int</name></type> <name pos:start="502:17" pos:end="502:20">port</name></decl></parameter>, <parameter pos:start="502:23" pos:end="502:42"><decl pos:start="502:23" pos:end="502:42"><type pos:start="502:23" pos:end="502:42"><name pos:start="502:23" pos:end="502:29">boolean</name></type> <name pos:start="502:31" pos:end="502:42">bindToDevice</name></decl></parameter>, <parameter pos:start="502:45" pos:end="502:67"><decl pos:start="502:45" pos:end="502:67"><type pos:start="502:45" pos:end="502:67"><name pos:start="502:45" pos:end="502:55">InetAddress</name></type> <name pos:start="502:57" pos:end="502:67">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="503:13" pos:end="503:34">throws <argument pos:start="503:20" pos:end="503:34"><expr pos:start="503:20" pos:end="503:34"><name pos:start="503:20" pos:end="503:34">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="505:5" pos:end="515:7">/*
     * Peek on the socket, update &lt;code&gt;sender&lt;/code&gt; address and answer the
     * sender port.
     * 
     * @param aFD the socket FileDescriptor @param sender an InetAddress, to be
     * updated with the sender's address @param receiveTimeout the maximum
     * length of time the socket should block, reading @return int the sender
     * port
     * 
     * @exception IOException upon an read error or timeout
     */</comment>
    <function_decl pos:start="516:5" pos:end="517:71"><type pos:start="516:5" pos:end="516:21"><specifier pos:start="516:5" pos:end="516:10">static</specifier> <specifier pos:start="516:12" pos:end="516:17">native</specifier> <name pos:start="516:19" pos:end="516:21">int</name></type> <name pos:start="516:23" pos:end="516:38">peekDatagramImpl</name><parameter_list pos:start="516:39" pos:end="517:51">(<parameter pos:start="516:40" pos:end="516:57"><decl pos:start="516:40" pos:end="516:57"><type pos:start="516:40" pos:end="516:57"><name pos:start="516:40" pos:end="516:53">FileDescriptor</name></type> <name pos:start="516:55" pos:end="516:57">aFD</name></decl></parameter>,
            <parameter pos:start="517:13" pos:end="517:30"><decl pos:start="517:13" pos:end="517:30"><type pos:start="517:13" pos:end="517:30"><name pos:start="517:13" pos:end="517:23">InetAddress</name></type> <name pos:start="517:25" pos:end="517:30">sender</name></decl></parameter>, <parameter pos:start="517:33" pos:end="517:50"><decl pos:start="517:33" pos:end="517:50"><type pos:start="517:33" pos:end="517:50"><name pos:start="517:33" pos:end="517:35">int</name></type> <name pos:start="517:37" pos:end="517:50">receiveTimeout</name></decl></parameter>)</parameter_list> <throws pos:start="517:53" pos:end="517:70">throws <argument pos:start="517:60" pos:end="517:70"><expr pos:start="517:60" pos:end="517:70"><name pos:start="517:60" pos:end="517:70">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="519:5" pos:end="531:7">/*
     * Recieve data on the socket into the specified buffer. The packet fields
     * &lt;code&gt;data&lt;/code&gt; &amp; &lt;code&gt;length&lt;/code&gt; are passed in addition to
     * &lt;code&gt;packet&lt;/code&gt; to eliminate the JNI field access calls.
     * 
     * @param aFD the socket FileDescriptor @param packet the DatagramPacket to
     * receive into @param data the data buffer of the packet @param offset the
     * offset in the data buffer @param length the length of the data buffer in
     * the packet @param receiveTimeout the maximum length of time the socket
     * should block, reading @param peek indicates to peek at the data @return
     * number of data received @exception IOException upon an read error or
     * timeout
     */</comment>
    <function_decl pos:start="532:5" pos:end="534:65"><type pos:start="532:5" pos:end="532:21"><specifier pos:start="532:5" pos:end="532:10">static</specifier> <specifier pos:start="532:12" pos:end="532:17">native</specifier> <name pos:start="532:19" pos:end="532:21">int</name></type> <name pos:start="532:23" pos:end="532:41">receiveDatagramImpl</name><parameter_list pos:start="532:42" pos:end="534:45">(<parameter pos:start="532:43" pos:end="532:60"><decl pos:start="532:43" pos:end="532:60"><type pos:start="532:43" pos:end="532:60"><name pos:start="532:43" pos:end="532:56">FileDescriptor</name></type> <name pos:start="532:58" pos:end="532:60">aFD</name></decl></parameter>,
            <parameter pos:start="533:13" pos:end="533:33"><decl pos:start="533:13" pos:end="533:33"><type pos:start="533:13" pos:end="533:33"><name pos:start="533:13" pos:end="533:26">DatagramPacket</name></type> <name pos:start="533:28" pos:end="533:33">packet</name></decl></parameter>, <parameter pos:start="533:36" pos:end="533:46"><decl pos:start="533:36" pos:end="533:46"><type pos:start="533:36" pos:end="533:46"><name pos:start="533:36" pos:end="533:41"><name pos:start="533:36" pos:end="533:39">byte</name><index pos:start="533:40" pos:end="533:41">[]</index></name></type> <name pos:start="533:43" pos:end="533:46">data</name></decl></parameter>, <parameter pos:start="533:49" pos:end="533:58"><decl pos:start="533:49" pos:end="533:58"><type pos:start="533:49" pos:end="533:58"><name pos:start="533:49" pos:end="533:51">int</name></type> <name pos:start="533:53" pos:end="533:58">offset</name></decl></parameter>, <parameter pos:start="533:61" pos:end="533:70"><decl pos:start="533:61" pos:end="533:70"><type pos:start="533:61" pos:end="533:70"><name pos:start="533:61" pos:end="533:63">int</name></type> <name pos:start="533:65" pos:end="533:70">length</name></decl></parameter>,
            <parameter pos:start="534:13" pos:end="534:30"><decl pos:start="534:13" pos:end="534:30"><type pos:start="534:13" pos:end="534:30"><name pos:start="534:13" pos:end="534:15">int</name></type> <name pos:start="534:17" pos:end="534:30">receiveTimeout</name></decl></parameter>, <parameter pos:start="534:33" pos:end="534:44"><decl pos:start="534:33" pos:end="534:44"><type pos:start="534:33" pos:end="534:44"><name pos:start="534:33" pos:end="534:39">boolean</name></type> <name pos:start="534:41" pos:end="534:44">peek</name></decl></parameter>)</parameter_list> <throws pos:start="534:47" pos:end="534:64">throws <argument pos:start="534:54" pos:end="534:64"><expr pos:start="534:54" pos:end="534:64"><name pos:start="534:54" pos:end="534:64">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="536:5" pos:end="538:65"><type pos:start="536:5" pos:end="536:21"><specifier pos:start="536:5" pos:end="536:10">static</specifier> <specifier pos:start="536:12" pos:end="536:17">native</specifier> <name pos:start="536:19" pos:end="536:21">int</name></type> <name pos:start="536:23" pos:end="536:47">receiveDatagramDirectImpl</name><parameter_list pos:start="536:48" pos:end="538:45">(<parameter pos:start="536:49" pos:end="536:66"><decl pos:start="536:49" pos:end="536:66"><type pos:start="536:49" pos:end="536:66"><name pos:start="536:49" pos:end="536:62">FileDescriptor</name></type> <name pos:start="536:64" pos:end="536:66">aFD</name></decl></parameter>,
            <parameter pos:start="537:13" pos:end="537:33"><decl pos:start="537:13" pos:end="537:33"><type pos:start="537:13" pos:end="537:33"><name pos:start="537:13" pos:end="537:26">DatagramPacket</name></type> <name pos:start="537:28" pos:end="537:33">packet</name></decl></parameter>, <parameter pos:start="537:36" pos:end="537:46"><decl pos:start="537:36" pos:end="537:46"><type pos:start="537:36" pos:end="537:46"><name pos:start="537:36" pos:end="537:38">int</name></type> <name pos:start="537:40" pos:end="537:46">address</name></decl></parameter>, <parameter pos:start="537:49" pos:end="537:58"><decl pos:start="537:49" pos:end="537:58"><type pos:start="537:49" pos:end="537:58"><name pos:start="537:49" pos:end="537:51">int</name></type> <name pos:start="537:53" pos:end="537:58">offset</name></decl></parameter>, <parameter pos:start="537:61" pos:end="537:70"><decl pos:start="537:61" pos:end="537:70"><type pos:start="537:61" pos:end="537:70"><name pos:start="537:61" pos:end="537:63">int</name></type> <name pos:start="537:65" pos:end="537:70">length</name></decl></parameter>,
            <parameter pos:start="538:13" pos:end="538:30"><decl pos:start="538:13" pos:end="538:30"><type pos:start="538:13" pos:end="538:30"><name pos:start="538:13" pos:end="538:15">int</name></type> <name pos:start="538:17" pos:end="538:30">receiveTimeout</name></decl></parameter>, <parameter pos:start="538:33" pos:end="538:44"><decl pos:start="538:33" pos:end="538:44"><type pos:start="538:33" pos:end="538:44"><name pos:start="538:33" pos:end="538:39">boolean</name></type> <name pos:start="538:41" pos:end="538:44">peek</name></decl></parameter>)</parameter_list> <throws pos:start="538:47" pos:end="538:64">throws <argument pos:start="538:54" pos:end="538:64"><expr pos:start="538:54" pos:end="538:64"><name pos:start="538:54" pos:end="538:64">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="540:5" pos:end="553:7">/*
     * Recieve data on the connected socket into the specified buffer. The
     * packet fields &lt;code&gt;data&lt;/code&gt; &amp; &lt;code&gt;length&lt;/code&gt; are passed in
     * addition to &lt;code&gt;packet&lt;/code&gt; to eliminate the JNI field access
     * calls.
     * 
     * @param aFD the socket FileDescriptor @param packet the DatagramPacket to
     * receive into @param data the data buffer of the packet @param offset the
     * offset in the data buffer @param length the length of the data buffer in
     * the packet @param receiveTimeout the maximum length of time the socket
     * should block, reading @param peek indicates to peek at the data @return
     * number of data received @exception IOException upon an read error or
     * timeout
     */</comment>
    <function_decl pos:start="554:5" pos:end="556:65"><type pos:start="554:5" pos:end="554:21"><specifier pos:start="554:5" pos:end="554:10">static</specifier> <specifier pos:start="554:12" pos:end="554:17">native</specifier> <name pos:start="554:19" pos:end="554:21">int</name></type> <name pos:start="554:23" pos:end="554:47">recvConnectedDatagramImpl</name><parameter_list pos:start="554:48" pos:end="556:45">(<parameter pos:start="554:49" pos:end="554:66"><decl pos:start="554:49" pos:end="554:66"><type pos:start="554:49" pos:end="554:66"><name pos:start="554:49" pos:end="554:62">FileDescriptor</name></type> <name pos:start="554:64" pos:end="554:66">aFD</name></decl></parameter>,
            <parameter pos:start="555:13" pos:end="555:33"><decl pos:start="555:13" pos:end="555:33"><type pos:start="555:13" pos:end="555:33"><name pos:start="555:13" pos:end="555:26">DatagramPacket</name></type> <name pos:start="555:28" pos:end="555:33">packet</name></decl></parameter>, <parameter pos:start="555:36" pos:end="555:46"><decl pos:start="555:36" pos:end="555:46"><type pos:start="555:36" pos:end="555:46"><name pos:start="555:36" pos:end="555:41"><name pos:start="555:36" pos:end="555:39">byte</name><index pos:start="555:40" pos:end="555:41">[]</index></name></type> <name pos:start="555:43" pos:end="555:46">data</name></decl></parameter>, <parameter pos:start="555:49" pos:end="555:58"><decl pos:start="555:49" pos:end="555:58"><type pos:start="555:49" pos:end="555:58"><name pos:start="555:49" pos:end="555:51">int</name></type> <name pos:start="555:53" pos:end="555:58">offset</name></decl></parameter>, <parameter pos:start="555:61" pos:end="555:70"><decl pos:start="555:61" pos:end="555:70"><type pos:start="555:61" pos:end="555:70"><name pos:start="555:61" pos:end="555:63">int</name></type> <name pos:start="555:65" pos:end="555:70">length</name></decl></parameter>,
            <parameter pos:start="556:13" pos:end="556:30"><decl pos:start="556:13" pos:end="556:30"><type pos:start="556:13" pos:end="556:30"><name pos:start="556:13" pos:end="556:15">int</name></type> <name pos:start="556:17" pos:end="556:30">receiveTimeout</name></decl></parameter>, <parameter pos:start="556:33" pos:end="556:44"><decl pos:start="556:33" pos:end="556:44"><type pos:start="556:33" pos:end="556:44"><name pos:start="556:33" pos:end="556:39">boolean</name></type> <name pos:start="556:41" pos:end="556:44">peek</name></decl></parameter>)</parameter_list> <throws pos:start="556:47" pos:end="556:64">throws <argument pos:start="556:54" pos:end="556:64"><expr pos:start="556:54" pos:end="556:64"><name pos:start="556:54" pos:end="556:64">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="558:5" pos:end="560:65"><type pos:start="558:5" pos:end="558:21"><specifier pos:start="558:5" pos:end="558:10">static</specifier> <specifier pos:start="558:12" pos:end="558:17">native</specifier> <name pos:start="558:19" pos:end="558:21">int</name></type> <name pos:start="558:23" pos:end="558:53">recvConnectedDatagramDirectImpl</name><parameter_list pos:start="558:54" pos:end="560:45">(<parameter pos:start="558:55" pos:end="558:72"><decl pos:start="558:55" pos:end="558:72"><type pos:start="558:55" pos:end="558:72"><name pos:start="558:55" pos:end="558:68">FileDescriptor</name></type> <name pos:start="558:70" pos:end="558:72">aFD</name></decl></parameter>,
            <parameter pos:start="559:13" pos:end="559:33"><decl pos:start="559:13" pos:end="559:33"><type pos:start="559:13" pos:end="559:33"><name pos:start="559:13" pos:end="559:26">DatagramPacket</name></type> <name pos:start="559:28" pos:end="559:33">packet</name></decl></parameter>, <parameter pos:start="559:36" pos:end="559:46"><decl pos:start="559:36" pos:end="559:46"><type pos:start="559:36" pos:end="559:46"><name pos:start="559:36" pos:end="559:38">int</name></type> <name pos:start="559:40" pos:end="559:46">address</name></decl></parameter>, <parameter pos:start="559:49" pos:end="559:58"><decl pos:start="559:49" pos:end="559:58"><type pos:start="559:49" pos:end="559:58"><name pos:start="559:49" pos:end="559:51">int</name></type> <name pos:start="559:53" pos:end="559:58">offset</name></decl></parameter>, <parameter pos:start="559:61" pos:end="559:70"><decl pos:start="559:61" pos:end="559:70"><type pos:start="559:61" pos:end="559:70"><name pos:start="559:61" pos:end="559:63">int</name></type> <name pos:start="559:65" pos:end="559:70">length</name></decl></parameter>,
            <parameter pos:start="560:13" pos:end="560:30"><decl pos:start="560:13" pos:end="560:30"><type pos:start="560:13" pos:end="560:30"><name pos:start="560:13" pos:end="560:15">int</name></type> <name pos:start="560:17" pos:end="560:30">receiveTimeout</name></decl></parameter>, <parameter pos:start="560:33" pos:end="560:44"><decl pos:start="560:33" pos:end="560:44"><type pos:start="560:33" pos:end="560:44"><name pos:start="560:33" pos:end="560:39">boolean</name></type> <name pos:start="560:41" pos:end="560:44">peek</name></decl></parameter>)</parameter_list> <throws pos:start="560:47" pos:end="560:64">throws <argument pos:start="560:54" pos:end="560:64"><expr pos:start="560:54" pos:end="560:64"><name pos:start="560:54" pos:end="560:64">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="562:5" pos:end="575:7">/*
     * Send the &lt;code&gt;data&lt;/code&gt; to the nominated target &lt;code&gt;address&lt;/code&gt;
     * and &lt;code&gt;port&lt;/code&gt;. These values are derived from the
     * DatagramPacket to reduce the field calls within JNI.
     * 
     * @param fd the socket FileDescriptor @param data the data buffer of the
     * packet @param offset the offset in the data buffer @param length the
     * length of the data buffer in the packet @param port the target host port
     * @param bindToDevice if bind to device @param trafficClass the traffic
     * class to be used when the datagram is sent @param inetAddress address to
     * connect to. @return number of data send
     * 
     * @exception IOException upon an read error or timeout
     */</comment>
    <function_decl pos:start="576:5" pos:end="579:31"><type pos:start="576:5" pos:end="576:21"><specifier pos:start="576:5" pos:end="576:10">static</specifier> <specifier pos:start="576:12" pos:end="576:17">native</specifier> <name pos:start="576:19" pos:end="576:21">int</name></type> <name pos:start="576:23" pos:end="576:38">sendDatagramImpl</name><parameter_list pos:start="576:39" pos:end="578:76">(<parameter pos:start="576:40" pos:end="576:56"><decl pos:start="576:40" pos:end="576:56"><type pos:start="576:40" pos:end="576:56"><name pos:start="576:40" pos:end="576:53">FileDescriptor</name></type> <name pos:start="576:55" pos:end="576:56">fd</name></decl></parameter>,
            <parameter pos:start="577:13" pos:end="577:23"><decl pos:start="577:13" pos:end="577:23"><type pos:start="577:13" pos:end="577:23"><name pos:start="577:13" pos:end="577:18"><name pos:start="577:13" pos:end="577:16">byte</name><index pos:start="577:17" pos:end="577:18">[]</index></name></type> <name pos:start="577:20" pos:end="577:23">data</name></decl></parameter>, <parameter pos:start="577:26" pos:end="577:35"><decl pos:start="577:26" pos:end="577:35"><type pos:start="577:26" pos:end="577:35"><name pos:start="577:26" pos:end="577:28">int</name></type> <name pos:start="577:30" pos:end="577:35">offset</name></decl></parameter>, <parameter pos:start="577:38" pos:end="577:47"><decl pos:start="577:38" pos:end="577:47"><type pos:start="577:38" pos:end="577:47"><name pos:start="577:38" pos:end="577:40">int</name></type> <name pos:start="577:42" pos:end="577:47">length</name></decl></parameter>, <parameter pos:start="577:50" pos:end="577:57"><decl pos:start="577:50" pos:end="577:57"><type pos:start="577:50" pos:end="577:57"><name pos:start="577:50" pos:end="577:52">int</name></type> <name pos:start="577:54" pos:end="577:57">port</name></decl></parameter>,
            <parameter pos:start="578:13" pos:end="578:32"><decl pos:start="578:13" pos:end="578:32"><type pos:start="578:13" pos:end="578:32"><name pos:start="578:13" pos:end="578:19">boolean</name></type> <name pos:start="578:21" pos:end="578:32">bindToDevice</name></decl></parameter>, <parameter pos:start="578:35" pos:end="578:50"><decl pos:start="578:35" pos:end="578:50"><type pos:start="578:35" pos:end="578:50"><name pos:start="578:35" pos:end="578:37">int</name></type> <name pos:start="578:39" pos:end="578:50">trafficClass</name></decl></parameter>, <parameter pos:start="578:53" pos:end="578:75"><decl pos:start="578:53" pos:end="578:75"><type pos:start="578:53" pos:end="578:75"><name pos:start="578:53" pos:end="578:63">InetAddress</name></type> <name pos:start="578:65" pos:end="578:75">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="579:13" pos:end="579:30">throws <argument pos:start="579:20" pos:end="579:30"><expr pos:start="579:20" pos:end="579:30"><name pos:start="579:20" pos:end="579:30">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="581:5" pos:end="584:31"><type pos:start="581:5" pos:end="581:21"><specifier pos:start="581:5" pos:end="581:10">static</specifier> <specifier pos:start="581:12" pos:end="581:17">native</specifier> <name pos:start="581:19" pos:end="581:21">int</name></type> <name pos:start="581:23" pos:end="581:44">sendDatagramDirectImpl</name><parameter_list pos:start="581:45" pos:end="583:76">(<parameter pos:start="581:46" pos:end="581:62"><decl pos:start="581:46" pos:end="581:62"><type pos:start="581:46" pos:end="581:62"><name pos:start="581:46" pos:end="581:59">FileDescriptor</name></type> <name pos:start="581:61" pos:end="581:62">fd</name></decl></parameter>,
            <parameter pos:start="582:13" pos:end="582:23"><decl pos:start="582:13" pos:end="582:23"><type pos:start="582:13" pos:end="582:23"><name pos:start="582:13" pos:end="582:15">int</name></type> <name pos:start="582:17" pos:end="582:23">address</name></decl></parameter>, <parameter pos:start="582:26" pos:end="582:35"><decl pos:start="582:26" pos:end="582:35"><type pos:start="582:26" pos:end="582:35"><name pos:start="582:26" pos:end="582:28">int</name></type> <name pos:start="582:30" pos:end="582:35">offset</name></decl></parameter>, <parameter pos:start="582:38" pos:end="582:47"><decl pos:start="582:38" pos:end="582:47"><type pos:start="582:38" pos:end="582:47"><name pos:start="582:38" pos:end="582:40">int</name></type> <name pos:start="582:42" pos:end="582:47">length</name></decl></parameter>, <parameter pos:start="582:50" pos:end="582:57"><decl pos:start="582:50" pos:end="582:57"><type pos:start="582:50" pos:end="582:57"><name pos:start="582:50" pos:end="582:52">int</name></type> <name pos:start="582:54" pos:end="582:57">port</name></decl></parameter>,
            <parameter pos:start="583:13" pos:end="583:32"><decl pos:start="583:13" pos:end="583:32"><type pos:start="583:13" pos:end="583:32"><name pos:start="583:13" pos:end="583:19">boolean</name></type> <name pos:start="583:21" pos:end="583:32">bindToDevice</name></decl></parameter>, <parameter pos:start="583:35" pos:end="583:50"><decl pos:start="583:35" pos:end="583:50"><type pos:start="583:35" pos:end="583:50"><name pos:start="583:35" pos:end="583:37">int</name></type> <name pos:start="583:39" pos:end="583:50">trafficClass</name></decl></parameter>, <parameter pos:start="583:53" pos:end="583:75"><decl pos:start="583:53" pos:end="583:75"><type pos:start="583:53" pos:end="583:75"><name pos:start="583:53" pos:end="583:63">InetAddress</name></type> <name pos:start="583:65" pos:end="583:75">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="584:13" pos:end="584:30">throws <argument pos:start="584:20" pos:end="584:30"><expr pos:start="584:20" pos:end="584:30"><name pos:start="584:20" pos:end="584:30">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="586:5" pos:end="595:7">/*
     * Send the &lt;code&gt;data&lt;/code&gt; to the address and port to which the was
     * connnected and &lt;code&gt;port&lt;/code&gt;.
     * 
     * @param fd the socket FileDescriptor @param data the data buffer of the
     * packet @param offset the offset in the data buffer @param length the
     * length of the data buffer in the packet @param bindToDevice not used,
     * current kept in case needed as was the case for sendDatagramImpl @return
     * number of data send @exception IOException upon an read error or timeout
     */</comment>
    <function_decl pos:start="596:5" pos:end="598:31"><type pos:start="596:5" pos:end="596:21"><specifier pos:start="596:5" pos:end="596:10">static</specifier> <specifier pos:start="596:12" pos:end="596:17">native</specifier> <name pos:start="596:19" pos:end="596:21">int</name></type> <name pos:start="596:23" pos:end="596:47">sendConnectedDatagramImpl</name><parameter_list pos:start="596:48" pos:end="597:70">(<parameter pos:start="596:49" pos:end="596:65"><decl pos:start="596:49" pos:end="596:65"><type pos:start="596:49" pos:end="596:65"><name pos:start="596:49" pos:end="596:62">FileDescriptor</name></type> <name pos:start="596:64" pos:end="596:65">fd</name></decl></parameter>,
            <parameter pos:start="597:13" pos:end="597:23"><decl pos:start="597:13" pos:end="597:23"><type pos:start="597:13" pos:end="597:23"><name pos:start="597:13" pos:end="597:18"><name pos:start="597:13" pos:end="597:16">byte</name><index pos:start="597:17" pos:end="597:18">[]</index></name></type> <name pos:start="597:20" pos:end="597:23">data</name></decl></parameter>, <parameter pos:start="597:26" pos:end="597:35"><decl pos:start="597:26" pos:end="597:35"><type pos:start="597:26" pos:end="597:35"><name pos:start="597:26" pos:end="597:28">int</name></type> <name pos:start="597:30" pos:end="597:35">offset</name></decl></parameter>, <parameter pos:start="597:38" pos:end="597:47"><decl pos:start="597:38" pos:end="597:47"><type pos:start="597:38" pos:end="597:47"><name pos:start="597:38" pos:end="597:40">int</name></type> <name pos:start="597:42" pos:end="597:47">length</name></decl></parameter>, <parameter pos:start="597:50" pos:end="597:69"><decl pos:start="597:50" pos:end="597:69"><type pos:start="597:50" pos:end="597:69"><name pos:start="597:50" pos:end="597:56">boolean</name></type> <name pos:start="597:58" pos:end="597:69">bindToDevice</name></decl></parameter>)</parameter_list>
            <throws pos:start="598:13" pos:end="598:30">throws <argument pos:start="598:20" pos:end="598:30"><expr pos:start="598:20" pos:end="598:30"><name pos:start="598:20" pos:end="598:30">IOException</name></expr></argument></throws>;</function_decl>
    
    <function_decl pos:start="600:5" pos:end="602:31"><type pos:start="600:5" pos:end="600:21"><specifier pos:start="600:5" pos:end="600:10">static</specifier> <specifier pos:start="600:12" pos:end="600:17">native</specifier> <name pos:start="600:19" pos:end="600:21">int</name></type> <name pos:start="600:23" pos:end="600:53">sendConnectedDatagramDirectImpl</name><parameter_list pos:start="600:54" pos:end="601:70">(<parameter pos:start="600:55" pos:end="600:71"><decl pos:start="600:55" pos:end="600:71"><type pos:start="600:55" pos:end="600:71"><name pos:start="600:55" pos:end="600:68">FileDescriptor</name></type> <name pos:start="600:70" pos:end="600:71">fd</name></decl></parameter>,
            <parameter pos:start="601:13" pos:end="601:23"><decl pos:start="601:13" pos:end="601:23"><type pos:start="601:13" pos:end="601:23"><name pos:start="601:13" pos:end="601:15">int</name></type> <name pos:start="601:17" pos:end="601:23">address</name></decl></parameter>, <parameter pos:start="601:26" pos:end="601:35"><decl pos:start="601:26" pos:end="601:35"><type pos:start="601:26" pos:end="601:35"><name pos:start="601:26" pos:end="601:28">int</name></type> <name pos:start="601:30" pos:end="601:35">offset</name></decl></parameter>, <parameter pos:start="601:38" pos:end="601:47"><decl pos:start="601:38" pos:end="601:47"><type pos:start="601:38" pos:end="601:47"><name pos:start="601:38" pos:end="601:40">int</name></type> <name pos:start="601:42" pos:end="601:47">length</name></decl></parameter>, <parameter pos:start="601:50" pos:end="601:69"><decl pos:start="601:50" pos:end="601:69"><type pos:start="601:50" pos:end="601:69"><name pos:start="601:50" pos:end="601:56">boolean</name></type> <name pos:start="601:58" pos:end="601:69">bindToDevice</name></decl></parameter>)</parameter_list>
            <throws pos:start="602:13" pos:end="602:30">throws <argument pos:start="602:20" pos:end="602:30"><expr pos:start="602:20" pos:end="602:30"><name pos:start="602:20" pos:end="602:30">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="604:5" pos:end="611:7">/*
     * Answer the result of attempting to create a server stream socket in the
     * IP stack. Any special options required for server sockets will be set by
     * this method.
     * 
     * @param aFD the socket FileDescriptor @param preferIPv4Stack if use IPV4
     * @exception SocketException if an error occurs while creating the socket
     */</comment>
    <function_decl pos:start="612:5" pos:end="613:60"><type pos:start="612:5" pos:end="612:22"><specifier pos:start="612:5" pos:end="612:10">static</specifier> <specifier pos:start="612:12" pos:end="612:17">native</specifier> <name pos:start="612:19" pos:end="612:22">void</name></type> <name pos:start="612:24" pos:end="612:51">createServerStreamSocketImpl</name><parameter_list pos:start="612:52" pos:end="613:36">(<parameter pos:start="612:53" pos:end="612:70"><decl pos:start="612:53" pos:end="612:70"><type pos:start="612:53" pos:end="612:70"><name pos:start="612:53" pos:end="612:66">FileDescriptor</name></type> <name pos:start="612:68" pos:end="612:70">aFD</name></decl></parameter>,
            <parameter pos:start="613:13" pos:end="613:35"><decl pos:start="613:13" pos:end="613:35"><type pos:start="613:13" pos:end="613:35"><name pos:start="613:13" pos:end="613:19">boolean</name></type> <name pos:start="613:21" pos:end="613:35">preferIPv4Stack</name></decl></parameter>)</parameter_list> <throws pos:start="613:38" pos:end="613:59">throws <argument pos:start="613:45" pos:end="613:59"><expr pos:start="613:45" pos:end="613:59"><name pos:start="613:45" pos:end="613:59">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="615:5" pos:end="622:7">/*
     * Answer the result of attempting to create a multicast socket in the IP
     * stack. Any special options required for server sockets will be set by
     * this method.
     * 
     * @param aFD the socket FileDescriptor @param preferIPv4Stack if use IPV4
     * @exception SocketException if an error occurs while creating the socket
     */</comment>
    <function_decl pos:start="623:5" pos:end="624:60"><type pos:start="623:5" pos:end="623:22"><specifier pos:start="623:5" pos:end="623:10">static</specifier> <specifier pos:start="623:12" pos:end="623:17">native</specifier> <name pos:start="623:19" pos:end="623:22">void</name></type> <name pos:start="623:24" pos:end="623:48">createMulticastSocketImpl</name><parameter_list pos:start="623:49" pos:end="624:36">(<parameter pos:start="623:50" pos:end="623:67"><decl pos:start="623:50" pos:end="623:67"><type pos:start="623:50" pos:end="623:67"><name pos:start="623:50" pos:end="623:63">FileDescriptor</name></type> <name pos:start="623:65" pos:end="623:67">aFD</name></decl></parameter>,
            <parameter pos:start="624:13" pos:end="624:35"><decl pos:start="624:13" pos:end="624:35"><type pos:start="624:13" pos:end="624:35"><name pos:start="624:13" pos:end="624:19">boolean</name></type> <name pos:start="624:21" pos:end="624:35">preferIPv4Stack</name></decl></parameter>)</parameter_list> <throws pos:start="624:38" pos:end="624:59">throws <argument pos:start="624:45" pos:end="624:59"><expr pos:start="624:45" pos:end="624:59"><name pos:start="624:45" pos:end="624:59">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="626:5" pos:end="636:7">/*
     * Recieve at most &lt;code&gt;count&lt;/code&gt; bytes into the buffer &lt;code&gt;data&lt;/code&gt;
     * at the &lt;code&gt;offset&lt;/code&gt; on the socket.
     * 
     * @param aFD the socket FileDescriptor @param data the receive buffer
     * @param offset the offset into the buffer @param count the max number of
     * bytes to receive @param timeout the max time the read operation should
     * block waiting for data @return int the actual number of bytes read
     * @throws IOException @exception SocketException if an error occurs while
     * reading
     */</comment>
    <function_decl pos:start="637:5" pos:end="638:67"><type pos:start="637:5" pos:end="637:21"><specifier pos:start="637:5" pos:end="637:10">static</specifier> <specifier pos:start="637:12" pos:end="637:17">native</specifier> <name pos:start="637:19" pos:end="637:21">int</name></type> <name pos:start="637:23" pos:end="637:39">receiveStreamImpl</name><parameter_list pos:start="637:40" pos:end="638:47">(<parameter pos:start="637:41" pos:end="637:58"><decl pos:start="637:41" pos:end="637:58"><type pos:start="637:41" pos:end="637:58"><name pos:start="637:41" pos:end="637:54">FileDescriptor</name></type> <name pos:start="637:56" pos:end="637:58">aFD</name></decl></parameter>, <parameter pos:start="637:61" pos:end="637:71"><decl pos:start="637:61" pos:end="637:71"><type pos:start="637:61" pos:end="637:71"><name pos:start="637:61" pos:end="637:66"><name pos:start="637:61" pos:end="637:64">byte</name><index pos:start="637:65" pos:end="637:66">[]</index></name></type> <name pos:start="637:68" pos:end="637:71">data</name></decl></parameter>,
            <parameter pos:start="638:13" pos:end="638:22"><decl pos:start="638:13" pos:end="638:22"><type pos:start="638:13" pos:end="638:22"><name pos:start="638:13" pos:end="638:15">int</name></type> <name pos:start="638:17" pos:end="638:22">offset</name></decl></parameter>, <parameter pos:start="638:25" pos:end="638:33"><decl pos:start="638:25" pos:end="638:33"><type pos:start="638:25" pos:end="638:33"><name pos:start="638:25" pos:end="638:27">int</name></type> <name pos:start="638:29" pos:end="638:33">count</name></decl></parameter>, <parameter pos:start="638:36" pos:end="638:46"><decl pos:start="638:36" pos:end="638:46"><type pos:start="638:36" pos:end="638:46"><name pos:start="638:36" pos:end="638:38">int</name></type> <name pos:start="638:40" pos:end="638:46">timeout</name></decl></parameter>)</parameter_list> <throws pos:start="638:49" pos:end="638:66">throws <argument pos:start="638:56" pos:end="638:66"><expr pos:start="638:56" pos:end="638:66"><name pos:start="638:56" pos:end="638:66">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="640:5" pos:end="650:7">/*
     * Send &lt;code&gt;count&lt;/code&gt; bytes from the buffer &lt;code&gt;data&lt;/code&gt; at
     * the &lt;code&gt;offset&lt;/code&gt;, on the socket.
     * 
     * @param fd
     * 
     * @param data the send buffer @param offset the offset into the buffer
     * @param count the number of bytes to receive @return int the actual number
     * of bytes sent @throws IOException @exception SocketException if an error
     * occurs while writing
     */</comment>
    <function_decl pos:start="651:5" pos:end="652:54"><type pos:start="651:5" pos:end="651:21"><specifier pos:start="651:5" pos:end="651:10">static</specifier> <specifier pos:start="651:12" pos:end="651:17">native</specifier> <name pos:start="651:19" pos:end="651:21">int</name></type> <name pos:start="651:23" pos:end="651:36">sendStreamImpl</name><parameter_list pos:start="651:37" pos:end="652:34">(<parameter pos:start="651:38" pos:end="651:54"><decl pos:start="651:38" pos:end="651:54"><type pos:start="651:38" pos:end="651:54"><name pos:start="651:38" pos:end="651:51">FileDescriptor</name></type> <name pos:start="651:53" pos:end="651:54">fd</name></decl></parameter>, <parameter pos:start="651:57" pos:end="651:67"><decl pos:start="651:57" pos:end="651:67"><type pos:start="651:57" pos:end="651:67"><name pos:start="651:57" pos:end="651:62"><name pos:start="651:57" pos:end="651:60">byte</name><index pos:start="651:61" pos:end="651:62">[]</index></name></type> <name pos:start="651:64" pos:end="651:67">data</name></decl></parameter>,
            <parameter pos:start="652:13" pos:end="652:22"><decl pos:start="652:13" pos:end="652:22"><type pos:start="652:13" pos:end="652:22"><name pos:start="652:13" pos:end="652:15">int</name></type> <name pos:start="652:17" pos:end="652:22">offset</name></decl></parameter>, <parameter pos:start="652:25" pos:end="652:33"><decl pos:start="652:25" pos:end="652:33"><type pos:start="652:25" pos:end="652:33"><name pos:start="652:25" pos:end="652:27">int</name></type> <name pos:start="652:29" pos:end="652:33">count</name></decl></parameter>)</parameter_list> <throws pos:start="652:36" pos:end="652:53">throws <argument pos:start="652:43" pos:end="652:53"><expr pos:start="652:43" pos:end="652:53"><name pos:start="652:43" pos:end="652:53">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="654:5" pos:end="655:31"><type pos:start="654:5" pos:end="654:23"><specifier pos:start="654:5" pos:end="654:11">private</specifier> <specifier pos:start="654:13" pos:end="654:18">native</specifier> <name pos:start="654:20" pos:end="654:23">void</name></type> <name pos:start="654:25" pos:end="654:41">shutdownInputImpl</name><parameter_list pos:start="654:42" pos:end="654:68">(<parameter pos:start="654:43" pos:end="654:67"><decl pos:start="654:43" pos:end="654:67"><type pos:start="654:43" pos:end="654:56"><name pos:start="654:43" pos:end="654:56">FileDescriptor</name></type> <name pos:start="654:58" pos:end="654:67">descriptor</name></decl></parameter>)</parameter_list>
            <throws pos:start="655:13" pos:end="655:30">throws <argument pos:start="655:20" pos:end="655:30"><expr pos:start="655:20" pos:end="655:30"><name pos:start="655:20" pos:end="655:30">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="657:5" pos:end="658:31"><type pos:start="657:5" pos:end="657:23"><specifier pos:start="657:5" pos:end="657:11">private</specifier> <specifier pos:start="657:13" pos:end="657:18">native</specifier> <name pos:start="657:20" pos:end="657:23">void</name></type> <name pos:start="657:25" pos:end="657:42">shutdownOutputImpl</name><parameter_list pos:start="657:43" pos:end="657:69">(<parameter pos:start="657:44" pos:end="657:68"><decl pos:start="657:44" pos:end="657:68"><type pos:start="657:44" pos:end="657:57"><name pos:start="657:44" pos:end="657:57">FileDescriptor</name></type> <name pos:start="657:59" pos:end="657:68">descriptor</name></decl></parameter>)</parameter_list>
            <throws pos:start="658:13" pos:end="658:30">throws <argument pos:start="658:20" pos:end="658:30"><expr pos:start="658:20" pos:end="658:30"><name pos:start="658:20" pos:end="658:30">IOException</name></expr></argument></throws>;</function_decl>

    <comment type="line" pos:start="660:5" pos:end="660:28">// BEGIN android-removed</comment>
    <comment type="line" pos:start="661:5" pos:end="661:73">// static native void acceptStreamSocketImpl(FileDescriptor fdServer,</comment>
    <comment type="line" pos:start="662:5" pos:end="662:77">//         SocketImpl newSocket, FileDescriptor fdnewSocket, int timeout)</comment>
    <comment type="line" pos:start="663:5" pos:end="663:34">//         throws IOException;</comment>
    <comment type="line" pos:start="664:5" pos:end="664:7">// </comment>
    <comment type="line" pos:start="665:5" pos:end="665:68">// static native void createStreamSocketImpl(FileDescriptor aFD,</comment>
    <comment type="line" pos:start="666:5" pos:end="666:63">//         boolean preferIPv4Stack) throws SocketException;</comment>
    <comment type="line" pos:start="667:5" pos:end="667:26">// END android-removed</comment>

    <function_decl pos:start="669:5" pos:end="671:31"><type pos:start="669:5" pos:end="669:21"><specifier pos:start="669:5" pos:end="669:10">static</specifier> <specifier pos:start="669:12" pos:end="669:17">native</specifier> <name pos:start="669:19" pos:end="669:21">int</name></type> <name pos:start="669:23" pos:end="669:39">sendDatagramImpl2</name><parameter_list pos:start="669:40" pos:end="670:70">(<parameter pos:start="669:41" pos:end="669:57"><decl pos:start="669:41" pos:end="669:57"><type pos:start="669:41" pos:end="669:57"><name pos:start="669:41" pos:end="669:54">FileDescriptor</name></type> <name pos:start="669:56" pos:end="669:57">fd</name></decl></parameter>, <parameter pos:start="669:60" pos:end="669:70"><decl pos:start="669:60" pos:end="669:70"><type pos:start="669:60" pos:end="669:70"><name pos:start="669:60" pos:end="669:65"><name pos:start="669:60" pos:end="669:63">byte</name><index pos:start="669:64" pos:end="669:65">[]</index></name></type> <name pos:start="669:67" pos:end="669:70">data</name></decl></parameter>,
            <parameter pos:start="670:13" pos:end="670:22"><decl pos:start="670:13" pos:end="670:22"><type pos:start="670:13" pos:end="670:22"><name pos:start="670:13" pos:end="670:15">int</name></type> <name pos:start="670:17" pos:end="670:22">offset</name></decl></parameter>, <parameter pos:start="670:25" pos:end="670:34"><decl pos:start="670:25" pos:end="670:34"><type pos:start="670:25" pos:end="670:34"><name pos:start="670:25" pos:end="670:27">int</name></type> <name pos:start="670:29" pos:end="670:34">length</name></decl></parameter>, <parameter pos:start="670:37" pos:end="670:44"><decl pos:start="670:37" pos:end="670:44"><type pos:start="670:37" pos:end="670:44"><name pos:start="670:37" pos:end="670:39">int</name></type> <name pos:start="670:41" pos:end="670:44">port</name></decl></parameter>, <parameter pos:start="670:47" pos:end="670:69"><decl pos:start="670:47" pos:end="670:69"><type pos:start="670:47" pos:end="670:69"><name pos:start="670:47" pos:end="670:57">InetAddress</name></type> <name pos:start="670:59" pos:end="670:69">inetAddress</name></decl></parameter>)</parameter_list>
            <throws pos:start="671:13" pos:end="671:30">throws <argument pos:start="671:20" pos:end="671:30"><expr pos:start="671:20" pos:end="671:30"><name pos:start="671:20" pos:end="671:30">IOException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="673:5" pos:end="675:26"><type pos:start="673:5" pos:end="673:21"><specifier pos:start="673:5" pos:end="673:10">static</specifier> <specifier pos:start="673:12" pos:end="673:17">native</specifier> <name pos:start="673:19" pos:end="673:21">int</name></type> <name pos:start="673:23" pos:end="673:32">selectImpl</name><parameter_list pos:start="673:33" pos:end="675:25">(<parameter pos:start="673:34" pos:end="673:56"><decl pos:start="673:34" pos:end="673:56"><type pos:start="673:34" pos:end="673:56"><name pos:start="673:34" pos:end="673:49"><name pos:start="673:34" pos:end="673:47">FileDescriptor</name><index pos:start="673:48" pos:end="673:49">[]</index></name></type> <name pos:start="673:51" pos:end="673:56">readfd</name></decl></parameter>,
            <parameter pos:start="674:13" pos:end="674:36"><decl pos:start="674:13" pos:end="674:36"><type pos:start="674:13" pos:end="674:36"><name pos:start="674:13" pos:end="674:28"><name pos:start="674:13" pos:end="674:26">FileDescriptor</name><index pos:start="674:27" pos:end="674:28">[]</index></name></type> <name pos:start="674:30" pos:end="674:36">writefd</name></decl></parameter>, <parameter pos:start="674:39" pos:end="674:47"><decl pos:start="674:39" pos:end="674:47"><type pos:start="674:39" pos:end="674:47"><name pos:start="674:39" pos:end="674:41">int</name></type> <name pos:start="674:43" pos:end="674:47">cread</name></decl></parameter>, <parameter pos:start="674:50" pos:end="674:59"><decl pos:start="674:50" pos:end="674:59"><type pos:start="674:50" pos:end="674:59"><name pos:start="674:50" pos:end="674:52">int</name></type> <name pos:start="674:54" pos:end="674:59">cwirte</name></decl></parameter>, <parameter pos:start="674:62" pos:end="674:72"><decl pos:start="674:62" pos:end="674:72"><type pos:start="674:62" pos:end="674:72"><name pos:start="674:62" pos:end="674:66"><name pos:start="674:62" pos:end="674:64">int</name><index pos:start="674:65" pos:end="674:66">[]</index></name></type> <name pos:start="674:68" pos:end="674:72">flags</name></decl></parameter>,
            <parameter pos:start="675:13" pos:end="675:24"><decl pos:start="675:13" pos:end="675:24"><type pos:start="675:13" pos:end="675:24"><name pos:start="675:13" pos:end="675:16">long</name></type> <name pos:start="675:18" pos:end="675:24">timeout</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="677:5" pos:end="678:41"><type pos:start="677:5" pos:end="677:29"><specifier pos:start="677:5" pos:end="677:10">static</specifier> <specifier pos:start="677:12" pos:end="677:17">native</specifier> <name pos:start="677:19" pos:end="677:29">InetAddress</name></type> <name pos:start="677:31" pos:end="677:55">getSocketLocalAddressImpl</name><parameter_list pos:start="677:56" pos:end="678:40">(<parameter pos:start="677:57" pos:end="677:74"><decl pos:start="677:57" pos:end="677:74"><type pos:start="677:57" pos:end="677:74"><name pos:start="677:57" pos:end="677:70">FileDescriptor</name></type> <name pos:start="677:72" pos:end="677:74">aFD</name></decl></parameter>,
            <parameter pos:start="678:13" pos:end="678:39"><decl pos:start="678:13" pos:end="678:39"><type pos:start="678:13" pos:end="678:39"><name pos:start="678:13" pos:end="678:19">boolean</name></type> <name pos:start="678:21" pos:end="678:39">preferIPv6Addresses</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" pos:start="680:5" pos:end="686:7">/*
     * Query the IP stack for the local port to which this socket is bound.
     * 
     * @param aFD the socket descriptor @param preferIPv6Addresses address
     * preference for nodes that support both IPv4 and IPv6 @return int the
     * local port to which the socket is bound
     */</comment>
    <function_decl pos:start="687:5" pos:end="688:41"><type pos:start="687:5" pos:end="687:21"><specifier pos:start="687:5" pos:end="687:10">static</specifier> <specifier pos:start="687:12" pos:end="687:17">native</specifier> <name pos:start="687:19" pos:end="687:21">int</name></type> <name pos:start="687:23" pos:end="687:44">getSocketLocalPortImpl</name><parameter_list pos:start="687:45" pos:end="688:40">(<parameter pos:start="687:46" pos:end="687:63"><decl pos:start="687:46" pos:end="687:63"><type pos:start="687:46" pos:end="687:63"><name pos:start="687:46" pos:end="687:59">FileDescriptor</name></type> <name pos:start="687:61" pos:end="687:63">aFD</name></decl></parameter>,
            <parameter pos:start="688:13" pos:end="688:39"><decl pos:start="688:13" pos:end="688:39"><type pos:start="688:13" pos:end="688:39"><name pos:start="688:13" pos:end="688:19">boolean</name></type> <name pos:start="688:21" pos:end="688:39">preferIPv6Addresses</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" pos:start="690:5" pos:end="697:7">/*
     * Query the IP stack for the nominated socket option.
     * 
     * @param aFD the socket descriptor @param opt the socket option type
     * @return the nominated socket option value
     * 
     * @throws SocketException if the option is invalid
     */</comment>
    <function_decl pos:start="698:5" pos:end="699:35"><type pos:start="698:5" pos:end="698:24"><specifier pos:start="698:5" pos:end="698:10">static</specifier> <specifier pos:start="698:12" pos:end="698:17">native</specifier> <name pos:start="698:19" pos:end="698:24">Object</name></type> <name pos:start="698:26" pos:end="698:44">getSocketOptionImpl</name><parameter_list pos:start="698:45" pos:end="698:73">(<parameter pos:start="698:46" pos:end="698:63"><decl pos:start="698:46" pos:end="698:63"><type pos:start="698:46" pos:end="698:63"><name pos:start="698:46" pos:end="698:59">FileDescriptor</name></type> <name pos:start="698:61" pos:end="698:63">aFD</name></decl></parameter>, <parameter pos:start="698:66" pos:end="698:72"><decl pos:start="698:66" pos:end="698:72"><type pos:start="698:66" pos:end="698:72"><name pos:start="698:66" pos:end="698:68">int</name></type> <name pos:start="698:70" pos:end="698:72">opt</name></decl></parameter>)</parameter_list>
            <throws pos:start="699:13" pos:end="699:34">throws <argument pos:start="699:20" pos:end="699:34"><expr pos:start="699:20" pos:end="699:34"><name pos:start="699:20" pos:end="699:34">SocketException</name></expr></argument></throws>;</function_decl>

    <comment type="block" pos:start="701:5" pos:end="708:7">/*
     * Set the nominated socket option in the IP stack.
     * 
     * @param aFD the socket descriptor @param opt the option selector @param
     * optVal the nominated option value
     * 
     * @throws SocketException if the option is invalid or cannot be set
     */</comment>
    <function_decl pos:start="709:5" pos:end="710:50"><type pos:start="709:5" pos:end="709:22"><specifier pos:start="709:5" pos:end="709:10">static</specifier> <specifier pos:start="709:12" pos:end="709:17">native</specifier> <name pos:start="709:19" pos:end="709:22">void</name></type> <name pos:start="709:24" pos:end="709:42">setSocketOptionImpl</name><parameter_list pos:start="709:43" pos:end="710:26">(<parameter pos:start="709:44" pos:end="709:61"><decl pos:start="709:44" pos:end="709:61"><type pos:start="709:44" pos:end="709:61"><name pos:start="709:44" pos:end="709:57">FileDescriptor</name></type> <name pos:start="709:59" pos:end="709:61">aFD</name></decl></parameter>, <parameter pos:start="709:64" pos:end="709:70"><decl pos:start="709:64" pos:end="709:70"><type pos:start="709:64" pos:end="709:70"><name pos:start="709:64" pos:end="709:66">int</name></type> <name pos:start="709:68" pos:end="709:70">opt</name></decl></parameter>,
            <parameter pos:start="710:13" pos:end="710:25"><decl pos:start="710:13" pos:end="710:25"><type pos:start="710:13" pos:end="710:25"><name pos:start="710:13" pos:end="710:18">Object</name></type> <name pos:start="710:20" pos:end="710:25">optVal</name></decl></parameter>)</parameter_list> <throws pos:start="710:28" pos:end="710:49">throws <argument pos:start="710:35" pos:end="710:49"><expr pos:start="710:35" pos:end="710:49"><name pos:start="710:35" pos:end="710:49">SocketException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="712:5" pos:end="712:43"><type pos:start="712:5" pos:end="712:21"><specifier pos:start="712:5" pos:end="712:10">static</specifier> <specifier pos:start="712:12" pos:end="712:17">native</specifier> <name pos:start="712:19" pos:end="712:21">int</name></type> <name pos:start="712:23" pos:end="712:40">getSocketFlagsImpl</name><parameter_list pos:start="712:41" pos:end="712:42">()</parameter_list>;</function_decl>

    <comment type="block" pos:start="714:5" pos:end="718:7">/*
     * Close the socket in the IP stack.
     * 
     * @param aFD the socket descriptor
     */</comment>
    <function_decl pos:start="719:5" pos:end="719:59"><type pos:start="719:5" pos:end="719:22"><specifier pos:start="719:5" pos:end="719:10">static</specifier> <specifier pos:start="719:12" pos:end="719:17">native</specifier> <name pos:start="719:19" pos:end="719:22">void</name></type> <name pos:start="719:24" pos:end="719:38">socketCloseImpl</name><parameter_list pos:start="719:39" pos:end="719:58">(<parameter pos:start="719:40" pos:end="719:57"><decl pos:start="719:40" pos:end="719:57"><type pos:start="719:40" pos:end="719:53"><name pos:start="719:40" pos:end="719:53">FileDescriptor</name></type> <name pos:start="719:55" pos:end="719:57">aFD</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="721:5" pos:end="722:40"><type pos:start="721:5" pos:end="721:29"><specifier pos:start="721:5" pos:end="721:10">static</specifier> <specifier pos:start="721:12" pos:end="721:17">native</specifier> <name pos:start="721:19" pos:end="721:29">InetAddress</name></type> <name pos:start="721:31" pos:end="721:47">getHostByAddrImpl</name><parameter_list pos:start="721:48" pos:end="721:60">(<parameter pos:start="721:49" pos:end="721:59"><decl pos:start="721:49" pos:end="721:59"><type pos:start="721:49" pos:end="721:54"><name pos:start="721:49" pos:end="721:54"><name pos:start="721:49" pos:end="721:52">byte</name><index pos:start="721:53" pos:end="721:54">[]</index></name></type> <name pos:start="721:56" pos:end="721:59">addr</name></decl></parameter>)</parameter_list>
            <throws pos:start="722:13" pos:end="722:39">throws <argument pos:start="722:20" pos:end="722:39"><expr pos:start="722:20" pos:end="722:39"><name pos:start="722:20" pos:end="722:39">UnknownHostException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="724:5" pos:end="725:69"><type pos:start="724:5" pos:end="724:29"><specifier pos:start="724:5" pos:end="724:10">static</specifier> <specifier pos:start="724:12" pos:end="724:17">native</specifier> <name pos:start="724:19" pos:end="724:29">InetAddress</name></type> <name pos:start="724:31" pos:end="724:47">getHostByNameImpl</name><parameter_list pos:start="724:48" pos:end="725:40">(<parameter pos:start="724:49" pos:end="724:59"><decl pos:start="724:49" pos:end="724:59"><type pos:start="724:49" pos:end="724:59"><name pos:start="724:49" pos:end="724:54">String</name></type> <name pos:start="724:56" pos:end="724:59">addr</name></decl></parameter>,
            <parameter pos:start="725:13" pos:end="725:39"><decl pos:start="725:13" pos:end="725:39"><type pos:start="725:13" pos:end="725:39"><name pos:start="725:13" pos:end="725:19">boolean</name></type> <name pos:start="725:21" pos:end="725:39">preferIPv6Addresses</name></decl></parameter>)</parameter_list> <throws pos:start="725:42" pos:end="725:68">throws <argument pos:start="725:49" pos:end="725:68"><expr pos:start="725:49" pos:end="725:68"><name pos:start="725:49" pos:end="725:68">UnknownHostException</name></expr></argument></throws>;</function_decl>

    <function_decl pos:start="727:5" pos:end="727:71"><type pos:start="727:5" pos:end="727:15"><specifier pos:start="727:5" pos:end="727:10">native</specifier> <name pos:start="727:12" pos:end="727:15">void</name></type> <name pos:start="727:17" pos:end="727:34">setInetAddressImpl</name><parameter_list pos:start="727:35" pos:end="727:70">(<parameter pos:start="727:36" pos:end="727:53"><decl pos:start="727:36" pos:end="727:53"><type pos:start="727:36" pos:end="727:53"><name pos:start="727:36" pos:end="727:46">InetAddress</name></type> <name pos:start="727:48" pos:end="727:53">sender</name></decl></parameter>, <parameter pos:start="727:56" pos:end="727:69"><decl pos:start="727:56" pos:end="727:69"><type pos:start="727:56" pos:end="727:69"><name pos:start="727:56" pos:end="727:61"><name pos:start="727:56" pos:end="727:59">byte</name><index pos:start="727:60" pos:end="727:61">[]</index></name></type> <name pos:start="727:63" pos:end="727:69">address</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line" pos:start="729:5" pos:end="729:28">// BEGIN android-removed</comment>
    <comment type="line" pos:start="730:5" pos:end="730:76">// native int isReachableByICMPImpl(InetAddress addr, InetAddress local,</comment>
    <comment type="line" pos:start="731:5" pos:end="731:37">//         int ttl, int timeout);</comment>
    <comment type="line" pos:start="732:5" pos:end="732:26">// END android-removed</comment>
    
    <function_decl pos:start="734:5" pos:end="734:42"><type pos:start="734:5" pos:end="734:18"><specifier pos:start="734:5" pos:end="734:10">native</specifier> <name pos:start="734:12" pos:end="734:18">Channel</name></type> <name pos:start="734:20" pos:end="734:39">inheritedChannelImpl</name><parameter_list pos:start="734:40" pos:end="734:41">()</parameter_list>;</function_decl>

    <function pos:start="736:5" pos:end="738:5"><type pos:start="736:5" pos:end="736:18"><specifier pos:start="736:5" pos:end="736:10">public</specifier> <name pos:start="736:12" pos:end="736:18">Channel</name></type> <name pos:start="736:20" pos:end="736:35">inheritedChannel</name><parameter_list pos:start="736:36" pos:end="736:37">()</parameter_list> <block pos:start="736:39" pos:end="738:5">{<block_content pos:start="737:9" pos:end="737:38">
        <return pos:start="737:9" pos:end="737:38">return <expr pos:start="737:16" pos:end="737:37"><call pos:start="737:16" pos:end="737:37"><name pos:start="737:16" pos:end="737:35">inheritedChannelImpl</name><argument_list pos:start="737:36" pos:end="737:37">()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="740:5" pos:end="745:5"><type pos:start="740:5" pos:end="740:15"><specifier pos:start="740:5" pos:end="740:10">public</specifier> <name pos:start="740:12" pos:end="740:15">void</name></type> <name pos:start="740:17" pos:end="740:37">oneTimeInitialization</name><parameter_list pos:start="740:38" pos:end="740:64">(<parameter pos:start="740:39" pos:end="740:63"><decl pos:start="740:39" pos:end="740:63"><type pos:start="740:39" pos:end="740:45"><name pos:start="740:39" pos:end="740:45">boolean</name></type> <name pos:start="740:47" pos:end="740:63">jcl_supports_ipv6</name></decl></parameter>)</parameter_list><block pos:start="740:65" pos:end="745:5">{<block_content pos:start="741:9" pos:end="744:9">
        <if_stmt pos:start="741:9" pos:end="744:9"><if pos:start="741:9" pos:end="744:9">if <condition pos:start="741:12" pos:end="741:29">(<expr pos:start="741:13" pos:end="741:28"><operator pos:start="741:13" pos:end="741:13">!</operator><name pos:start="741:14" pos:end="741:28">isNetworkInited</name></expr>)</condition><block pos:start="741:30" pos:end="744:9">{<block_content pos:start="742:13" pos:end="743:35">
            <expr_stmt pos:start="742:13" pos:end="742:57"><expr pos:start="742:13" pos:end="742:56"><call pos:start="742:13" pos:end="742:56"><name pos:start="742:13" pos:end="742:37">oneTimeInitializationImpl</name><argument_list pos:start="742:38" pos:end="742:56">(<argument pos:start="742:39" pos:end="742:55"><expr pos:start="742:39" pos:end="742:55"><name pos:start="742:39" pos:end="742:55">jcl_supports_ipv6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="743:13" pos:end="743:35"><expr pos:start="743:13" pos:end="743:34"><name pos:start="743:13" pos:end="743:27">isNetworkInited</name> <operator pos:start="743:29" pos:end="743:29">=</operator> <literal type="boolean" pos:start="743:31" pos:end="743:34">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
    </block_content>}</block></function>
    
    <function_decl pos:start="747:5" pos:end="747:70"><type pos:start="747:5" pos:end="747:15"><specifier pos:start="747:5" pos:end="747:10">native</specifier> <name pos:start="747:12" pos:end="747:15">void</name></type> <name pos:start="747:17" pos:end="747:41">oneTimeInitializationImpl</name> <parameter_list pos:start="747:43" pos:end="747:69">(<parameter pos:start="747:44" pos:end="747:68"><decl pos:start="747:44" pos:end="747:68"><type pos:start="747:44" pos:end="747:50"><name pos:start="747:44" pos:end="747:50">boolean</name></type> <name pos:start="747:52" pos:end="747:68">jcl_supports_ipv6</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class></unit>

</unit>
